{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.4", "generated_at": "2024-01-17T14:47:18.893361Z", "invocation_id": "38d354e5-ff9d-4754-b719-57a736996d44", "env": {}, "project_name": "the_tuva_project_demo", "project_id": "30e8788dd7c2cd7a900989d00fd9268f", "user_id": "18419fdc-003e-493d-9cba-cfe2b633c3b1", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"seed.the_tuva_project_demo.eligibility": {"database": "TUVA_PROJECT_DEMO", "schema": "input_layer", "name": "eligibility", "resource_type": "seed", "package_name": "the_tuva_project_demo", "path": "eligibility.csv", "original_file_path": "seeds/eligibility.csv", "unique_id": "seed.the_tuva_project_demo.eligibility", "fqn": ["the_tuva_project_demo", "eligibility"], "alias": "eligibility", "checksum": {"name": "sha256", "checksum": "c6bb1d16b33ed74958842e82f7ba16d3e3786e81800573ec7fcb33b2b5938623"}, "config": {"enabled": true, "alias": null, "schema": "input_layer", "database": null, "tags": ["the_tuva_project_demo"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"patient_id": "varchar(255)", "member_id": "varchar(255)", "gender": "varchar(255)", "race": "varchar(255)", "birth_date": "date", "death_date": "date", "death_flag": "integer", "enrollment_start_date": "date", "enrollment_end_date": "date", "payer": "varchar(255)", "payer_type": "varchar(255)", "plan": "varchar(255)", "original_reason_entitlement_code": "varchar(255)", "dual_status_code": "varchar(255)", "medicare_status_code": "varchar(255)", "first_name": "varchar(255)", "last_name": "varchar(255)", "address": "varchar(255)", "city": "varchar(255)", "state": "varchar(255)", "zip_code": "varchar(255)", "phone": "varchar(255)", "data_source": "varchar(255)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["the_tuva_project_demo"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project_demo://seeds/_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "input_layer", "tags": "the_tuva_project_demo", "column_types": {"patient_id": "varchar(255)", "member_id": "varchar(255)", "gender": "varchar(255)", "race": "varchar(255)", "birth_date": "date", "death_date": "date", "death_flag": "integer", "enrollment_start_date": "date", "enrollment_end_date": "date", "payer": "varchar(255)", "payer_type": "varchar(255)", "plan": "varchar(255)", "original_reason_entitlement_code": "varchar(255)", "dual_status_code": "varchar(255)", "medicare_status_code": "varchar(255)", "first_name": "varchar(255)", "last_name": "varchar(255)", "address": "varchar(255)", "city": "varchar(255)", "state": "varchar(255)", "zip_code": "varchar(255)", "phone": "varchar(255)", "data_source": "varchar(255)"}}, "created_at": 1705501479.6076152, "relation_name": "TUVA_PROJECT_DEMO.input_layer.eligibility", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo", "depends_on": {"macros": []}}, "seed.the_tuva_project_demo.medical_claim": {"database": "TUVA_PROJECT_DEMO", "schema": "input_layer", "name": "medical_claim", "resource_type": "seed", "package_name": "the_tuva_project_demo", "path": "medical_claim.csv", "original_file_path": "seeds/medical_claim.csv", "unique_id": "seed.the_tuva_project_demo.medical_claim", "fqn": ["the_tuva_project_demo", "medical_claim"], "alias": "medical_claim", "checksum": {"name": "path", "checksum": "seeds/medical_claim.csv"}, "config": {"enabled": true, "alias": null, "schema": "input_layer", "database": null, "tags": ["the_tuva_project_demo"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"claim_id": "varchar(255)", "claim_line_number": "integer", "claim_type": "varchar(255)", "patient_id": "varchar(255)", "member_id": "varchar(255)", "payer": "varchar(255)", "plan": "varchar(255)", "claim_start_date": "date", "claim_end_date": "date", "claim_line_start_date": "date", "claim_line_end_date": "date", "admission_date": "date", "discharge_date": "date", "admit_source_code": "varchar(255)", "admit_type_code": "varchar(255)", "discharge_disposition_code": "varchar(255)", "place_of_service_code": "varchar(255)", "bill_type_code": "varchar(255)", "ms_drg_code": "varchar(255)", "apr_drg_code": "varchar(255)", "revenue_center_code": "varchar(255)", "service_unit_quantity": "integer", "hcpcs_code": "varchar(255)", "hcpcs_modifier_1": "varchar(255)", "hcpcs_modifier_2": "varchar(255)", "hcpcs_modifier_3": "varchar(255)", "hcpcs_modifier_4": "varchar(255)", "hcpcs_modifier_5": "varchar(255)", "rendering_npi": "varchar(255)", "billing_npi": "varchar(255)", "facility_npi": "varchar(255)", "paid_date": "date", "paid_amount": "float", "allowed_amount": "float", "charge_amount": "float", "coinsurance_amount": "float", "copayment_amount": "float", "deductible_amount": "float", "total_cost_amount": "float", "diagnosis_code_type": "varchar(255)", "diagnosis_code_1": "varchar(255)", "diagnosis_code_2": "varchar(255)", "diagnosis_code_3": "varchar(255)", "diagnosis_code_4": "varchar(255)", "diagnosis_code_5": "varchar(255)", "diagnosis_code_6": "varchar(255)", "diagnosis_code_7": "varchar(255)", "diagnosis_code_8": "varchar(255)", "diagnosis_code_9": "varchar(255)", "diagnosis_code_10": "varchar(255)", "diagnosis_code_11": "varchar(255)", "diagnosis_code_12": "varchar(255)", "diagnosis_code_13": "varchar(255)", "diagnosis_code_14": "varchar(255)", "diagnosis_code_15": "varchar(255)", "diagnosis_code_16": "varchar(255)", "diagnosis_code_17": "varchar(255)", "diagnosis_code_18": "varchar(255)", "diagnosis_code_19": "varchar(255)", "diagnosis_code_20": "varchar(255)", "diagnosis_code_21": "varchar(255)", "diagnosis_code_22": "varchar(255)", "diagnosis_code_23": "varchar(255)", "diagnosis_code_24": "varchar(255)", "diagnosis_code_25": "varchar(255)", "diagnosis_poa_1": "varchar(255)", "diagnosis_poa_2": "varchar(255)", "diagnosis_poa_3": "varchar(255)", "diagnosis_poa_4": "varchar(255)", "diagnosis_poa_5": "varchar(255)", "diagnosis_poa_6": "varchar(255)", "diagnosis_poa_7": "varchar(255)", "diagnosis_poa_8": "varchar(255)", "diagnosis_poa_9": "varchar(255)", "diagnosis_poa_10": "varchar(255)", "diagnosis_poa_11": "varchar(255)", "diagnosis_poa_12": "varchar(255)", "diagnosis_poa_13": "varchar(255)", "diagnosis_poa_14": "varchar(255)", "diagnosis_poa_15": "varchar(255)", "diagnosis_poa_16": "varchar(255)", "diagnosis_poa_17": "varchar(255)", "diagnosis_poa_18": "varchar(255)", "diagnosis_poa_19": "varchar(255)", "diagnosis_poa_20": "varchar(255)", "diagnosis_poa_21": "varchar(255)", "diagnosis_poa_22": "varchar(255)", "diagnosis_poa_23": "varchar(255)", "diagnosis_poa_24": "varchar(255)", "diagnosis_poa_25": "varchar(255)", "procedure_code_type": "varchar(255)", "procedure_code_1": "varchar(255)", "procedure_code_2": "varchar(255)", "procedure_code_3": "varchar(255)", "procedure_code_4": "varchar(255)", "procedure_code_5": "varchar(255)", "procedure_code_6": "varchar(255)", "procedure_code_7": "varchar(255)", "procedure_code_8": "varchar(255)", "procedure_code_9": "varchar(255)", "procedure_code_10": "varchar(255)", "procedure_code_11": "varchar(255)", "procedure_code_12": "varchar(255)", "procedure_code_13": "varchar(255)", "procedure_code_14": "varchar(255)", "procedure_code_15": "varchar(255)", "procedure_code_16": "varchar(255)", "procedure_code_17": "varchar(255)", "procedure_code_18": "varchar(255)", "procedure_code_19": "varchar(255)", "procedure_code_20": "varchar(255)", "procedure_code_21": "varchar(255)", "procedure_code_22": "varchar(255)", "procedure_code_23": "varchar(255)", "procedure_code_24": "varchar(255)", "procedure_code_25": "varchar(255)", "procedure_date_1": "date", "procedure_date_2": "date", "procedure_date_3": "date", "procedure_date_4": "date", "procedure_date_5": "date", "procedure_date_6": "date", "procedure_date_7": "date", "procedure_date_8": "date", "procedure_date_9": "date", "procedure_date_10": "date", "procedure_date_11": "date", "procedure_date_12": "date", "procedure_date_13": "date", "procedure_date_14": "date", "procedure_date_15": "date", "procedure_date_16": "date", "procedure_date_17": "date", "procedure_date_18": "date", "procedure_date_19": "date", "procedure_date_20": "date", "procedure_date_21": "date", "procedure_date_22": "date", "procedure_date_23": "date", "procedure_date_24": "date", "procedure_date_25": "date", "data_source": "varchar(255)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["the_tuva_project_demo"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project_demo://seeds/_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "input_layer", "tags": "the_tuva_project_demo", "column_types": {"claim_id": "varchar(255)", "claim_line_number": "integer", "claim_type": "varchar(255)", "patient_id": "varchar(255)", "member_id": "varchar(255)", "payer": "varchar(255)", "plan": "varchar(255)", "claim_start_date": "date", "claim_end_date": "date", "claim_line_start_date": "date", "claim_line_end_date": "date", "admission_date": "date", "discharge_date": "date", "admit_source_code": "varchar(255)", "admit_type_code": "varchar(255)", "discharge_disposition_code": "varchar(255)", "place_of_service_code": "varchar(255)", "bill_type_code": "varchar(255)", "ms_drg_code": "varchar(255)", "apr_drg_code": "varchar(255)", "revenue_center_code": "varchar(255)", "service_unit_quantity": "integer", "hcpcs_code": "varchar(255)", "hcpcs_modifier_1": "varchar(255)", "hcpcs_modifier_2": "varchar(255)", "hcpcs_modifier_3": "varchar(255)", "hcpcs_modifier_4": "varchar(255)", "hcpcs_modifier_5": "varchar(255)", "rendering_npi": "varchar(255)", "billing_npi": "varchar(255)", "facility_npi": "varchar(255)", "paid_date": "date", "paid_amount": "float", "allowed_amount": "float", "charge_amount": "float", "coinsurance_amount": "float", "copayment_amount": "float", "deductible_amount": "float", "total_cost_amount": "float", "diagnosis_code_type": "varchar(255)", "diagnosis_code_1": "varchar(255)", "diagnosis_code_2": "varchar(255)", "diagnosis_code_3": "varchar(255)", "diagnosis_code_4": "varchar(255)", "diagnosis_code_5": "varchar(255)", "diagnosis_code_6": "varchar(255)", "diagnosis_code_7": "varchar(255)", "diagnosis_code_8": "varchar(255)", "diagnosis_code_9": "varchar(255)", "diagnosis_code_10": "varchar(255)", "diagnosis_code_11": "varchar(255)", "diagnosis_code_12": "varchar(255)", "diagnosis_code_13": "varchar(255)", "diagnosis_code_14": "varchar(255)", "diagnosis_code_15": "varchar(255)", "diagnosis_code_16": "varchar(255)", "diagnosis_code_17": "varchar(255)", "diagnosis_code_18": "varchar(255)", "diagnosis_code_19": "varchar(255)", "diagnosis_code_20": "varchar(255)", "diagnosis_code_21": "varchar(255)", "diagnosis_code_22": "varchar(255)", "diagnosis_code_23": "varchar(255)", "diagnosis_code_24": "varchar(255)", "diagnosis_code_25": "varchar(255)", "diagnosis_poa_1": "varchar(255)", "diagnosis_poa_2": "varchar(255)", "diagnosis_poa_3": "varchar(255)", "diagnosis_poa_4": "varchar(255)", "diagnosis_poa_5": "varchar(255)", "diagnosis_poa_6": "varchar(255)", "diagnosis_poa_7": "varchar(255)", "diagnosis_poa_8": "varchar(255)", "diagnosis_poa_9": "varchar(255)", "diagnosis_poa_10": "varchar(255)", "diagnosis_poa_11": "varchar(255)", "diagnosis_poa_12": "varchar(255)", "diagnosis_poa_13": "varchar(255)", "diagnosis_poa_14": "varchar(255)", "diagnosis_poa_15": "varchar(255)", "diagnosis_poa_16": "varchar(255)", "diagnosis_poa_17": "varchar(255)", "diagnosis_poa_18": "varchar(255)", "diagnosis_poa_19": "varchar(255)", "diagnosis_poa_20": "varchar(255)", "diagnosis_poa_21": "varchar(255)", "diagnosis_poa_22": "varchar(255)", "diagnosis_poa_23": "varchar(255)", "diagnosis_poa_24": "varchar(255)", "diagnosis_poa_25": "varchar(255)", "procedure_code_type": "varchar(255)", "procedure_code_1": "varchar(255)", "procedure_code_2": "varchar(255)", "procedure_code_3": "varchar(255)", "procedure_code_4": "varchar(255)", "procedure_code_5": "varchar(255)", "procedure_code_6": "varchar(255)", "procedure_code_7": "varchar(255)", "procedure_code_8": "varchar(255)", "procedure_code_9": "varchar(255)", "procedure_code_10": "varchar(255)", "procedure_code_11": "varchar(255)", "procedure_code_12": "varchar(255)", "procedure_code_13": "varchar(255)", "procedure_code_14": "varchar(255)", "procedure_code_15": "varchar(255)", "procedure_code_16": "varchar(255)", "procedure_code_17": "varchar(255)", "procedure_code_18": "varchar(255)", "procedure_code_19": "varchar(255)", "procedure_code_20": "varchar(255)", "procedure_code_21": "varchar(255)", "procedure_code_22": "varchar(255)", "procedure_code_23": "varchar(255)", "procedure_code_24": "varchar(255)", "procedure_code_25": "varchar(255)", "procedure_date_1": "date", "procedure_date_2": "date", "procedure_date_3": "date", "procedure_date_4": "date", "procedure_date_5": "date", "procedure_date_6": "date", "procedure_date_7": "date", "procedure_date_8": "date", "procedure_date_9": "date", "procedure_date_10": "date", "procedure_date_11": "date", "procedure_date_12": "date", "procedure_date_13": "date", "procedure_date_14": "date", "procedure_date_15": "date", "procedure_date_16": "date", "procedure_date_17": "date", "procedure_date_18": "date", "procedure_date_19": "date", "procedure_date_20": "date", "procedure_date_21": "date", "procedure_date_22": "date", "procedure_date_23": "date", "procedure_date_24": "date", "procedure_date_25": "date", "data_source": "varchar(255)"}}, "created_at": 1705501479.6957622, "relation_name": "TUVA_PROJECT_DEMO.input_layer.medical_claim", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo", "depends_on": {"macros": []}}, "seed.the_tuva_project_demo.pharmacy_claim": {"database": "TUVA_PROJECT_DEMO", "schema": "input_layer", "name": "pharmacy_claim", "resource_type": "seed", "package_name": "the_tuva_project_demo", "path": "pharmacy_claim.csv", "original_file_path": "seeds/pharmacy_claim.csv", "unique_id": "seed.the_tuva_project_demo.pharmacy_claim", "fqn": ["the_tuva_project_demo", "pharmacy_claim"], "alias": "pharmacy_claim", "checksum": {"name": "sha256", "checksum": "a77638a95a94c66b9af0b523c4addc7adffe3cb4e3532c5c6107e66298a89786"}, "config": {"enabled": true, "alias": null, "schema": "input_layer", "database": null, "tags": ["the_tuva_project_demo"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"claim_id": "varchar(255)", "claim_line_number": "integer", "patient_id": "varchar(255)", "member_id": "varchar(255)", "payer": "varchar(255)", "plan": "varchar(255)", "prescribing_provider_npi": "varchar(255)", "dispensing_provider_npi": "varchar(255)", "dispensing_date": "date", "ndc_code": "varchar(255)", "quantity": "integer", "days_supply": "integer", "refills": "integer", "paid_date": "date", "paid_amount": "float", "allowed_amount": "float", "coinsurace_amount": "float", "copayment_amount": "float", "deductible_amount": "float", "data_source": "varchar(255)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["the_tuva_project_demo"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project_demo://seeds/_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "input_layer", "tags": "the_tuva_project_demo", "column_types": {"claim_id": "varchar(255)", "claim_line_number": "integer", "patient_id": "varchar(255)", "member_id": "varchar(255)", "payer": "varchar(255)", "plan": "varchar(255)", "prescribing_provider_npi": "varchar(255)", "dispensing_provider_npi": "varchar(255)", "dispensing_date": "date", "ndc_code": "varchar(255)", "quantity": "integer", "days_supply": "integer", "refills": "integer", "paid_date": "date", "paid_amount": "float", "allowed_amount": "float", "coinsurace_amount": "float", "copayment_amount": "float", "deductible_amount": "float", "data_source": "varchar(255)"}}, "created_at": 1705501479.7105935, "relation_name": "TUVA_PROJECT_DEMO.input_layer.pharmacy_claim", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo", "depends_on": {"macros": []}}, "model.the_tuva_project.ccsr__long_condition_category": {"database": "tuva_project_demo", "schema": "ccsr", "name": "ccsr__long_condition_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "ccsr/final/ccsr__long_condition_category.sql", "original_file_path": "models/ccsr/final/ccsr__long_condition_category.sql", "unique_id": "model.the_tuva_project.ccsr__long_condition_category", "fqn": ["the_tuva_project", "ccsr", "final", "ccsr__long_condition_category"], "alias": "long_condition_category", "checksum": {"name": "sha256", "checksum": "5f7995cd41aecad7b78dbf61bde2f50e10cce98af87dbb6f43ba1703c26f86c1"}, "config": {"enabled": true, "alias": "long_condition_category", "schema": "ccsr", "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ccsr"], "description": "This model contains a mapping of individual condition ICD-10-CM diagnosis codes to the CCSR's clinically meaningful diagnosis categories. Each row represents a mapping of an ICD-10 code to a CCSR category. As each ICD-10 code may be mapped to up to 6 categories, it's expected that this table will output as many or more rows than the TUVA condition model. The model is equivalent to the CCSR's Output Option 1 - Vertical File Output.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier for each the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "The ICD-10-CM code for the diagnosis.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__icd_10_cm.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code_description": {"name": "code_description", "description": "The ICD-10-CM code description provided in the CCSR CSV seed file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_rank": {"name": "condition_rank", "description": "The numerical ranking of a diagnosis code in a claim.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "body_system": {"name": "body_system", "description": "The body system to which each parent category belongs. The 22 body systems generally follow the structure of the ICD-10-CM diagnosis chapters. Note that the procedure tables don't have this column, but a conceptually related field in procedure models is `clinical_domain`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_parent_category": {"name": "ccsr_parent_category", "description": "The parent category code for each CCSR category. In practice, this is the three letter prefix to the category code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_category_description": {"name": "parent_category_description", "description": "A description of the parent category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category": {"name": "ccsr_category", "description": "A CCSR category for the ICD-10-CM code. One ICD-10-CM code may have up 6 CCSR categories associated, ordinally ranked by the ccsr_category_rank. Will be null if a record has a `code` that isn't referenced in the CCSR seed file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category_description": {"name": "ccsr_category_description", "description": "The description of the CCSR category as provided in the CCSR seed file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category_rank": {"name": "ccsr_category_rank", "description": "The ordinal rank of a given CCSR category mapped to an ICD-10-CM code. The CCSR seed CSV has the order of categories assigned to each ICD-10-CM code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_ip_default_category": {"name": "is_ip_default_category", "description": "For each ICD-10-CM code, this field will return true for the CCSR category that is the default value for the code if the underlying record is an inpatient encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_op_default_category": {"name": "is_op_default_category", "description": "For each ICD-10-CM code, this field will return true for the CCSR category that is the default value for the code if the underlying record is an outpatient encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dxccsr_version": {"name": "dxccsr_version", "description": "The version number of the CCSR program from which the dbt model was derived.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ccsr/ccsr_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ccsr", "alias": "long_condition_category", "tags": ["ccsr"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9034126, "relation_name": "tuva_project_demo.ccsr.long_condition_category", "raw_code": "{{ config(\n     enabled = var('ccsr_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith ccsr__dx_vertical_pivot as (\n    \n    select * from {{ ref('ccsr__dx_vertical_pivot') }} \n\n), condition as (\n    \n    select * from {{ ref('ccsr__stg_core__condition') }}\n\n), dxccsr_body_systems as (\n\n    select * from {{ ref('ccsr__dxccsr_v2023_1_body_systems') }}\n\n)\n\nselect \n    condition.encounter_id,\n    condition.claim_id,\n    condition.patient_id,\n    condition.normalized_code,\n    ccsr__dx_vertical_pivot.code_description,\n    condition.condition_rank,\n    ccsr__dx_vertical_pivot.ccsr_parent_category,\n    dxccsr_body_systems.body_system,\n    dxccsr_body_systems.parent_category_description,\n    ccsr__dx_vertical_pivot.ccsr_category,\n    ccsr__dx_vertical_pivot.ccsr_category_description,\n    ccsr__dx_vertical_pivot.ccsr_category_rank,\n    ccsr__dx_vertical_pivot.is_ip_default_category,\n    ccsr__dx_vertical_pivot.is_op_default_category,\n    {{ var('dxccsr_version') }} as dxccsr_version,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom condition\nleft join ccsr__dx_vertical_pivot\n    on condition.normalized_code = ccsr__dx_vertical_pivot.code\nleft join dxccsr_body_systems using(ccsr_parent_category)", "language": "sql", "refs": [{"name": "ccsr__dx_vertical_pivot", "package": null, "version": null}, {"name": "ccsr__stg_core__condition", "package": null, "version": null}, {"name": "ccsr__dxccsr_v2023_1_body_systems", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.ccsr__dx_vertical_pivot", "model.the_tuva_project.ccsr__stg_core__condition", "seed.the_tuva_project.ccsr__dxccsr_v2023_1_body_systems"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/final/ccsr__long_condition_category.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ccsr__stg_core__condition as (\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\nwhere normalized_code_type = 'icd-10-cm'\n), ccsr__dx_vertical_pivot as (\n    \n    select * from tuva_project_demo.ccsr.dx_vertical_pivot \n\n), condition as (\n    \n    select * from __dbt__cte__ccsr__stg_core__condition\n\n), dxccsr_body_systems as (\n\n    select * from tuva_project_demo.ccsr._value_set_dxccsr_v2023_1_body_systems\n\n)\n\nselect \n    condition.encounter_id,\n    condition.claim_id,\n    condition.patient_id,\n    condition.normalized_code,\n    ccsr__dx_vertical_pivot.code_description,\n    condition.condition_rank,\n    ccsr__dx_vertical_pivot.ccsr_parent_category,\n    dxccsr_body_systems.body_system,\n    dxccsr_body_systems.parent_category_description,\n    ccsr__dx_vertical_pivot.ccsr_category,\n    ccsr__dx_vertical_pivot.ccsr_category_description,\n    ccsr__dx_vertical_pivot.ccsr_category_rank,\n    ccsr__dx_vertical_pivot.is_ip_default_category,\n    ccsr__dx_vertical_pivot.is_op_default_category,\n    '2023.1' as dxccsr_version,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom condition\nleft join ccsr__dx_vertical_pivot\n    on condition.normalized_code = ccsr__dx_vertical_pivot.code\nleft join dxccsr_body_systems using(ccsr_parent_category)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.ccsr__stg_core__condition", "sql": " __dbt__cte__ccsr__stg_core__condition as (\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\nwhere normalized_code_type = 'icd-10-cm'\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ccsr__long_procedure_category": {"database": "tuva_project_demo", "schema": "ccsr", "name": "ccsr__long_procedure_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "ccsr/final/ccsr__long_procedure_category.sql", "original_file_path": "models/ccsr/final/ccsr__long_procedure_category.sql", "unique_id": "model.the_tuva_project.ccsr__long_procedure_category", "fqn": ["the_tuva_project", "ccsr", "final", "ccsr__long_procedure_category"], "alias": "long_procedure_category", "checksum": {"name": "sha256", "checksum": "dbba55d2513c9c38777a479b9fad26a8d61fc7609f779c518b13bdfe8bed9bdb"}, "config": {"enabled": true, "alias": "long_procedure_category", "schema": "ccsr", "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ccsr"], "description": "This model contains a mapping of individual condition ICD-10-PCS procedure codes to the CCSR's clinically meaningful procedure categories. Each row represents a mapping of an ICD-10 code to a CCSR category. The model is equivalent to the CCSR's Output Option 1 - Vertical File Output.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The encounter_id for the encounter where this procedure was performed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "The ICD-10-PCS code for the procedure.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__icd_10_pcs.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code_description": {"name": "code_description", "description": "The ICD-10-PCS code description provided in the CCSR CSV seed file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_parent_category": {"name": "ccsr_parent_category", "description": "The parent category code for each CCSR category. In practice, this is the three letter prefix to the category code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "clinical_domain": {"name": "clinical_domain", "description": "The ICD-10-PCS Clinical Domain that the CCSR parent category belongs to. Note that the condition models don't have this column, but the `body_system` is a conceptually related column in the condition tables.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category_description": {"name": "ccsr_category_description", "description": "A description of the clinical domain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category": {"name": "ccsr_category", "description": "The CCSR category mapped to the ICD-10-PCS code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prccsr_version": {"name": "prccsr_version", "description": "The version number of the CCSR program from which the dbt model was derived.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ccsr/ccsr_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ccsr", "alias": "long_procedure_category", "tags": ["ccsr"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.911739, "relation_name": "tuva_project_demo.ccsr.long_procedure_category", "raw_code": "{{ config(\n     enabled = var('ccsr_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith procedure as (\n    \n    select * from {{ ref('ccsr__stg_core__procedure') }}\n\n), ccsr__procedure_category_map as (\n\n    select * from {{ ref ('ccsr__procedure_category_map') }}\n\n)\n\nselect distinct\n    procedure.encounter_id,\n    procedure.patient_id,\n    procedure.normalized_code,\n    ccsr__procedure_category_map.code_description,\n    ccsr__procedure_category_map.ccsr_parent_category,\n    ccsr__procedure_category_map.ccsr_category,\n    ccsr__procedure_category_map.ccsr_category_description,\n    ccsr__procedure_category_map.clinical_domain,\n    {{ var('prccsr_version') }} as prccsr_version,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom procedure\nleft join ccsr__procedure_category_map\n    on procedure.normalized_code = ccsr__procedure_category_map.code", "language": "sql", "refs": [{"name": "ccsr__stg_core__procedure", "package": null, "version": null}, {"name": "ccsr__procedure_category_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.ccsr__stg_core__procedure", "model.the_tuva_project.ccsr__procedure_category_map"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/final/ccsr__long_procedure_category.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__ccsr__stg_core__procedure as (\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), procedure as (\n    \n    select * from __dbt__cte__ccsr__stg_core__procedure\n\n), ccsr__procedure_category_map as (\n\n    select * from tuva_project_demo.ccsr.procedure_category_map\n\n)\n\nselect distinct\n    procedure.encounter_id,\n    procedure.patient_id,\n    procedure.normalized_code,\n    ccsr__procedure_category_map.code_description,\n    ccsr__procedure_category_map.ccsr_parent_category,\n    ccsr__procedure_category_map.ccsr_category,\n    ccsr__procedure_category_map.ccsr_category_description,\n    ccsr__procedure_category_map.clinical_domain,\n    '2023.1' as prccsr_version,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom procedure\nleft join ccsr__procedure_category_map\n    on procedure.normalized_code = ccsr__procedure_category_map.code", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.ccsr__stg_core__procedure", "sql": " __dbt__cte__ccsr__stg_core__procedure as (\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ccsr__singular_condition_category": {"database": "tuva_project_demo", "schema": "ccsr", "name": "ccsr__singular_condition_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "ccsr/final/ccsr__singular_condition_category.sql", "original_file_path": "models/ccsr/final/ccsr__singular_condition_category.sql", "unique_id": "model.the_tuva_project.ccsr__singular_condition_category", "fqn": ["the_tuva_project", "ccsr", "final", "ccsr__singular_condition_category"], "alias": "singular_condition_category", "checksum": {"name": "sha256", "checksum": "08f710d6b4eef478aa581e199ed0a7f78744f26bb88f18b74cca4bb3ab129898"}, "config": {"enabled": true, "alias": "singular_condition_category", "schema": "ccsr", "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ccsr"], "description": "This model contains only the CCSR's default category assignment for the ICD-10 code, and only for the first-listed ICD-10 code (`diagnosis_code = 1`).", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier for an encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "Unique claim_id for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body_system": {"name": "body_system", "description": "The body system to which each parent category belongs. The 22 body systems generally follow the structure of the ICD-10-CM diagnosis chapters. Note that the procedure tables don't have this column, but a conceptually related field in procedure models is `clinical_domain`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_parent_category": {"name": "ccsr_parent_category", "description": "The parent category code for each CCSR category. In practice, this is the three letter prefix to the category code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_category_description": {"name": "parent_category_description", "description": "A description of the parent category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category": {"name": "ccsr_category", "description": "A CCSR category for the ICD-10-CM code. One ICD-10-CM code may have up 6 CCSR categories associated, ordinally ranked by the ccsr_category_rank. Will be null if a record has a `code` that isn't referenced in the CCSR seed file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category_description": {"name": "ccsr_category_description", "description": "The human readable description of the `ccsr_category`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dxccsr_version": {"name": "dxccsr_version", "description": "The version number of the CCSR program from which the dbt model was derived.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ccsr/ccsr_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ccsr", "alias": "singular_condition_category", "tags": ["ccsr"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9074118, "relation_name": "tuva_project_demo.ccsr.singular_condition_category", "raw_code": "{{ config(\n     enabled = var('ccsr_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nselect \n    encounter_id,\n    claim_id,\n    patient_id,\n    ccsr_category,\n    ccsr_category_description,\n    ccsr_parent_category,\n    parent_category_description,\n    body_system,\n    {{ var('dxccsr_version') }} as dxccsr_version,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ref('ccsr__long_condition_category')}}\nwhere \n    is_{{ var('record_type', 'ip') }}_default_category = true\n    and condition_rank = 1", "language": "sql", "refs": [{"name": "ccsr__long_condition_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.ccsr__long_condition_category"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/final/ccsr__singular_condition_category.sql", "compiled": true, "compiled_code": "\n\nselect \n    encounter_id,\n    claim_id,\n    patient_id,\n    ccsr_category,\n    ccsr_category_description,\n    ccsr_parent_category,\n    parent_category_description,\n    body_system,\n    '2023.1' as dxccsr_version,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.ccsr.long_condition_category\nwhere \n    is_ip_default_category = true\n    and condition_rank = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ccsr__dx_vertical_pivot": {"database": "tuva_project_demo", "schema": "ccsr", "name": "ccsr__dx_vertical_pivot", "resource_type": "model", "package_name": "the_tuva_project", "path": "ccsr/intermediate/ccsr__dx_vertical_pivot.sql", "original_file_path": "models/ccsr/intermediate/ccsr__dx_vertical_pivot.sql", "unique_id": "model.the_tuva_project.ccsr__dx_vertical_pivot", "fqn": ["the_tuva_project", "ccsr", "intermediate", "ccsr__dx_vertical_pivot"], "alias": "dx_vertical_pivot", "checksum": {"name": "sha256", "checksum": "3e3719d1c3ca45862fb5fcad7a2d75993abc41c0c3d1b57f013d335ed5ab8e6c"}, "config": {"enabled": true, "alias": "dx_vertical_pivot", "schema": "ccsr", "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ccsr"], "description": "This is an intermediate model that pivots the DXCCSR's wide-format mapping CSV\ninto a long format table. While the seed uses 6 columns to represent the 6 CCSR codes that\nmay be present, this generates one row for each CCSR category per ICD code, so up to\n6 rows per code. \n\nThis model includes details and descriptions of the CCSR parent category and body systems that are inherited by the final models.\n\nThis model may also be useful in looking up CCSR condition category, body system, and parent category information.\n", "columns": {"code": {"name": "code", "description": "The ICD-10-CM code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code_description": {"name": "code_description", "description": "The description of the ICD-10-CM code included in the seed file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category": {"name": "ccsr_category", "description": "A CCSR category for the ICD-10-CM code. One ICD-10-CM code may have up 6 CCSR categories associated, ordinally ranked by the ccsr_category_rank. Will be null if a record has a `code` that isn't referenced in the CCSR seed file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category_rank": {"name": "ccsr_category_rank", "description": "The ordinal rank of a given CCSR category mapped to an ICD-10-CM code. The CCSR seed CSV has the order of categories assigned to each ICD-10-CM code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category_description": {"name": "ccsr_category_description", "description": "The human readable description of the `ccsr_category`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_parent_category": {"name": "ccsr_parent_category", "description": "The CCSR parent category - the three letter prefix for each alphanumeric category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_ip_default_category": {"name": "is_ip_default_category", "description": "For each ICD-10-CM code, this field will return true for the CCSR category that is the default value for the code if the underlying record is an inpatient encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_op_default_category": {"name": "is_op_default_category", "description": "For each ICD-10-CM code, this field will return true for the CCSR category that is the default value for the code if the underlying record is an outpatient encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ccsr/ccsr_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ccsr", "alias": "dx_vertical_pivot", "tags": ["ccsr"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.8886664, "relation_name": "tuva_project_demo.ccsr.dx_vertical_pivot", "raw_code": "{{ config(\n     enabled = var('ccsr_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith codes as (\n    \n    select\n        icd_10_cm_code as code, \n        icd_10_cm_code_description as code_description,\n        -- loop to generate columns for CCSR categories 1-6\n        {%- for i in range(1,7) %}\n        ccsr_category_{{ i }},\n        ccsr_category_{{ i }}_description,\n        {%- endfor %}\n        default_ccsr_category_ip,\n        default_ccsr_category_op\n    from {{ ref('ccsr__dxccsr_v2023_1_cleaned_map') }}\n\n), long_union as (\n    -- generate select & union statements to pivot category columns to rows\n    {% for i in range(1,7,1) %}\n    select \n        code,\n        code_description,\n        left(ccsr_category_{{ i }}, 3) as ccsr_parent_category,\n        ccsr_category_{{ i }} as ccsr_category,\n        ccsr_category_{{ i }}_description as ccsr_category_description,\n        {{ i }} as ccsr_category_rank,\n        (ccsr_category_{{ i }} = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_{{ i }} = default_ccsr_category_op) as is_op_default_category\n    from codes \n    {{ \"union all\" if not loop.last else \"\" }}\n    {%- endfor %}\n\n)\n\nselect distinct\n    *,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom long_union\n-- as not all diagnosis codes have multiple categories, we can discard nulls\nwhere ccsr_category is not null", "language": "sql", "refs": [{"name": "ccsr__dxccsr_v2023_1_cleaned_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project.ccsr__dxccsr_v2023_1_cleaned_map"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/intermediate/ccsr__dx_vertical_pivot.sql", "compiled": true, "compiled_code": "\n\nwith codes as (\n    \n    select\n        icd_10_cm_code as code, \n        icd_10_cm_code_description as code_description,\n        -- loop to generate columns for CCSR categories 1-6\n        ccsr_category_1,\n        ccsr_category_1_description,\n        ccsr_category_2,\n        ccsr_category_2_description,\n        ccsr_category_3,\n        ccsr_category_3_description,\n        ccsr_category_4,\n        ccsr_category_4_description,\n        ccsr_category_5,\n        ccsr_category_5_description,\n        ccsr_category_6,\n        ccsr_category_6_description,\n        default_ccsr_category_ip,\n        default_ccsr_category_op\n    from tuva_project_demo.ccsr._value_set_dxccsr_v2023_1_cleaned_map\n\n), long_union as (\n    -- generate select & union statements to pivot category columns to rows\n    \n    select \n        code,\n        code_description,\n        left(ccsr_category_1, 3) as ccsr_parent_category,\n        ccsr_category_1 as ccsr_category,\n        ccsr_category_1_description as ccsr_category_description,\n        1 as ccsr_category_rank,\n        (ccsr_category_1 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_1 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_2, 3) as ccsr_parent_category,\n        ccsr_category_2 as ccsr_category,\n        ccsr_category_2_description as ccsr_category_description,\n        2 as ccsr_category_rank,\n        (ccsr_category_2 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_2 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_3, 3) as ccsr_parent_category,\n        ccsr_category_3 as ccsr_category,\n        ccsr_category_3_description as ccsr_category_description,\n        3 as ccsr_category_rank,\n        (ccsr_category_3 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_3 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_4, 3) as ccsr_parent_category,\n        ccsr_category_4 as ccsr_category,\n        ccsr_category_4_description as ccsr_category_description,\n        4 as ccsr_category_rank,\n        (ccsr_category_4 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_4 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_5, 3) as ccsr_parent_category,\n        ccsr_category_5 as ccsr_category,\n        ccsr_category_5_description as ccsr_category_description,\n        5 as ccsr_category_rank,\n        (ccsr_category_5 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_5 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_6, 3) as ccsr_parent_category,\n        ccsr_category_6 as ccsr_category,\n        ccsr_category_6_description as ccsr_category_description,\n        6 as ccsr_category_rank,\n        (ccsr_category_6 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_6 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    \n\n)\n\nselect distinct\n    *,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom long_union\n-- as not all diagnosis codes have multiple categories, we can discard nulls\nwhere ccsr_category is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ccsr__procedure_category_map": {"database": "tuva_project_demo", "schema": "ccsr", "name": "ccsr__procedure_category_map", "resource_type": "model", "package_name": "the_tuva_project", "path": "ccsr/intermediate/ccsr__procedure_category_map.sql", "original_file_path": "models/ccsr/intermediate/ccsr__procedure_category_map.sql", "unique_id": "model.the_tuva_project.ccsr__procedure_category_map", "fqn": ["the_tuva_project", "ccsr", "intermediate", "ccsr__procedure_category_map"], "alias": "procedure_category_map", "checksum": {"name": "sha256", "checksum": "9de066ce4bc064a683d44abe2552b778ec8ea2caa7aa7b62dfae61136ceaeb6d"}, "config": {"enabled": true, "alias": "procedure_category_map", "schema": "ccsr", "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ccsr"], "description": "This is an intermediate model that renames some PRCCSR columns to align with other TUVA models as well as the `ccsr__dx_vertical_pivot` model.", "columns": {"code": {"name": "code", "description": "The ICD-10-PCS code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code_description": {"name": "code_description", "description": "The description of the ICD-10-PCS code included in the seed file.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category": {"name": "ccsr_category", "description": "The CCSR category to which the ICD-10 code is mapped.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_category_description": {"name": "ccsr_category_description", "description": "A description of the CCSR category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "clinical_domain": {"name": "clinical_domain", "description": "The clinical domain to which the CCSR code belongs. Note that the condition models don't have this column, but the `body_system` is a conceptually related column in the condition tables.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccsr_parent_category": {"name": "ccsr_parent_category", "description": "The CCSR parent category - the three letter prefix for each alphanumeric category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ccsr/ccsr_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ccsr", "alias": "procedure_category_map", "tags": ["ccsr"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.893867, "relation_name": "tuva_project_demo.ccsr.procedure_category_map", "raw_code": "{{ config(\n     enabled = var('ccsr_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nselect \n    icd_10_pcs as code,\n    icd_10_pcs_description as code_description,\n    prccsr as ccsr_category,\n    left(prccsr, 3) as ccsr_parent_category,\n    prccsr_description as ccsr_category_description,\n    clinical_domain,\n   '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('ccsr__prccsr_v2023_1_cleaned_map')}}", "language": "sql", "refs": [{"name": "ccsr__prccsr_v2023_1_cleaned_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project.ccsr__prccsr_v2023_1_cleaned_map"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/intermediate/ccsr__procedure_category_map.sql", "compiled": true, "compiled_code": "\n\nselect \n    icd_10_pcs as code,\n    icd_10_pcs_description as code_description,\n    prccsr as ccsr_category,\n    left(prccsr, 3) as ccsr_parent_category,\n    prccsr_description as ccsr_category_description,\n    clinical_domain,\n   '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.ccsr._value_set_prccsr_v2023_1_cleaned_map", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ccsr__stg_core__condition": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "ccsr__stg_core__condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "ccsr/staging/ccsr__stg_core__condition.sql", "original_file_path": "models/ccsr/staging/ccsr__stg_core__condition.sql", "unique_id": "model.the_tuva_project.ccsr__stg_core__condition", "fqn": ["the_tuva_project", "ccsr", "staging", "ccsr__stg_core__condition"], "alias": "ccsr__stg_core__condition", "checksum": {"name": "sha256", "checksum": "ae7ac148ae1f91be3e61cfbd37d128eb0e0159a50eb0afdfde11c5ed4b09d6c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ccsr"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ccsr/ccsr_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["ccsr"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9151905, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('ccsr_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__condition') }}\nwhere normalized_code_type = 'icd-10-cm'", "language": "sql", "refs": [{"name": "core__condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/staging/ccsr__stg_core__condition.sql", "compiled": true, "compiled_code": "\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\nwhere normalized_code_type = 'icd-10-cm'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ccsr__stg_core__procedure": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "ccsr__stg_core__procedure", "resource_type": "model", "package_name": "the_tuva_project", "path": "ccsr/staging/ccsr__stg_core__procedure.sql", "original_file_path": "models/ccsr/staging/ccsr__stg_core__procedure.sql", "unique_id": "model.the_tuva_project.ccsr__stg_core__procedure", "fqn": ["the_tuva_project", "ccsr", "staging", "ccsr__stg_core__procedure"], "alias": "ccsr__stg_core__procedure", "checksum": {"name": "sha256", "checksum": "4f867df3d4e43f41e54d7afa4c185d9ba187be688de1272437ae2d5ce81fddf2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ccsr"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ccsr/ccsr_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["ccsr"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9181535, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('ccsr_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__procedure') }}", "language": "sql", "refs": [{"name": "core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/staging/ccsr__stg_core__procedure.sql", "compiled": true, "compiled_code": "\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__cms_chronic_conditions_long", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/final/chronic_conditions__cms_chronic_conditions_long.sql", "original_file_path": "models/chronic_conditions/final/chronic_conditions__cms_chronic_conditions_long.sql", "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "fqn": ["the_tuva_project", "chronic_conditions", "final", "chronic_conditions__cms_chronic_conditions_long"], "alias": "cms_chronic_conditions_long", "checksum": {"name": "sha256", "checksum": "5480b81efb388b47f7d122d3916336072eb751447b8e5f72fb35dd5f3c50a9eb"}, "config": {"enabled": true, "alias": "cms_chronic_conditions_long", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "This model unions condition flags from the 3 upstream stage models that calculate them.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Start date of the chronic condition derived from diagnosis,  procedure, or medication.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chronic_condition_type": {"name": "chronic_condition_type", "description": "The type of chronic condition as defined by CMS.  ('Common' or 'Other chronic or potentially disabling conditions')\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/chronic_conditions/chronic_conditions__cms_chronic_conditions_hierarchy.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/chronic_conditions/chronic_conditions__cms_chronic_conditions_hierarchy.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/chronic_conditions/chronic_conditions__cms_chronic_conditions_hierarchy.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Indicates the name of the source dataset (e.g. Medicare Claims).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "cms_chronic_conditions_long", "tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9624572, "relation_name": "tuva_project_demo.chronic_conditions.cms_chronic_conditions_long", "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith conditions_unioned as (\n\n    select * from {{ ref('chronic_conditions__cms_chronic_conditions_all') }}\n    union distinct\n    select * from {{ ref('chronic_conditions__cms_chronic_conditions_hiv_aids') }}\n    union distinct\n    select * from {{ ref('chronic_conditions__cms_chronic_conditions_oud') }}\n\n)\n\nselect\n      patient_id\n    , claim_id\n    , start_date\n    , chronic_condition_type\n    , condition_category\n    , condition\n    , data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom conditions_unioned", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_all", "package": null, "version": null}, {"name": "chronic_conditions__cms_chronic_conditions_hiv_aids", "package": null, "version": null}, {"name": "chronic_conditions__cms_chronic_conditions_oud", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/final/chronic_conditions__cms_chronic_conditions_long.sql", "compiled": true, "compiled_code": "\n\nwith conditions_unioned as (\n\n    select * from tuva_project_demo.chronic_conditions._int_cms_chronic_condition_all\n    union distinct\n    select * from tuva_project_demo.chronic_conditions._int_cms_chronic_condition_hiv_aids\n    union distinct\n    select * from tuva_project_demo.chronic_conditions._int_cms_chronic_condition_oud\n\n)\n\nselect\n      patient_id\n    , claim_id\n    , start_date\n    , chronic_condition_type\n    , condition_category\n    , condition\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom conditions_unioned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__cms_chronic_conditions_wide", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/final/chronic_conditions__cms_chronic_conditions_wide.sql", "original_file_path": "models/chronic_conditions/final/chronic_conditions__cms_chronic_conditions_wide.sql", "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide", "fqn": ["the_tuva_project", "chronic_conditions", "final", "chronic_conditions__cms_chronic_conditions_wide"], "alias": "cms_chronic_conditions_wide", "checksum": {"name": "sha256", "checksum": "1a4a6540512db0e049723d6afdeaa6cf95638321608170855f18964c9fbae4ad"}, "config": {"enabled": true, "alias": "cms_chronic_conditions_wide", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "This model pivots conditions on the patient level (i.e. one record per  patient) with flags for each chronic condition.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "acute_myocardial_infarction": {"name": "acute_myocardial_infarction", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "adhd_conduct_disorders_and_hyperkinetic_syndrome": {"name": "adhd_conduct_disorders_and_hyperkinetic_syndrome", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "alcohol_use_disorders": {"name": "alcohol_use_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "alzheimers_disease": {"name": "alzheimers_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "anemia": {"name": "anemia", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "anxiety_disorders": {"name": "anxiety_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "asthma": {"name": "asthma", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "atrial_fibrillation_and_flutter": {"name": "atrial_fibrillation_and_flutter", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "autism_spectrum_disorders": {"name": "autism_spectrum_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "benign_prostatic_hyperplasia": {"name": "benign_prostatic_hyperplasia", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "bipolar_disorder": {"name": "bipolar_disorder", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cancer_breast": {"name": "cancer_breast", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cancer_colorectal": {"name": "cancer_colorectal", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cancer_endometrial": {"name": "cancer_endometrial", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cancer_lung": {"name": "cancer_lung", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cancer_prostate": {"name": "cancer_prostate", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cancer_urologic_kidney_renal_pelvis_and_ureter": {"name": "cancer_urologic_kidney_renal_pelvis_and_ureter", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cataract": {"name": "cataract", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cerebral_palsy": {"name": "cerebral_palsy", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "chronic_kidney_disease": {"name": "chronic_kidney_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "chronic_obstructive_pulmonary_disease": {"name": "chronic_obstructive_pulmonary_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cystic_fibrosis_and_other_metabolic_developmental_disorders": {"name": "cystic_fibrosis_and_other_metabolic_developmental_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "depression_bipolar_or_other_depressive_mood_disorders": {"name": "depression_bipolar_or_other_depressive_mood_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "depressive_disorders": {"name": "depressive_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "diabetes": {"name": "diabetes", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "drug_use_disorders": {"name": "drug_use_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "epilepsy": {"name": "epilepsy", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "fibromyalgia_and_chronic_pain_and_fatigue": {"name": "fibromyalgia_and_chronic_pain_and_fatigue", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "glaucoma": {"name": "glaucoma", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "heart_failure_and_non_ischemic_heart_disease": {"name": "heart_failure_and_non_ischemic_heart_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hepatitis_a": {"name": "hepatitis_a", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hepatitis_b_acute_or_unspecified": {"name": "hepatitis_b_acute_or_unspecified", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hepatitis_b_chronic": {"name": "hepatitis_b_chronic", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hepatitis_c_acute": {"name": "hepatitis_c_acute", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hepatitis_c_chronic": {"name": "hepatitis_c_chronic", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hepatitis_c_unspecified": {"name": "hepatitis_c_unspecified", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hepatitis_d": {"name": "hepatitis_d", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hepatitis_e": {"name": "hepatitis_e", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hip_pelvic_fracture": {"name": "hip_pelvic_fracture", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids": {"name": "human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hyperlipidemia": {"name": "hyperlipidemia", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hypertension": {"name": "hypertension", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hypothyroidism": {"name": "hypothyroidism", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "intellectual_disabilities_and_related_conditions": {"name": "intellectual_disabilities_and_related_conditions", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "ischemic_heart_disease": {"name": "ischemic_heart_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "learning_disabilities": {"name": "learning_disabilities", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "leukemias_and_lymphomas": {"name": "leukemias_and_lymphomas", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis": {"name": "liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "migraine_and_chronic_headache": {"name": "migraine_and_chronic_headache", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "mobility_impairments": {"name": "mobility_impairments", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "multiple_sclerosis_and_transverse_myelitis": {"name": "multiple_sclerosis_and_transverse_myelitis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "muscular_dystrophy": {"name": "muscular_dystrophy", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "non_alzheimers_dementia": {"name": "non_alzheimers_dementia", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "obesity": {"name": "obesity", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "opioid_use_disorder_oud": {"name": "opioid_use_disorder_oud", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "osteoporosis_with_or_without_pathological_fracture": {"name": "osteoporosis_with_or_without_pathological_fracture", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "other_developmental_delays": {"name": "other_developmental_delays", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "parkinsons_disease_and_secondary_parkinsonism": {"name": "parkinsons_disease_and_secondary_parkinsonism", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "peripheral_vascular_disease_pvd": {"name": "peripheral_vascular_disease_pvd", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "personality_disorders": {"name": "personality_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "pneumonia_all_cause": {"name": "pneumonia_all_cause", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "post_traumatic_stress_disorder_ptsd": {"name": "post_traumatic_stress_disorder_ptsd", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "pressure_and_chronic_ulcers": {"name": "pressure_and_chronic_ulcers", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "rheumatoid_arthritis_osteoarthritis": {"name": "rheumatoid_arthritis_osteoarthritis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "schizophrenia": {"name": "schizophrenia", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "schizophrenia_and_other_psychotic_disorders": {"name": "schizophrenia_and_other_psychotic_disorders", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "sensory_blindness_and_visual_impairment": {"name": "sensory_blindness_and_visual_impairment", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "sensory_deafness_and_hearing_impairment": {"name": "sensory_deafness_and_hearing_impairment", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "sickle_cell_disease": {"name": "sickle_cell_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "spina_bifida_and_other_congenital_anomalies_of_the_nervous_system": {"name": "spina_bifida_and_other_congenital_anomalies_of_the_nervous_system", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "spinal_cord_injury": {"name": "spinal_cord_injury", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "stroke_transient_ischemic_attack": {"name": "stroke_transient_ischemic_attack", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "tobacco_use": {"name": "tobacco_use", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage": {"name": "traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "viral_hepatitis_general": {"name": "viral_hepatitis_general", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "cms_chronic_conditions_wide", "tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9558933, "relation_name": "tuva_project_demo.chronic_conditions.cms_chronic_conditions_wide", "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith chronic_conditions as (\n\n    select distinct\n          condition\n        , condition_column_name\n    from {{ ref('chronic_conditions__cms_chronic_conditions_hierarchy') }}\n\n)\n\n, conditions as (\n\n    select\n          chronic_conditions_unioned.patient_id\n        , chronic_conditions.condition_column_name\n        , 1 as condition_count\n    from {{ ref('chronic_conditions__cms_chronic_conditions_long') }} as chronic_conditions_unioned\n         inner join chronic_conditions as chronic_conditions\n             on chronic_conditions_unioned.condition = chronic_conditions.condition\n\n)\n\nselect\n      p.patient_id\n    , {{ dbt_utils.pivot(\n          column='condition_column_name'\n        , values=dbt_utils.get_column_values(\n              ref ('chronic_conditions__cms_chronic_conditions_hierarchy')\n            , 'condition_column_name'\n            , order_by= 'condition_column_name'\n          )\n        , agg='max'\n        , then_value= 1\n        , else_value= 0\n        , quote_identifiers = False\n      ) }}\n      , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('cms_chronic_conditions__stg_core__patient') }} p\n     left join conditions\n        on p.patient_id = conditions.patient_id\ngroup by\n    p.patient_id", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_hierarchy", "package": null, "version": null}, {"name": "chronic_conditions__cms_chronic_conditions_long", "package": null, "version": null}, {"name": "chronic_conditions__cms_chronic_conditions_hierarchy", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "model.the_tuva_project.cms_chronic_conditions__stg_core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/final/chronic_conditions__cms_chronic_conditions_wide.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__cms_chronic_conditions__stg_core__patient as (\n\n\nselect \n    patient_id\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n), chronic_conditions as (\n\n    select distinct\n          condition\n        , condition_column_name\n    from tuva_project_demo.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n\n)\n\n, conditions as (\n\n    select\n          chronic_conditions_unioned.patient_id\n        , chronic_conditions.condition_column_name\n        , 1 as condition_count\n    from tuva_project_demo.chronic_conditions.cms_chronic_conditions_long as chronic_conditions_unioned\n         inner join chronic_conditions as chronic_conditions\n             on chronic_conditions_unioned.condition = chronic_conditions.condition\n\n)\n\nselect\n      p.patient_id\n    , \n  \n    max(\n      \n      case\n      when condition_column_name = 'acute_myocardial_infarction'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as acute_myocardial_infarction\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'adhd_conduct_disorders_and_hyperkinetic_syndrome'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as adhd_conduct_disorders_and_hyperkinetic_syndrome\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'alcohol_use_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as alcohol_use_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'alzheimers_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as alzheimers_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'anemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as anemia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'anxiety_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as anxiety_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'asthma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as asthma\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'atrial_fibrillation_and_flutter'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as atrial_fibrillation_and_flutter\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'autism_spectrum_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as autism_spectrum_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'benign_prostatic_hyperplasia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as benign_prostatic_hyperplasia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'bipolar_disorder'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as bipolar_disorder\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_breast'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_breast\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_colorectal'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_colorectal\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_endometrial'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_endometrial\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_lung'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_lung\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_prostate'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_prostate\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_urologic_kidney_renal_pelvis_and_ureter'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cancer_urologic_kidney_renal_pelvis_and_ureter\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cataract'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cataract\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cerebral_palsy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cerebral_palsy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'chronic_kidney_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as chronic_kidney_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'chronic_obstructive_pulmonary_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as chronic_obstructive_pulmonary_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cystic_fibrosis_and_other_metabolic_developmental_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cystic_fibrosis_and_other_metabolic_developmental_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'depression_bipolar_or_other_depressive_mood_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as depression_bipolar_or_other_depressive_mood_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'depressive_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as depressive_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'diabetes'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as diabetes\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'drug_use_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as drug_use_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'epilepsy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as epilepsy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'fibromyalgia_and_chronic_pain_and_fatigue'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as fibromyalgia_and_chronic_pain_and_fatigue\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'glaucoma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as glaucoma\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'heart_failure_and_non_ischemic_heart_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as heart_failure_and_non_ischemic_heart_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_a'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_a\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_b_acute_or_unspecified'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_b_acute_or_unspecified\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_b_chronic'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_b_chronic\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_acute'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_acute\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_chronic'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_chronic\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_unspecified'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_c_unspecified\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_d'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_d\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_e'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hepatitis_e\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hip_pelvic_fracture'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hip_pelvic_fracture\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hyperlipidemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hyperlipidemia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hypertension'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hypertension\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hypothyroidism'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hypothyroidism\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'intellectual_disabilities_and_related_conditions'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as intellectual_disabilities_and_related_conditions\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'ischemic_heart_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as ischemic_heart_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'learning_disabilities'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as learning_disabilities\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'leukemias_and_lymphomas'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as leukemias_and_lymphomas\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'migraine_and_chronic_headache'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as migraine_and_chronic_headache\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'mobility_impairments'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as mobility_impairments\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'multiple_sclerosis_and_transverse_myelitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as multiple_sclerosis_and_transverse_myelitis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'muscular_dystrophy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as muscular_dystrophy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'non_alzheimers_dementia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as non_alzheimers_dementia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'obesity'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as obesity\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'opioid_use_disorder_oud'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as opioid_use_disorder_oud\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'osteoporosis_with_or_without_pathological_fracture'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as osteoporosis_with_or_without_pathological_fracture\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'other_developmental_delays'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as other_developmental_delays\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'parkinsons_disease_and_secondary_parkinsonism'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as parkinsons_disease_and_secondary_parkinsonism\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'peripheral_vascular_disease_pvd'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as peripheral_vascular_disease_pvd\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'personality_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as personality_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'pneumonia_all_cause'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as pneumonia_all_cause\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'post_traumatic_stress_disorder_ptsd'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as post_traumatic_stress_disorder_ptsd\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'pressure_and_chronic_ulcers'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as pressure_and_chronic_ulcers\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'rheumatoid_arthritis_osteoarthritis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as rheumatoid_arthritis_osteoarthritis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'schizophrenia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as schizophrenia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'schizophrenia_and_other_psychotic_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as schizophrenia_and_other_psychotic_disorders\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sensory_blindness_and_visual_impairment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sensory_blindness_and_visual_impairment\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sensory_deafness_and_hearing_impairment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sensory_deafness_and_hearing_impairment\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sickle_cell_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as sickle_cell_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as spina_bifida_and_other_congenital_anomalies_of_the_nervous_system\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'spinal_cord_injury'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as spinal_cord_injury\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'stroke_transient_ischemic_attack'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as stroke_transient_ischemic_attack\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'tobacco_use'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as tobacco_use\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'viral_hepatitis_general'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as viral_hepatitis_general\n      \n    \n    \n  \n\n      , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__cms_chronic_conditions__stg_core__patient p\n     left join conditions\n        on p.patient_id = conditions.patient_id\ngroup by\n    p.patient_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.cms_chronic_conditions__stg_core__patient", "sql": " __dbt__cte__cms_chronic_conditions__stg_core__patient as (\n\n\nselect \n    patient_id\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__tuva_chronic_conditions_long", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/final/chronic_conditions__tuva_chronic_conditions_long.sql", "original_file_path": "models/chronic_conditions/final/chronic_conditions__tuva_chronic_conditions_long.sql", "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long", "fqn": ["the_tuva_project", "chronic_conditions", "final", "chronic_conditions__tuva_chronic_conditions_long"], "alias": "tuva_chronic_conditions_long", "checksum": {"name": "sha256", "checksum": "a9f319a429001c1a239554868a1c13bb2b61199699162591772b1bb9cc8f0579"}, "config": {"enabled": true, "alias": "tuva_chronic_conditions_long", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["tuva_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["tuva_chronic_conditions", "chronic_conditions"], "description": "This model creates one record per patient per condition using the tuva  chronic conditions hierarchy as the grouper. The model pulls in the first  and last date of the diagnosis that flagged the patient for this condition  group.\n", "columns": {"patient_id": {"name": "patient_id", "description": "The unique identifier for a patient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_family": {"name": "condition_family", "description": "A higher level rollup grouping of conditions from the condition  column\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/chronic_conditions/chronic_conditions__tuva_chronic_conditions_hierarchy.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the condition that each diagnosis code rolls up to\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/chronic_conditions/chronic_conditions__tuva_chronic_conditions_hierarchy.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_diagnosis_date": {"name": "first_diagnosis_date", "description": "The first date when a diagnosis code that rolls up to this condition  was coded to this patient\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_diagnosis_date": {"name": "last_diagnosis_date", "description": "The last date when a diagnosis code that rolls up to this condition  was coded to this patient\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/tuva_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "tuva_chronic_conditions_long", "tags": ["tuva_chronic_conditions", "chronic_conditions"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.0479376, "relation_name": "tuva_project_demo.chronic_conditions.tuva_chronic_conditions_long", "raw_code": "{{ config(\n     enabled = var('tuva_chronic_conditions_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith condition_row_number as (\n\n    select \n          patient_id\n        , normalized_code\n        , recorded_date\n        , row_number() over(\n            partition by\n                  patient_id\n                , normalized_code\n            order by recorded_date asc\n          ) as rn_asc\n        , row_number() over(\n            partition by\n                  patient_id\n                , normalized_code\n            order by recorded_date desc\n          ) as rn_desc\n    from {{ ref('tuva_chronic_conditions__stg_core__condition') }}\n\n)\n\n, patient_conditions as (\n\n    select \n          patient_id\n        , normalized_code as icd_10_cm\n        , max(\n            case\n                when rn_asc = 1\n                then recorded_date\n            end\n          ) as first_diagnosis_date\n        , max(\n            case\n                when rn_desc = 1\n                then recorded_date\n            end\n          ) as last_diagnosis_date\n    from condition_row_number\n    group by \n          patient_id\n        , normalized_code\n\n)\n\nselect \n      pc.patient_id\n    , h.condition_family\n    , h.condition\n    , min(first_diagnosis_date) as first_diagnosis_date\n    , max(last_diagnosis_date) as last_diagnosis_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('chronic_conditions__tuva_chronic_conditions_hierarchy') }} h\n     inner join patient_conditions pc\n        on h.icd_10_cm_code = pc.icd_10_cm\ngroup by \n      pc.patient_id\n    , h.condition_family\n    , h.condition", "language": "sql", "refs": [{"name": "tuva_chronic_conditions__stg_core__condition", "package": null, "version": null}, {"name": "chronic_conditions__tuva_chronic_conditions_hierarchy", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.tuva_chronic_conditions__stg_core__condition", "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/final/chronic_conditions__tuva_chronic_conditions_long.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__tuva_chronic_conditions__stg_core__condition as (\n\n\nselect \n      patient_id\n    , normalized_code\n    , recorded_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n), condition_row_number as (\n\n    select \n          patient_id\n        , normalized_code\n        , recorded_date\n        , row_number() over(\n            partition by\n                  patient_id\n                , normalized_code\n            order by recorded_date asc\n          ) as rn_asc\n        , row_number() over(\n            partition by\n                  patient_id\n                , normalized_code\n            order by recorded_date desc\n          ) as rn_desc\n    from __dbt__cte__tuva_chronic_conditions__stg_core__condition\n\n)\n\n, patient_conditions as (\n\n    select \n          patient_id\n        , normalized_code as icd_10_cm\n        , max(\n            case\n                when rn_asc = 1\n                then recorded_date\n            end\n          ) as first_diagnosis_date\n        , max(\n            case\n                when rn_desc = 1\n                then recorded_date\n            end\n          ) as last_diagnosis_date\n    from condition_row_number\n    group by \n          patient_id\n        , normalized_code\n\n)\n\nselect \n      pc.patient_id\n    , h.condition_family\n    , h.condition\n    , min(first_diagnosis_date) as first_diagnosis_date\n    , max(last_diagnosis_date) as last_diagnosis_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.chronic_conditions._value_set_tuva_chronic_conditions_hierarchy h\n     inner join patient_conditions pc\n        on h.icd_10_cm_code = pc.icd_10_cm\ngroup by \n      pc.patient_id\n    , h.condition_family\n    , h.condition", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.tuva_chronic_conditions__stg_core__condition", "sql": " __dbt__cte__tuva_chronic_conditions__stg_core__condition as (\n\n\nselect \n      patient_id\n    , normalized_code\n    , recorded_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__tuva_chronic_conditions_wide", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/final/chronic_conditions__tuva_chronic_conditions_wide.sql", "original_file_path": "models/chronic_conditions/final/chronic_conditions__tuva_chronic_conditions_wide.sql", "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide", "fqn": ["the_tuva_project", "chronic_conditions", "final", "chronic_conditions__tuva_chronic_conditions_wide"], "alias": "tuva_chronic_conditions_wide", "checksum": {"name": "sha256", "checksum": "fd544808dd511e5b9ad485a51b7a5a6dcc399cf116583db8c5b89c71878ae284"}, "config": {"enabled": true, "alias": "tuva_chronic_conditions_wide", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["tuva_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["tuva_chronic_conditions", "chronic_conditions"], "description": "This model creates one record per patient with flags for all the  conditions in the tuva chronic conditions hierarchy. A patient will have  a 1 in the column for a certain condition if they have every been coded  with a diagnosis that rolls up to that condition and a 0 if not.\n", "columns": {"patient_id": {"name": "patient_id", "description": "ID of the patient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "acute_myocardial_infarction": {"name": "acute_myocardial_infarction", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "alcohol": {"name": "alcohol", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "alzheimers_disease": {"name": "alzheimers_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "amyotrophic_lateral_sclerosis": {"name": "amyotrophic_lateral_sclerosis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "anxiety": {"name": "anxiety", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "asthma": {"name": "asthma", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "atherosclerosis": {"name": "atherosclerosis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "atrial_fibrillation": {"name": "atrial_fibrillation", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "attention_deficit_hyperactivity_disorder": {"name": "attention_deficit_hyperactivity_disorder", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "bipolar": {"name": "bipolar", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "breast_cancer": {"name": "breast_cancer", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "chronic_kidney_disease": {"name": "chronic_kidney_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "chronic_obstructive_pulmonary_disease": {"name": "chronic_obstructive_pulmonary_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cocaine": {"name": "cocaine", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "colorectal_cancer": {"name": "colorectal_cancer", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "crohns_disease": {"name": "crohns_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "cystic_fibrosis": {"name": "cystic_fibrosis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "dementia": {"name": "dementia", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "depression": {"name": "depression", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "heart_failure": {"name": "heart_failure", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hyperlipidemia": {"name": "hyperlipidemia", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "hypertension": {"name": "hypertension", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "lung_cancer": {"name": "lung_cancer", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "lupus": {"name": "lupus", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "metabolic_syndrome": {"name": "metabolic_syndrome", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "multiple_sclerosis": {"name": "multiple_sclerosis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "muscular_dystrophy": {"name": "muscular_dystrophy", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "obesity": {"name": "obesity", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "obsessive_compulsive_disorder": {"name": "obsessive_compulsive_disorder", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "opioid": {"name": "opioid", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "parkinsons_disease": {"name": "parkinsons_disease", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "personality_disorder": {"name": "personality_disorder", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "post_traumatic_stress_disorder": {"name": "post_traumatic_stress_disorder", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "rheumatoid_arthritis": {"name": "rheumatoid_arthritis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "schizophrenia": {"name": "schizophrenia", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "stroke": {"name": "stroke", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "tobacco": {"name": "tobacco", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "type_1_diabetes": {"name": "type_1_diabetes", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "type_2_diabetes": {"name": "type_2_diabetes", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "ulcerative_colitis": {"name": "ulcerative_colitis", "description": "flag indicating if the condition is present", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/tuva_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "tuva_chronic_conditions_wide", "tags": ["tuva_chronic_conditions", "chronic_conditions"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.0657058, "relation_name": "tuva_project_demo.chronic_conditions.tuva_chronic_conditions_wide", "raw_code": "{{ config(\n     enabled = var('tuva_chronic_conditions_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith condition_columns as (\n\n    select distinct\n          condition\n        , condition_column_name\n    from {{ ref('chronic_conditions__tuva_chronic_conditions_hierarchy') }}\n\n)\n\nselect\n      p.patient_id\n    , {{ dbt_utils.pivot(\n          column='cc.condition_column_name'\n        , values=dbt_utils.get_column_values(\n              ref('chronic_conditions__tuva_chronic_conditions_hierarchy')\n            , 'condition_column_name'\n            ,'condition_column_name'\n          )\n        , agg='max'\n        , then_value= 1\n        , else_value= 0\n        , quote_identifiers = False\n      ) }}\n      , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('tuva_chronic_conditions__stg_core__patient') }} p\n     left join {{ ref('chronic_conditions__tuva_chronic_conditions_long') }} l\n        on p.patient_id = l.patient_id\n     left join condition_columns cc\n        on l.condition = cc.condition\ngroup by\n    p.patient_id", "language": "sql", "refs": [{"name": "chronic_conditions__tuva_chronic_conditions_hierarchy", "package": null, "version": null}, {"name": "chronic_conditions__tuva_chronic_conditions_hierarchy", "package": null, "version": null}, {"name": "tuva_chronic_conditions__stg_core__patient", "package": null, "version": null}, {"name": "chronic_conditions__tuva_chronic_conditions_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy", "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient", "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/final/chronic_conditions__tuva_chronic_conditions_wide.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__tuva_chronic_conditions__stg_core__patient as (\n\n\nselect \n    patient_id\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n), condition_columns as (\n\n    select distinct\n          condition\n        , condition_column_name\n    from tuva_project_demo.chronic_conditions._value_set_tuva_chronic_conditions_hierarchy\n\n)\n\nselect\n      p.patient_id\n    , \n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ACUTE_MYOCARDIAL_INFARCTION'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as acute_myocardial_infarction\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ALCOHOL'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as alcohol\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ALZHEIMERS_DISEASE'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as alzheimers_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'AMYOTROPHIC_LATERAL_SCLEROSIS'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as amyotrophic_lateral_sclerosis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ANXIETY'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as anxiety\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ASTHMA'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as asthma\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ATHEROSCLEROSIS'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as atherosclerosis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ATRIAL_FIBRILLATION'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as atrial_fibrillation\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ATTENTION_DEFICIT_HYPERACTIVITY_DISORDER'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as attention_deficit_hyperactivity_disorder\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'BIPOLAR'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as bipolar\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'BREAST_CANCER'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as breast_cancer\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'CHRONIC_KIDNEY_DISEASE'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as chronic_kidney_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'CHRONIC_OBSTRUCTIVE_PULMONARY_DISEASE'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as chronic_obstructive_pulmonary_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'COCAINE'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cocaine\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'COLORECTAL_CANCER'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as colorectal_cancer\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'CROHNS_DISEASE'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as crohns_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'CYSTIC_FIBROSIS'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as cystic_fibrosis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'DEMENTIA'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as dementia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'DEPRESSION'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as depression\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'HEART_FAILURE'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as heart_failure\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'HYPERLIPIDEMIA'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hyperlipidemia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'HYPERTENSION'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as hypertension\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'LUNG_CANCER'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as lung_cancer\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'LUPUS'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as lupus\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'METABOLIC_SYNDROME'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as metabolic_syndrome\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'MULTIPLE_SCLEROSIS'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as multiple_sclerosis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'MUSCULAR_DYSTROPHY'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as muscular_dystrophy\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'OBESITY'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as obesity\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'OBSESSIVE_COMPULSIVE_DISORDER'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as obsessive_compulsive_disorder\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'OPIOID'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as opioid\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'PARKINSONS_DISEASE'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as parkinsons_disease\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'PERSONALITY_DISORDER'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as personality_disorder\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'POST_TRAUMATIC_STRESS_DISORDER'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as post_traumatic_stress_disorder\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'RHEUMATOID_ARTHRITIS'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as rheumatoid_arthritis\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'SCHIZOPHRENIA'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as schizophrenia\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'STROKE'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as stroke\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'TOBACCO'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as tobacco\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'TYPE_1_DIABETES'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as type_1_diabetes\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'TYPE_2_DIABETES'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as type_2_diabetes\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ULCERATIVE_COLITIS'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as ulcerative_colitis\n      \n    \n    \n  \n\n      , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__tuva_chronic_conditions__stg_core__patient p\n     left join tuva_project_demo.chronic_conditions.tuva_chronic_conditions_long l\n        on p.patient_id = l.patient_id\n     left join condition_columns cc\n        on l.condition = cc.condition\ngroup by\n    p.patient_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient", "sql": " __dbt__cte__tuva_chronic_conditions__stg_core__patient as (\n\n\nselect \n    patient_id\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__cms_chronic_conditions_all", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_all.sql", "original_file_path": "models/chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_all.sql", "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "fqn": ["the_tuva_project", "chronic_conditions", "intermediate", "chronic_conditions__cms_chronic_conditions_all"], "alias": "_int_cms_chronic_condition_all", "checksum": {"name": "sha256", "checksum": "6c143e25459a2df431c6c4fa586a685b63c26f6d6c08632bc1d75b6a7f089d10"}, "config": {"enabled": true, "alias": "_int_cms_chronic_condition_all", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "This model contains logic for all chronic conditions where  additional_logic is not 'None'. This model includes standard exclusions and maps ICD-10-CM diagnosis codes, ICD-10-PCS procedure codes, HCPCS codes, and MS DRG codes to chronic conditions.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Start date of the chronic condition derived from diagnosis,  procedure, or medication.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chronic_condition_type": {"name": "chronic_condition_type", "description": "The type of chronic condition as defined by CMS.  ('Common' or 'Other chronic or potentially disabling conditions')\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Indicates the name of the source dataset (e.g. Medicare Claims).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "_int_cms_chronic_condition_all", "tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9665194, "relation_name": "tuva_project_demo.chronic_conditions._int_cms_chronic_condition_all", "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith chronic_conditions as (\n\n    select * from {{ ref('chronic_conditions__cms_chronic_conditions_hierarchy') }}\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from {{ ref('cms_chronic_conditions__stg_core__condition') }}\n\n)\n\n, patient_ms_drgs as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date as start_date\n        , 'MS-DRG' as code_type\n        , ms_drg_code as code\n        , data_source\n    from {{ ref('cms_chronic_conditions__stg_medical_claim') }}\n\n)\n\n, patient_procedures as (\n\n    select\n          patient_id\n        , claim_id\n        , procedure_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from {{ ref('cms_chronic_conditions__stg_core__procedure') }}\n\n)\n\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, inclusions_ms_drg as (\n\n    select\n          patient_ms_drgs.patient_id\n        , patient_ms_drgs.claim_id\n        , patient_ms_drgs.start_date\n        , patient_ms_drgs.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_ms_drgs\n         inner join chronic_conditions\n             on patient_ms_drgs.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, inclusions_procedure as (\n\n    select\n          patient_procedures.patient_id\n        , patient_procedures.claim_id\n        , patient_procedures.start_date\n        , patient_procedures.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_procedures\n         inner join chronic_conditions\n             on patient_procedures.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, exclusions_diagnosis as (\n\n    select distinct\n          patient_conditions.claim_id\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Exclude'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n)\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_ms_drg\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as {{ dbt.type_string() }}) as patient_id\n    , cast(inclusions_unioned.claim_id as {{ dbt.type_string() }}) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as {{ dbt.type_string() }}) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as {{ dbt.type_string() }}) as condition_category\n    , cast(inclusions_unioned.condition as {{ dbt.type_string() }}) as condition\n    , cast(inclusions_unioned.data_source as {{ dbt.type_string() }}) as data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom inclusions_unioned\n     left join exclusions_diagnosis\n         on inclusions_unioned.claim_id = exclusions_diagnosis.claim_id\n         and inclusions_unioned.condition = exclusions_diagnosis.condition\nwhere exclusions_diagnosis.claim_id is null", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_hierarchy", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_core__condition", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_medical_claim", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy", "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim", "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_all.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__cms_chronic_conditions__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n),  __dbt__cte__cms_chronic_conditions__stg_core__procedure as (\n\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), chronic_conditions as (\n\n    select * from tuva_project_demo.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_ms_drgs as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date as start_date\n        , 'MS-DRG' as code_type\n        , ms_drg_code as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_medical_claim\n\n)\n\n, patient_procedures as (\n\n    select\n          patient_id\n        , claim_id\n        , procedure_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__procedure\n\n)\n\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, inclusions_ms_drg as (\n\n    select\n          patient_ms_drgs.patient_id\n        , patient_ms_drgs.claim_id\n        , patient_ms_drgs.start_date\n        , patient_ms_drgs.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_ms_drgs\n         inner join chronic_conditions\n             on patient_ms_drgs.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, inclusions_procedure as (\n\n    select\n          patient_procedures.patient_id\n        , patient_procedures.claim_id\n        , patient_procedures.start_date\n        , patient_procedures.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_procedures\n         inner join chronic_conditions\n             on patient_procedures.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n    and chronic_conditions.additional_logic = 'None'\n\n)\n\n, exclusions_diagnosis as (\n\n    select distinct\n          patient_conditions.claim_id\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Exclude'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n)\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_ms_drg\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom inclusions_unioned\n     left join exclusions_diagnosis\n         on inclusions_unioned.claim_id = exclusions_diagnosis.claim_id\n         and inclusions_unioned.condition = exclusions_diagnosis.condition\nwhere exclusions_diagnosis.claim_id is null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "sql": " __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim", "sql": " __dbt__cte__cms_chronic_conditions__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}, {"id": "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure", "sql": " __dbt__cte__cms_chronic_conditions__stg_core__procedure as (\n\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__cms_chronic_conditions_hiv_aids", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_hiv_aids.sql", "original_file_path": "models/chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_hiv_aids.sql", "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "fqn": ["the_tuva_project", "chronic_conditions", "intermediate", "chronic_conditions__cms_chronic_conditions_hiv_aids"], "alias": "_int_cms_chronic_condition_hiv_aids", "checksum": {"name": "sha256", "checksum": "a3837d2c0d39ae64d0f7b672e04c21444e53d1c6eed81327169977b0f1ef3034"}, "config": {"enabled": true, "alias": "_int_cms_chronic_condition_hiv_aids", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "This model contains logic for the chronic condition Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS). This model maps ICD-10-CM diagnosis codes and MS DRG codes to the chronic condition.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Start date of the chronic condition derived from diagnosis,  procedure, or medication.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chronic_condition_type": {"name": "chronic_condition_type", "description": "The type of chronic condition as defined by CMS.  ('Common' or 'Other chronic or potentially disabling conditions')\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Other).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Indicates the name of the source dataset (e.g. Medicare Claims).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "_int_cms_chronic_condition_hiv_aids", "tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9706693, "relation_name": "tuva_project_demo.chronic_conditions._int_cms_chronic_condition_hiv_aids", "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{%- set condition_filter = 'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)' -%}\n\nwith chronic_conditions as (\n\n    select * from {{ ref('chronic_conditions__cms_chronic_conditions_hierarchy') }}\n    where condition = '{{ condition_filter }}'\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from {{ ref('cms_chronic_conditions__stg_core__condition') }}\n\n)\n\n, patient_ms_drgs as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date as start_date\n        , 'MS-DRG' as code_type\n        , ms_drg_code as code\n        , data_source\n    from {{ ref('cms_chronic_conditions__stg_medical_claim') }}\n\n)\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE excludes encounters with the exception code. Those encounters\n    will be evaluated separately.\n*/\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code <> 'R75'\n\n)\n\n, inclusions_ms_drg as (\n\n    select\n          patient_ms_drgs.patient_id\n        , patient_ms_drgs.claim_id\n        , patient_ms_drgs.start_date\n        , patient_ms_drgs.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_ms_drgs\n         inner join chronic_conditions\n             on patient_ms_drgs.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n\n)\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE includes encounters with the exception code only where that\n    patient has another encounter that is not R75.\n*/\n, exception_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n         inner join inclusions_diagnosis\n             on patient_conditions.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code = 'R75'\n\n)\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_ms_drg\n    union distinct\n    select * from exception_diagnosis\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as {{ dbt.type_string() }}) as patient_id\n    , cast(inclusions_unioned.claim_id as {{ dbt.type_string() }}) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as {{ dbt.type_string() }}) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as {{ dbt.type_string() }}) as condition_category\n    , cast(inclusions_unioned.condition as {{ dbt.type_string() }}) as condition\n    , cast(inclusions_unioned.data_source as {{ dbt.type_string() }}) as data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom inclusions_unioned", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_hierarchy", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_core__condition", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy", "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_hiv_aids.sql", "compiled": true, "compiled_code": "with  __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__cms_chronic_conditions__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), chronic_conditions as (\n\n    select * from tuva_project_demo.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n    where condition = 'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)'\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_ms_drgs as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date as start_date\n        , 'MS-DRG' as code_type\n        , ms_drg_code as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_medical_claim\n\n)\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE excludes encounters with the exception code. Those encounters\n    will be evaluated separately.\n*/\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code <> 'R75'\n\n)\n\n, inclusions_ms_drg as (\n\n    select\n          patient_ms_drgs.patient_id\n        , patient_ms_drgs.claim_id\n        , patient_ms_drgs.start_date\n        , patient_ms_drgs.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_ms_drgs\n         inner join chronic_conditions\n             on patient_ms_drgs.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n\n)\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE includes encounters with the exception code only where that\n    patient has another encounter that is not R75.\n*/\n, exception_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n         inner join inclusions_diagnosis\n             on patient_conditions.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code = 'R75'\n\n)\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_ms_drg\n    union distinct\n    select * from exception_diagnosis\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom inclusions_unioned", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "sql": " __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim", "sql": " __dbt__cte__cms_chronic_conditions__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__cms_chronic_conditions_oud", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_oud.sql", "original_file_path": "models/chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_oud.sql", "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud", "fqn": ["the_tuva_project", "chronic_conditions", "intermediate", "chronic_conditions__cms_chronic_conditions_oud"], "alias": "_int_cms_chronic_condition_oud", "checksum": {"name": "sha256", "checksum": "ec9c2f386fb92e3792534e624e8ff4dfc5e241ad8dd409f6f685e0e193600352"}, "config": {"enabled": true, "alias": "_int_cms_chronic_condition_oud", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "This model contains logic for the chronic condition Opioid Use Disorder  (OUD). This model maps ICD-10-CM diagnosis codes, ICD-10-PCS procedure codes, HCPCS codes, and NDC codes to the chronic condition.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Start date of the chronic condition derived from diagnosis,  procedure, or medication.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "chronic_condition_type": {"name": "chronic_condition_type", "description": "The type of chronic condition as defined by CMS.  ('Common' or 'Other chronic or potentially disabling conditions')\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Substance Abuse).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Indicates the name of the source dataset (e.g. Medicare Claims).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "_int_cms_chronic_condition_oud", "tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9752083, "relation_name": "tuva_project_demo.chronic_conditions._int_cms_chronic_condition_oud", "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{%- set condition_filter = 'Opioid Use Disorder (OUD)' -%}\n\n{%- set naltrexone_ndcs = (\n    '00056001122', '00056001130', '00056001170', '00056007950', '00056008050',\n    '00185003901', '00185003930', '00406009201', '00406009203', '00406117001',\n    '00406117003', '00555090201', '00555090202', '00904703604', '16729008101',\n    '16729008110', '42291063230', '43063059115', '47335032683', '47335032688',\n    '50090286600', '50436010501', '51224020630', '51224020650', '51285027501',\n    '51285027502', '52152010502', '52152010504', '52152010530', '54868557400',\n    '63459030042', '63629104601', '63629104701', '65694010003', '65694010010',\n    '65757030001', '65757030202', '68084029111', '68084029121', '68094085362',\n    '68115068030'\n    )\n-%}\n\nwith chronic_conditions as (\n\n    select * from {{ ref('chronic_conditions__cms_chronic_conditions_hierarchy') }}\n    where condition = '{{ condition_filter }}'\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from {{ ref('cms_chronic_conditions__stg_core__condition') }}\n\n)\n\n, patient_medications as (\n\n    select\n          patient_id\n        , claim_id\n        , paid_date as start_date\n        , replace(ndc_code,'.','') as code\n        , data_source\n    from {{ ref('cms_chronic_conditions__stg_pharmacy_claim') }}\n\n)\n\n, patient_procedures as (\n\n    select\n          patient_id\n        , claim_id\n        , procedure_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from {{ ref('cms_chronic_conditions__stg_core__procedure') }}\n\n)\n\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n)\n\n, inclusions_procedure as (\n\n    select\n          patient_procedures.patient_id\n        , patient_procedures.claim_id\n        , patient_procedures.start_date\n        , patient_procedures.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_procedures\n         inner join chronic_conditions\n             on patient_procedures.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE excludes medication encounters with the exception codes for\n    Naltrexone. Those encounters will be evaluated separately.\n*/\n, inclusions_medication as (\n\n    select\n          patient_medications.patient_id\n        , patient_medications.claim_id\n        , patient_medications.start_date\n        , patient_medications.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code not in {{ naltrexone_ndcs }}\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE includes patients with evidence of the chronic conditions Alcohol\n    Use Disorders or Drug Use Disorders.\n*/\n, exclusions_other_chronic_conditions as (\n\n    select distinct patient_id\n    from {{ ref('chronic_conditions__cms_chronic_conditions_all') }}\n    where condition in (\n          'Alcohol Use Disorders'\n        , 'Drug Use Disorders'\n    )\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE creates the exclusion list which consists of patients with\n    medication encounters for Naltrexone having Alcohol Use Disorder or Drug\n    Use Disorder and missing the Opioid Use Disorder diagnosis codes.\n*/\n, exclusions_medication as (\n    select distinct\n          patient_medications.patient_id\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.code = chronic_conditions.code\n         inner join exclusions_other_chronic_conditions\n             on patient_medications.patient_id = exclusions_other_chronic_conditions.patient_id\n         left join inclusions_diagnosis\n             on patient_medications.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code in {{ naltrexone_ndcs }}\n    and inclusions_diagnosis.patient_id is null\n\n)\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_medication\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as {{ dbt.type_string() }}) as patient_id\n    , cast(inclusions_unioned.claim_id as {{ dbt.type_string() }}) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as {{ dbt.type_string() }}) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as {{ dbt.type_string() }}) as condition_category\n    , cast(inclusions_unioned.condition as {{ dbt.type_string() }}) as condition\n    , cast(inclusions_unioned.data_source as {{ dbt.type_string() }}) as data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom inclusions_unioned\n     left join exclusions_medication\n         on inclusions_unioned.patient_id = exclusions_medication.patient_id\nwhere exclusions_medication.patient_id is null", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_hierarchy", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_core__condition", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_pharmacy_claim", "package": null, "version": null}, {"name": "cms_chronic_conditions__stg_core__procedure", "package": null, "version": null}, {"name": "chronic_conditions__cms_chronic_conditions_all", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy", "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim", "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/intermediate/chronic_conditions__cms_chronic_conditions_oud.sql", "compiled": true, "compiled_code": "with  __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__cms_chronic_conditions__stg_pharmacy_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , paid_date\n    , ndc_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom TUVA_PROJECT_DEMO.input_layer.pharmacy_claim\n),  __dbt__cte__cms_chronic_conditions__stg_core__procedure as (\n\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), chronic_conditions as (\n\n    select * from tuva_project_demo.chronic_conditions._value_set_cms_chronic_conditions_hierarchy\n    where condition = 'Opioid Use Disorder (OUD)'\n\n)\n\n, patient_conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__condition\n\n)\n\n, patient_medications as (\n\n    select\n          patient_id\n        , claim_id\n        , paid_date as start_date\n        , replace(ndc_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_pharmacy_claim\n\n)\n\n, patient_procedures as (\n\n    select\n          patient_id\n        , claim_id\n        , procedure_date as start_date\n        , normalized_code_type as code_type\n        , replace(normalized_code,'.','') as code\n        , data_source\n    from __dbt__cte__cms_chronic_conditions__stg_core__procedure\n\n)\n\n, inclusions_diagnosis as (\n\n    select\n          patient_conditions.patient_id\n        , patient_conditions.claim_id\n        , patient_conditions.start_date\n        , patient_conditions.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_conditions\n         inner join chronic_conditions\n             on patient_conditions.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n)\n\n, inclusions_procedure as (\n\n    select\n          patient_procedures.patient_id\n        , patient_procedures.claim_id\n        , patient_procedures.start_date\n        , patient_procedures.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_procedures\n         inner join chronic_conditions\n             on patient_procedures.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE excludes medication encounters with the exception codes for\n    Naltrexone. Those encounters will be evaluated separately.\n*/\n, inclusions_medication as (\n\n    select\n          patient_medications.patient_id\n        , patient_medications.claim_id\n        , patient_medications.start_date\n        , patient_medications.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code not in ('00056001122', '00056001130', '00056001170', '00056007950', '00056008050', '00185003901', '00185003930', '00406009201', '00406009203', '00406117001', '00406117003', '00555090201', '00555090202', '00904703604', '16729008101', '16729008110', '42291063230', '43063059115', '47335032683', '47335032688', '50090286600', '50436010501', '51224020630', '51224020650', '51285027501', '51285027502', '52152010502', '52152010504', '52152010530', '54868557400', '63459030042', '63629104601', '63629104701', '65694010003', '65694010010', '65757030001', '65757030202', '68084029111', '68084029121', '68094085362', '68115068030')\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE includes patients with evidence of the chronic conditions Alcohol\n    Use Disorders or Drug Use Disorders.\n*/\n, exclusions_other_chronic_conditions as (\n\n    select distinct patient_id\n    from tuva_project_demo.chronic_conditions._int_cms_chronic_condition_all\n    where condition in (\n          'Alcohol Use Disorders'\n        , 'Drug Use Disorders'\n    )\n\n)\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE creates the exclusion list which consists of patients with\n    medication encounters for Naltrexone having Alcohol Use Disorder or Drug\n    Use Disorder and missing the Opioid Use Disorder diagnosis codes.\n*/\n, exclusions_medication as (\n    select distinct\n          patient_medications.patient_id\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.code = chronic_conditions.code\n         inner join exclusions_other_chronic_conditions\n             on patient_medications.patient_id = exclusions_other_chronic_conditions.patient_id\n         left join inclusions_diagnosis\n             on patient_medications.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code in ('00056001122', '00056001130', '00056001170', '00056007950', '00056008050', '00185003901', '00185003930', '00406009201', '00406009203', '00406117001', '00406117003', '00555090201', '00555090202', '00904703604', '16729008101', '16729008110', '42291063230', '43063059115', '47335032683', '47335032688', '50090286600', '50436010501', '51224020630', '51224020650', '51285027501', '51285027502', '52152010502', '52152010504', '52152010530', '54868557400', '63459030042', '63629104601', '63629104701', '65694010003', '65694010010', '65757030001', '65757030202', '68084029111', '68084029121', '68094085362', '68115068030')\n    and inclusions_diagnosis.patient_id is null\n\n)\n\n, inclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_medication\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.claim_id as TEXT) as claim_id\n    , cast(inclusions_unioned.start_date as date) as start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT) as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT) as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom inclusions_unioned\n     left join exclusions_medication\n         on inclusions_unioned.patient_id = exclusions_medication.patient_id\nwhere exclusions_medication.patient_id is null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "sql": " __dbt__cte__cms_chronic_conditions__stg_core__condition as (\n\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim", "sql": " __dbt__cte__cms_chronic_conditions__stg_pharmacy_claim as (\n\n\nselect\n      claim_id\n    , patient_id\n    , paid_date\n    , ndc_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom TUVA_PROJECT_DEMO.input_layer.pharmacy_claim\n)"}, {"id": "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure", "sql": " __dbt__cte__cms_chronic_conditions__stg_core__procedure as (\n\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_chronic_conditions__stg_core__condition": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "cms_chronic_conditions__stg_core__condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/staging/cms_chronic_conditions__stg_core__condition.sql", "original_file_path": "models/chronic_conditions/staging/cms_chronic_conditions__stg_core__condition.sql", "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "fqn": ["the_tuva_project", "chronic_conditions", "staging", "cms_chronic_conditions__stg_core__condition"], "alias": "cms_chronic_conditions__stg_core__condition", "checksum": {"name": "sha256", "checksum": "af31a34e0ee8accd286630da04ee6154aac827c689e518e66eca2e696eaaafa7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9773645, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__condition') }}", "language": "sql", "refs": [{"name": "core__condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/staging/cms_chronic_conditions__stg_core__condition.sql", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_chronic_conditions__stg_core__patient": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "cms_chronic_conditions__stg_core__patient", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/staging/cms_chronic_conditions__stg_core__patient.sql", "original_file_path": "models/chronic_conditions/staging/cms_chronic_conditions__stg_core__patient.sql", "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_core__patient", "fqn": ["the_tuva_project", "chronic_conditions", "staging", "cms_chronic_conditions__stg_core__patient"], "alias": "cms_chronic_conditions__stg_core__patient", "checksum": {"name": "sha256", "checksum": "f42e0eb8c7fd94e710385294473ff4cbb48b9efa056e20015005b21a20e56ed0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9792795, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect \n    patient_id\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__patient') }}", "language": "sql", "refs": [{"name": "core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/staging/cms_chronic_conditions__stg_core__patient.sql", "compiled": true, "compiled_code": "\n\nselect \n    patient_id\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "cms_chronic_conditions__stg_core__procedure", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/staging/cms_chronic_conditions__stg_core__procedure.sql", "original_file_path": "models/chronic_conditions/staging/cms_chronic_conditions__stg_core__procedure.sql", "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure", "fqn": ["the_tuva_project", "chronic_conditions", "staging", "cms_chronic_conditions__stg_core__procedure"], "alias": "cms_chronic_conditions__stg_core__procedure", "checksum": {"name": "sha256", "checksum": "bd66a457c679034c78d2096d5f11fa56ee836c475deb61f5799031d50ae88a8d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9814272, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__procedure') }}", "language": "sql", "refs": [{"name": "core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/staging/cms_chronic_conditions__stg_core__procedure.sql", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , patient_id\n    , procedure_date\n    , normalized_code_type\n    , normalized_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "cms_chronic_conditions__stg_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/staging/cms_chronic_conditions__stg_medical_claim.sql", "original_file_path": "models/chronic_conditions/staging/cms_chronic_conditions__stg_medical_claim.sql", "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim", "fqn": ["the_tuva_project", "chronic_conditions", "staging", "cms_chronic_conditions__stg_medical_claim"], "alias": "cms_chronic_conditions__stg_medical_claim", "checksum": {"name": "sha256", "checksum": "0217a4751ee97a1188a358e17dffcbb600d006dd50effdd5c3597cfef4a5de7a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9834993, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('medical_claim') }}", "language": "sql", "refs": [{"name": "medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project_demo.medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/staging/cms_chronic_conditions__stg_medical_claim.sql", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , patient_id\n    , claim_start_date\n    , ms_drg_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "cms_chronic_conditions__stg_pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/staging/cms_chronic_conditions__stg_pharmacy_claim.sql", "original_file_path": "models/chronic_conditions/staging/cms_chronic_conditions__stg_pharmacy_claim.sql", "unique_id": "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim", "fqn": ["the_tuva_project", "chronic_conditions", "staging", "cms_chronic_conditions__stg_pharmacy_claim"], "alias": "cms_chronic_conditions__stg_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "c6fe56463f4b344bf02158e45e7a72b2d6ab6c0a76ba098090302bf04fb6acb0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/cms_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["cms_chronic_conditions", "chronic_conditions"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.9853883, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_chronic_conditions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n      claim_id\n    , patient_id\n    , paid_date\n    , ndc_code\n    , data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('pharmacy_claim') }}", "language": "sql", "refs": [{"name": "pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project_demo.pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/staging/cms_chronic_conditions__stg_pharmacy_claim.sql", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , patient_id\n    , paid_date\n    , ndc_code\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom TUVA_PROJECT_DEMO.input_layer.pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.tuva_chronic_conditions__stg_core__condition": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "tuva_chronic_conditions__stg_core__condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/staging/tuva_chronic_conditions__stg_core__condition.sql", "original_file_path": "models/chronic_conditions/staging/tuva_chronic_conditions__stg_core__condition.sql", "unique_id": "model.the_tuva_project.tuva_chronic_conditions__stg_core__condition", "fqn": ["the_tuva_project", "chronic_conditions", "staging", "tuva_chronic_conditions__stg_core__condition"], "alias": "tuva_chronic_conditions__stg_core__condition", "checksum": {"name": "sha256", "checksum": "fc63071aa65724d7ccfce9f7c7807511c9d21eefa4c401a5ef1df54e3a329f6e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["tuva_chronic_conditions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["tuva_chronic_conditions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/tuva_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": "tuva_chronic_conditions", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.0686028, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('tuva_chronic_conditions_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nselect \n      patient_id\n    , normalized_code\n    , recorded_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__condition')}}", "language": "sql", "refs": [{"name": "core__condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/staging/tuva_chronic_conditions__stg_core__condition.sql", "compiled": true, "compiled_code": "\n\nselect \n      patient_id\n    , normalized_code\n    , recorded_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "tuva_chronic_conditions__stg_core__patient", "resource_type": "model", "package_name": "the_tuva_project", "path": "chronic_conditions/staging/tuva_chronic_conditions__stg_core__patient.sql", "original_file_path": "models/chronic_conditions/staging/tuva_chronic_conditions__stg_core__patient.sql", "unique_id": "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient", "fqn": ["the_tuva_project", "chronic_conditions", "staging", "tuva_chronic_conditions__stg_core__patient"], "alias": "tuva_chronic_conditions__stg_core__patient", "checksum": {"name": "sha256", "checksum": "052d4e09d81b4d13b6e6e574982ac9530f20a832c69ed9ee201dfac4739a30ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["tuva_chronic_conditions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["tuva_chronic_conditions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/chronic_conditions/tuva_chronic_conditions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": "tuva_chronic_conditions", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.0709026, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('tuva_chronic_conditions_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nselect \n    patient_id\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__patient') }}", "language": "sql", "refs": [{"name": "core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/staging/tuva_chronic_conditions__stg_core__patient.sql", "compiled": true, "compiled_code": "\n\nselect \n    patient_id\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__summary": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__summary", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/final/acute_inpatient__summary.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/final/acute_inpatient__summary.sql", "unique_id": "model.the_tuva_project.acute_inpatient__summary", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "final", "acute_inpatient__summary"], "alias": "acute_inpatient_summary", "checksum": {"name": "sha256", "checksum": "2c7134e1d4bb9293da6cc7b6949924a8ca43abfd1ead18ac20b442d0fdaa02c3"}, "config": {"enabled": true, "alias": "acute_inpatient_summary", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "This table pulls together all the data needed to perform acute inpatient analytics into a single table.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier for the acute inpatient encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "Date when the patient was admitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "Date when the patient was discharged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_age": {"name": "admit_age", "description": "The age of the patient as of their admission date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The gender of the patient.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__gender.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "race": {"name": "race", "description": "The race of the patient.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__race.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "The NPI for the facility where the encounter occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_first_name": {"name": "provider_first_name", "description": "The first name of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_last_name": {"name": "provider_last_name", "description": "The last name of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "The MS-DRG code associted with the inpatient visit", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__ms_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_description": {"name": "ms_drg_description", "description": "The MS-DRG description associted with the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medical_surgical": {"name": "medical_surgical", "description": "Indicates whether the MS-DRG is medical or surgical in nature.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__ms_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apr_drg_code": {"name": "apr_drg_code", "description": "The APR-DRG code associted with the inpatient visit", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__apr_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apr_drg_description": {"name": "apr_drg_description", "description": "The APR-DRG description associted with the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "Admission source code for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__admit_source.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_source_description": {"name": "admit_source_description", "description": "Admission source description for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "Admission type code for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__admit_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_type_description": {"name": "admit_type_description", "description": "Admission type description for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "Discharge disposition code for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__discharge_disposition.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_description": {"name": "discharge_disposition_description", "description": "Discharge disposition description for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_paid_amount": {"name": "total_paid_amount", "description": "The total paid amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_allowed_amount": {"name": "total_allowed_amount", "description": "The total allowed amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_charge_amount": {"name": "total_charge_amount", "description": "The total charge amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "The length of stay for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mortality_flag": {"name": "mortality_flag", "description": "1 if a patient died during the encounter, 0 otherwise.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically named after the payer and state \"BCBS Tennessee\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "acute_inpatient_summary", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.0982063, "relation_name": "tuva_project_demo.claims_preprocessing.acute_inpatient_summary", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith distinct_encounters as (\n    select distinct\n    a.encounter_id\n    , a.patient_id\n    , b.encounter_start_date\n    , b.encounter_end_date\nfrom {{ ref('acute_inpatient__encounter_id') }} a\ninner join {{ ref('acute_inpatient__encounter_start_and_end_dates') }} b\n  on a.encounter_id = b.encounter_id\n)\n\n, institutional_claim_details as (\n    select\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_npi as facility_npi\n        , first.ms_drg_code as ms_drg_code\n        , first.apr_drg_code as apr_drg_code\n        , first.admit_source_code as admit_source_code\n        , first.admit_type_code as admit_type_code\n        , last.discharge_disposition_code as discharge_disposition_code\n        , sum(paid_amount) as inst_paid_amount\n        , sum(allowed_amount) as inst_allowed_amount\n        , sum(charge_amount) as inst_charge_amount\n        , max(data_source) as data_source\n    from {{ ref('medical_claim') }} a\n    inner join {{ ref('acute_inpatient__encounter_id') }} b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    and a.claim_type = 'institutional'\n    inner join {{ ref('acute_inpatient__first_claim_values') }} first\n        on b.encounter_id = first.encounter_id\n        and first.claim_row = 1\n    inner join {{ ref('acute_inpatient__last_claim_values') }} last\n        on b.encounter_id = last.encounter_id\n        and last.claim_row = 1\n    group by\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_npi\n        , first.ms_drg_code\n        , first.apr_drg_code\n        , first.admit_source_code\n        , first.admit_type_code\n        , last.discharge_disposition_code\n)\n\n, professional_claim_details as (\n    select\n        b.encounter_id\n        , sum(paid_amount) as prof_paid_amount\n        , sum(allowed_amount) as prof_allowed_amount\n        , sum(charge_amount) as prof_charge_amount\n    from {{ ref('acute_inpatient__stg_medical_claim') }} a\n    inner join {{ ref('acute_inpatient__encounter_id') }} b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    and a.claim_type = 'professional'\ngroup by 1\n)\n\n, patient as (\n    select distinct\n        patient_id\n        , birth_date\n        , gender\n        , race\n    from {{ ref('acute_inpatient__stg_eligibility') }}\n    )\n\n, provider as (\n    select\n        a.encounter_id\n        , max(a.facility_npi) as facility_npi\n        , b.provider_first_name\n        , b.provider_last_name\n        , count(distinct facility_npi) as npi_count\n    from {{ ref('acute_inpatient__institutional_encounter_id') }} a\n    left join {{ ref('terminology__provider') }} b\n    on a.facility_npi = b.npi\n    group by 1,3,4\n)\n\nselect\n  a.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, a.patient_id\n, {{ dbt.datediff(\"birth_date\",\"encounter_end_date\",\"day\")}}/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.description, icd9cm.long_description) as primary_diagnosis_description\n, f.facility_npi\n, f.provider_first_name\n, f.provider_last_name\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, c.inst_paid_amount + coalesce(d.prof_paid_amount,0) as total_paid_amount\n, c.inst_allowed_amount + coalesce(d.prof_allowed_amount,0) as total_allowed_amount\n, c.inst_charge_amount + coalesce(d.prof_charge_amount,0) as total_charge_amount\n, {{ dbt.datediff(\"a.encounter_start_date\",\"a.encounter_end_date\",\"day\") }} as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, data_source\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom distinct_encounters a\nleft join institutional_claim_details c\n  on a.encounter_id = c.encounter_id\nleft join professional_claim_details d\n  on a.encounter_id = d.encounter_id\nleft join patient e\n  on a.patient_id = e.patient_id\nleft join provider f\n  on a.encounter_id = f.encounter_id\nleft join {{ ref('terminology__discharge_disposition') }} g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join {{ ref('terminology__admit_source') }} h\n  on c.admit_source_code = h.admit_source_code\nleft join {{ ref('terminology__admit_type') }} i\n  on c.admit_type_code = i.admit_type_code\nleft join {{ ref('terminology__ms_drg') }} j\n  on c.ms_drg_code = j.ms_drg_code\nleft join {{ ref('terminology__apr_drg') }} k\n  on c.apr_drg_code = k.apr_drg_code\nleft join {{ ref('terminology__icd_10_cm')}} icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join {{ ref('terminology__icd_9_cm')}} icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "language": "sql", "refs": [{"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "acute_inpatient__encounter_start_and_end_dates", "package": null, "version": null}, {"name": "medical_claim", "package": null, "version": null}, {"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "acute_inpatient__first_claim_values", "package": null, "version": null}, {"name": "acute_inpatient__last_claim_values", "package": null, "version": null}, {"name": "acute_inpatient__stg_medical_claim", "package": null, "version": null}, {"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "acute_inpatient__stg_eligibility", "package": null, "version": null}, {"name": "acute_inpatient__institutional_encounter_id", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}, {"name": "terminology__discharge_disposition", "package": null, "version": null}, {"name": "terminology__admit_source", "package": null, "version": null}, {"name": "terminology__admit_type", "package": null, "version": null}, {"name": "terminology__ms_drg", "package": null, "version": null}, {"name": "terminology__apr_drg", "package": null, "version": null}, {"name": "terminology__icd_10_cm", "package": null, "version": null}, {"name": "terminology__icd_9_cm", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "seed.the_tuva_project_demo.medical_claim", "model.the_tuva_project.acute_inpatient__first_claim_values", "model.the_tuva_project.acute_inpatient__last_claim_values", "model.the_tuva_project.acute_inpatient__stg_medical_claim", "model.the_tuva_project.acute_inpatient__stg_eligibility", "model.the_tuva_project.acute_inpatient__institutional_encounter_id", "seed.the_tuva_project.terminology__provider", "seed.the_tuva_project.terminology__discharge_disposition", "seed.the_tuva_project.terminology__admit_source", "seed.the_tuva_project.terminology__admit_type", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__apr_drg", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__icd_9_cm"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/final/acute_inpatient__summary.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n),  __dbt__cte__acute_inpatient__stg_eligibility as (\n\n\nselect\n    patient_id\n    , birth_date\n    , gender\n    , race\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n), distinct_encounters as (\n    select distinct\n    a.encounter_id\n    , a.patient_id\n    , b.encounter_start_date\n    , b.encounter_end_date\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id a\ninner join tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_start_and_end_dates b\n  on a.encounter_id = b.encounter_id\n)\n\n, institutional_claim_details as (\n    select\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_npi as facility_npi\n        , first.ms_drg_code as ms_drg_code\n        , first.apr_drg_code as apr_drg_code\n        , first.admit_source_code as admit_source_code\n        , first.admit_type_code as admit_type_code\n        , last.discharge_disposition_code as discharge_disposition_code\n        , sum(paid_amount) as inst_paid_amount\n        , sum(allowed_amount) as inst_allowed_amount\n        , sum(charge_amount) as inst_charge_amount\n        , max(data_source) as data_source\n    from TUVA_PROJECT_DEMO.input_layer.medical_claim a\n    inner join tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    and a.claim_type = 'institutional'\n    inner join tuva_project_demo.claims_preprocessing._int_acute_inpatient_first_claim_values first\n        on b.encounter_id = first.encounter_id\n        and first.claim_row = 1\n    inner join tuva_project_demo.claims_preprocessing._int_acute_inpatient_last_claim_values last\n        on b.encounter_id = last.encounter_id\n        and last.claim_row = 1\n    group by\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_npi\n        , first.ms_drg_code\n        , first.apr_drg_code\n        , first.admit_source_code\n        , first.admit_type_code\n        , last.discharge_disposition_code\n)\n\n, professional_claim_details as (\n    select\n        b.encounter_id\n        , sum(paid_amount) as prof_paid_amount\n        , sum(allowed_amount) as prof_allowed_amount\n        , sum(charge_amount) as prof_charge_amount\n    from __dbt__cte__acute_inpatient__stg_medical_claim a\n    inner join tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    and a.claim_type = 'professional'\ngroup by 1\n)\n\n, patient as (\n    select distinct\n        patient_id\n        , birth_date\n        , gender\n        , race\n    from __dbt__cte__acute_inpatient__stg_eligibility\n    )\n\n, provider as (\n    select\n        a.encounter_id\n        , max(a.facility_npi) as facility_npi\n        , b.provider_first_name\n        , b.provider_last_name\n        , count(distinct facility_npi) as npi_count\n    from tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_encounter_id a\n    left join tuva_project_demo.terminology.provider b\n    on a.facility_npi = b.npi\n    group by 1,3,4\n)\n\nselect\n  a.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, a.patient_id\n, datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.description, icd9cm.long_description) as primary_diagnosis_description\n, f.facility_npi\n, f.provider_first_name\n, f.provider_last_name\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, c.inst_paid_amount + coalesce(d.prof_paid_amount,0) as total_paid_amount\n, c.inst_allowed_amount + coalesce(d.prof_allowed_amount,0) as total_allowed_amount\n, c.inst_charge_amount + coalesce(d.prof_charge_amount,0) as total_charge_amount\n, datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom distinct_encounters a\nleft join institutional_claim_details c\n  on a.encounter_id = c.encounter_id\nleft join professional_claim_details d\n  on a.encounter_id = d.encounter_id\nleft join patient e\n  on a.patient_id = e.patient_id\nleft join provider f\n  on a.encounter_id = f.encounter_id\nleft join tuva_project_demo.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join tuva_project_demo.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join tuva_project_demo.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join tuva_project_demo.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join tuva_project_demo.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join tuva_project_demo.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join tuva_project_demo.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.acute_inpatient__stg_medical_claim", "sql": " __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}, {"id": "model.the_tuva_project.acute_inpatient__stg_eligibility", "sql": " __dbt__cte__acute_inpatient__stg_eligibility as (\n\n\nselect\n    patient_id\n    , birth_date\n    , gender\n    , race\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__claims_with_encounter_data": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__claims_with_encounter_data", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__claims_with_encounter_data.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__claims_with_encounter_data.sql", "unique_id": "model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__claims_with_encounter_data"], "alias": "_int_acute_inpatient_claims_with_encounter_data", "checksum": {"name": "sha256", "checksum": "d97adc06d7b7b31ef547794092bfc9fb4925425f1deabf894753582ed1fe0599"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_claims_with_encounter_data", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "Add all relevant encounter data to each acute inpatient claim_id", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_claims_with_encounter_data", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1302798, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_claims_with_encounter_data", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- *************************************************\n-- This dbt model returns relevant encounter-level\n-- data for every professional or institutional\n-- acute inpatient claim that is part of an encounter\n-- (note that all institutional acute inpatienet claims\n--  are part of an acute inpatient encounter, but only\n--  professional acute inpatient claims that are not\n--  orphan claims and that belong to one and only\n--  one encounter, i.e. have encounter_count = 1,\n--  are part of an acute inpatient encounter).\n-- It returns a table with these columns:\n--      patient_id\n--      claim_id\n--      start_date (date used for merging claims into encounters)\n--      end_date (date used for merging claims into encounters)\n--      encounter_id\n--      encounter_start_date,\n--      encounter_end_date,\n--      encounter_admit_source_code,\n--      encounter_admit_type_code,\n--      encounter_discharge_disposition_code\n-- *************************************************\n\n\n\n\nwith useful_fields_at_claim_id_level as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.admit_type_code,\n  aa.admit_source_code,\n  aa.discharge_disposition_code,\n  aa.start_date,\n  aa.end_date,\n\n  bb.encounter_id,\n\n  cc.encounter_start_date,\n  cc.encounter_end_date\n\nfrom {{ ref('acute_inpatient__institutional_claims') }} aa\n\nleft join\n{{ ref('acute_inpatient__encounter_id') }} bb\non aa.claim_id = bb.claim_id\nand aa.patient_id = bb.patient_id\n\nleft join\n{{ ref('acute_inpatient__encounter_start_and_end_dates') }} cc\non bb.encounter_id = cc.encounter_id\nand bb.patient_id = cc.patient_id\n),\n\n\n\nadmit_codes as (\nselect\n  encounter_id,\n  max(admit_source_code) as encounter_admit_source_code,\n  max(admit_type_code) as encounter_admit_type_code\nfrom useful_fields_at_claim_id_level\nwhere start_date = encounter_start_date\ngroup by encounter_id\n),\n\n\ndischarge_code as (\nselect\n  encounter_id,\n  max(discharge_disposition_code) as encounter_discharge_disposition_code\nfrom useful_fields_at_claim_id_level\nwhere end_date = encounter_end_date\ngroup by encounter_id\n),\n\n\nall_useful_fields_at_claim_id_level as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.encounter_start_date,\n  aa.encounter_end_date,\n\n  bb.encounter_admit_source_code,\n  bb.encounter_admit_type_code,\n  \n  cc.encounter_discharge_disposition_code\n\nfrom useful_fields_at_claim_id_level aa \n     left join admit_codes bb on aa.encounter_id = bb.encounter_id\n     left join discharge_code cc on aa.encounter_id = cc.encounter_id\n)\n\n\n\nselect \n *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom all_useful_fields_at_claim_id_level", "language": "sql", "refs": [{"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "acute_inpatient__encounter_start_and_end_dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.acute_inpatient__institutional_claims", "model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__claims_with_encounter_data.sql", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model returns relevant encounter-level\n-- data for every professional or institutional\n-- acute inpatient claim that is part of an encounter\n-- (note that all institutional acute inpatienet claims\n--  are part of an acute inpatient encounter, but only\n--  professional acute inpatient claims that are not\n--  orphan claims and that belong to one and only\n--  one encounter, i.e. have encounter_count = 1,\n--  are part of an acute inpatient encounter).\n-- It returns a table with these columns:\n--      patient_id\n--      claim_id\n--      start_date (date used for merging claims into encounters)\n--      end_date (date used for merging claims into encounters)\n--      encounter_id\n--      encounter_start_date,\n--      encounter_end_date,\n--      encounter_admit_source_code,\n--      encounter_admit_type_code,\n--      encounter_discharge_disposition_code\n-- *************************************************\n\n\n\n\nwith useful_fields_at_claim_id_level as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.admit_type_code,\n  aa.admit_source_code,\n  aa.discharge_disposition_code,\n  aa.start_date,\n  aa.end_date,\n\n  bb.encounter_id,\n\n  cc.encounter_start_date,\n  cc.encounter_end_date\n\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims aa\n\nleft join\ntuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id bb\non aa.claim_id = bb.claim_id\nand aa.patient_id = bb.patient_id\n\nleft join\ntuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_start_and_end_dates cc\non bb.encounter_id = cc.encounter_id\nand bb.patient_id = cc.patient_id\n),\n\n\n\nadmit_codes as (\nselect\n  encounter_id,\n  max(admit_source_code) as encounter_admit_source_code,\n  max(admit_type_code) as encounter_admit_type_code\nfrom useful_fields_at_claim_id_level\nwhere start_date = encounter_start_date\ngroup by encounter_id\n),\n\n\ndischarge_code as (\nselect\n  encounter_id,\n  max(discharge_disposition_code) as encounter_discharge_disposition_code\nfrom useful_fields_at_claim_id_level\nwhere end_date = encounter_end_date\ngroup by encounter_id\n),\n\n\nall_useful_fields_at_claim_id_level as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.encounter_start_date,\n  aa.encounter_end_date,\n\n  bb.encounter_admit_source_code,\n  bb.encounter_admit_type_code,\n  \n  cc.encounter_discharge_disposition_code\n\nfrom useful_fields_at_claim_id_level aa \n     left join admit_codes bb on aa.encounter_id = bb.encounter_id\n     left join discharge_code cc on aa.encounter_id = cc.encounter_id\n)\n\n\n\nselect \n *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom all_useful_fields_at_claim_id_level", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__data_quality_summary": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__data_quality_summary", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__data_quality_summary.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__data_quality_summary.sql", "unique_id": "model.the_tuva_project.acute_inpatient__data_quality_summary", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__data_quality_summary"], "alias": "_int_acute_inpatient_data_quality_summary", "checksum": {"name": "sha256", "checksum": "ab984a6c67134b7a212088a5bf4405705552af01c04ee582ccee477092557c27"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_data_quality_summary", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "Summary of data quality issues with acute inpatient claims", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_data_quality_summary", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1073582, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_data_quality_summary", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- *************************************************\n-- This dbt model summarizes data quality issues\n-- that could affect claims preprocessing.\n-- The table returns 2 fields:\n--        field\n--        total_count\n--\n-- If we order the results by 'field', the first\n-- 3 rows give us a high level summary:\n--\n--       01 Total acute inpatient institutional claims:\n--             This is the total number of acute inpatient\n--             institutional claims\n--       02 Acute inpatient institutional claims with insights:\n--             This is the number of acute inpatient institutional\n--             claims for which something is not ideal (e.g. they\n--             are missing a claim_start_date) but it's not something\n--             that prevents the claim from being used in the\n--             encounter grouper.\n\n--       03 Acute inpatient institutional claims with problems:\n--             This is the number of acute inpatient institutional\n--             claims that have a data quality problem that\n--             prevents them from being used in the encounter grouper.\n\n-- The rest of the rows in the table give us counts\n-- of the number of acute inpatient institutional claims\n-- that have specific data quality problems.\n-- *************************************************\n\n\n\n\nwith total_acute_inpatient__institutional_claims as (\nselect\n  '01 Total acute inpatient institutional claims' as field,\n  count(*) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\ntotal_claims_with_insights as (\nselect\n  '02 Acute inpatient institutional claims with insights' as field,\n  count(*) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\nwhere dq_insight = 1\n),\n\n\ntotal_claims_with_problems as (\nselect\n  '03 Acute inpatient institutional claims with problems' as field,\n  count(*) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\nwhere dq_problem = 1\n),\n\n\npatient_id_not_unique as (\nselect\n  '04 patient_id_not_unique' as field,\n  sum(patient_id_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\npatient_id_missing as (\nselect\n  '05 patient_id_missing' as field,\n  sum(patient_id_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nclaim_start_date_not_unique as (\nselect\n  '06 claim_start_date_not_unique' as field,\n  sum(claim_start_date_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nclaim_start_date_missing as (\nselect\n  '07 claim_start_date_missing' as field,\n  sum(claim_start_date_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nclaim_end_date_not_unique as (\nselect\n  '08 claim_end_date_not_unique' as field,\n  sum(claim_end_date_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nclaim_end_date_missing as (\nselect\n  '09 claim_end_date_missing' as field,\n  sum(claim_end_date_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nclaim_start_date_after_claim_end_date as (\nselect\n  '10 claim_start_date_after_claim_end_date' as field,\n  sum(claim_start_date_after_claim_end_date) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nadmission_date_not_unique as (\nselect\n  '11 admission_date_not_unique' as field,\n  sum(admission_date_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nadmission_date_missing as (\nselect\n  '12 admission_date_missing' as field,\n  sum(admission_date_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\ndischarge_date_not_unique as (\nselect\n  '13 discharge_date_not_unique' as field,\n  sum(discharge_date_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\ndischarge_date_missing as (\nselect\n  '14 discharge_date_missing' as field,\n  sum(discharge_date_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nadmission_date_after_discharge_date as (\nselect\n  '15 admission_date_after_discharge_date' as field,\n  sum(admission_date_after_discharge_date) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nadmit_type_code_not_unique as (\nselect\n  '16 admit_type_code_not_unique' as field,\n  sum(admit_type_code_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nadmit_type_code_missing as (\nselect\n  '17 admit_type_code_missing' as field,\n  sum(admit_type_code_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nadmit_source_code_not_unique as (\nselect\n  '18 admit_source_code_not_unique' as field,\n  sum(admit_source_code_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nadmit_source_code_missing as (\nselect\n  '19 admit_source_code_missing' as field,\n  sum(admit_source_code_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\ndischarge_disposition_code_not_unique as (\nselect\n  '20 discharge_disposition_code_not_unique' as field,\n  sum(discharge_disposition_code_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\ndischarge_disposition_code_missing as (\nselect\n  '21 discharge_disposition_code_missing' as field,\n  sum(discharge_disposition_code_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nfacility_npi_not_unique as (\nselect\n  '22 facility_npi_not_unique' as field,\n  sum(facility_npi_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nfacility_npi_missing as (\nselect\n  '23 facility_npi_missing' as field,\n  sum(facility_npi_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nclaim_type_not_unique as (\nselect\n  '24 claim_type_not_unique' as field,\n  sum(claim_type_not_unique) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nclaim_type_missing as (\nselect\n  '25 claim_type_missing' as field,\n  sum(claim_type_missing) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nclaim_type_not_institutional as (\nselect\n  '26 claim_type_not_institutional' as field,\n  sum(claim_type_not_institutional) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nstart_date_not_determined as (\nselect\n  '27 start_date_not_determined' as field,\n  sum(start_date_not_determined) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nend_date_not_determined as (\nselect\n  '28 end_date_not_determined' as field,\n  sum(end_date_not_determined) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\nstart_date_after_end_date as (\nselect\n  '29 start_date_after_end_date' as field,\n  sum(start_date_after_end_date) as total_count\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\n\n\nunion_cte as (\nselect *\nfrom total_acute_inpatient__institutional_claims\n\nunion all\n\nselect *\nfrom total_claims_with_insights\n\nunion all\n\nselect *\nfrom total_claims_with_problems\n\nunion all\n\nselect *\nfrom patient_id_not_unique\n\nunion all\n\nselect *\nfrom patient_id_missing\n\nunion all\n\nselect *\nfrom claim_start_date_not_unique\n\nunion all\n\nselect *\nfrom claim_start_date_missing\n\nunion all\n\nselect *\nfrom claim_end_date_not_unique\n\nunion all\n\nselect *\nfrom claim_end_date_missing\n\nunion all\n\nselect *\nfrom claim_start_date_after_claim_end_date\n\nunion all\n\nselect *\nfrom admission_date_not_unique\n\nunion all\n\nselect *\nfrom admission_date_missing\n\nunion all\n\nselect *\nfrom discharge_date_not_unique\n\nunion all\n\nselect *\nfrom discharge_date_missing\n\nunion all\n\nselect *\nfrom admission_date_after_discharge_date\n\nunion all\n\nselect *\nfrom admit_type_code_not_unique\n\nunion all\n\nselect *\nfrom admit_type_code_missing\n\nunion all\n\nselect *\nfrom admit_source_code_not_unique\n\nunion all\n\nselect *\nfrom admit_source_code_missing\n\nunion all\n\nselect *\nfrom discharge_disposition_code_not_unique\n\nunion all\n\nselect *\nfrom discharge_disposition_code_missing\n\nunion all\n\nselect *\nfrom facility_npi_not_unique\n\nunion all\n\nselect *\nfrom facility_npi_missing\n\nunion all\n\nselect *\nfrom claim_type_not_unique\n\nunion all\n\nselect *\nfrom claim_type_missing\n\nunion all\n\nselect *\nfrom claim_type_not_institutional\n\nunion all\n\nselect *\nfrom start_date_not_determined\n\nunion all\n\nselect *\nfrom end_date_not_determined\n\nunion all\n\nselect *\nfrom start_date_after_end_date\n)\n\n\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom union_cte", "language": "sql", "refs": [{"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_claims", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.acute_inpatient__institutional_claims"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__data_quality_summary.sql", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model summarizes data quality issues\n-- that could affect claims preprocessing.\n-- The table returns 2 fields:\n--        field\n--        total_count\n--\n-- If we order the results by 'field', the first\n-- 3 rows give us a high level summary:\n--\n--       01 Total acute inpatient institutional claims:\n--             This is the total number of acute inpatient\n--             institutional claims\n--       02 Acute inpatient institutional claims with insights:\n--             This is the number of acute inpatient institutional\n--             claims for which something is not ideal (e.g. they\n--             are missing a claim_start_date) but it's not something\n--             that prevents the claim from being used in the\n--             encounter grouper.\n\n--       03 Acute inpatient institutional claims with problems:\n--             This is the number of acute inpatient institutional\n--             claims that have a data quality problem that\n--             prevents them from being used in the encounter grouper.\n\n-- The rest of the rows in the table give us counts\n-- of the number of acute inpatient institutional claims\n-- that have specific data quality problems.\n-- *************************************************\n\n\n\n\nwith total_acute_inpatient__institutional_claims as (\nselect\n  '01 Total acute inpatient institutional claims' as field,\n  count(*) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ntotal_claims_with_insights as (\nselect\n  '02 Acute inpatient institutional claims with insights' as field,\n  count(*) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\nwhere dq_insight = 1\n),\n\n\ntotal_claims_with_problems as (\nselect\n  '03 Acute inpatient institutional claims with problems' as field,\n  count(*) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\nwhere dq_problem = 1\n),\n\n\npatient_id_not_unique as (\nselect\n  '04 patient_id_not_unique' as field,\n  sum(patient_id_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\npatient_id_missing as (\nselect\n  '05 patient_id_missing' as field,\n  sum(patient_id_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_start_date_not_unique as (\nselect\n  '06 claim_start_date_not_unique' as field,\n  sum(claim_start_date_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_start_date_missing as (\nselect\n  '07 claim_start_date_missing' as field,\n  sum(claim_start_date_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_end_date_not_unique as (\nselect\n  '08 claim_end_date_not_unique' as field,\n  sum(claim_end_date_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_end_date_missing as (\nselect\n  '09 claim_end_date_missing' as field,\n  sum(claim_end_date_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_start_date_after_claim_end_date as (\nselect\n  '10 claim_start_date_after_claim_end_date' as field,\n  sum(claim_start_date_after_claim_end_date) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmission_date_not_unique as (\nselect\n  '11 admission_date_not_unique' as field,\n  sum(admission_date_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmission_date_missing as (\nselect\n  '12 admission_date_missing' as field,\n  sum(admission_date_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ndischarge_date_not_unique as (\nselect\n  '13 discharge_date_not_unique' as field,\n  sum(discharge_date_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ndischarge_date_missing as (\nselect\n  '14 discharge_date_missing' as field,\n  sum(discharge_date_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmission_date_after_discharge_date as (\nselect\n  '15 admission_date_after_discharge_date' as field,\n  sum(admission_date_after_discharge_date) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmit_type_code_not_unique as (\nselect\n  '16 admit_type_code_not_unique' as field,\n  sum(admit_type_code_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmit_type_code_missing as (\nselect\n  '17 admit_type_code_missing' as field,\n  sum(admit_type_code_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmit_source_code_not_unique as (\nselect\n  '18 admit_source_code_not_unique' as field,\n  sum(admit_source_code_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nadmit_source_code_missing as (\nselect\n  '19 admit_source_code_missing' as field,\n  sum(admit_source_code_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ndischarge_disposition_code_not_unique as (\nselect\n  '20 discharge_disposition_code_not_unique' as field,\n  sum(discharge_disposition_code_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\ndischarge_disposition_code_missing as (\nselect\n  '21 discharge_disposition_code_missing' as field,\n  sum(discharge_disposition_code_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nfacility_npi_not_unique as (\nselect\n  '22 facility_npi_not_unique' as field,\n  sum(facility_npi_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nfacility_npi_missing as (\nselect\n  '23 facility_npi_missing' as field,\n  sum(facility_npi_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_type_not_unique as (\nselect\n  '24 claim_type_not_unique' as field,\n  sum(claim_type_not_unique) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_type_missing as (\nselect\n  '25 claim_type_missing' as field,\n  sum(claim_type_missing) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nclaim_type_not_institutional as (\nselect\n  '26 claim_type_not_institutional' as field,\n  sum(claim_type_not_institutional) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nstart_date_not_determined as (\nselect\n  '27 start_date_not_determined' as field,\n  sum(start_date_not_determined) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nend_date_not_determined as (\nselect\n  '28 end_date_not_determined' as field,\n  sum(end_date_not_determined) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\nstart_date_after_end_date as (\nselect\n  '29 start_date_after_end_date' as field,\n  sum(start_date_after_end_date) as total_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\n\n\nunion_cte as (\nselect *\nfrom total_acute_inpatient__institutional_claims\n\nunion all\n\nselect *\nfrom total_claims_with_insights\n\nunion all\n\nselect *\nfrom total_claims_with_problems\n\nunion all\n\nselect *\nfrom patient_id_not_unique\n\nunion all\n\nselect *\nfrom patient_id_missing\n\nunion all\n\nselect *\nfrom claim_start_date_not_unique\n\nunion all\n\nselect *\nfrom claim_start_date_missing\n\nunion all\n\nselect *\nfrom claim_end_date_not_unique\n\nunion all\n\nselect *\nfrom claim_end_date_missing\n\nunion all\n\nselect *\nfrom claim_start_date_after_claim_end_date\n\nunion all\n\nselect *\nfrom admission_date_not_unique\n\nunion all\n\nselect *\nfrom admission_date_missing\n\nunion all\n\nselect *\nfrom discharge_date_not_unique\n\nunion all\n\nselect *\nfrom discharge_date_missing\n\nunion all\n\nselect *\nfrom admission_date_after_discharge_date\n\nunion all\n\nselect *\nfrom admit_type_code_not_unique\n\nunion all\n\nselect *\nfrom admit_type_code_missing\n\nunion all\n\nselect *\nfrom admit_source_code_not_unique\n\nunion all\n\nselect *\nfrom admit_source_code_missing\n\nunion all\n\nselect *\nfrom discharge_disposition_code_not_unique\n\nunion all\n\nselect *\nfrom discharge_disposition_code_missing\n\nunion all\n\nselect *\nfrom facility_npi_not_unique\n\nunion all\n\nselect *\nfrom facility_npi_missing\n\nunion all\n\nselect *\nfrom claim_type_not_unique\n\nunion all\n\nselect *\nfrom claim_type_missing\n\nunion all\n\nselect *\nfrom claim_type_not_institutional\n\nunion all\n\nselect *\nfrom start_date_not_determined\n\nunion all\n\nselect *\nfrom end_date_not_determined\n\nunion all\n\nselect *\nfrom start_date_after_end_date\n)\n\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom union_cte", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__encounter_data_for_medical_claims", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_data_for_medical_claims.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_data_for_medical_claims.sql", "unique_id": "model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__encounter_data_for_medical_claims"], "alias": "_int_encounter_data_for_medical_claims", "checksum": {"name": "sha256", "checksum": "87c3d7187fb51e55517aea4b56fe8970614c2c1289502d5dba0b73df9a129e1c"}, "config": {"enabled": true, "alias": "_int_encounter_data_for_medical_claims", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "All encounter-related fields that will be added to medical_claim", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_encounter_data_for_medical_claims", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1362784, "relation_name": "tuva_project_demo.claims_preprocessing._int_encounter_data_for_medical_claims", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- *************************************************\n-- This dbt model returns all the columns with relevant\n-- encounter fields that we will append to the medical_claim\n-- table.\n\n-- It returns a table with these columns:\n--      patient_id\n--      claim_id\n--      encounter_type\n--      encounter_id\n--      start_date (date used for merging claims into encounters)\n--      end_date (date used for merging claims into encounters)\n--      encounter_start_date,\n--      encounter_end_date,\n--      encounter_admit_source_code,\n--      encounter_admit_type_code,\n--      encounter_discharge_disposition_code\n--      orphan_claim_flag (always 0 or 1) (never null)\n--      encounter_count (could be 0,1,2,3,...) (never null)\n-- *************************************************\n\n\n\n\nwith acute_inpatient_claims_with_encounter_id as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,  \n-- Relevant encounter-level fields for\n-- professional and institutional acute inpatient\n-- claims that are assigned to an encounter:\n  'acute inpatient' as encounter_type,\n  encounter_id,\n  encounter_start_date,\n  encounter_end_date,\n  encounter_admit_source_code,\n  encounter_admit_type_code,\n  encounter_discharge_disposition_code,\n-- Fields that are only relevant for professional\n-- acute inpatient claims that are not assigned to\n-- an encounter because they are orphan claims or because\n-- they overlap with more than one encounter:\n  0 as orphan_claim_flag,\n  1 as encounter_count\nfrom {{ ref('acute_inpatient__claims_with_encounter_data') }}\n),\n\n\nacute_inpatient_claims_without_encounter_id as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,  \n-- Relevant encounter-level fields for\n-- professional and institutional acute inpatient\n-- claims that are assigned to an encounter:\n  'acute inpatient' encounter_type,\n  cast(null as {{ dbt.type_string() }}) as encounter_id,\n  cast(null as date) as encounter_start_date,\n  cast(null as date) as encounter_end_date,\n  cast(null as {{ dbt.type_string() }}) as encounter_admit_source_code,\n  cast(null as {{ dbt.type_string() }}) as encounter_admit_type_code,\n  cast(null as {{ dbt.type_string() }}) as encounter_discharge_disposition_code,\n-- Fields that are only relevant for professional\n-- acute inpatient claims that are not assigned to\n-- an encounter because they are orphan claims or because\n-- they overlap with more than one encounter:\n  orphan_claim_flag,\n  encounter_count\n  \nfrom {{ ref('acute_inpatient__professional_encounter_id') }}\nwhere (orphan_claim_flag = 1) or (encounter_count > 1)\n)\n\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom acute_inpatient_claims_with_encounter_id\n\nunion all\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom acute_inpatient_claims_without_encounter_id", "language": "sql", "refs": [{"name": "acute_inpatient__claims_with_encounter_data", "package": null, "version": null}, {"name": "acute_inpatient__professional_encounter_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "model.the_tuva_project.acute_inpatient__professional_encounter_id"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_data_for_medical_claims.sql", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model returns all the columns with relevant\n-- encounter fields that we will append to the medical_claim\n-- table.\n\n-- It returns a table with these columns:\n--      patient_id\n--      claim_id\n--      encounter_type\n--      encounter_id\n--      start_date (date used for merging claims into encounters)\n--      end_date (date used for merging claims into encounters)\n--      encounter_start_date,\n--      encounter_end_date,\n--      encounter_admit_source_code,\n--      encounter_admit_type_code,\n--      encounter_discharge_disposition_code\n--      orphan_claim_flag (always 0 or 1) (never null)\n--      encounter_count (could be 0,1,2,3,...) (never null)\n-- *************************************************\n\n\n\n\nwith acute_inpatient_claims_with_encounter_id as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,  \n-- Relevant encounter-level fields for\n-- professional and institutional acute inpatient\n-- claims that are assigned to an encounter:\n  'acute inpatient' as encounter_type,\n  encounter_id,\n  encounter_start_date,\n  encounter_end_date,\n  encounter_admit_source_code,\n  encounter_admit_type_code,\n  encounter_discharge_disposition_code,\n-- Fields that are only relevant for professional\n-- acute inpatient claims that are not assigned to\n-- an encounter because they are orphan claims or because\n-- they overlap with more than one encounter:\n  0 as orphan_claim_flag,\n  1 as encounter_count\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_claims_with_encounter_data\n),\n\n\nacute_inpatient_claims_without_encounter_id as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,  \n-- Relevant encounter-level fields for\n-- professional and institutional acute inpatient\n-- claims that are assigned to an encounter:\n  'acute inpatient' encounter_type,\n  cast(null as TEXT) as encounter_id,\n  cast(null as date) as encounter_start_date,\n  cast(null as date) as encounter_end_date,\n  cast(null as TEXT) as encounter_admit_source_code,\n  cast(null as TEXT) as encounter_admit_type_code,\n  cast(null as TEXT) as encounter_discharge_disposition_code,\n-- Fields that are only relevant for professional\n-- acute inpatient claims that are not assigned to\n-- an encounter because they are orphan claims or because\n-- they overlap with more than one encounter:\n  orphan_claim_flag,\n  encounter_count\n  \nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_professional_encounter_id\nwhere (orphan_claim_flag = 1) or (encounter_count > 1)\n)\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom acute_inpatient_claims_with_encounter_id\n\nunion all\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom acute_inpatient_claims_without_encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__encounter_id": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__encounter_id", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_id.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_id.sql", "unique_id": "model.the_tuva_project.acute_inpatient__encounter_id", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__encounter_id"], "alias": "_int_acute_inpatient_encounter_id", "checksum": {"name": "sha256", "checksum": "29fcb69ad4c06139bfe133afcabcb8c0465b993be74ce93599c6bf68dccc5bae"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_encounter_id", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "Fix encounter_id so each professional claim can only belong to one encounter", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_encounter_id", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.12664, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- *************************************************\n-- This dbt model assigns an encounter_id to each\n-- institutional or professional acute inpatient claim\n-- that is eligible to be part of an encounter.\n-- Professional acute inpatient claims that are\n-- orphan claims (don't overlap with an institutional\n-- acute inpatient claim) or that have\n-- encounter_count > 1 (overlap with more than one different\n-- acute inpatient encounter) are not included here.\n-- It returns a table with these 3 columns:\n--      patient_id\n--      claim_id\n--      encounter_id\n-- *************************************************\n\n\n\n\nselect\n  inst.patient_id,\n  inst.claim_id,\n  med.claim_line_number,\n  inst.encounter_id,\n  '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('acute_inpatient__institutional_encounter_id') }} inst\nleft join {{ ref('acute_inpatient__stg_medical_claim') }} med\n    on inst.claim_id = med.claim_id\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  encounter_id,\n  '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('acute_inpatient__professional_encounter_id') }}\nwhere (orphan_claim_flag = 0) and (encounter_count = 1)", "language": "sql", "refs": [{"name": "acute_inpatient__institutional_encounter_id", "package": null, "version": null}, {"name": "acute_inpatient__stg_medical_claim", "package": null, "version": null}, {"name": "acute_inpatient__professional_encounter_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.acute_inpatient__institutional_encounter_id", "model.the_tuva_project.acute_inpatient__stg_medical_claim", "model.the_tuva_project.acute_inpatient__professional_encounter_id"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_id.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) -- *************************************************\n-- This dbt model assigns an encounter_id to each\n-- institutional or professional acute inpatient claim\n-- that is eligible to be part of an encounter.\n-- Professional acute inpatient claims that are\n-- orphan claims (don't overlap with an institutional\n-- acute inpatient claim) or that have\n-- encounter_count > 1 (overlap with more than one different\n-- acute inpatient encounter) are not included here.\n-- It returns a table with these 3 columns:\n--      patient_id\n--      claim_id\n--      encounter_id\n-- *************************************************\n\n\n\n\nselect\n  inst.patient_id,\n  inst.claim_id,\n  med.claim_line_number,\n  inst.encounter_id,\n  '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_encounter_id inst\nleft join __dbt__cte__acute_inpatient__stg_medical_claim med\n    on inst.claim_id = med.claim_id\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  encounter_id,\n  '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_professional_encounter_id\nwhere (orphan_claim_flag = 0) and (encounter_count = 1)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.acute_inpatient__stg_medical_claim", "sql": " __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__encounter_start_and_end_dates", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_start_and_end_dates.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_start_and_end_dates.sql", "unique_id": "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__encounter_start_and_end_dates"], "alias": "_int_acute_inpatient_encounter_start_and_end_dates", "checksum": {"name": "sha256", "checksum": "e8a099ceacae9d1cdd079df3fe3966d2260a4883688a3446748dfac187ac3d75"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_encounter_start_and_end_dates", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "Defines encounter start and end dates for acute inpatient encounters", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_encounter_start_and_end_dates", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1173742, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_start_and_end_dates", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- *************************************************\n-- This dbt model assigns an encounter_start_date and\n-- an encounter_end_date to each acute inpatient\n-- encounter_id.\n-- This returns a table with 4 fields:\n--      patient_id\n--      encounter_id\n--      encounter_start_date\n--      encounter_end_date\n-- The number of rows in the table should be equal\n-- to the number of acute inpatient encounters.\n-- *************************************************\n\n\nwith add_encounter_id_to_acute_inpatient_encounters as (\nselect\n  aip.claim_id as claim_id,\n  aip.patient_id as patient_id,\n  aip.start_date as start_date,\n  aip.end_date as end_date,\n  eid.encounter_id as encounter_id\nfrom {{ ref('acute_inpatient__institutional_claims') }} aip\nleft join {{ ref('acute_inpatient__institutional_encounter_id') }} eid\n  on aip.patient_id = eid.patient_id\n  and aip.claim_id = eid.claim_id\n),\n\nencounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  min(start_date) as encounter_start_date,\n  max(end_date) as encounter_end_date\nfrom add_encounter_id_to_acute_inpatient_encounters\ngroup by patient_id, encounter_id\n)\n\nselect\n    patient_id\n    , encounter_id\n    , encounter_start_date\n    , encounter_end_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom encounter_start_and_end_dates", "language": "sql", "refs": [{"name": "acute_inpatient__institutional_claims", "package": null, "version": null}, {"name": "acute_inpatient__institutional_encounter_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.acute_inpatient__institutional_claims", "model.the_tuva_project.acute_inpatient__institutional_encounter_id"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__encounter_start_and_end_dates.sql", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model assigns an encounter_start_date and\n-- an encounter_end_date to each acute inpatient\n-- encounter_id.\n-- This returns a table with 4 fields:\n--      patient_id\n--      encounter_id\n--      encounter_start_date\n--      encounter_end_date\n-- The number of rows in the table should be equal\n-- to the number of acute inpatient encounters.\n-- *************************************************\n\n\nwith add_encounter_id_to_acute_inpatient_encounters as (\nselect\n  aip.claim_id as claim_id,\n  aip.patient_id as patient_id,\n  aip.start_date as start_date,\n  aip.end_date as end_date,\n  eid.encounter_id as encounter_id\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims aip\nleft join tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_encounter_id eid\n  on aip.patient_id = eid.patient_id\n  and aip.claim_id = eid.claim_id\n),\n\nencounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  min(start_date) as encounter_start_date,\n  max(end_date) as encounter_end_date\nfrom add_encounter_id_to_acute_inpatient_encounters\ngroup by patient_id, encounter_id\n)\n\nselect\n    patient_id\n    , encounter_id\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom encounter_start_and_end_dates", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__first_claim_values": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__first_claim_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__first_claim_values.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__first_claim_values.sql", "unique_id": "model.the_tuva_project.acute_inpatient__first_claim_values", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__first_claim_values"], "alias": "_int_acute_inpatient_first_claim_values", "checksum": {"name": "sha256", "checksum": "14bbc7addd83908000caa382768bd1215b8f7d70e204a6b07848f86fa24c98f5"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_first_claim_values", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "Orders claims to pull out encounter details (admit type, drg, etc)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_first_claim_values", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1443772, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_first_claim_values", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith first_claim_values as(\r\n    select distinct\r\n        e.encounter_id\r\n        , coalesce(claim_start_date, admission_date) as claim_start\r\n        , diagnosis_code_1\r\n        , diagnosis_code_type\r\n        , admit_source_code\r\n        , admit_type_code\r\n        , facility_npi\r\n        , ms_drg_code\r\n        , apr_drg_code\r\n    from {{ ref('acute_inpatient__encounter_id')}} e\r\n    inner join {{ ref('acute_inpatient__stg_medical_claim') }} m\r\n        on e.claim_id = m.claim_id\r\n    where claim_type = 'institutional'\r\n)\r\n\r\nselect\r\n    encounter_id\r\n    , claim_start\r\n    , diagnosis_code_1\r\n    , diagnosis_code_type\r\n    , admit_source_code\r\n    , admit_type_code\r\n    , facility_npi\r\n    , ms_drg_code\r\n    , apr_drg_code\r\n    , row_number() over (partition by encounter_id order by claim_start) as claim_row\r\nfrom first_claim_values", "language": "sql", "refs": [{"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "acute_inpatient__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__first_claim_values.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n), first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , diagnosis_code_1\n        , diagnosis_code_type\n        , admit_source_code\n        , admit_type_code\n        , facility_npi\n        , ms_drg_code\n        , apr_drg_code\n    from tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id e\n    inner join __dbt__cte__acute_inpatient__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , diagnosis_code_1\n    , diagnosis_code_type\n    , admit_source_code\n    , admit_type_code\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , row_number() over (partition by encounter_id order by claim_start) as claim_row\nfrom first_claim_values", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.acute_inpatient__stg_medical_claim", "sql": " __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__institutional_claims": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__institutional_claims", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__institutional_claims.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__institutional_claims.sql", "unique_id": "model.the_tuva_project.acute_inpatient__institutional_claims", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__institutional_claims"], "alias": "_int_acute_inpatient_institutional_claims", "checksum": {"name": "sha256", "checksum": "7b8e75f9fad7f381b211d8d4378681e187564775bc783bada56831600ee68a25"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_institutional_claims", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "All acute inpatient institutional claim_ids with header values and data quality flags", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_institutional_claims", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1022904, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- *************************************************\n-- This dbt model gives us all acute inpatient institutional claims.\n-- We have one row per claim_id (for all claim_ids belonging to\n-- acute inpatient institutinal claims).\n-- The number of rows in the table is equal to the number of unique\n-- claim_ids (i.e. claim_id is a primary key).\n-- Note that we are assuming that a claim_id is unique across\n-- all people in the datset, i.e.\n-- that no two people can have the same claim_id.\n-- *************************************************\n\nwith acute_inpatient_claim_lines as (\nselect\n  mc.patient_id,\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.claim_start_date,\n  mc.claim_end_date,\n  mc.admission_date,\n  mc.discharge_date,\n  mc.admit_source_code,\n  mc.admit_type_code,\n  mc.discharge_disposition_code,\n  mc.facility_npi,\n  mc.claim_type,\n  mc.data_source\nfrom {{ ref('acute_inpatient__stg_medical_claim') }} mc\ninner join {{ ref('acute_inpatient__stg_service_category')}} sc\n  on mc.claim_id = sc.claim_id\nwhere mc.claim_type = 'institutional'\n  and sc.service_category_2 = 'Acute Inpatient'\n),\n\ndata_quality_flags as (\nselect\n  claim_id,\n-- patient_id_not_unique:\n  case\n    when count(distinct patient_id) > 1 then 1\n    else 0\n  end as patient_id_not_unique,\n-- patient_id_missing:  \n  case\n    when max(patient_id) is null then 1\n    else 0\n  end as patient_id_missing,  \n-- claim_start_date_not_unique:\n  case\n    when count(distinct claim_start_date) > 1 then 1\n    else 0\n  end as claim_start_date_not_unique,\n-- claim_start_date_missing:  \n  case\n    when max(claim_start_date) is null then 1\n    else 0\n  end as claim_start_date_missing,\n-- claim_end_date_not_unique:\n  case\n    when count(distinct claim_end_date) > 1 then 1\n    else 0\n  end as claim_end_date_not_unique,\n-- claim_end_date_missing:  \n  case\n    when max(claim_end_date) is null then 1\n    else 0\n  end as claim_end_date_missing,\n-- claim_start_date_after_claim_end_date:\n  case\n    when min(claim_start_date) > max(claim_end_date) then 1\n    else 0\n  end as claim_start_date_after_claim_end_date,\n-- admission_date_not_unique:\n  case\n    when count(distinct admission_date) > 1 then 1\n    else 0\n  end as admission_date_not_unique,\n-- admission_date_missing:  \n  case\n    when max(admission_date) is null then 1\n    else 0\n  end as admission_date_missing,\n-- discharge_date_not_unique:\n  case\n    when count(distinct discharge_date) > 1 then 1\n    else 0\n  end as discharge_date_not_unique,\n-- discharge_date_missing:  \n  case\n    when max(discharge_date) is null then 1\n    else 0\n  end as discharge_date_missing,\n-- admission_date_after_discharge_date:\n  case\n    when min(admission_date) > max(discharge_date) then 1\n    else 0\n  end as admission_date_after_discharge_date,\n-- admit_type_code_not_unique:\n  case\n    when count(distinct admit_type_code) > 1 then 1\n    else 0\n  end as admit_type_code_not_unique,\n-- admit_type_code_missing:  \n  case\n    when max(admit_type_code) is null then 1\n    else 0\n  end as admit_type_code_missing,  \n-- admit_source_code_not_unique:\n  case\n    when count(distinct admit_source_code) > 1 then 1\n    else 0\n  end as admit_source_code_not_unique,\n-- admit_source_code_missing:  \n  case\n    when max(admit_source_code) is null then 1\n    else 0\n  end as admit_source_code_missing,  \n-- discharge_disposition_code_not_unique:\n  case\n    when count(distinct discharge_disposition_code) > 1 then 1\n    else 0\n  end as discharge_disposition_code_not_unique,\n-- discharge_disposition_code_missing:  \n  case\n    when max(discharge_disposition_code) is null then 1\n    else 0\n  end as discharge_disposition_code_missing,\n-- facility_npi_not_unique:\n  case\n    when count(distinct facility_npi) > 1 then 1\n    else 0\n  end as facility_npi_not_unique,\n-- facility_npi_missing:  \n  case\n    when max(facility_npi) is null then 1\n    else 0\n  end as facility_npi_missing,\n-- claim_type_not_unique:\n  case\n    when count(distinct claim_type) > 1 then 1\n    else 0\n  end as claim_type_not_unique,\n-- claim_type_missing:  \n  case\n    when max(claim_type) is null then 1\n    else 0\n  end as claim_type_missing,\n-- claim_type_not_institutional:\n  case\n    when max(claim_type) <> 'institutional'\n     and min(claim_type) <> 'institutional' then 1\n    else 0\n  end as claim_type_not_institutional\nfrom acute_inpatient_claim_lines\ngroup by claim_id\n),\n\n\nheader_level_values as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  min(admission_date) as admission_date,\n  max(discharge_date) as discharge_date,\n  max(admit_source_code) as admit_source_code,\n  max(admit_type_code) as admit_type_code,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_npi) as facility_npi,\n  max(claim_type) as claim_type,\n  coalesce(min(admission_date),\n           min(claim_start_date)) as start_date,\n  coalesce(max(discharge_date),\n           max(claim_end_date)) as end_date,\n  case\n    when min(admission_date) is not null then 'admission_date'\n    when min(claim_start_date) is not null then 'claim_start_date'\n    else null\n  end as date_used_as_start_date,\n  case\n    when max(discharge_date) is not null then 'discharge_date'\n    when max(claim_end_date) is not null then 'claim_end_date'\n    else null\n  end as date_used_as_end_date,\n  data_source\nfrom acute_inpatient_claim_lines\ngroup by claim_id, data_source\n)\n\nselect\n  h.patient_id as patient_id,\n  h.claim_id as claim_id,  \n  h.claim_start_date as claim_start_date,\n  h.claim_end_date as claim_end_date,\n  h.admission_date as admission_date,\n  h.discharge_date as discharge_date,\n  h.admit_source_code as admit_source_code,\n  h.admit_type_code as admit_type_code,\n  h.discharge_disposition_code as discharge_disposition_code,\n  h.facility_npi as facility_npi,\n  h.claim_type as claim_type,\n  h.start_date as start_date,\n  h.end_date as end_date,\n  h.date_used_as_start_date,\n  h.date_used_as_end_date, \n\n  case\n    when\n      ( (dq.patient_id_not_unique = 1) or\n        (dq.patient_id_missing = 1) or\n        (dq.discharge_disposition_code_not_unique = 1) or\n        (dq.discharge_disposition_code_missing = 1) or\n        (dq.facility_npi_not_unique = 1) or\n        (dq.facility_npi_missing = 1) or\n        (h.date_used_as_start_date is null) or\n\t(h.date_used_as_end_date is null) or\n\t(h.start_date > h.end_date) ) then 1\n    else 0\n  end as dq_problem,\n\n  case\n    when\n      ( (dq.claim_start_date_not_unique = 1) or\n\t(dq.claim_start_date_missing = 1) or\n        (dq.claim_end_date_not_unique = 1) or\n        (dq.claim_end_date_missing = 1) or\n        (dq.claim_start_date_after_claim_end_date = 1) or\n        (dq.admission_date_not_unique = 1) or\n        (dq.admission_date_missing = 1) or\n        (dq.discharge_date_not_unique = 1) or\n        (dq.discharge_date_missing = 1) or\n        (dq.admission_date_after_discharge_date = 1) or\n        (dq.admit_type_code_not_unique = 1) or\n        (dq.admit_type_code_missing = 1) or\n        (dq.admit_source_code_not_unique = 1) or\n        (dq.admit_source_code_missing = 1) or\t\n        (dq.claim_type_not_unique = 1) or\n        (dq.claim_type_missing = 1) or\n        (dq.claim_type_not_institutional = 1) ) then 1\n    else 0\n  end as dq_insight,\n\n  case\n    when (h.date_used_as_start_date is null) then 1\n    else 0\n  end as start_date_not_determined,\n  \n  case\n    when (h.date_used_as_end_date is null) then 1\n    else 0\n  end as end_date_not_determined,\n\n  case\n    when (h.start_date > h.end_date) then 1\n    else 0\n  end as start_date_after_end_date,\n  \n  dq.patient_id_not_unique as patient_id_not_unique,\n  dq.patient_id_missing as patient_id_missing,\n  dq.claim_start_date_not_unique as claim_start_date_not_unique,\n  dq.claim_start_date_missing as claim_start_date_missing,\n  dq.claim_end_date_not_unique as claim_end_date_not_unique,\n  dq.claim_end_date_missing as claim_end_date_missing,\n  dq.claim_start_date_after_claim_end_date\n       as claim_start_date_after_claim_end_date,\n  dq.admission_date_not_unique as admission_date_not_unique,\n  dq.admission_date_missing as admission_date_missing,\n  dq.discharge_date_not_unique as discharge_date_not_unique,\n  dq.discharge_date_missing as discharge_date_missing,\n  dq.admission_date_after_discharge_date\n       as admission_date_after_discharge_date,\n  dq.admit_type_code_not_unique\n       as admit_type_code_not_unique,\n  dq.admit_type_code_missing\n       as admit_type_code_missing,\n  dq.admit_source_code_not_unique\n       as admit_source_code_not_unique,\n  dq.admit_source_code_missing\n       as admit_source_code_missing,\n  dq.discharge_disposition_code_not_unique\n       as discharge_disposition_code_not_unique,\n  dq.discharge_disposition_code_missing\n       as discharge_disposition_code_missing,\n  dq.facility_npi_not_unique as facility_npi_not_unique,\n  dq.facility_npi_missing as facility_npi_missing,\n  dq.claim_type_not_unique as claim_type_not_unique,\n  dq.claim_type_missing as claim_type_missing,\n  dq.claim_type_not_institutional as claim_type_not_institutional,\n  h.data_source,\n  '{{ var('tuva_last_run')}}' as tuva_last_run\n\nfrom header_level_values h\nleft join data_quality_flags dq\n  on h.claim_id = dq.claim_id", "language": "sql", "refs": [{"name": "acute_inpatient__stg_medical_claim", "package": null, "version": null}, {"name": "acute_inpatient__stg_service_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.acute_inpatient__stg_medical_claim", "model.the_tuva_project.acute_inpatient__stg_service_category"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__institutional_claims.sql", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model gives us all acute inpatient institutional claims.\n-- We have one row per claim_id (for all claim_ids belonging to\n-- acute inpatient institutinal claims).\n-- The number of rows in the table is equal to the number of unique\n-- claim_ids (i.e. claim_id is a primary key).\n-- Note that we are assuming that a claim_id is unique across\n-- all people in the datset, i.e.\n-- that no two people can have the same claim_id.\n-- *************************************************\n\nwith  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n),  __dbt__cte__acute_inpatient__stg_service_category as (\n\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper\n), acute_inpatient_claim_lines as (\nselect\n  mc.patient_id,\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.claim_start_date,\n  mc.claim_end_date,\n  mc.admission_date,\n  mc.discharge_date,\n  mc.admit_source_code,\n  mc.admit_type_code,\n  mc.discharge_disposition_code,\n  mc.facility_npi,\n  mc.claim_type,\n  mc.data_source\nfrom __dbt__cte__acute_inpatient__stg_medical_claim mc\ninner join __dbt__cte__acute_inpatient__stg_service_category sc\n  on mc.claim_id = sc.claim_id\nwhere mc.claim_type = 'institutional'\n  and sc.service_category_2 = 'Acute Inpatient'\n),\n\ndata_quality_flags as (\nselect\n  claim_id,\n-- patient_id_not_unique:\n  case\n    when count(distinct patient_id) > 1 then 1\n    else 0\n  end as patient_id_not_unique,\n-- patient_id_missing:  \n  case\n    when max(patient_id) is null then 1\n    else 0\n  end as patient_id_missing,  \n-- claim_start_date_not_unique:\n  case\n    when count(distinct claim_start_date) > 1 then 1\n    else 0\n  end as claim_start_date_not_unique,\n-- claim_start_date_missing:  \n  case\n    when max(claim_start_date) is null then 1\n    else 0\n  end as claim_start_date_missing,\n-- claim_end_date_not_unique:\n  case\n    when count(distinct claim_end_date) > 1 then 1\n    else 0\n  end as claim_end_date_not_unique,\n-- claim_end_date_missing:  \n  case\n    when max(claim_end_date) is null then 1\n    else 0\n  end as claim_end_date_missing,\n-- claim_start_date_after_claim_end_date:\n  case\n    when min(claim_start_date) > max(claim_end_date) then 1\n    else 0\n  end as claim_start_date_after_claim_end_date,\n-- admission_date_not_unique:\n  case\n    when count(distinct admission_date) > 1 then 1\n    else 0\n  end as admission_date_not_unique,\n-- admission_date_missing:  \n  case\n    when max(admission_date) is null then 1\n    else 0\n  end as admission_date_missing,\n-- discharge_date_not_unique:\n  case\n    when count(distinct discharge_date) > 1 then 1\n    else 0\n  end as discharge_date_not_unique,\n-- discharge_date_missing:  \n  case\n    when max(discharge_date) is null then 1\n    else 0\n  end as discharge_date_missing,\n-- admission_date_after_discharge_date:\n  case\n    when min(admission_date) > max(discharge_date) then 1\n    else 0\n  end as admission_date_after_discharge_date,\n-- admit_type_code_not_unique:\n  case\n    when count(distinct admit_type_code) > 1 then 1\n    else 0\n  end as admit_type_code_not_unique,\n-- admit_type_code_missing:  \n  case\n    when max(admit_type_code) is null then 1\n    else 0\n  end as admit_type_code_missing,  \n-- admit_source_code_not_unique:\n  case\n    when count(distinct admit_source_code) > 1 then 1\n    else 0\n  end as admit_source_code_not_unique,\n-- admit_source_code_missing:  \n  case\n    when max(admit_source_code) is null then 1\n    else 0\n  end as admit_source_code_missing,  \n-- discharge_disposition_code_not_unique:\n  case\n    when count(distinct discharge_disposition_code) > 1 then 1\n    else 0\n  end as discharge_disposition_code_not_unique,\n-- discharge_disposition_code_missing:  \n  case\n    when max(discharge_disposition_code) is null then 1\n    else 0\n  end as discharge_disposition_code_missing,\n-- facility_npi_not_unique:\n  case\n    when count(distinct facility_npi) > 1 then 1\n    else 0\n  end as facility_npi_not_unique,\n-- facility_npi_missing:  \n  case\n    when max(facility_npi) is null then 1\n    else 0\n  end as facility_npi_missing,\n-- claim_type_not_unique:\n  case\n    when count(distinct claim_type) > 1 then 1\n    else 0\n  end as claim_type_not_unique,\n-- claim_type_missing:  \n  case\n    when max(claim_type) is null then 1\n    else 0\n  end as claim_type_missing,\n-- claim_type_not_institutional:\n  case\n    when max(claim_type) <> 'institutional'\n     and min(claim_type) <> 'institutional' then 1\n    else 0\n  end as claim_type_not_institutional\nfrom acute_inpatient_claim_lines\ngroup by claim_id\n),\n\n\nheader_level_values as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  min(admission_date) as admission_date,\n  max(discharge_date) as discharge_date,\n  max(admit_source_code) as admit_source_code,\n  max(admit_type_code) as admit_type_code,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_npi) as facility_npi,\n  max(claim_type) as claim_type,\n  coalesce(min(admission_date),\n           min(claim_start_date)) as start_date,\n  coalesce(max(discharge_date),\n           max(claim_end_date)) as end_date,\n  case\n    when min(admission_date) is not null then 'admission_date'\n    when min(claim_start_date) is not null then 'claim_start_date'\n    else null\n  end as date_used_as_start_date,\n  case\n    when max(discharge_date) is not null then 'discharge_date'\n    when max(claim_end_date) is not null then 'claim_end_date'\n    else null\n  end as date_used_as_end_date,\n  data_source\nfrom acute_inpatient_claim_lines\ngroup by claim_id, data_source\n)\n\nselect\n  h.patient_id as patient_id,\n  h.claim_id as claim_id,  \n  h.claim_start_date as claim_start_date,\n  h.claim_end_date as claim_end_date,\n  h.admission_date as admission_date,\n  h.discharge_date as discharge_date,\n  h.admit_source_code as admit_source_code,\n  h.admit_type_code as admit_type_code,\n  h.discharge_disposition_code as discharge_disposition_code,\n  h.facility_npi as facility_npi,\n  h.claim_type as claim_type,\n  h.start_date as start_date,\n  h.end_date as end_date,\n  h.date_used_as_start_date,\n  h.date_used_as_end_date, \n\n  case\n    when\n      ( (dq.patient_id_not_unique = 1) or\n        (dq.patient_id_missing = 1) or\n        (dq.discharge_disposition_code_not_unique = 1) or\n        (dq.discharge_disposition_code_missing = 1) or\n        (dq.facility_npi_not_unique = 1) or\n        (dq.facility_npi_missing = 1) or\n        (h.date_used_as_start_date is null) or\n\t(h.date_used_as_end_date is null) or\n\t(h.start_date > h.end_date) ) then 1\n    else 0\n  end as dq_problem,\n\n  case\n    when\n      ( (dq.claim_start_date_not_unique = 1) or\n\t(dq.claim_start_date_missing = 1) or\n        (dq.claim_end_date_not_unique = 1) or\n        (dq.claim_end_date_missing = 1) or\n        (dq.claim_start_date_after_claim_end_date = 1) or\n        (dq.admission_date_not_unique = 1) or\n        (dq.admission_date_missing = 1) or\n        (dq.discharge_date_not_unique = 1) or\n        (dq.discharge_date_missing = 1) or\n        (dq.admission_date_after_discharge_date = 1) or\n        (dq.admit_type_code_not_unique = 1) or\n        (dq.admit_type_code_missing = 1) or\n        (dq.admit_source_code_not_unique = 1) or\n        (dq.admit_source_code_missing = 1) or\t\n        (dq.claim_type_not_unique = 1) or\n        (dq.claim_type_missing = 1) or\n        (dq.claim_type_not_institutional = 1) ) then 1\n    else 0\n  end as dq_insight,\n\n  case\n    when (h.date_used_as_start_date is null) then 1\n    else 0\n  end as start_date_not_determined,\n  \n  case\n    when (h.date_used_as_end_date is null) then 1\n    else 0\n  end as end_date_not_determined,\n\n  case\n    when (h.start_date > h.end_date) then 1\n    else 0\n  end as start_date_after_end_date,\n  \n  dq.patient_id_not_unique as patient_id_not_unique,\n  dq.patient_id_missing as patient_id_missing,\n  dq.claim_start_date_not_unique as claim_start_date_not_unique,\n  dq.claim_start_date_missing as claim_start_date_missing,\n  dq.claim_end_date_not_unique as claim_end_date_not_unique,\n  dq.claim_end_date_missing as claim_end_date_missing,\n  dq.claim_start_date_after_claim_end_date\n       as claim_start_date_after_claim_end_date,\n  dq.admission_date_not_unique as admission_date_not_unique,\n  dq.admission_date_missing as admission_date_missing,\n  dq.discharge_date_not_unique as discharge_date_not_unique,\n  dq.discharge_date_missing as discharge_date_missing,\n  dq.admission_date_after_discharge_date\n       as admission_date_after_discharge_date,\n  dq.admit_type_code_not_unique\n       as admit_type_code_not_unique,\n  dq.admit_type_code_missing\n       as admit_type_code_missing,\n  dq.admit_source_code_not_unique\n       as admit_source_code_not_unique,\n  dq.admit_source_code_missing\n       as admit_source_code_missing,\n  dq.discharge_disposition_code_not_unique\n       as discharge_disposition_code_not_unique,\n  dq.discharge_disposition_code_missing\n       as discharge_disposition_code_missing,\n  dq.facility_npi_not_unique as facility_npi_not_unique,\n  dq.facility_npi_missing as facility_npi_missing,\n  dq.claim_type_not_unique as claim_type_not_unique,\n  dq.claim_type_missing as claim_type_missing,\n  dq.claim_type_not_institutional as claim_type_not_institutional,\n  h.data_source,\n  '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n\nfrom header_level_values h\nleft join data_quality_flags dq\n  on h.claim_id = dq.claim_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.acute_inpatient__stg_medical_claim", "sql": " __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}, {"id": "model.the_tuva_project.acute_inpatient__stg_service_category", "sql": " __dbt__cte__acute_inpatient__stg_service_category as (\n\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__institutional_encounter_id": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__institutional_encounter_id", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__institutional_encounter_id.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__institutional_encounter_id.sql", "unique_id": "model.the_tuva_project.acute_inpatient__institutional_encounter_id", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__institutional_encounter_id"], "alias": "_int_acute_inpatient_institutional_encounter_id", "checksum": {"name": "sha256", "checksum": "32836827d0aace3676653b154255c0db0b9cfde31f8a66384c7d13b3d18ce216"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_institutional_encounter_id", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "Assigns encounter_id to every acute inpatient institutional claim", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_institutional_encounter_id", "tags": ["acute_inpatient", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.112522, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_encounter_id", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- *************************************************\n-- This dbt model groups acute inpatient institutional\n-- claims into encounters. It assigns an encounter_id\n-- to each acute inpatient institutional claim.\n-- This returns a table with 3 fields:\n--      patient_id\n--      claim_id\n--      encounter_id\n-- The number of rows in the table should be equal\n-- to the number of acute inpatient institutional claims.\n-- *************************************************\n\n\nwith add_row_num as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,\n  discharge_disposition_code,\n  facility_npi,\n  row_number() over (partition by patient_id order by end_date, start_date, claim_id) as row_num\nfrom {{ ref('acute_inpatient__institutional_claims') }}\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims with same end_date and same facility_npi should be merged:\n    when (aa.end_date = bb.end_date\n          and aa.facility_npi = bb.facility_npi) then 1\n\n    -- Claims with different end_date and start_date that are\n    -- adjacent (i.e. separated by 1 day) should be merged:\n    when  ( {{ dbt.dateadd(datepart= 'day', interval=1, from_date_or_timestamp='aa.end_date') }}  = bb.start_date\n          and aa.facility_npi = bb.facility_npi\n\t  and aa.discharge_disposition_code = '30') then 1\n\n    -- Claims with different end_date \n    -- should be merged if they overlap:\n    when ( (aa.end_date <> bb.end_date) and \n           (aa.end_date >= bb.start_date) and --overlap requirement\n           (aa.facility_npi = bb.facility_npi)\n\t )then 1\n    else 0\n  end as merge_flag\nfrom add_row_num aa\n     inner join add_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num < bb.row_num\n),\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom add_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nclose_flags as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.discharge_disposition_code,\n  aa.facility_npi,\n  aa.row_num,\n  case when (bb.claim_id is null and cc.claim_id is null) then 1\n       else 0\n  end as close_flag\n\nfrom add_row_num aa\n\nleft join claim_ids_that_merge_with_larger_row_num bb\non aa.claim_id = bb.claim_id\n\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num cc\non aa.claim_id = cc.claim_id\n),\n\n\njoin_every_row_to_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom close_flags aa inner join close_flags bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_row_num_for_every_claim as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_every_claim as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom close_flags aa\n     left join find_min_closing_row_num_for_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_every_claim aa\n     left join add_min_closing_row_to_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.min_closing_row = bb.row_num\n)\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_encounter_id", "language": "sql", "refs": [{"name": "acute_inpatient__institutional_claims", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd"], "nodes": ["model.the_tuva_project.acute_inpatient__institutional_claims"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__institutional_encounter_id.sql", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model groups acute inpatient institutional\n-- claims into encounters. It assigns an encounter_id\n-- to each acute inpatient institutional claim.\n-- This returns a table with 3 fields:\n--      patient_id\n--      claim_id\n--      encounter_id\n-- The number of rows in the table should be equal\n-- to the number of acute inpatient institutional claims.\n-- *************************************************\n\n\nwith add_row_num as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,\n  discharge_disposition_code,\n  facility_npi,\n  row_number() over (partition by patient_id order by end_date, start_date, claim_id) as row_num\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional_claims\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims with same end_date and same facility_npi should be merged:\n    when (aa.end_date = bb.end_date\n          and aa.facility_npi = bb.facility_npi) then 1\n\n    -- Claims with different end_date and start_date that are\n    -- adjacent (i.e. separated by 1 day) should be merged:\n    when  ( \n\n    dateadd(\n        day,\n        1,\n        aa.end_date\n        )\n\n  = bb.start_date\n          and aa.facility_npi = bb.facility_npi\n\t  and aa.discharge_disposition_code = '30') then 1\n\n    -- Claims with different end_date \n    -- should be merged if they overlap:\n    when ( (aa.end_date <> bb.end_date) and \n           (aa.end_date >= bb.start_date) and --overlap requirement\n           (aa.facility_npi = bb.facility_npi)\n\t )then 1\n    else 0\n  end as merge_flag\nfrom add_row_num aa\n     inner join add_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num < bb.row_num\n),\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom add_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nclose_flags as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.discharge_disposition_code,\n  aa.facility_npi,\n  aa.row_num,\n  case when (bb.claim_id is null and cc.claim_id is null) then 1\n       else 0\n  end as close_flag\n\nfrom add_row_num aa\n\nleft join claim_ids_that_merge_with_larger_row_num bb\non aa.claim_id = bb.claim_id\n\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num cc\non aa.claim_id = cc.claim_id\n),\n\n\njoin_every_row_to_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom close_flags aa inner join close_flags bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_row_num_for_every_claim as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_every_claim as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom close_flags aa\n     left join find_min_closing_row_num_for_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_every_claim aa\n     left join add_min_closing_row_to_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.min_closing_row = bb.row_num\n)\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__last_claim_values": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__last_claim_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__last_claim_values.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__last_claim_values.sql", "unique_id": "model.the_tuva_project.acute_inpatient__last_claim_values", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__last_claim_values"], "alias": "_int_acute_inpatient_last_claim_values", "checksum": {"name": "sha256", "checksum": "244ee5c82b9ccafe2076fb6158f207ecfe83137d4cdab3a1bb6dee7636d29e4c"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_last_claim_values", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "Orders claims to pull out encounter details (admit type, drg, etc)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_last_claim_values", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1497576, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_last_claim_values", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith first_claim_values as(\r\n    select distinct\r\n        e.encounter_id\r\n        , coalesce(claim_start_date, admission_date) as claim_start\r\n        , discharge_disposition_code\r\n    from {{ ref('acute_inpatient__encounter_id')}} e\r\n    inner join {{ ref('acute_inpatient__stg_medical_claim') }} m\r\n        on e.claim_id = m.claim_id\r\n    where claim_type = 'institutional'\r\n)\r\n\r\nselect\r\n    encounter_id\r\n    , claim_start\r\n    , discharge_disposition_code\r\n    , row_number() over (partition by encounter_id order by claim_start desc) as claim_row\r\nfrom first_claim_values", "language": "sql", "refs": [{"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "acute_inpatient__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__last_claim_values.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n), first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , discharge_disposition_code\n    from tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id e\n    inner join __dbt__cte__acute_inpatient__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , discharge_disposition_code\n    , row_number() over (partition by encounter_id order by claim_start desc) as claim_row\nfrom first_claim_values", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.acute_inpatient__stg_medical_claim", "sql": " __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__professional_encounter_id": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "acute_inpatient__professional_encounter_id", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__professional_encounter_id.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__professional_encounter_id.sql", "unique_id": "model.the_tuva_project.acute_inpatient__professional_encounter_id", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "intermediate", "acute_inpatient__professional_encounter_id"], "alias": "_int_acute_inpatient_professional_encounter_id", "checksum": {"name": "sha256", "checksum": "a400d2dacc8d1a91a34cb8db6f87b3f09c43b95f74e863f42485cccae09ef773"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_professional_encounter_id", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "Assigns encounter_id to every acute inpatient professional claim", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_professional_encounter_id", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1212127, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_professional_encounter_id", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- *************************************************\n-- This dbt model assigns professional acute inpatient\n-- claims to acute inpatient encounters.\n-- Some acute inpatient professional claims do not fall\n-- within an acute inpatient encounter. We call these\n-- orphan claims, and they do not have an encounter_id.\n-- Some acute inpatient professional claims fall within\n-- more than one acute inpatient encounter. Since we do not\n-- know what encounter these claims should be mapped to\n-- we do not assign them an encounter_id. These claims\n-- have encounter_count > 1.\n-- This model returns a table with 5 fields:\n--      patient_id\n--      claim_id\n--      encounter_id (is null for orphan claims or claims\n--                    that fall within more than one encounter)\n--      orphan_claim_flag (is always 0 or 1)\n--      encounter_count (an integer that represents the number\n--                       of acute inpatient encounters this\n--                       professional claim could fall into:\n--                       could be 0,1,2,3,...  but is never null\n--                       for acute inpatient professional claims)\n-- *************************************************\n\n\n\n\nwith acute_inpatient_professional_claim_ids as (\nselect distinct \n    claim_id\n    , claim_line_number\nfrom {{ ref('acute_inpatient__stg_service_category') }} \nwhere claim_type = 'professional'\n  and service_category_2 = 'Acute Inpatient'\n),\n\nacute_inpatient_professional_claim_lines as (\nselect\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.patient_id,\n  mc.claim_start_date as start_date,\n  mc.claim_end_date as end_date\t   \nfrom {{ ref('acute_inpatient__stg_medical_claim') }} mc\ninner join acute_inpatient_professional_claim_ids prof\n  on mc.claim_id = prof.claim_id\n  and mc.claim_line_number = prof.claim_line_number\n),\n\n\nacute_inpatient_professional_claim_dates as (\nselect\n  claim_id,\n  claim_line_number,\n  patient_id,\n  min(start_date) as start_date,\n  max(end_date) as end_date\nfrom acute_inpatient_professional_claim_lines\ngroup by claim_id, claim_line_number, patient_id\n),\n\n\nroll_up_professional_claims_to_institutional_claims as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  bb.encounter_id,\n  case\n    when bb.encounter_id is null then 1\n    else 0\n  end as orphan_claim_flag\nfrom acute_inpatient_professional_claim_dates aa\nleft join {{ ref('acute_inpatient__encounter_start_and_end_dates') }} bb\n  on aa.patient_id = bb.patient_id\n  and (coalesce(aa.start_date, aa.end_date) between bb.encounter_start_date and bb.encounter_end_date)\n  and (coalesce(aa.end_date, aa.start_date) between bb.encounter_start_date and bb.encounter_end_date)\n),\n\nprofessional_claims_in_more_than_one_encounter as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  min(start_date) as start_date,\n  max(end_date) as end_date,\n  count(distinct encounter_id) as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims\ngroup by patient_id, claim_line_number, claim_id\nhaving count(distinct encounter_id) > 1\n),\n\n\nprofessional_claims_not_in_more_than_one_encounter as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.orphan_claim_flag,\n  case\n    when (aa.orphan_claim_flag = 1) then 0\n    else 1\n  end as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims aa\nleft join professional_claims_in_more_than_one_encounter bb\non aa.claim_id = bb.claim_id\nand aa.claim_line_number = bb.claim_line_number\nand aa.patient_id = bb.patient_id\nwhere (bb.patient_id is null) and (bb.claim_id is null)\n),\n\n\nall_acute_inpatient_professional_claims as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  encounter_id,\n  orphan_claim_flag,\n  encounter_count\nfrom professional_claims_not_in_more_than_one_encounter\n\nunion all\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  null as encounter_id,\n  0 as orphan_claim_count,\n  encounter_count\nfrom professional_claims_in_more_than_one_encounter\n)\n\n\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom all_acute_inpatient_professional_claims", "language": "sql", "refs": [{"name": "acute_inpatient__stg_service_category", "package": null, "version": null}, {"name": "acute_inpatient__stg_medical_claim", "package": null, "version": null}, {"name": "acute_inpatient__encounter_start_and_end_dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.acute_inpatient__stg_service_category", "model.the_tuva_project.acute_inpatient__stg_medical_claim", "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/intermediate/acute_inpatient__professional_encounter_id.sql", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model assigns professional acute inpatient\n-- claims to acute inpatient encounters.\n-- Some acute inpatient professional claims do not fall\n-- within an acute inpatient encounter. We call these\n-- orphan claims, and they do not have an encounter_id.\n-- Some acute inpatient professional claims fall within\n-- more than one acute inpatient encounter. Since we do not\n-- know what encounter these claims should be mapped to\n-- we do not assign them an encounter_id. These claims\n-- have encounter_count > 1.\n-- This model returns a table with 5 fields:\n--      patient_id\n--      claim_id\n--      encounter_id (is null for orphan claims or claims\n--                    that fall within more than one encounter)\n--      orphan_claim_flag (is always 0 or 1)\n--      encounter_count (an integer that represents the number\n--                       of acute inpatient encounters this\n--                       professional claim could fall into:\n--                       could be 0,1,2,3,...  but is never null\n--                       for acute inpatient professional claims)\n-- *************************************************\n\n\n\n\nwith  __dbt__cte__acute_inpatient__stg_service_category as (\n\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper\n),  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n), acute_inpatient_professional_claim_ids as (\nselect distinct \n    claim_id\n    , claim_line_number\nfrom __dbt__cte__acute_inpatient__stg_service_category \nwhere claim_type = 'professional'\n  and service_category_2 = 'Acute Inpatient'\n),\n\nacute_inpatient_professional_claim_lines as (\nselect\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.patient_id,\n  mc.claim_start_date as start_date,\n  mc.claim_end_date as end_date\t   \nfrom __dbt__cte__acute_inpatient__stg_medical_claim mc\ninner join acute_inpatient_professional_claim_ids prof\n  on mc.claim_id = prof.claim_id\n  and mc.claim_line_number = prof.claim_line_number\n),\n\n\nacute_inpatient_professional_claim_dates as (\nselect\n  claim_id,\n  claim_line_number,\n  patient_id,\n  min(start_date) as start_date,\n  max(end_date) as end_date\nfrom acute_inpatient_professional_claim_lines\ngroup by claim_id, claim_line_number, patient_id\n),\n\n\nroll_up_professional_claims_to_institutional_claims as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  bb.encounter_id,\n  case\n    when bb.encounter_id is null then 1\n    else 0\n  end as orphan_claim_flag\nfrom acute_inpatient_professional_claim_dates aa\nleft join tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_start_and_end_dates bb\n  on aa.patient_id = bb.patient_id\n  and (coalesce(aa.start_date, aa.end_date) between bb.encounter_start_date and bb.encounter_end_date)\n  and (coalesce(aa.end_date, aa.start_date) between bb.encounter_start_date and bb.encounter_end_date)\n),\n\nprofessional_claims_in_more_than_one_encounter as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  min(start_date) as start_date,\n  max(end_date) as end_date,\n  count(distinct encounter_id) as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims\ngroup by patient_id, claim_line_number, claim_id\nhaving count(distinct encounter_id) > 1\n),\n\n\nprofessional_claims_not_in_more_than_one_encounter as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.orphan_claim_flag,\n  case\n    when (aa.orphan_claim_flag = 1) then 0\n    else 1\n  end as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims aa\nleft join professional_claims_in_more_than_one_encounter bb\non aa.claim_id = bb.claim_id\nand aa.claim_line_number = bb.claim_line_number\nand aa.patient_id = bb.patient_id\nwhere (bb.patient_id is null) and (bb.claim_id is null)\n),\n\n\nall_acute_inpatient_professional_claims as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  encounter_id,\n  orphan_claim_flag,\n  encounter_count\nfrom professional_claims_not_in_more_than_one_encounter\n\nunion all\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  null as encounter_id,\n  0 as orphan_claim_count,\n  encounter_count\nfrom professional_claims_in_more_than_one_encounter\n)\n\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom all_acute_inpatient_professional_claims", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.acute_inpatient__stg_service_category", "sql": " __dbt__cte__acute_inpatient__stg_service_category as (\n\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper\n)"}, {"id": "model.the_tuva_project.acute_inpatient__stg_medical_claim", "sql": " __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__stg_eligibility": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "acute_inpatient__stg_eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_eligibility.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_eligibility.sql", "unique_id": "model.the_tuva_project.acute_inpatient__stg_eligibility", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "staging", "acute_inpatient__stg_eligibility"], "alias": "acute_inpatient__stg_eligibility", "checksum": {"name": "sha256", "checksum": "da19d68fb195a59a154da1c1138ac88b33b7b8472f808d7adbb7f34ca199ae9d"}, "config": {"enabled": true, "alias": "acute_inpatient__stg_eligibility", "schema": null, "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"alias": "acute_inpatient__stg_eligibility", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1534426, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n    patient_id\n    , birth_date\n    , gender\n    , race\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('normalized_input__eligibility') }}", "language": "sql", "refs": [{"name": "normalized_input__eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_eligibility.sql", "compiled": true, "compiled_code": "\n\nselect\n    patient_id\n    , birth_date\n    , gender\n    , race\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_eligibility", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__stg_medical_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "acute_inpatient__stg_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_medical_claim.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_medical_claim.sql", "unique_id": "model.the_tuva_project.acute_inpatient__stg_medical_claim", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "staging", "acute_inpatient__stg_medical_claim"], "alias": "acute_inpatient__stg_medical_claim", "checksum": {"name": "sha256", "checksum": "df60d74ac5218cec27b0cd8cac92064235e947bc335535e222c9316fd0d77533"}, "config": {"enabled": true, "alias": "acute_inpatient__stg_medical_claim", "schema": null, "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"alias": "acute_inpatient__stg_medical_claim", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.157086, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('normalized_input__medical_claim') }}", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_medical_claim.sql", "compiled": true, "compiled_code": "\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.acute_inpatient__stg_service_category": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "acute_inpatient__stg_service_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_service_category.sql", "original_file_path": "models/claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_service_category.sql", "unique_id": "model.the_tuva_project.acute_inpatient__stg_service_category", "fqn": ["the_tuva_project", "claims_preprocessing", "acute_inpatient", "staging", "acute_inpatient__stg_service_category"], "alias": "acute_inpatient__stg_service_category", "checksum": {"name": "sha256", "checksum": "2209519a82d2ab3d0f216a7634d07152514384339013c7fed208cffecb3646d3"}, "config": {"enabled": true, "alias": "acute_inpatient__stg_service_category", "schema": null, "database": "tuva_project_demo", "tags": ["acute_inpatient", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["acute_inpatient", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"alias": "acute_inpatient__stg_service_category", "tags": ["acute_inpatient", "claims_preprocessing"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1604042, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__service_category_grouper')}}", "language": "sql", "refs": [{"name": "service_category__service_category_grouper", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__service_category_grouper"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/acute_inpatient/staging/acute_inpatient__stg_service_category.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__summary": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "emergency_department__summary", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/final/emergency_department__summary.sql", "original_file_path": "models/claims_preprocessing/emergency_department/final/emergency_department__summary.sql", "unique_id": "model.the_tuva_project.emergency_department__summary", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "final", "emergency_department__summary"], "alias": "emergency_department_summary", "checksum": {"name": "sha256", "checksum": "8ebd499a3126efc3cee2bf74ba9ef7d569bb29e63d71db01f89a18215705e715"}, "config": {"enabled": true, "alias": "emergency_department_summary", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "This table pulls together all the data needed to perform acute inpatient analytics into a single table.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier for the emergency_department encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "Date when the patient was admitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "Date when the patient was discharged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_age": {"name": "admit_age", "description": "The age of the patient as of their admission date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The gender of the patient.", "meta": {"terminology": "/terminology/demographics/gender"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "race": {"name": "race", "description": "The race of the patient.", "meta": {"terminology": "/terminology/demographics/race"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "The NPI for the facility where the encounter occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_first_name": {"name": "provider_first_name", "description": "The first name of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_last_name": {"name": "provider_last_name", "description": "The last name of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "The MS-DRG code associted with the inpatient visit", "meta": {"terminology": "/terminology/conditions-and-procedures/ms-drg"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_description": {"name": "ms_drg_description", "description": "The MS-DRG description associted with the inpatient visit", "meta": {"terminology": "/terminology/conditions-and-procedures/ms-drg"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medical_surgical": {"name": "medical_surgical", "description": "Indicates whether the MS-DRG is medical or surgical in nature.", "meta": {"terminology": "/terminology/conditions-and-procedures/ms-drg"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apr_drg_code": {"name": "apr_drg_code", "description": "The APR-DRG code associted with the inpatient visit", "meta": {"terminology": "/terminology/conditions-and-procedures/apr-drg"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apr_drg_description": {"name": "apr_drg_description", "description": "The APR-DRG description associted with the inpatient visit", "meta": {"terminology": "/terminology/conditions-and-procedures/apr-drg"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "Admission source code for the encounter.", "meta": {"terminology": "/terminology/administrative-codes/admit-source"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_source_description": {"name": "admit_source_description", "description": "Admission source description for the encounter.", "meta": {"terminology": "/terminology/administrative-codes/admit-source"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "Admission type code for the encounter.", "meta": {"terminology": "/terminology/administrative-codes/admit-type"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_type_description": {"name": "admit_type_description", "description": "Admission type description for the encounter.", "meta": {"terminology": "/terminology/administrative-codes/admit-type"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "Discharge disposition code for the encounter.", "meta": {"terminology": "/terminology/administrative-codes/discharge-disposition"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_description": {"name": "discharge_disposition_description", "description": "Discharge disposition description for the encounter.", "meta": {"terminology": "/terminology/administrative-codes/discharge-disposition"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_paid_amount": {"name": "total_paid_amount", "description": "The total paid amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_allowed_amount": {"name": "total_allowed_amount", "description": "The total allowed amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_charge_amount": {"name": "total_charge_amount", "description": "The total charge amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "The length of stay for the encoujnter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mortality_flag": {"name": "mortality_flag", "description": "1 if a patient died during the encounter, 0 otherwise.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically named after the payer and state \"BCBS Tennessee\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "emergency_department_summary", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1719856, "relation_name": "tuva_project_demo.claims_preprocessing.emergency_department_summary", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith distinct_encounters as (\r\nselect distinct\r\n  a.encounter_id\r\n, a.patient_id\r\n, b.encounter_start_date\r\n, b.encounter_end_date\r\nfrom {{ ref('emergency_department__int_encounter_id') }} a\r\ninner join {{ ref('emergency_department__int_encounter_start_and_end_dates') }} b\r\n  on a.encounter_id = b.encounter_id\r\n)\r\n\r\n, institutional_claim_details as (\r\n    select\r\n        b.encounter_id\r\n        , first.diagnosis_code_1\r\n        , first.diagnosis_code_type\r\n        , first.facility_npi as facility_npi\r\n        , first.ms_drg_code as ms_drg_code\r\n        , first.apr_drg_code as apr_drg_code\r\n        , first.admit_source_code as admit_source_code\r\n        , first.admit_type_code as admit_type_code\r\n        , last.discharge_disposition_code as discharge_disposition_code\r\n        , sum(paid_amount) as inst_paid_amount\r\n        , sum(allowed_amount) as inst_allowed_amount\r\n        , sum(charge_amount) as inst_charge_amount\r\n        , max(data_source) as data_source\r\n    from {{ ref('medical_claim') }} a\r\n    inner join {{ ref('emergency_department__int_encounter_id') }} b\r\n        on a.claim_id = b.claim_id\r\n        and a.claim_line_number = b.claim_line_number\r\n        and a.claim_type = 'institutional'\r\n    inner join {{ ref('emergency_department__int_first_claim_values') }} first\r\n        on b.encounter_id = first.encounter_id\r\n        and first.claim_row = 1\r\n    inner join {{ ref('emergency_department__int_last_claim_values') }} last\r\n        on b.encounter_id = last.encounter_id\r\n        and last.claim_row = 1\r\n    group by\r\n    b.encounter_id\r\n    , first.diagnosis_code_1\r\n    , first.diagnosis_code_type\r\n    , first.facility_npi\r\n    , first.ms_drg_code\r\n    , first.apr_drg_code\r\n    , first.admit_source_code\r\n    , first.admit_type_code\r\n    , last.discharge_disposition_code\r\n)\r\n\r\n, professional_claim_details as (\r\nselect\r\n  b.encounter_id\r\n, sum(paid_amount) as prof_paid_amount\r\n, sum(allowed_amount) as prof_allowed_amount\r\n, sum(charge_amount) as prof_charge_amount\r\nfrom {{ ref('medical_claim') }} a\r\ninner join {{ ref('emergency_department__int_encounter_id') }} b\r\n  on a.claim_id = b.claim_id\r\n  and a.claim_line_number = b.claim_line_number\r\n  and a.claim_type = 'professional'\r\ngroup by 1\r\n)\r\n\r\n, patient as (\r\nselect distinct\r\n  patient_id\r\n, birth_date\r\n, gender\r\n, race\r\nfrom {{ ref('eligibility') }}\r\n)\r\n\r\n, provider as (\r\nselect\r\n  a.encounter_id\r\n, max(a.facility_npi) as facility_npi\r\n, b.provider_first_name\r\n, b.provider_last_name\r\n, count(distinct facility_npi) as npi_count\r\nfrom {{ ref('emergency_department__int_institutional_encounter_id') }} a\r\nleft join {{ ref('terminology__provider') }} b\r\n  on a.facility_npi = b.npi\r\ngroup by 1,3,4\r\n)\r\n\r\nselect\r\n    a.encounter_id\r\n    , a.encounter_start_date\r\n    , a.encounter_end_date\r\n    , a.patient_id\r\n    , {{ dbt.datediff(\"birth_date\",\"encounter_end_date\",\"day\")}}/365 as admit_age\r\n    , e.gender\r\n    , e.race\r\n    , c.diagnosis_code_type as primary_diagnosis_code_type\r\n    , c.diagnosis_code_1 as primary_diagnosis_code\r\n    , coalesce(icd10cm.description, icd9cm.long_description) as primary_diagnosis_description\r\n    , f.facility_npi\r\n    , f.provider_first_name\r\n    , f.provider_last_name\r\n    , c.ms_drg_code\r\n    , j.ms_drg_description\r\n    , j.medical_surgical\r\n    , c.apr_drg_code\r\n    , k.apr_drg_description\r\n    , c.admit_source_code\r\n    , h.admit_source_description\r\n    , c.admit_type_code\r\n    , i.admit_type_description\r\n    , c.discharge_disposition_code\r\n    , g.discharge_disposition_description\r\n    , c.inst_paid_amount + coalesce(d.prof_paid_amount,0) as total_paid_amount\r\n    , c.inst_allowed_amount + coalesce(d.prof_allowed_amount,0) as total_allowed_amount\r\n    , c.inst_charge_amount + coalesce(d.prof_charge_amount,0) as total_charge_amount\r\n    , {{ dbt.datediff(\"a.encounter_start_date\",\"a.encounter_end_date\",\"day\") }} as length_of_stay\r\n    , case\r\n        when c.discharge_disposition_code = '20' then 1\r\n        else 0\r\n    end mortality_flag\r\n    , data_source\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom distinct_encounters a\r\nleft join institutional_claim_details c\r\n  on a.encounter_id = c.encounter_id\r\nleft join professional_claim_details d\r\n  on a.encounter_id = d.encounter_id\r\nleft join patient e\r\n  on a.patient_id = e.patient_id\r\nleft join provider f\r\n  on a.encounter_id = f.encounter_id\r\nleft join {{ ref('terminology__discharge_disposition') }} g\r\n  on c.discharge_disposition_code = g.discharge_disposition_code\r\nleft join {{ ref('terminology__admit_source') }} h\r\n  on c.admit_source_code = h.admit_source_code\r\nleft join {{ ref('terminology__admit_type') }} i\r\n  on c.admit_type_code = i.admit_type_code\r\nleft join {{ ref('terminology__ms_drg') }} j\r\n  on c.ms_drg_code = j.ms_drg_code\r\nleft join {{ ref('terminology__apr_drg') }} k\r\n  on c.apr_drg_code = k.apr_drg_code\r\nleft join {{ ref('terminology__icd_10_cm')}} icd10cm\r\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\r\n  and c.diagnosis_code_type = 'icd-10-cm'\r\nleft join {{ ref('terminology__icd_9_cm')}} icd9cm\r\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\r\n  and c.diagnosis_code_type = 'icd-9-cm'", "language": "sql", "refs": [{"name": "emergency_department__int_encounter_id", "package": null, "version": null}, {"name": "emergency_department__int_encounter_start_and_end_dates", "package": null, "version": null}, {"name": "medical_claim", "package": null, "version": null}, {"name": "emergency_department__int_encounter_id", "package": null, "version": null}, {"name": "emergency_department__int_first_claim_values", "package": null, "version": null}, {"name": "emergency_department__int_last_claim_values", "package": null, "version": null}, {"name": "medical_claim", "package": null, "version": null}, {"name": "emergency_department__int_encounter_id", "package": null, "version": null}, {"name": "eligibility", "package": null, "version": null}, {"name": "emergency_department__int_institutional_encounter_id", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}, {"name": "terminology__discharge_disposition", "package": null, "version": null}, {"name": "terminology__admit_source", "package": null, "version": null}, {"name": "terminology__admit_type", "package": null, "version": null}, {"name": "terminology__ms_drg", "package": null, "version": null}, {"name": "terminology__apr_drg", "package": null, "version": null}, {"name": "terminology__icd_10_cm", "package": null, "version": null}, {"name": "terminology__icd_9_cm", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "seed.the_tuva_project_demo.medical_claim", "model.the_tuva_project.emergency_department__int_first_claim_values", "model.the_tuva_project.emergency_department__int_last_claim_values", "seed.the_tuva_project_demo.eligibility", "model.the_tuva_project.emergency_department__int_institutional_encounter_id", "seed.the_tuva_project.terminology__provider", "seed.the_tuva_project.terminology__discharge_disposition", "seed.the_tuva_project.terminology__admit_source", "seed.the_tuva_project.terminology__admit_type", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__apr_drg", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__icd_9_cm"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/final/emergency_department__summary.sql", "compiled": true, "compiled_code": "\n\nwith distinct_encounters as (\nselect distinct\n  a.encounter_id\n, a.patient_id\n, b.encounter_start_date\n, b.encounter_end_date\nfrom tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id a\ninner join tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_start_and_end_dates b\n  on a.encounter_id = b.encounter_id\n)\n\n, institutional_claim_details as (\n    select\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_npi as facility_npi\n        , first.ms_drg_code as ms_drg_code\n        , first.apr_drg_code as apr_drg_code\n        , first.admit_source_code as admit_source_code\n        , first.admit_type_code as admit_type_code\n        , last.discharge_disposition_code as discharge_disposition_code\n        , sum(paid_amount) as inst_paid_amount\n        , sum(allowed_amount) as inst_allowed_amount\n        , sum(charge_amount) as inst_charge_amount\n        , max(data_source) as data_source\n    from TUVA_PROJECT_DEMO.input_layer.medical_claim a\n    inner join tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id b\n        on a.claim_id = b.claim_id\n        and a.claim_line_number = b.claim_line_number\n        and a.claim_type = 'institutional'\n    inner join tuva_project_demo.claims_preprocessing._int_emergency_department_first_claim_values first\n        on b.encounter_id = first.encounter_id\n        and first.claim_row = 1\n    inner join tuva_project_demo.claims_preprocessing._int_emergency_department_last_claim_values last\n        on b.encounter_id = last.encounter_id\n        and last.claim_row = 1\n    group by\n    b.encounter_id\n    , first.diagnosis_code_1\n    , first.diagnosis_code_type\n    , first.facility_npi\n    , first.ms_drg_code\n    , first.apr_drg_code\n    , first.admit_source_code\n    , first.admit_type_code\n    , last.discharge_disposition_code\n)\n\n, professional_claim_details as (\nselect\n  b.encounter_id\n, sum(paid_amount) as prof_paid_amount\n, sum(allowed_amount) as prof_allowed_amount\n, sum(charge_amount) as prof_charge_amount\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim a\ninner join tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\n  and a.claim_type = 'professional'\ngroup by 1\n)\n\n, patient as (\nselect distinct\n  patient_id\n, birth_date\n, gender\n, race\nfrom TUVA_PROJECT_DEMO.input_layer.eligibility\n)\n\n, provider as (\nselect\n  a.encounter_id\n, max(a.facility_npi) as facility_npi\n, b.provider_first_name\n, b.provider_last_name\n, count(distinct facility_npi) as npi_count\nfrom tuva_project_demo.claims_preprocessing._int_emergency_department_institutional_encounter_id a\nleft join tuva_project_demo.terminology.provider b\n  on a.facility_npi = b.npi\ngroup by 1,3,4\n)\n\nselect\n    a.encounter_id\n    , a.encounter_start_date\n    , a.encounter_end_date\n    , a.patient_id\n    , datediff(\n        day,\n        birth_date,\n        encounter_end_date\n        )/365 as admit_age\n    , e.gender\n    , e.race\n    , c.diagnosis_code_type as primary_diagnosis_code_type\n    , c.diagnosis_code_1 as primary_diagnosis_code\n    , coalesce(icd10cm.description, icd9cm.long_description) as primary_diagnosis_description\n    , f.facility_npi\n    , f.provider_first_name\n    , f.provider_last_name\n    , c.ms_drg_code\n    , j.ms_drg_description\n    , j.medical_surgical\n    , c.apr_drg_code\n    , k.apr_drg_description\n    , c.admit_source_code\n    , h.admit_source_description\n    , c.admit_type_code\n    , i.admit_type_description\n    , c.discharge_disposition_code\n    , g.discharge_disposition_description\n    , c.inst_paid_amount + coalesce(d.prof_paid_amount,0) as total_paid_amount\n    , c.inst_allowed_amount + coalesce(d.prof_allowed_amount,0) as total_allowed_amount\n    , c.inst_charge_amount + coalesce(d.prof_charge_amount,0) as total_charge_amount\n    , datediff(\n        day,\n        a.encounter_start_date,\n        a.encounter_end_date\n        ) as length_of_stay\n    , case\n        when c.discharge_disposition_code = '20' then 1\n        else 0\n    end mortality_flag\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom distinct_encounters a\nleft join institutional_claim_details c\n  on a.encounter_id = c.encounter_id\nleft join professional_claim_details d\n  on a.encounter_id = d.encounter_id\nleft join patient e\n  on a.patient_id = e.patient_id\nleft join provider f\n  on a.encounter_id = f.encounter_id\nleft join tuva_project_demo.terminology.discharge_disposition g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join tuva_project_demo.terminology.admit_source h\n  on c.admit_source_code = h.admit_source_code\nleft join tuva_project_demo.terminology.admit_type i\n  on c.admit_type_code = i.admit_type_code\nleft join tuva_project_demo.terminology.ms_drg j\n  on c.ms_drg_code = j.ms_drg_code\nleft join tuva_project_demo.terminology.apr_drg k\n  on c.apr_drg_code = k.apr_drg_code\nleft join tuva_project_demo.terminology.icd_10_cm icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join tuva_project_demo.terminology.icd_9_cm icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__int_encounter_id": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "emergency_department__int_encounter_id", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/intermediate/emergency_department__int_encounter_id.sql", "original_file_path": "models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_encounter_id.sql", "unique_id": "model.the_tuva_project.emergency_department__int_encounter_id", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "intermediate", "emergency_department__int_encounter_id"], "alias": "_int_emergency_department_encounter_id", "checksum": {"name": "sha256", "checksum": "1b1e06a7a4058ce1bc75f70df18fdc14cdee1e4b5fb5b91d69f9425d613c4174"}, "config": {"enabled": true, "alias": "_int_emergency_department_encounter_id", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "Fix encounter_id so each professional claim can only belong to one encounter", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_encounter_id", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1796114, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n  inst.patient_id,\r\n  inst.claim_id,\r\n  med.claim_line_number,\r\n  inst.encounter_id,\r\n  '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('emergency_department__int_institutional_encounter_id') }} inst\r\nleft join {{ ref('emergency_department__stg_medical_claim') }} med\r\n    on inst.claim_id = med.claim_id\r\n\r\nunion distinct\r\n\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  claim_line_number,\r\n  encounter_id,\r\n  '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('emergency_department__int_professional_encounter_id') }}\r\nwhere (orphan_claim_flag = 0) and (encounter_count = 1)", "language": "sql", "refs": [{"name": "emergency_department__int_institutional_encounter_id", "package": null, "version": null}, {"name": "emergency_department__stg_medical_claim", "package": null, "version": null}, {"name": "emergency_department__int_professional_encounter_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.emergency_department__int_institutional_encounter_id", "model.the_tuva_project.emergency_department__stg_medical_claim", "model.the_tuva_project.emergency_department__int_professional_encounter_id"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_encounter_id.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select\n  inst.patient_id,\n  inst.claim_id,\n  med.claim_line_number,\n  inst.encounter_id,\n  '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_emergency_department_institutional_encounter_id inst\nleft join __dbt__cte__emergency_department__stg_medical_claim med\n    on inst.claim_id = med.claim_id\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  encounter_id,\n  '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_emergency_department_professional_encounter_id\nwhere (orphan_claim_flag = 0) and (encounter_count = 1)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.emergency_department__stg_medical_claim", "sql": " __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "emergency_department__int_encounter_start_and_end_dates", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/intermediate/emergency_department__int_encounter_start_and_end_dates.sql", "original_file_path": "models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_encounter_start_and_end_dates.sql", "unique_id": "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "intermediate", "emergency_department__int_encounter_start_and_end_dates"], "alias": "_int_emergency_department_encounter_start_and_end_dates", "checksum": {"name": "sha256", "checksum": "c6198db2ad63e51b43014186d7ad479d96bafa44413d6dbd8f3f461a05bfca8a"}, "config": {"enabled": true, "alias": "_int_emergency_department_encounter_start_and_end_dates", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "Defines encounter start and end dates for emergency_department encounters", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_encounter_start_and_end_dates", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.184499, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_start_and_end_dates", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith add_encounter_id_to_emergency_department_encounters as (\r\nselect\r\n  aip.claim_id as claim_id,\r\n  aip.patient_id as patient_id,\r\n  aip.start_date as start_date,\r\n  aip.end_date as end_date,\r\n  eid.encounter_id as encounter_id\r\nfrom {{ ref('emergency_department__int_institutional_claims') }} aip\r\nleft join {{ ref('emergency_department__int_institutional_encounter_id') }} eid\r\n  on aip.patient_id = eid.patient_id\r\n  and aip.claim_id = eid.claim_id\r\n),\r\n\r\nencounter_start_and_end_dates as (\r\nselect\r\n  patient_id,\r\n  encounter_id,\r\n  min(start_date) as encounter_start_date,\r\n  max(end_date) as encounter_end_date\r\nfrom add_encounter_id_to_emergency_department_encounters\r\ngroup by patient_id, encounter_id\r\n)\r\n\r\nselect \r\n    patient_id\r\n    , encounter_id\r\n    , encounter_start_date\r\n    , encounter_end_date\r\n    , coalesce(encounter_start_date, encounter_end_date) as determined_encounter_start_date\r\n    , coalesce(encounter_end_date, encounter_start_date) as determined_encounter_end_date\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom encounter_start_and_end_dates", "language": "sql", "refs": [{"name": "emergency_department__int_institutional_claims", "package": null, "version": null}, {"name": "emergency_department__int_institutional_encounter_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.emergency_department__int_institutional_claims", "model.the_tuva_project.emergency_department__int_institutional_encounter_id"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_encounter_start_and_end_dates.sql", "compiled": true, "compiled_code": "\n\n\nwith add_encounter_id_to_emergency_department_encounters as (\nselect\n  aip.claim_id as claim_id,\n  aip.patient_id as patient_id,\n  aip.start_date as start_date,\n  aip.end_date as end_date,\n  eid.encounter_id as encounter_id\nfrom tuva_project_demo.claims_preprocessing._int_emergency_department_institutional_claims aip\nleft join tuva_project_demo.claims_preprocessing._int_emergency_department_institutional_encounter_id eid\n  on aip.patient_id = eid.patient_id\n  and aip.claim_id = eid.claim_id\n),\n\nencounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  min(start_date) as encounter_start_date,\n  max(end_date) as encounter_end_date\nfrom add_encounter_id_to_emergency_department_encounters\ngroup by patient_id, encounter_id\n)\n\nselect \n    patient_id\n    , encounter_id\n    , encounter_start_date\n    , encounter_end_date\n    , coalesce(encounter_start_date, encounter_end_date) as determined_encounter_start_date\n    , coalesce(encounter_end_date, encounter_start_date) as determined_encounter_end_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom encounter_start_and_end_dates", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__int_first_claim_values": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "emergency_department__int_first_claim_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/intermediate/emergency_department__int_first_claim_values.sql", "original_file_path": "models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_first_claim_values.sql", "unique_id": "model.the_tuva_project.emergency_department__int_first_claim_values", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "intermediate", "emergency_department__int_first_claim_values"], "alias": "_int_emergency_department_first_claim_values", "checksum": {"name": "sha256", "checksum": "fe3253288286bf928d309ef00ffb92bb14102ceee899756613101a644051c6f7"}, "config": {"enabled": true, "alias": "_int_emergency_department_first_claim_values", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "Orders claims to pull out encounter details (admit type, drg, etc)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_first_claim_values", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.1922493, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_first_claim_values", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith first_claim_values as(\r\n    select distinct\r\n        e.encounter_id\r\n        , coalesce(claim_start_date, admission_date) as claim_start\r\n        , diagnosis_code_1\r\n        , diagnosis_code_type\r\n        , admit_source_code\r\n        , admit_type_code\r\n        , facility_npi\r\n        , ms_drg_code\r\n        , apr_drg_code\r\n    from {{ ref('emergency_department__int_encounter_id')}} e\r\n    inner join {{ ref('emergency_department__stg_medical_claim') }} m\r\n        on e.claim_id = m.claim_id\r\n    where claim_type = 'institutional'\r\n)\r\n\r\nselect\r\n    encounter_id\r\n    , claim_start\r\n    , diagnosis_code_1\r\n    , diagnosis_code_type\r\n    , admit_source_code\r\n    , admit_type_code\r\n    , facility_npi\r\n    , ms_drg_code\r\n    , apr_drg_code\r\n    , row_number() over (partition by encounter_id order by claim_start) as claim_row\r\nfrom first_claim_values", "language": "sql", "refs": [{"name": "emergency_department__int_encounter_id", "package": null, "version": null}, {"name": "emergency_department__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.emergency_department__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_first_claim_values.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n), first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , diagnosis_code_1\n        , diagnosis_code_type\n        , admit_source_code\n        , admit_type_code\n        , facility_npi\n        , ms_drg_code\n        , apr_drg_code\n    from tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id e\n    inner join __dbt__cte__emergency_department__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , diagnosis_code_1\n    , diagnosis_code_type\n    , admit_source_code\n    , admit_type_code\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , row_number() over (partition by encounter_id order by claim_start) as claim_row\nfrom first_claim_values", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.emergency_department__stg_medical_claim", "sql": " __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__int_institutional_claims": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "emergency_department__int_institutional_claims", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/intermediate/emergency_department__int_institutional_claims.sql", "original_file_path": "models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_institutional_claims.sql", "unique_id": "model.the_tuva_project.emergency_department__int_institutional_claims", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "intermediate", "emergency_department__int_institutional_claims"], "alias": "_int_emergency_department_institutional_claims", "checksum": {"name": "sha256", "checksum": "d7a8dab04353842b385f21fddfdf9f559a42df81bdac6682afd7454d3747e5ea"}, "config": {"enabled": true, "alias": "_int_emergency_department_institutional_claims", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "All emergency_department institutional claim_ids with header values and data quality flags", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_institutional_claims", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2002184, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_institutional_claims", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith emergency_department_claim_lines as (\r\nselect\r\n  mc.patient_id,\r\n  mc.claim_id,\r\n  mc.claim_line_number,\r\n  mc.claim_start_date,\r\n  mc.claim_end_date,\r\n  mc.admission_date,\r\n  mc.discharge_date,\r\n  mc.admit_source_code,\r\n  mc.admit_type_code,\r\n  mc.discharge_disposition_code,\r\n  mc.facility_npi,\r\n  mc.claim_type,\r\n  mc.data_source\r\nfrom {{ ref('emergency_department__stg_medical_claim') }} mc\r\ninner join {{ ref('emergency_department__stg_service_category')}} sc\r\n  on mc.claim_id = sc.claim_id\r\nwhere mc.claim_type = 'institutional'\r\n  and sc.service_category_2 = 'Emergency Department'\r\n),\r\n\r\ndata_quality_flags as (\r\nselect\r\n  claim_id,\r\n-- patient_id_not_unique:\r\n  case\r\n    when count(distinct patient_id) > 1 then 1\r\n    else 0\r\n  end as patient_id_not_unique,\r\n-- patient_id_missing:  \r\n  case\r\n    when max(patient_id) is null then 1\r\n    else 0\r\n  end as patient_id_missing,  \r\n-- claim_start_date_not_unique:\r\n  case\r\n    when count(distinct claim_start_date) > 1 then 1\r\n    else 0\r\n  end as claim_start_date_not_unique,\r\n-- claim_start_date_missing:  \r\n  case\r\n    when max(claim_start_date) is null then 1\r\n    else 0\r\n  end as claim_start_date_missing,\r\n-- claim_end_date_not_unique:\r\n  case\r\n    when count(distinct claim_end_date) > 1 then 1\r\n    else 0\r\n  end as claim_end_date_not_unique,\r\n-- claim_end_date_missing:  \r\n  case\r\n    when max(claim_end_date) is null then 1\r\n    else 0\r\n  end as claim_end_date_missing,\r\n-- claim_start_date_after_claim_end_date:\r\n  case\r\n    when min(claim_start_date) > max(claim_end_date) then 1\r\n    else 0\r\n  end as claim_start_date_after_claim_end_date,\r\n-- admission_date_not_unique:\r\n  case\r\n    when count(distinct admission_date) > 1 then 1\r\n    else 0\r\n  end as admission_date_not_unique,\r\n-- admission_date_missing:  \r\n  case\r\n    when max(admission_date) is null then 1\r\n    else 0\r\n  end as admission_date_missing,\r\n-- discharge_date_not_unique:\r\n  case\r\n    when count(distinct discharge_date) > 1 then 1\r\n    else 0\r\n  end as discharge_date_not_unique,\r\n-- discharge_date_missing:  \r\n  case\r\n    when max(discharge_date) is null then 1\r\n    else 0\r\n  end as discharge_date_missing,\r\n-- admission_date_after_discharge_date:\r\n  case\r\n    when min(admission_date) > max(discharge_date) then 1\r\n    else 0\r\n  end as admission_date_after_discharge_date,\r\n-- admit_type_code_not_unique:\r\n  case\r\n    when count(distinct admit_type_code) > 1 then 1\r\n    else 0\r\n  end as admit_type_code_not_unique,\r\n-- admit_type_code_missing:  \r\n  case\r\n    when max(admit_type_code) is null then 1\r\n    else 0\r\n  end as admit_type_code_missing,  \r\n-- admit_source_code_not_unique:\r\n  case\r\n    when count(distinct admit_source_code) > 1 then 1\r\n    else 0\r\n  end as admit_source_code_not_unique,\r\n-- admit_source_code_missing:  \r\n  case\r\n    when max(admit_source_code) is null then 1\r\n    else 0\r\n  end as admit_source_code_missing,  \r\n-- discharge_disposition_code_not_unique:\r\n  case\r\n    when count(distinct discharge_disposition_code) > 1 then 1\r\n    else 0\r\n  end as discharge_disposition_code_not_unique,\r\n-- discharge_disposition_code_missing:  \r\n  case\r\n    when max(discharge_disposition_code) is null then 1\r\n    else 0\r\n  end as discharge_disposition_code_missing,\r\n-- facility_npi_not_unique:\r\n  case\r\n    when count(distinct facility_npi) > 1 then 1\r\n    else 0\r\n  end as facility_npi_not_unique,\r\n-- facility_npi_missing:  \r\n  case\r\n    when max(facility_npi) is null then 1\r\n    else 0\r\n  end as facility_npi_missing,\r\n-- claim_type_not_unique:\r\n  case\r\n    when count(distinct claim_type) > 1 then 1\r\n    else 0\r\n  end as claim_type_not_unique,\r\n-- claim_type_missing:  \r\n  case\r\n    when max(claim_type) is null then 1\r\n    else 0\r\n  end as claim_type_missing,\r\n-- claim_type_not_institutional:\r\n  case\r\n    when max(claim_type) <> 'institutional'\r\n     and min(claim_type) <> 'institutional' then 1\r\n    else 0\r\n  end as claim_type_not_institutional\r\nfrom emergency_department_claim_lines\r\ngroup by claim_id\r\n),\r\n\r\n\r\nheader_level_values as (\r\nselect\r\n  claim_id,\r\n  max(patient_id) as patient_id,\r\n  min(claim_start_date) as claim_start_date,\r\n  max(claim_end_date) as claim_end_date,\r\n  min(admission_date) as admission_date,\r\n  max(discharge_date) as discharge_date,\r\n  max(admit_source_code) as admit_source_code,\r\n  max(admit_type_code) as admit_type_code,\r\n  max(discharge_disposition_code) as discharge_disposition_code,\r\n  max(facility_npi) as facility_npi,\r\n  max(claim_type) as claim_type,\r\n  coalesce(min(admission_date),\r\n           min(claim_start_date)) as start_date,\r\n  coalesce(max(discharge_date),\r\n           max(claim_end_date)) as end_date,\r\n  case\r\n    when min(admission_date) is not null then 'admission_date'\r\n    when min(claim_start_date) is not null then 'claim_start_date'\r\n    else null\r\n  end as date_used_as_start_date,\r\n  case\r\n    when max(discharge_date) is not null then 'discharge_date'\r\n    when max(claim_end_date) is not null then 'claim_end_date'\r\n    else null\r\n  end as date_used_as_end_date,\r\n  data_source\r\nfrom emergency_department_claim_lines\r\ngroup by claim_id, data_source\r\n)\r\n\r\nselect\r\n  h.patient_id as patient_id,\r\n  h.claim_id as claim_id,  \r\n  h.claim_start_date as claim_start_date,\r\n  h.claim_end_date as claim_end_date,\r\n  h.admission_date as admission_date,\r\n  h.discharge_date as discharge_date,\r\n  h.admit_source_code as admit_source_code,\r\n  h.admit_type_code as admit_type_code,\r\n  h.discharge_disposition_code as discharge_disposition_code,\r\n  h.facility_npi as facility_npi,\r\n  h.claim_type as claim_type,\r\n  h.start_date as start_date,\r\n  h.end_date as end_date,\r\n  h.date_used_as_start_date,\r\n  h.date_used_as_end_date, \r\n\r\n  case\r\n    when\r\n      ( (dq.patient_id_not_unique = 1) or\r\n        (dq.patient_id_missing = 1) or\r\n        (dq.discharge_disposition_code_not_unique = 1) or\r\n        (dq.discharge_disposition_code_missing = 1) or\r\n        (dq.facility_npi_not_unique = 1) or\r\n        (dq.facility_npi_missing = 1) or\r\n        (h.date_used_as_start_date is null) or\r\n\t(h.date_used_as_end_date is null) or\r\n\t(h.start_date > h.end_date) ) then 1\r\n    else 0\r\n  end as dq_problem,\r\n\r\n  case\r\n    when\r\n      ( (dq.claim_start_date_not_unique = 1) or\r\n\t(dq.claim_start_date_missing = 1) or\r\n        (dq.claim_end_date_not_unique = 1) or\r\n        (dq.claim_end_date_missing = 1) or\r\n        (dq.claim_start_date_after_claim_end_date = 1) or\r\n        (dq.admission_date_not_unique = 1) or\r\n        (dq.admission_date_missing = 1) or\r\n        (dq.discharge_date_not_unique = 1) or\r\n        (dq.discharge_date_missing = 1) or\r\n        (dq.admission_date_after_discharge_date = 1) or\r\n        (dq.admit_type_code_not_unique = 1) or\r\n        (dq.admit_type_code_missing = 1) or\r\n        (dq.admit_source_code_not_unique = 1) or\r\n        (dq.admit_source_code_missing = 1) or\t\r\n        (dq.claim_type_not_unique = 1) or\r\n        (dq.claim_type_missing = 1) or\r\n        (dq.claim_type_not_institutional = 1) ) then 1\r\n    else 0\r\n  end as dq_insight,\r\n\r\n  case\r\n    when (h.date_used_as_start_date is null) then 1\r\n    else 0\r\n  end as start_date_not_determined,\r\n  \r\n  case\r\n    when (h.date_used_as_end_date is null) then 1\r\n    else 0\r\n  end as end_date_not_determined,\r\n\r\n  case\r\n    when (h.start_date > h.end_date) then 1\r\n    else 0\r\n  end as start_date_after_end_date,\r\n  \r\n  dq.patient_id_not_unique as patient_id_not_unique,\r\n  dq.patient_id_missing as patient_id_missing,\r\n  dq.claim_start_date_not_unique as claim_start_date_not_unique,\r\n  dq.claim_start_date_missing as claim_start_date_missing,\r\n  dq.claim_end_date_not_unique as claim_end_date_not_unique,\r\n  dq.claim_end_date_missing as claim_end_date_missing,\r\n  dq.claim_start_date_after_claim_end_date\r\n       as claim_start_date_after_claim_end_date,\r\n  dq.admission_date_not_unique as admission_date_not_unique,\r\n  dq.admission_date_missing as admission_date_missing,\r\n  dq.discharge_date_not_unique as discharge_date_not_unique,\r\n  dq.discharge_date_missing as discharge_date_missing,\r\n  dq.admission_date_after_discharge_date\r\n       as admission_date_after_discharge_date,\r\n  dq.admit_type_code_not_unique\r\n       as admit_type_code_not_unique,\r\n  dq.admit_type_code_missing\r\n       as admit_type_code_missing,\r\n  dq.admit_source_code_not_unique\r\n       as admit_source_code_not_unique,\r\n  dq.admit_source_code_missing\r\n       as admit_source_code_missing,\r\n  dq.discharge_disposition_code_not_unique\r\n       as discharge_disposition_code_not_unique,\r\n  dq.discharge_disposition_code_missing\r\n       as discharge_disposition_code_missing,\r\n  dq.facility_npi_not_unique as facility_npi_not_unique,\r\n  dq.facility_npi_missing as facility_npi_missing,\r\n  dq.claim_type_not_unique as claim_type_not_unique,\r\n  dq.claim_type_missing as claim_type_missing,\r\n  dq.claim_type_not_institutional as claim_type_not_institutional,\r\n  h.data_source,\r\n  '{{ var('tuva_last_run')}}' as tuva_last_run\r\n\r\nfrom header_level_values h\r\nleft join data_quality_flags dq\r\n  on h.claim_id = dq.claim_id", "language": "sql", "refs": [{"name": "emergency_department__stg_medical_claim", "package": null, "version": null}, {"name": "emergency_department__stg_service_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.emergency_department__stg_medical_claim", "model.the_tuva_project.emergency_department__stg_service_category"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_institutional_claims.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n),  __dbt__cte__emergency_department__stg_service_category as (\n\n\n\nselect\n    claim_id\n    , claim_type\n    , claim_line_number\n    , service_category_2\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper\n), emergency_department_claim_lines as (\nselect\n  mc.patient_id,\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.claim_start_date,\n  mc.claim_end_date,\n  mc.admission_date,\n  mc.discharge_date,\n  mc.admit_source_code,\n  mc.admit_type_code,\n  mc.discharge_disposition_code,\n  mc.facility_npi,\n  mc.claim_type,\n  mc.data_source\nfrom __dbt__cte__emergency_department__stg_medical_claim mc\ninner join __dbt__cte__emergency_department__stg_service_category sc\n  on mc.claim_id = sc.claim_id\nwhere mc.claim_type = 'institutional'\n  and sc.service_category_2 = 'Emergency Department'\n),\n\ndata_quality_flags as (\nselect\n  claim_id,\n-- patient_id_not_unique:\n  case\n    when count(distinct patient_id) > 1 then 1\n    else 0\n  end as patient_id_not_unique,\n-- patient_id_missing:  \n  case\n    when max(patient_id) is null then 1\n    else 0\n  end as patient_id_missing,  \n-- claim_start_date_not_unique:\n  case\n    when count(distinct claim_start_date) > 1 then 1\n    else 0\n  end as claim_start_date_not_unique,\n-- claim_start_date_missing:  \n  case\n    when max(claim_start_date) is null then 1\n    else 0\n  end as claim_start_date_missing,\n-- claim_end_date_not_unique:\n  case\n    when count(distinct claim_end_date) > 1 then 1\n    else 0\n  end as claim_end_date_not_unique,\n-- claim_end_date_missing:  \n  case\n    when max(claim_end_date) is null then 1\n    else 0\n  end as claim_end_date_missing,\n-- claim_start_date_after_claim_end_date:\n  case\n    when min(claim_start_date) > max(claim_end_date) then 1\n    else 0\n  end as claim_start_date_after_claim_end_date,\n-- admission_date_not_unique:\n  case\n    when count(distinct admission_date) > 1 then 1\n    else 0\n  end as admission_date_not_unique,\n-- admission_date_missing:  \n  case\n    when max(admission_date) is null then 1\n    else 0\n  end as admission_date_missing,\n-- discharge_date_not_unique:\n  case\n    when count(distinct discharge_date) > 1 then 1\n    else 0\n  end as discharge_date_not_unique,\n-- discharge_date_missing:  \n  case\n    when max(discharge_date) is null then 1\n    else 0\n  end as discharge_date_missing,\n-- admission_date_after_discharge_date:\n  case\n    when min(admission_date) > max(discharge_date) then 1\n    else 0\n  end as admission_date_after_discharge_date,\n-- admit_type_code_not_unique:\n  case\n    when count(distinct admit_type_code) > 1 then 1\n    else 0\n  end as admit_type_code_not_unique,\n-- admit_type_code_missing:  \n  case\n    when max(admit_type_code) is null then 1\n    else 0\n  end as admit_type_code_missing,  \n-- admit_source_code_not_unique:\n  case\n    when count(distinct admit_source_code) > 1 then 1\n    else 0\n  end as admit_source_code_not_unique,\n-- admit_source_code_missing:  \n  case\n    when max(admit_source_code) is null then 1\n    else 0\n  end as admit_source_code_missing,  \n-- discharge_disposition_code_not_unique:\n  case\n    when count(distinct discharge_disposition_code) > 1 then 1\n    else 0\n  end as discharge_disposition_code_not_unique,\n-- discharge_disposition_code_missing:  \n  case\n    when max(discharge_disposition_code) is null then 1\n    else 0\n  end as discharge_disposition_code_missing,\n-- facility_npi_not_unique:\n  case\n    when count(distinct facility_npi) > 1 then 1\n    else 0\n  end as facility_npi_not_unique,\n-- facility_npi_missing:  \n  case\n    when max(facility_npi) is null then 1\n    else 0\n  end as facility_npi_missing,\n-- claim_type_not_unique:\n  case\n    when count(distinct claim_type) > 1 then 1\n    else 0\n  end as claim_type_not_unique,\n-- claim_type_missing:  \n  case\n    when max(claim_type) is null then 1\n    else 0\n  end as claim_type_missing,\n-- claim_type_not_institutional:\n  case\n    when max(claim_type) <> 'institutional'\n     and min(claim_type) <> 'institutional' then 1\n    else 0\n  end as claim_type_not_institutional\nfrom emergency_department_claim_lines\ngroup by claim_id\n),\n\n\nheader_level_values as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  min(admission_date) as admission_date,\n  max(discharge_date) as discharge_date,\n  max(admit_source_code) as admit_source_code,\n  max(admit_type_code) as admit_type_code,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_npi) as facility_npi,\n  max(claim_type) as claim_type,\n  coalesce(min(admission_date),\n           min(claim_start_date)) as start_date,\n  coalesce(max(discharge_date),\n           max(claim_end_date)) as end_date,\n  case\n    when min(admission_date) is not null then 'admission_date'\n    when min(claim_start_date) is not null then 'claim_start_date'\n    else null\n  end as date_used_as_start_date,\n  case\n    when max(discharge_date) is not null then 'discharge_date'\n    when max(claim_end_date) is not null then 'claim_end_date'\n    else null\n  end as date_used_as_end_date,\n  data_source\nfrom emergency_department_claim_lines\ngroup by claim_id, data_source\n)\n\nselect\n  h.patient_id as patient_id,\n  h.claim_id as claim_id,  \n  h.claim_start_date as claim_start_date,\n  h.claim_end_date as claim_end_date,\n  h.admission_date as admission_date,\n  h.discharge_date as discharge_date,\n  h.admit_source_code as admit_source_code,\n  h.admit_type_code as admit_type_code,\n  h.discharge_disposition_code as discharge_disposition_code,\n  h.facility_npi as facility_npi,\n  h.claim_type as claim_type,\n  h.start_date as start_date,\n  h.end_date as end_date,\n  h.date_used_as_start_date,\n  h.date_used_as_end_date, \n\n  case\n    when\n      ( (dq.patient_id_not_unique = 1) or\n        (dq.patient_id_missing = 1) or\n        (dq.discharge_disposition_code_not_unique = 1) or\n        (dq.discharge_disposition_code_missing = 1) or\n        (dq.facility_npi_not_unique = 1) or\n        (dq.facility_npi_missing = 1) or\n        (h.date_used_as_start_date is null) or\n\t(h.date_used_as_end_date is null) or\n\t(h.start_date > h.end_date) ) then 1\n    else 0\n  end as dq_problem,\n\n  case\n    when\n      ( (dq.claim_start_date_not_unique = 1) or\n\t(dq.claim_start_date_missing = 1) or\n        (dq.claim_end_date_not_unique = 1) or\n        (dq.claim_end_date_missing = 1) or\n        (dq.claim_start_date_after_claim_end_date = 1) or\n        (dq.admission_date_not_unique = 1) or\n        (dq.admission_date_missing = 1) or\n        (dq.discharge_date_not_unique = 1) or\n        (dq.discharge_date_missing = 1) or\n        (dq.admission_date_after_discharge_date = 1) or\n        (dq.admit_type_code_not_unique = 1) or\n        (dq.admit_type_code_missing = 1) or\n        (dq.admit_source_code_not_unique = 1) or\n        (dq.admit_source_code_missing = 1) or\t\n        (dq.claim_type_not_unique = 1) or\n        (dq.claim_type_missing = 1) or\n        (dq.claim_type_not_institutional = 1) ) then 1\n    else 0\n  end as dq_insight,\n\n  case\n    when (h.date_used_as_start_date is null) then 1\n    else 0\n  end as start_date_not_determined,\n  \n  case\n    when (h.date_used_as_end_date is null) then 1\n    else 0\n  end as end_date_not_determined,\n\n  case\n    when (h.start_date > h.end_date) then 1\n    else 0\n  end as start_date_after_end_date,\n  \n  dq.patient_id_not_unique as patient_id_not_unique,\n  dq.patient_id_missing as patient_id_missing,\n  dq.claim_start_date_not_unique as claim_start_date_not_unique,\n  dq.claim_start_date_missing as claim_start_date_missing,\n  dq.claim_end_date_not_unique as claim_end_date_not_unique,\n  dq.claim_end_date_missing as claim_end_date_missing,\n  dq.claim_start_date_after_claim_end_date\n       as claim_start_date_after_claim_end_date,\n  dq.admission_date_not_unique as admission_date_not_unique,\n  dq.admission_date_missing as admission_date_missing,\n  dq.discharge_date_not_unique as discharge_date_not_unique,\n  dq.discharge_date_missing as discharge_date_missing,\n  dq.admission_date_after_discharge_date\n       as admission_date_after_discharge_date,\n  dq.admit_type_code_not_unique\n       as admit_type_code_not_unique,\n  dq.admit_type_code_missing\n       as admit_type_code_missing,\n  dq.admit_source_code_not_unique\n       as admit_source_code_not_unique,\n  dq.admit_source_code_missing\n       as admit_source_code_missing,\n  dq.discharge_disposition_code_not_unique\n       as discharge_disposition_code_not_unique,\n  dq.discharge_disposition_code_missing\n       as discharge_disposition_code_missing,\n  dq.facility_npi_not_unique as facility_npi_not_unique,\n  dq.facility_npi_missing as facility_npi_missing,\n  dq.claim_type_not_unique as claim_type_not_unique,\n  dq.claim_type_missing as claim_type_missing,\n  dq.claim_type_not_institutional as claim_type_not_institutional,\n  h.data_source,\n  '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n\nfrom header_level_values h\nleft join data_quality_flags dq\n  on h.claim_id = dq.claim_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.emergency_department__stg_medical_claim", "sql": " __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}, {"id": "model.the_tuva_project.emergency_department__stg_service_category", "sql": " __dbt__cte__emergency_department__stg_service_category as (\n\n\n\nselect\n    claim_id\n    , claim_type\n    , claim_line_number\n    , service_category_2\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__int_institutional_encounter_id": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "emergency_department__int_institutional_encounter_id", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/intermediate/emergency_department__int_institutional_encounter_id.sql", "original_file_path": "models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_institutional_encounter_id.sql", "unique_id": "model.the_tuva_project.emergency_department__int_institutional_encounter_id", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "intermediate", "emergency_department__int_institutional_encounter_id"], "alias": "_int_emergency_department_institutional_encounter_id", "checksum": {"name": "sha256", "checksum": "f5e142e3003664c277529855522fac3f30f4dc727909af167874ba418bd69484"}, "config": {"enabled": true, "alias": "_int_emergency_department_institutional_encounter_id", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "Assigns encounter_id to every emergency_department institutional claim", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_institutional_encounter_id", "tags": ["emergency_department", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2080991, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_institutional_encounter_id", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith add_row_num as (\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  start_date,\r\n  end_date,\r\n  discharge_disposition_code,\r\n  facility_npi,\r\n  row_number() over (partition by patient_id order by end_date, start_date, claim_id) as row_num\r\nfrom {{ ref('emergency_department__int_institutional_claims') }}\r\n),\r\n\r\ncheck_for_merges_with_larger_row_num as (\r\nselect\r\n  aa.patient_id,\r\n  aa.claim_id as claim_id_a,\r\n  bb.claim_id as claim_id_b,\r\n  aa.row_num as row_num_a,\r\n  bb.row_num as row_num_b,\r\n  case\r\n    -- Claims with same end_date and same facility_npi should be merged:\r\n    when (aa.end_date = bb.end_date\r\n          and aa.facility_npi = bb.facility_npi) then 1\r\n    -- Claims with different end_date \r\n    -- should be merged if they overlap:\r\n    when ( (aa.end_date <> bb.end_date) and \r\n           (aa.end_date >= bb.start_date) and --overlap requirement\r\n           (aa.facility_npi = bb.facility_npi)\r\n\t )then 1\r\n    else 0\r\n  end as merge_flag\r\nfrom add_row_num aa\r\n     inner join add_row_num bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.row_num < bb.row_num\r\n),\r\n\r\nmerges_with_larger_row_num as (\r\nselect\r\n  patient_id,\r\n  claim_id_a,\r\n  claim_id_b,\r\n  row_num_a,\r\n  row_num_b,\r\n  merge_flag\r\nfrom check_for_merges_with_larger_row_num\r\nwhere merge_flag = 1\r\n),\r\n\r\n\r\nclaim_ids_that_merge_with_larger_row_num as (\r\nselect distinct claim_id_a as claim_id\r\nfrom merges_with_larger_row_num\r\n),\r\n\r\n\r\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\r\nselect distinct aa.claim_id as claim_id\r\nfrom add_row_num aa\r\n     inner join\r\n     merges_with_larger_row_num bb\r\n     on aa.patient_id = bb.patient_id\r\n     and bb.row_num_a < aa.row_num\r\n     and bb.row_num_b > aa.row_num\r\n),\r\n\r\n\r\nclose_flags as (\r\nselect\r\n  aa.patient_id,\r\n  aa.claim_id,\r\n  aa.start_date,\r\n  aa.end_date,\r\n  aa.discharge_disposition_code,\r\n  aa.facility_npi,\r\n  aa.row_num,\r\n  case when (bb.claim_id is null and cc.claim_id is null) then 1\r\n       else 0\r\n  end as close_flag\r\n\r\nfrom add_row_num aa\r\n\r\nleft join claim_ids_that_merge_with_larger_row_num bb\r\non aa.claim_id = bb.claim_id\r\n\r\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num cc\r\non aa.claim_id = cc.claim_id\r\n),\r\n\r\n\r\njoin_every_row_to_later_closes as (\r\nselect\r\n  aa.patient_id as patient_id,\r\n  aa.claim_id as claim_id,\r\n  aa.row_num as row_num,\r\n  bb.row_num as row_num_b\r\nfrom close_flags aa inner join close_flags bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.row_num <= bb.row_num\r\nwhere bb.close_flag = 1\r\n),\r\n\r\n\r\nfind_min_closing_row_num_for_every_claim as (\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  min(row_num_b) as min_closing_row\r\nfrom join_every_row_to_later_closes\r\ngroup by patient_id, claim_id\r\n),\r\n\r\n\r\nadd_min_closing_row_to_every_claim as (\r\nselect\r\n  aa.patient_id as patient_id,\r\n  aa.claim_id as claim_id,\r\n  aa.start_date as start_date,\r\n  aa.end_date as end_date,\r\n  aa.discharge_disposition_code as discharge_disposition_code,\r\n  aa.facility_npi as facility_npi,\r\n  aa.row_num as row_num,\r\n  aa.close_flag as close_flag,\r\n  bb.min_closing_row as min_closing_row\r\nfrom close_flags aa\r\n     left join find_min_closing_row_num_for_every_claim bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.claim_id = bb.claim_id\r\n),\r\n\r\n\r\nadd_encounter_id as (\r\nselect\r\n  aa.patient_id as patient_id,\r\n  aa.claim_id as claim_id,\r\n  aa.start_date as start_date,\r\n  aa.end_date as end_date,\r\n  aa.discharge_disposition_code as discharge_disposition_code,\r\n  aa.facility_npi as facility_npi,\r\n  aa.row_num as row_num,\r\n  aa.close_flag as close_flag,\r\n  aa.min_closing_row as min_closing_row,\r\n  bb.claim_id as encounter_id\r\nfrom add_min_closing_row_to_every_claim aa\r\n     left join add_min_closing_row_to_every_claim bb\r\n     on aa.patient_id = bb.patient_id\r\n     and aa.min_closing_row = bb.row_num\r\n)\r\n\r\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom add_encounter_id", "language": "sql", "refs": [{"name": "emergency_department__int_institutional_claims", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.emergency_department__int_institutional_claims"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_institutional_encounter_id.sql", "compiled": true, "compiled_code": "\n\n\nwith add_row_num as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,\n  discharge_disposition_code,\n  facility_npi,\n  row_number() over (partition by patient_id order by end_date, start_date, claim_id) as row_num\nfrom tuva_project_demo.claims_preprocessing._int_emergency_department_institutional_claims\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims with same end_date and same facility_npi should be merged:\n    when (aa.end_date = bb.end_date\n          and aa.facility_npi = bb.facility_npi) then 1\n    -- Claims with different end_date \n    -- should be merged if they overlap:\n    when ( (aa.end_date <> bb.end_date) and \n           (aa.end_date >= bb.start_date) and --overlap requirement\n           (aa.facility_npi = bb.facility_npi)\n\t )then 1\n    else 0\n  end as merge_flag\nfrom add_row_num aa\n     inner join add_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num < bb.row_num\n),\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom add_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nclose_flags as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.discharge_disposition_code,\n  aa.facility_npi,\n  aa.row_num,\n  case when (bb.claim_id is null and cc.claim_id is null) then 1\n       else 0\n  end as close_flag\n\nfrom add_row_num aa\n\nleft join claim_ids_that_merge_with_larger_row_num bb\non aa.claim_id = bb.claim_id\n\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num cc\non aa.claim_id = cc.claim_id\n),\n\n\njoin_every_row_to_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom close_flags aa inner join close_flags bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_row_num_for_every_claim as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_every_claim as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom close_flags aa\n     left join find_min_closing_row_num_for_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_every_claim aa\n     left join add_min_closing_row_to_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.min_closing_row = bb.row_num\n)\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__int_last_claim_values": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "emergency_department__int_last_claim_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/intermediate/emergency_department__int_last_claim_values.sql", "original_file_path": "models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_last_claim_values.sql", "unique_id": "model.the_tuva_project.emergency_department__int_last_claim_values", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "intermediate", "emergency_department__int_last_claim_values"], "alias": "_int_emergency_department_last_claim_values", "checksum": {"name": "sha256", "checksum": "f215c9d66cca6d1dc1acc22c77c1f2b5e2c8fd8202f6c8b1a34c2d1a4c2f38af"}, "config": {"enabled": true, "alias": "_int_emergency_department_last_claim_values", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "Orders claims to pull out encounter details (discharge disposition, etc)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_last_claim_values", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2204971, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_last_claim_values", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith first_claim_values as(\r\n    select distinct\r\n        e.encounter_id\r\n        , coalesce(claim_start_date, admission_date) as claim_start\r\n        , discharge_disposition_code\r\n    from {{ ref('emergency_department__int_encounter_id')}} e\r\n    inner join {{ ref('emergency_department__stg_medical_claim') }} m\r\n        on e.claim_id = m.claim_id\r\n    where claim_type = 'institutional'\r\n)\r\n\r\nselect\r\n    encounter_id\r\n    , claim_start\r\n    , discharge_disposition_code\r\n    , row_number() over (partition by encounter_id order by claim_start desc) as claim_row\r\nfrom first_claim_values", "language": "sql", "refs": [{"name": "emergency_department__int_encounter_id", "package": null, "version": null}, {"name": "emergency_department__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.emergency_department__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_last_claim_values.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n), first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , discharge_disposition_code\n    from tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id e\n    inner join __dbt__cte__emergency_department__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , discharge_disposition_code\n    , row_number() over (partition by encounter_id order by claim_start desc) as claim_row\nfrom first_claim_values", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.emergency_department__stg_medical_claim", "sql": " __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__int_professional_encounter_id": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "emergency_department__int_professional_encounter_id", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/intermediate/emergency_department__int_professional_encounter_id.sql", "original_file_path": "models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_professional_encounter_id.sql", "unique_id": "model.the_tuva_project.emergency_department__int_professional_encounter_id", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "intermediate", "emergency_department__int_professional_encounter_id"], "alias": "_int_emergency_department_professional_encounter_id", "checksum": {"name": "sha256", "checksum": "b4cc8feaebc9b41f4a6eae448b3a2fd8fc4f1d53fc94c01b269dc50ea64141ea"}, "config": {"enabled": true, "alias": "_int_emergency_department_professional_encounter_id", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "Assigns encounter_id to every emergency_department professional claim", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_professional_encounter_id", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.215742, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_professional_encounter_id", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith emergency_department_professional_claim_ids as (\r\nselect \r\n    claim_id\r\n    , claim_line_number\r\nfrom {{ ref('emergency_department__stg_service_category') }} \r\nwhere claim_type = 'professional'\r\n  and service_category_2 = 'Emergency Department'\r\n),\r\n\r\nemergency_department_professional_claim_lines as (\r\nselect\r\n  mc.claim_id\r\n  , mc.claim_line_number\r\n  , mc.patient_id\r\n  , mc.claim_start_date as start_date\r\n  , mc.claim_end_date as end_date\t   \r\nfrom {{ ref('emergency_department__stg_medical_claim') }} mc\r\ninner join emergency_department_professional_claim_ids prof\r\n  on mc.claim_id = prof.claim_id\r\n  and mc.claim_line_number = prof.claim_line_number\r\n),\r\n\r\n\r\nemergency_department_professional_claim_dates as (\r\nselect\r\n  claim_id\r\n  , claim_line_number\r\n  , patient_id\r\n  , min(start_date) as start_date\r\n  , max(end_date) as end_date\r\nfrom emergency_department_professional_claim_lines\r\ngroup by \r\n    claim_id\r\n    , claim_line_number\r\n    , patient_id\r\n),\r\n\r\n\r\nroll_up_professional_claims_to_institutional_claims as (\r\n    select\r\n    aa.patient_id\r\n    , aa.claim_id\r\n    , aa.claim_line_number\r\n    , aa.start_date\r\n    , aa.end_date\r\n    , bb.encounter_id\r\n    , case\r\n            when bb.encounter_id is null then 1\r\n            else 0\r\n    end as orphan_claim_flag\r\n    from emergency_department_professional_claim_dates aa\r\n    left join {{ ref('emergency_department__int_encounter_start_and_end_dates') }} bb\r\n    on aa.patient_id = bb.patient_id\r\n    and (coalesce(aa.start_date, aa.end_date) between coalesce(bb.encounter_start_date, bb.determined_encounter_start_date) and coalesce(bb.encounter_end_date, bb.determined_encounter_end_date))\r\n    and (coalesce(aa.end_date, aa.start_date) between coalesce(bb.encounter_start_date, bb.determined_encounter_start_date) and coalesce(bb.encounter_end_date, bb.determined_encounter_end_date))\r\n),\r\n\r\nprofessional_claims_in_more_than_one_encounter as (\r\nselect\r\n  patient_id\r\n , claim_id\r\n , claim_line_number\r\n , min(start_date) as start_date\r\n , max(end_date) as end_date\r\n , count(distinct encounter_id) as encounter_count\r\nfrom roll_up_professional_claims_to_institutional_claims\r\ngroup by patient_id, claim_id, claim_line_number\r\nhaving count(distinct encounter_id) > 1\r\n),\r\n\r\n\r\nprofessional_claims_not_in_more_than_one_encounter as (\r\nselect\r\n  aa.patient_id,\r\n  aa.claim_id,\r\n  aa.claim_line_number,\r\n  aa.start_date,\r\n  aa.end_date,\r\n  aa.encounter_id,\r\n  aa.orphan_claim_flag,\r\n  case\r\n    when (aa.orphan_claim_flag = 1) then 0\r\n    else 1\r\n  end as encounter_count\r\nfrom roll_up_professional_claims_to_institutional_claims aa\r\nleft join professional_claims_in_more_than_one_encounter bb\r\non aa.claim_id = bb.claim_id\r\nand aa.claim_line_number = bb.claim_line_number\r\nand aa.patient_id = bb.patient_id\r\nwhere (bb.patient_id is null) and (bb.claim_id is null)\r\n),\r\n\r\n\r\nall_emergency_department_professional_claims as (\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  claim_line_number,\r\n  start_date,\r\n  end_date,\r\n  encounter_id,\r\n  orphan_claim_flag,\r\n  encounter_count\r\nfrom professional_claims_not_in_more_than_one_encounter\r\n\r\nunion all\r\n\r\nselect\r\n  patient_id,\r\n  claim_id,\r\n  claim_line_number,\r\n  start_date,\r\n  end_date,\r\n  null as encounter_id,\r\n  0 as orphan_claim_count,\r\n  encounter_count\r\nfrom professional_claims_in_more_than_one_encounter\r\n)\r\n\r\n\r\n\r\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom all_emergency_department_professional_claims", "language": "sql", "refs": [{"name": "emergency_department__stg_service_category", "package": null, "version": null}, {"name": "emergency_department__stg_medical_claim", "package": null, "version": null}, {"name": "emergency_department__int_encounter_start_and_end_dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.emergency_department__stg_service_category", "model.the_tuva_project.emergency_department__stg_medical_claim", "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/intermediate/emergency_department__int_professional_encounter_id.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__emergency_department__stg_service_category as (\n\n\n\nselect\n    claim_id\n    , claim_type\n    , claim_line_number\n    , service_category_2\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper\n),  __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n), emergency_department_professional_claim_ids as (\nselect \n    claim_id\n    , claim_line_number\nfrom __dbt__cte__emergency_department__stg_service_category \nwhere claim_type = 'professional'\n  and service_category_2 = 'Emergency Department'\n),\n\nemergency_department_professional_claim_lines as (\nselect\n  mc.claim_id\n  , mc.claim_line_number\n  , mc.patient_id\n  , mc.claim_start_date as start_date\n  , mc.claim_end_date as end_date\t   \nfrom __dbt__cte__emergency_department__stg_medical_claim mc\ninner join emergency_department_professional_claim_ids prof\n  on mc.claim_id = prof.claim_id\n  and mc.claim_line_number = prof.claim_line_number\n),\n\n\nemergency_department_professional_claim_dates as (\nselect\n  claim_id\n  , claim_line_number\n  , patient_id\n  , min(start_date) as start_date\n  , max(end_date) as end_date\nfrom emergency_department_professional_claim_lines\ngroup by \n    claim_id\n    , claim_line_number\n    , patient_id\n),\n\n\nroll_up_professional_claims_to_institutional_claims as (\n    select\n    aa.patient_id\n    , aa.claim_id\n    , aa.claim_line_number\n    , aa.start_date\n    , aa.end_date\n    , bb.encounter_id\n    , case\n            when bb.encounter_id is null then 1\n            else 0\n    end as orphan_claim_flag\n    from emergency_department_professional_claim_dates aa\n    left join tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_start_and_end_dates bb\n    on aa.patient_id = bb.patient_id\n    and (coalesce(aa.start_date, aa.end_date) between coalesce(bb.encounter_start_date, bb.determined_encounter_start_date) and coalesce(bb.encounter_end_date, bb.determined_encounter_end_date))\n    and (coalesce(aa.end_date, aa.start_date) between coalesce(bb.encounter_start_date, bb.determined_encounter_start_date) and coalesce(bb.encounter_end_date, bb.determined_encounter_end_date))\n),\n\nprofessional_claims_in_more_than_one_encounter as (\nselect\n  patient_id\n , claim_id\n , claim_line_number\n , min(start_date) as start_date\n , max(end_date) as end_date\n , count(distinct encounter_id) as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims\ngroup by patient_id, claim_id, claim_line_number\nhaving count(distinct encounter_id) > 1\n),\n\n\nprofessional_claims_not_in_more_than_one_encounter as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.orphan_claim_flag,\n  case\n    when (aa.orphan_claim_flag = 1) then 0\n    else 1\n  end as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims aa\nleft join professional_claims_in_more_than_one_encounter bb\non aa.claim_id = bb.claim_id\nand aa.claim_line_number = bb.claim_line_number\nand aa.patient_id = bb.patient_id\nwhere (bb.patient_id is null) and (bb.claim_id is null)\n),\n\n\nall_emergency_department_professional_claims as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  encounter_id,\n  orphan_claim_flag,\n  encounter_count\nfrom professional_claims_not_in_more_than_one_encounter\n\nunion all\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  null as encounter_id,\n  0 as orphan_claim_count,\n  encounter_count\nfrom professional_claims_in_more_than_one_encounter\n)\n\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom all_emergency_department_professional_claims", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.emergency_department__stg_service_category", "sql": " __dbt__cte__emergency_department__stg_service_category as (\n\n\n\nselect\n    claim_id\n    , claim_type\n    , claim_line_number\n    , service_category_2\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper\n)"}, {"id": "model.the_tuva_project.emergency_department__stg_medical_claim", "sql": " __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__stg_eligibility": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "emergency_department__stg_eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/staging/emergency_department__stg_eligibility.sql", "original_file_path": "models/claims_preprocessing/emergency_department/staging/emergency_department__stg_eligibility.sql", "unique_id": "model.the_tuva_project.emergency_department__stg_eligibility", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "staging", "emergency_department__stg_eligibility"], "alias": "emergency_department__stg_eligibility", "checksum": {"name": "sha256", "checksum": "1bd9ca7bf8cd5223c8899ea469f329321267b6eade053479c71ec8f908ac1cd8"}, "config": {"enabled": true, "alias": "emergency_department__stg_eligibility", "schema": null, "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"alias": "emergency_department__stg_eligibility", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2238052, "relation_name": null, "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect\r\n    patient_id\r\n    , birth_date\r\n    , gender\r\n    , race\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__eligibility') }}", "language": "sql", "refs": [{"name": "normalized_input__eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/staging/emergency_department__stg_eligibility.sql", "compiled": true, "compiled_code": "\n\nselect\n    patient_id\n    , birth_date\n    , gender\n    , race\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_eligibility", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__stg_medical_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "emergency_department__stg_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/staging/emergency_department__stg_medical_claim.sql", "original_file_path": "models/claims_preprocessing/emergency_department/staging/emergency_department__stg_medical_claim.sql", "unique_id": "model.the_tuva_project.emergency_department__stg_medical_claim", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "staging", "emergency_department__stg_medical_claim"], "alias": "emergency_department__stg_medical_claim", "checksum": {"name": "sha256", "checksum": "4365a2093999ddc140f0034a80966ba040b8f647c4a61577381650fbfce367c5"}, "config": {"enabled": true, "alias": "emergency_department__stg_medical_claim", "schema": null, "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"alias": "emergency_department__stg_medical_claim", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2281363, "relation_name": null, "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect \r\n    claim_id\r\n    , claim_line_number\r\n    , patient_id\r\n    , claim_type\r\n    , claim_start_date\r\n    , claim_end_date\r\n    , admission_date\r\n    , discharge_date\r\n    , facility_npi\r\n    , ms_drg_code\r\n    , apr_drg_code\r\n    , admit_source_code\r\n    , admit_type_code\r\n    , discharge_disposition_code\r\n    , paid_amount\r\n    , allowed_amount\r\n    , charge_amount\r\n    , diagnosis_code_type\r\n    , diagnosis_code_1\r\n    , data_source\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__medical_claim') }}", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/staging/emergency_department__stg_medical_claim.sql", "compiled": true, "compiled_code": "\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.emergency_department__stg_service_category": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "emergency_department__stg_service_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/emergency_department/staging/emergency_department__stg_service_category.sql", "original_file_path": "models/claims_preprocessing/emergency_department/staging/emergency_department__stg_service_category.sql", "unique_id": "model.the_tuva_project.emergency_department__stg_service_category", "fqn": ["the_tuva_project", "claims_preprocessing", "emergency_department", "staging", "emergency_department__stg_service_category"], "alias": "emergency_department__stg_service_category", "checksum": {"name": "sha256", "checksum": "35c03761a4196a871dc44fc5a9b7a8e2cec88fde6a979d87d127cdcdb81ad7f8"}, "config": {"enabled": true, "alias": "emergency_department__stg_service_category", "schema": null, "database": "tuva_project_demo", "tags": ["emergency_department", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["emergency_department", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"alias": "emergency_department__stg_service_category", "tags": ["emergency_department", "claims_preprocessing"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.23275, "relation_name": null, "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , claim_type\r\n    , claim_line_number\r\n    , service_category_2\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('service_category__service_category_grouper')}}", "language": "sql", "refs": [{"name": "service_category__service_category_grouper", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__service_category_grouper"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/emergency_department/staging/emergency_department__stg_service_category.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , claim_type\n    , claim_line_number\n    , service_category_2\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.service_category_grouper", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__eligibility": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/final/normalized_input__eligibility.sql", "original_file_path": "models/claims_preprocessing/normalized_input/final/normalized_input__eligibility.sql", "unique_id": "model.the_tuva_project.normalized_input__eligibility", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "final", "normalized_input__eligibility"], "alias": "normalized_input_eligibility", "checksum": {"name": "sha256", "checksum": "4ab0ce1fb9d88b24759c4366b3923b56849e6d64fe70a35e2950f3e9e835fb2c"}, "config": {"enabled": true, "alias": "normalized_input_eligibility", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "The eligibility table contains information on patient health plan and \nsupplemental insurance eligibility.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or  health plan. A patient can have more than one member_id because they  can have more than one insurance product/plan.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Date the patient was born.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "Date the patient died.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_start_date": {"name": "enrollment_start_date", "description": "Date the patient's insurance eligibility began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_end_date": {"name": "enrollment_end_date", "description": "Date the patient's insurance eligibility ended.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer (i.e. health insurer) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer_type": {"name": "payer_type", "description": "Type of payer (e.g. commercial, medicare, medicaid, etc.).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__payer_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan (i.e. sub contract) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_reason_entitlement_code": {"name": "original_reason_entitlement_code", "description": "Original reason for Medicare entitlement code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__medicare_orec.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dual_status_code": {"name": "dual_status_code", "description": "Indicates whether the patient is dually eligible for Medicare and  Medicaid.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__medicare_dual_eligibility.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medicare_status_code": {"name": "medicare_status_code", "description": "Indicates how the patient became eligible for Medicare.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__medicare_status.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "normalized_input_eligibility", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4836643, "relation_name": "tuva_project_demo.claims_preprocessing.normalized_input_eligibility", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    cast(elig.patient_id as {{ dbt.type_string() }} ) as patient_id\r\n    , cast(elig.member_id as {{ dbt.type_string() }} ) as member_id\r\n    , cast(elig.gender as {{ dbt.type_string() }} ) as gender\r\n    , cast(elig.race as {{ dbt.type_string() }} ) as race\r\n    , cast(date_norm.normalized_birth_date as date ) as birth_date\r\n    , cast(date_norm.normalized_death_date as date ) as death_date\r\n    , cast(elig.death_flag as int ) as death_flag\r\n    , cast(date_norm.normalized_enrollment_start_date as date ) as enrollment_start_date\r\n    , cast(date_norm.normalized_enrollment_end_date as date ) as enrollment_end_date\r\n    , cast(elig.payer as {{ dbt.type_string() }} ) as payer\r\n    , cast(elig.payer_type as {{ dbt.type_string() }} ) as payer_type\r\n    , cast(elig.plan as {{ dbt.type_string() }} ) as plan\r\n    , cast(elig.original_reason_entitlement_code as {{ dbt.type_string() }} ) as original_reason_entitlement_code\r\n    , cast(elig.dual_status_code as {{ dbt.type_string() }} ) as dual_status_code\r\n    , cast(elig.medicare_status_code as {{ dbt.type_string() }} ) as medicare_status_code\r\n    , cast(elig.first_name as {{ dbt.type_string() }} ) as first_name\r\n    , cast(elig.last_name as {{ dbt.type_string() }} ) as last_name\r\n    , cast(elig.address as {{ dbt.type_string() }} ) as address\r\n    , cast(elig.city as {{ dbt.type_string() }} ) as city\r\n    , cast(elig.state as {{ dbt.type_string() }} ) as state\r\n    , cast(elig.zip_code as {{ dbt.type_string() }} ) as zip_code\r\n    , cast(elig.phone as {{ dbt.type_string() }} ) as phone\r\n    , cast(elig.data_source as {{ dbt.type_string() }} ) as data_source\r\n    , cast('{{ var('tuva_last_run')}}'  as {{ dbt.type_string() }} ) as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_eligibility') }} elig\r\nleft join {{ ref('normalized_input__int_eligibility_dates_normalize') }} date_norm\r\n    on elig.patient_id_key = date_norm.patient_id_key", "language": "sql", "refs": [{"name": "normalized_input__stg_eligibility", "package": null, "version": null}, {"name": "normalized_input__int_eligibility_dates_normalize", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.normalized_input__stg_eligibility", "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/final/normalized_input__eligibility.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.eligibility\n) select\n    cast(elig.patient_id as TEXT ) as patient_id\n    , cast(elig.member_id as TEXT ) as member_id\n    , cast(elig.gender as TEXT ) as gender\n    , cast(elig.race as TEXT ) as race\n    , cast(date_norm.normalized_birth_date as date ) as birth_date\n    , cast(date_norm.normalized_death_date as date ) as death_date\n    , cast(elig.death_flag as int ) as death_flag\n    , cast(date_norm.normalized_enrollment_start_date as date ) as enrollment_start_date\n    , cast(date_norm.normalized_enrollment_end_date as date ) as enrollment_end_date\n    , cast(elig.payer as TEXT ) as payer\n    , cast(elig.payer_type as TEXT ) as payer_type\n    , cast(elig.plan as TEXT ) as plan\n    , cast(elig.original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code\n    , cast(elig.dual_status_code as TEXT ) as dual_status_code\n    , cast(elig.medicare_status_code as TEXT ) as medicare_status_code\n    , cast(elig.first_name as TEXT ) as first_name\n    , cast(elig.last_name as TEXT ) as last_name\n    , cast(elig.address as TEXT ) as address\n    , cast(elig.city as TEXT ) as city\n    , cast(elig.state as TEXT ) as state\n    , cast(elig.zip_code as TEXT ) as zip_code\n    , cast(elig.phone as TEXT ) as phone\n    , cast(elig.data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00'  as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_eligibility_dates_normalize date_norm\n    on elig.patient_id_key = date_norm.patient_id_key", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_eligibility", "sql": " __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.eligibility\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__medical_claim": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/final/normalized_input__medical_claim.sql", "original_file_path": "models/claims_preprocessing/normalized_input/final/normalized_input__medical_claim.sql", "unique_id": "model.the_tuva_project.normalized_input__medical_claim", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "final", "normalized_input__medical_claim"], "alias": "normalized_input_medical_claim", "checksum": {"name": "sha256", "checksum": "bd927c8e5ef3c254f37581eafeb94d6e6615ffc20eedd940e0e4cd48256a2019"}, "config": {"enabled": true, "alias": "normalized_input_medical_claim", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "The medical claim table contains information on services rendered to \npatients and billed by the provider to the insurer as claims.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.\n", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional  (UB-04), dental, or vision.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__claim_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or  health plan. A patient can have more than one member_id because they  can have more than one insurance product/plan.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_start_date": {"name": "claim_start_date", "description": "Start date for the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_end_date": {"name": "claim_end_date", "description": "End date for the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_start_date": {"name": "claim_line_start_date", "description": "Start date for the claim line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_end_date": {"name": "claim_line_end_date", "description": "End date for the claim line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admission_date": {"name": "admission_date", "description": "Admission date for the claim (inpatient claims only).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "Discharge date for the claim (inpatient claims only).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "Indicates where the patient was before the healthcare encounter  (inpatient claims only).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__admit_source.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "Indicates the type of admission (inpatient claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__admit_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "Indicates the type of setting the patient was discharged to  (institutional inpatient claims only).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__discharge_disposition.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "place_of_service_code": {"name": "place_of_service_code", "description": "Place of service for the claim (professional claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__place_of_service.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_type_code": {"name": "bill_type_code", "description": "Bill type code for the claim (institutional claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__bill_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "MS-DRG for the claim (inpatient claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__ms_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apr_drg_code": {"name": "apr_drg_code", "description": "APR-DRG for the claim (inpatient claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__apr_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "revenue_center_code": {"name": "revenue_center_code", "description": "Revenue center code for the claim line (institutional only and  typically multiple codes per claim).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__revenue_center.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_unit_quantity": {"name": "service_unit_quantity", "description": "The number of units for the particular revenue center code.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hcpcs_code": {"name": "hcpcs_code", "description": "HCPCS level 1 or level 2 code for the claim line.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_1": {"name": "hcpcs_modifier_1", "description": "1st modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_2": {"name": "hcpcs_modifier_2", "description": "2nd modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_3": {"name": "hcpcs_modifier_3", "description": "3rd modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_4": {"name": "hcpcs_modifier_4", "description": "4th modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_5": {"name": "hcpcs_modifier_5", "description": "5th modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rendering_npi": {"name": "rendering_npi", "description": "Rendering NPI for the claim (typically represents the physician or  entity providing services).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_npi": {"name": "billing_npi", "description": "Billing NPI for the claim (typically represents organization billing  the claim).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "Facility NPI for the claim (typically represents the facility where  services were performed).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "The date the claim was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "The total amount paid on the claim by the insurer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "The total amount allowed (includes amount paid by the insurer and  patient) on the claim.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The total amount charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coinsurance_amount": {"name": "coinsurance_amount", "description": "The total coinsurance charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "copayment_amount": {"name": "copayment_amount", "description": "The total copayment charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deductible_amount": {"name": "deductible_amount", "description": "The total amount charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_cost_amount": {"name": "total_cost_amount", "description": "The total amount paid on the claim by different parties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_type": {"name": "encounter_type", "description": "The type of encounter this claim belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "The encounter_id for the encounter that this claims belongs to.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_category_1": {"name": "service_category_1", "description": "The broader service category this claim belongs to.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/service_categories/service_category__service_categories.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_category_2": {"name": "service_category_2", "description": "The more specific service category this claim belongs to.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/service_categories/service_category__service_categories.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "normalized_input_medical_claim", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.503735, "relation_name": "tuva_project_demo.claims_preprocessing.normalized_input_medical_claim", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n\tcast(med.claim_id as {{ dbt.type_string() }} ) as claim_id\r\n\t, cast(med.claim_line_number as int ) as claim_line_number\r\n\t, cast(med.claim_type as {{ dbt.type_string() }} ) as claim_type\r\n\t, cast(med.patient_id as {{ dbt.type_string() }} ) as patient_id\r\n\t, cast(med.member_id as {{ dbt.type_string() }} ) as member_id\r\n\t, cast(med.payer as {{ dbt.type_string() }} ) as payer\r\n\t, cast(med.plan as {{ dbt.type_string() }} ) as plan\r\n\t, cast(coalesce(dates.minimum_claim_start_date, undetermined.claim_start_date) as date ) as claim_start_date\r\n\t, cast(coalesce(dates.maximum_claim_end_date, undetermined.claim_start_date) as date ) as claim_end_date\r\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_start_date, undetermined.claim_line_start_date) as date ) as claim_line_start_date\r\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_end_date, undetermined.claim_line_end_date) as date ) as claim_line_end_date\r\n\t, cast(coalesce(dates.minimum_admission_date, undetermined.admission_date) as date ) as admission_date\r\n\t, cast(coalesce(dates.maximum_discharge_date, undetermined.discharge_date) as date ) as discharge_date\r\n\t, cast(coalesce(ad_source.normalized_code, undetermined.admit_source_code) as {{ dbt.type_string() }} ) as admit_source_code\r\n\t, cast(coalesce(ad_type.normalized_code, undetermined.admit_type_code) as {{ dbt.type_string() }} ) as admit_type_code\r\n\t, cast(coalesce(disch_disp.normalized_code, undetermined.discharge_disposition_code) as {{ dbt.type_string() }} ) as discharge_disposition_code\r\n\t, cast(coalesce(pos.normalized_code, undetermined.place_of_service_code) as {{ dbt.type_string() }} ) as place_of_service_code\r\n\t, cast(coalesce(bill.normalized_code, undetermined.bill_type_code) as {{ dbt.type_string() }} ) as bill_type_code\r\n\t, cast(coalesce(ms.normalized_code, undetermined.ms_drg_code) as {{ dbt.type_string() }} ) as ms_drg_code\r\n\t, cast(coalesce(apr.normalized_code, undetermined.apr_drg_code) as {{ dbt.type_string() }} ) as apr_drg_code\r\n\t, cast(coalesce(rev.normalized_code, undetermined.revenue_center_code) as {{ dbt.type_string() }} ) as revenue_center_code\r\n\t, cast(med.service_unit_quantity as {{ dbt.type_string() }} ) as service_unit_quantity\r\n\t, cast(med.hcpcs_code as {{ dbt.type_string() }} ) as hcpcs_code\r\n\t, cast(med.hcpcs_modifier_1 as {{ dbt.type_string() }} ) as hcpcs_modifier_1\r\n\t, cast(med.hcpcs_modifier_2 as {{ dbt.type_string() }} ) as hcpcs_modifier_2\r\n\t, cast(med.hcpcs_modifier_3 as {{ dbt.type_string() }} ) as hcpcs_modifier_3\r\n\t, cast(med.hcpcs_modifier_4 as {{ dbt.type_string() }} ) as hcpcs_modifier_4\r\n\t, cast(med.hcpcs_modifier_5 as {{ dbt.type_string() }} ) as hcpcs_modifier_5\r\n\t, cast(coalesce(med_npi.normalized_rendering_npi, undetermined.rendering_npi) as {{ dbt.type_string() }} ) as rendering_npi\r\n\t, cast(coalesce(med_npi.normalized_billing_npi, undetermined.billing_npi) as {{ dbt.type_string() }} ) as billing_npi\r\n\t, cast(coalesce(med_npi.normalized_facility_npi, undetermined.facility_npi) as {{ dbt.type_string() }} ) as facility_npi\r\n\t, cast(med.paid_date as date ) as paid_date\r\n\t, cast(med.paid_amount as {{ dbt.type_numeric() }} ) as paid_amount\r\n\t, cast(med.allowed_amount as {{ dbt.type_numeric() }} ) as allowed_amount\r\n\t, cast(med.charge_amount as {{ dbt.type_numeric() }} ) as charge_amount\r\n\t, cast(med.coinsurance_amount as {{ dbt.type_numeric() }} ) as coinsurance_amount\r\n\t, cast(med.copayment_amount as {{ dbt.type_numeric() }} ) as copayment_amount\r\n\t, cast(med.deductible_amount as {{ dbt.type_numeric() }} ) as deductible_amount\r\n\t, cast(med.total_cost_amount as {{ dbt.type_numeric() }} ) as total_cost_amount\r\n\t, cast(med.diagnosis_code_type as {{ dbt.type_string() }} ) as diagnosis_code_type\r\n\t, cast(coalesce(dx_code.diagnosis_code_1, undetermined.diagnosis_code_1) as {{ dbt.type_string() }} ) as diagnosis_code_1\r\n\t, cast(coalesce(dx_code.diagnosis_code_2, undetermined.diagnosis_code_2) as {{ dbt.type_string() }} ) as diagnosis_code_2\r\n\t, cast(coalesce(dx_code.diagnosis_code_3, undetermined.diagnosis_code_3) as {{ dbt.type_string() }} ) as diagnosis_code_3\r\n\t, cast(coalesce(dx_code.diagnosis_code_4, undetermined.diagnosis_code_4) as {{ dbt.type_string() }} ) as diagnosis_code_4\r\n\t, cast(coalesce(dx_code.diagnosis_code_5, undetermined.diagnosis_code_5) as {{ dbt.type_string() }} ) as diagnosis_code_5\r\n\t, cast(coalesce(dx_code.diagnosis_code_6, undetermined.diagnosis_code_6) as {{ dbt.type_string() }} ) as diagnosis_code_6\r\n\t, cast(coalesce(dx_code.diagnosis_code_7, undetermined.diagnosis_code_7) as {{ dbt.type_string() }} ) as diagnosis_code_7\r\n\t, cast(coalesce(dx_code.diagnosis_code_8, undetermined.diagnosis_code_8) as {{ dbt.type_string() }} ) as diagnosis_code_8\r\n\t, cast(coalesce(dx_code.diagnosis_code_9, undetermined.diagnosis_code_9) as {{ dbt.type_string() }} ) as diagnosis_code_9\r\n\t, cast(coalesce(dx_code.diagnosis_code_10, undetermined.diagnosis_code_10) as {{ dbt.type_string() }} ) as diagnosis_code_10\r\n\t, cast(coalesce(dx_code.diagnosis_code_11, undetermined.diagnosis_code_11) as {{ dbt.type_string() }} ) as diagnosis_code_11\r\n\t, cast(coalesce(dx_code.diagnosis_code_12, undetermined.diagnosis_code_12) as {{ dbt.type_string() }} ) as diagnosis_code_12\r\n\t, cast(coalesce(dx_code.diagnosis_code_13, undetermined.diagnosis_code_13) as {{ dbt.type_string() }} ) as diagnosis_code_13\r\n\t, cast(coalesce(dx_code.diagnosis_code_14, undetermined.diagnosis_code_14) as {{ dbt.type_string() }} ) as diagnosis_code_14\r\n\t, cast(coalesce(dx_code.diagnosis_code_15, undetermined.diagnosis_code_15) as {{ dbt.type_string() }} ) as diagnosis_code_15\r\n\t, cast(coalesce(dx_code.diagnosis_code_16, undetermined.diagnosis_code_16) as {{ dbt.type_string() }} ) as diagnosis_code_16\r\n\t, cast(coalesce(dx_code.diagnosis_code_17, undetermined.diagnosis_code_17) as {{ dbt.type_string() }} ) as diagnosis_code_17\r\n\t, cast(coalesce(dx_code.diagnosis_code_18, undetermined.diagnosis_code_18) as {{ dbt.type_string() }} ) as diagnosis_code_18\r\n\t, cast(coalesce(dx_code.diagnosis_code_19, undetermined.diagnosis_code_19) as {{ dbt.type_string() }} ) as diagnosis_code_19\r\n\t, cast(coalesce(dx_code.diagnosis_code_20, undetermined.diagnosis_code_20) as {{ dbt.type_string() }} ) as diagnosis_code_20\r\n\t, cast(coalesce(dx_code.diagnosis_code_21, undetermined.diagnosis_code_21) as {{ dbt.type_string() }} ) as diagnosis_code_21\r\n\t, cast(coalesce(dx_code.diagnosis_code_22, undetermined.diagnosis_code_22) as {{ dbt.type_string() }} ) as diagnosis_code_22\r\n\t, cast(coalesce(dx_code.diagnosis_code_23, undetermined.diagnosis_code_23) as {{ dbt.type_string() }} ) as diagnosis_code_23\r\n\t, cast(coalesce(dx_code.diagnosis_code_24, undetermined.diagnosis_code_24) as {{ dbt.type_string() }} ) as diagnosis_code_24\r\n\t, cast(coalesce(dx_code.diagnosis_code_25, undetermined.diagnosis_code_25) as {{ dbt.type_string() }} ) as diagnosis_code_25\r\n\t, cast(coalesce(poa.diagnosis_poa_1, undetermined.diagnosis_poa_1) as {{ dbt.type_string() }} ) as diagnosis_poa_1\r\n\t, cast(coalesce(poa.diagnosis_poa_2, undetermined.diagnosis_poa_2) as {{ dbt.type_string() }} ) as diagnosis_poa_2\r\n\t, cast(coalesce(poa.diagnosis_poa_3, undetermined.diagnosis_poa_3) as {{ dbt.type_string() }} ) as diagnosis_poa_3\r\n\t, cast(coalesce(poa.diagnosis_poa_4, undetermined.diagnosis_poa_4) as {{ dbt.type_string() }} ) as diagnosis_poa_4\r\n\t, cast(coalesce(poa.diagnosis_poa_5, undetermined.diagnosis_poa_5) as {{ dbt.type_string() }} ) as diagnosis_poa_5\r\n\t, cast(coalesce(poa.diagnosis_poa_6, undetermined.diagnosis_poa_6) as {{ dbt.type_string() }} ) as diagnosis_poa_6\r\n\t, cast(coalesce(poa.diagnosis_poa_7, undetermined.diagnosis_poa_7) as {{ dbt.type_string() }} ) as diagnosis_poa_7\r\n\t, cast(coalesce(poa.diagnosis_poa_8, undetermined.diagnosis_poa_8) as {{ dbt.type_string() }} ) as diagnosis_poa_8\r\n\t, cast(coalesce(poa.diagnosis_poa_9, undetermined.diagnosis_poa_9) as {{ dbt.type_string() }} ) as diagnosis_poa_9\r\n\t, cast(coalesce(poa.diagnosis_poa_10, undetermined.diagnosis_poa_10) as {{ dbt.type_string() }} ) as diagnosis_poa_10\r\n\t, cast(coalesce(poa.diagnosis_poa_11, undetermined.diagnosis_poa_11) as {{ dbt.type_string() }} ) as diagnosis_poa_11\r\n\t, cast(coalesce(poa.diagnosis_poa_12, undetermined.diagnosis_poa_12) as {{ dbt.type_string() }} ) as diagnosis_poa_12\r\n\t, cast(coalesce(poa.diagnosis_poa_13, undetermined.diagnosis_poa_13) as {{ dbt.type_string() }} ) as diagnosis_poa_13\r\n\t, cast(coalesce(poa.diagnosis_poa_14, undetermined.diagnosis_poa_14) as {{ dbt.type_string() }} ) as diagnosis_poa_14\r\n\t, cast(coalesce(poa.diagnosis_poa_15, undetermined.diagnosis_poa_15) as {{ dbt.type_string() }} ) as diagnosis_poa_15\r\n\t, cast(coalesce(poa.diagnosis_poa_16, undetermined.diagnosis_poa_16) as {{ dbt.type_string() }} ) as diagnosis_poa_16\r\n\t, cast(coalesce(poa.diagnosis_poa_17, undetermined.diagnosis_poa_17) as {{ dbt.type_string() }} ) as diagnosis_poa_17\r\n\t, cast(coalesce(poa.diagnosis_poa_18, undetermined.diagnosis_poa_18) as {{ dbt.type_string() }} ) as diagnosis_poa_18\r\n\t, cast(coalesce(poa.diagnosis_poa_19, undetermined.diagnosis_poa_19) as {{ dbt.type_string() }} ) as diagnosis_poa_19\r\n\t, cast(coalesce(poa.diagnosis_poa_20, undetermined.diagnosis_poa_20) as {{ dbt.type_string() }} ) as diagnosis_poa_20\r\n\t, cast(coalesce(poa.diagnosis_poa_21, undetermined.diagnosis_poa_21) as {{ dbt.type_string() }} ) as diagnosis_poa_21\r\n\t, cast(coalesce(poa.diagnosis_poa_22, undetermined.diagnosis_poa_22) as {{ dbt.type_string() }} ) as diagnosis_poa_22\r\n\t, cast(coalesce(poa.diagnosis_poa_23, undetermined.diagnosis_poa_23) as {{ dbt.type_string() }} ) as diagnosis_poa_23\r\n\t, cast(coalesce(poa.diagnosis_poa_24, undetermined.diagnosis_poa_24) as {{ dbt.type_string() }} ) as diagnosis_poa_24\r\n\t, cast(coalesce(poa.diagnosis_poa_25, undetermined.diagnosis_poa_25) as {{ dbt.type_string() }} ) as diagnosis_poa_25\r\n\t, cast(med.procedure_code_type as {{ dbt.type_string() }} ) as procedure_code_type\r\n\t, cast(coalesce(px_code.procedure_code_1, undetermined.procedure_code_1) as {{ dbt.type_string() }} ) as procedure_code_1\r\n\t, cast(coalesce(px_code.procedure_code_2, undetermined.procedure_code_2) as {{ dbt.type_string() }} ) as procedure_code_2\r\n\t, cast(coalesce(px_code.procedure_code_3, undetermined.procedure_code_3) as {{ dbt.type_string() }} ) as procedure_code_3\r\n\t, cast(coalesce(px_code.procedure_code_4, undetermined.procedure_code_4) as {{ dbt.type_string() }} ) as procedure_code_4\r\n\t, cast(coalesce(px_code.procedure_code_5, undetermined.procedure_code_5) as {{ dbt.type_string() }} ) as procedure_code_5\r\n\t, cast(coalesce(px_code.procedure_code_6, undetermined.procedure_code_6) as {{ dbt.type_string() }} ) as procedure_code_6\r\n\t, cast(coalesce(px_code.procedure_code_7, undetermined.procedure_code_7) as {{ dbt.type_string() }} ) as procedure_code_7\r\n\t, cast(coalesce(px_code.procedure_code_8, undetermined.procedure_code_8) as {{ dbt.type_string() }} ) as procedure_code_8\r\n\t, cast(coalesce(px_code.procedure_code_9, undetermined.procedure_code_9) as {{ dbt.type_string() }} ) as procedure_code_9\r\n\t, cast(coalesce(px_code.procedure_code_10, undetermined.procedure_code_10) as {{ dbt.type_string() }} ) as procedure_code_10\r\n\t, cast(coalesce(px_code.procedure_code_11, undetermined.procedure_code_11) as {{ dbt.type_string() }} ) as procedure_code_11\r\n\t, cast(coalesce(px_code.procedure_code_12, undetermined.procedure_code_12) as {{ dbt.type_string() }} ) as procedure_code_12\r\n\t, cast(coalesce(px_code.procedure_code_13, undetermined.procedure_code_13) as {{ dbt.type_string() }} ) as procedure_code_13\r\n\t, cast(coalesce(px_code.procedure_code_14, undetermined.procedure_code_14) as {{ dbt.type_string() }} ) as procedure_code_14\r\n\t, cast(coalesce(px_code.procedure_code_15, undetermined.procedure_code_15) as {{ dbt.type_string() }} ) as procedure_code_15\r\n\t, cast(coalesce(px_code.procedure_code_16, undetermined.procedure_code_16) as {{ dbt.type_string() }} ) as procedure_code_16\r\n\t, cast(coalesce(px_code.procedure_code_17, undetermined.procedure_code_17) as {{ dbt.type_string() }} ) as procedure_code_17\r\n\t, cast(coalesce(px_code.procedure_code_18, undetermined.procedure_code_18) as {{ dbt.type_string() }} ) as procedure_code_18\r\n\t, cast(coalesce(px_code.procedure_code_19, undetermined.procedure_code_19) as {{ dbt.type_string() }} ) as procedure_code_19\r\n\t, cast(coalesce(px_code.procedure_code_20, undetermined.procedure_code_20) as {{ dbt.type_string() }} ) as procedure_code_20\r\n\t, cast(coalesce(px_code.procedure_code_21, undetermined.procedure_code_21) as {{ dbt.type_string() }} ) as procedure_code_21\r\n\t, cast(coalesce(px_code.procedure_code_22, undetermined.procedure_code_22) as {{ dbt.type_string() }} ) as procedure_code_22\r\n\t, cast(coalesce(px_code.procedure_code_23, undetermined.procedure_code_23) as {{ dbt.type_string() }} ) as procedure_code_23\r\n\t, cast(coalesce(px_code.procedure_code_24, undetermined.procedure_code_24) as {{ dbt.type_string() }} ) as procedure_code_24\r\n\t, cast(coalesce(px_code.procedure_code_25, undetermined.procedure_code_25) as {{ dbt.type_string() }} ) as procedure_code_25\r\n\t, cast(coalesce(px_date.procedure_date_1, undetermined.procedure_date_1) as date ) as procedure_date_1\r\n\t, cast(coalesce(px_date.procedure_date_2, undetermined.procedure_date_2) as date ) as procedure_date_2\r\n\t, cast(coalesce(px_date.procedure_date_3, undetermined.procedure_date_3) as date ) as procedure_date_3\r\n\t, cast(coalesce(px_date.procedure_date_4, undetermined.procedure_date_4) as date ) as procedure_date_4\r\n\t, cast(coalesce(px_date.procedure_date_5, undetermined.procedure_date_5) as date ) as procedure_date_5\r\n\t, cast(coalesce(px_date.procedure_date_6, undetermined.procedure_date_6) as date ) as procedure_date_6\r\n\t, cast(coalesce(px_date.procedure_date_7, undetermined.procedure_date_7) as date ) as procedure_date_7\r\n\t, cast(coalesce(px_date.procedure_date_8, undetermined.procedure_date_8) as date ) as procedure_date_8\r\n\t, cast(coalesce(px_date.procedure_date_9, undetermined.procedure_date_9) as date ) as procedure_date_9\r\n\t, cast(coalesce(px_date.procedure_date_10, undetermined.procedure_date_10) as date ) as procedure_date_10\r\n\t, cast(coalesce(px_date.procedure_date_11, undetermined.procedure_date_11) as date ) as procedure_date_11\r\n\t, cast(coalesce(px_date.procedure_date_12, undetermined.procedure_date_12) as date ) as procedure_date_12\r\n\t, cast(coalesce(px_date.procedure_date_13, undetermined.procedure_date_13) as date ) as procedure_date_13\r\n\t, cast(coalesce(px_date.procedure_date_14, undetermined.procedure_date_14) as date ) as procedure_date_14\r\n\t, cast(coalesce(px_date.procedure_date_15, undetermined.procedure_date_15) as date ) as procedure_date_15\r\n\t, cast(coalesce(px_date.procedure_date_16, undetermined.procedure_date_16) as date ) as procedure_date_16\r\n\t, cast(coalesce(px_date.procedure_date_17, undetermined.procedure_date_17) as date ) as procedure_date_17\r\n\t, cast(coalesce(px_date.procedure_date_18, undetermined.procedure_date_18) as date ) as procedure_date_18\r\n\t, cast(coalesce(px_date.procedure_date_19, undetermined.procedure_date_19) as date ) as procedure_date_19\r\n\t, cast(coalesce(px_date.procedure_date_20, undetermined.procedure_date_20) as date ) as procedure_date_20\r\n\t, cast(coalesce(px_date.procedure_date_21, undetermined.procedure_date_21) as date ) as procedure_date_21\r\n\t, cast(coalesce(px_date.procedure_date_22, undetermined.procedure_date_22) as date ) as procedure_date_22\r\n\t, cast(coalesce(px_date.procedure_date_23, undetermined.procedure_date_23) as date ) as procedure_date_23\r\n\t, cast(coalesce(px_date.procedure_date_24, undetermined.procedure_date_24) as date ) as procedure_date_24\r\n\t, cast(coalesce(px_date.procedure_date_25, undetermined.procedure_date_25) as date ) as procedure_date_25\r\n\t, cast(med.data_source as {{ dbt.type_string() }} ) as data_source\r\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_string() }} ) as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_medical_claim') }} med\r\nleft join {{ref('normalized_input__int_admit_source_final') }} ad_source\r\n    on med.claim_id = ad_source.claim_id\r\n    and med.data_source = ad_source.data_source\r\nleft join {{ref('normalized_input__int_admit_type_final') }} ad_type\r\n    on med.claim_id = ad_type.claim_id\r\n    and med.data_source = ad_type.data_source\r\nleft join {{ref('normalized_input__int_apr_drg_final') }} apr\r\n    on med.claim_id = apr.claim_id\r\n    and med.data_source = apr.data_source\r\nleft join {{ref('normalized_input__int_bill_type_final') }} bill\r\n    on med.claim_id = bill.claim_id\r\n    and med.data_source = bill.data_source\r\nleft join {{ref('normalized_input__int_medical_claim_date_normalize') }} claim_line_dates\r\n    on med.claim_id = claim_line_dates.claim_id\r\n    and med.claim_line_number = claim_line_dates.claim_line_number\r\n    and med.data_source = claim_line_dates.data_source\r\nleft join {{ref('normalized_input__int_medical_date_aggregation') }} dates\r\n    on med.claim_id = dates.claim_id\r\n    and med.data_source = dates.data_source\r\nleft join {{ref('normalized_input__int_medical_npi_normalize') }} med_npi\r\n    on med.claim_id = med_npi.claim_id\r\n    and med.claim_line_number = med_npi.claim_line_number\r\n    and med.data_source = med_npi.data_source\r\nleft join {{ref('normalized_input__int_discharge_disposition_final') }} disch_disp\r\n    on med.claim_id = disch_disp.claim_id\r\n    and med.data_source = disch_disp.data_source\r\nleft join {{ref('normalized_input__int_ms_drg_final') }} ms\r\n    on med.claim_id = ms.claim_id\r\n    and med.data_source = ms.data_source\r\nleft join {{ref('normalized_input__int_place_of_service_normalize') }} pos\r\n    on med.claim_id = pos.claim_id\r\n    and med.claim_line_number = pos.claim_line_number\r\n    and med.data_source = pos.data_source\r\nleft join {{ref('normalized_input__int_diagnosis_code_final') }} dx_code\r\n    on med.claim_id = dx_code.claim_id\r\n    and med.data_source = dx_code.data_source\r\nleft join {{ref('normalized_input__int_present_on_admit_final') }} poa\r\n    on med.claim_id = poa.claim_id\r\n    and med.data_source = poa.data_source\r\nleft join {{ref('normalized_input__int_procedure_code_final') }} px_code\r\n    on med.claim_id = px_code.claim_id\r\n    and med.data_source = px_code.data_source\r\nleft join {{ref('normalized_input__int_procedure_date_final') }} px_date\r\n    on med.claim_id = px_date.claim_id\r\n    and med.data_source = px_date.data_source\r\nleft join {{ref('normalized_input__int_revenue_center_normalize') }} rev\r\n    on med.claim_id = rev.claim_id\r\n    and med.claim_line_number = rev.claim_line_number\r\n    and med.data_source = rev.data_source\r\nleft join {{ref('normalized_input__int_undetermined_claim_type') }} undetermined\r\n    on med.claim_id = undetermined.claim_id\r\n    and med.claim_line_number = undetermined.claim_line_number\r\n    and med.data_source = undetermined.data_source", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__int_admit_source_final", "package": null, "version": null}, {"name": "normalized_input__int_admit_type_final", "package": null, "version": null}, {"name": "normalized_input__int_apr_drg_final", "package": null, "version": null}, {"name": "normalized_input__int_bill_type_final", "package": null, "version": null}, {"name": "normalized_input__int_medical_claim_date_normalize", "package": null, "version": null}, {"name": "normalized_input__int_medical_date_aggregation", "package": null, "version": null}, {"name": "normalized_input__int_medical_npi_normalize", "package": null, "version": null}, {"name": "normalized_input__int_discharge_disposition_final", "package": null, "version": null}, {"name": "normalized_input__int_ms_drg_final", "package": null, "version": null}, {"name": "normalized_input__int_place_of_service_normalize", "package": null, "version": null}, {"name": "normalized_input__int_diagnosis_code_final", "package": null, "version": null}, {"name": "normalized_input__int_present_on_admit_final", "package": null, "version": null}, {"name": "normalized_input__int_procedure_code_final", "package": null, "version": null}, {"name": "normalized_input__int_procedure_date_final", "package": null, "version": null}, {"name": "normalized_input__int_revenue_center_normalize", "package": null, "version": null}, {"name": "normalized_input__int_undetermined_claim_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "model.the_tuva_project.normalized_input__int_admit_source_final", "model.the_tuva_project.normalized_input__int_admit_type_final", "model.the_tuva_project.normalized_input__int_apr_drg_final", "model.the_tuva_project.normalized_input__int_bill_type_final", "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "model.the_tuva_project.normalized_input__int_medical_date_aggregation", "model.the_tuva_project.normalized_input__int_medical_npi_normalize", "model.the_tuva_project.normalized_input__int_discharge_disposition_final", "model.the_tuva_project.normalized_input__int_ms_drg_final", "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "model.the_tuva_project.normalized_input__int_diagnosis_code_final", "model.the_tuva_project.normalized_input__int_present_on_admit_final", "model.the_tuva_project.normalized_input__int_procedure_code_final", "model.the_tuva_project.normalized_input__int_procedure_date_final", "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "model.the_tuva_project.normalized_input__int_undetermined_claim_type"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/final/normalized_input__medical_claim.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n) select\n\tcast(med.claim_id as TEXT ) as claim_id\n\t, cast(med.claim_line_number as int ) as claim_line_number\n\t, cast(med.claim_type as TEXT ) as claim_type\n\t, cast(med.patient_id as TEXT ) as patient_id\n\t, cast(med.member_id as TEXT ) as member_id\n\t, cast(med.payer as TEXT ) as payer\n\t, cast(med.plan as TEXT ) as plan\n\t, cast(coalesce(dates.minimum_claim_start_date, undetermined.claim_start_date) as date ) as claim_start_date\n\t, cast(coalesce(dates.maximum_claim_end_date, undetermined.claim_start_date) as date ) as claim_end_date\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_start_date, undetermined.claim_line_start_date) as date ) as claim_line_start_date\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_end_date, undetermined.claim_line_end_date) as date ) as claim_line_end_date\n\t, cast(coalesce(dates.minimum_admission_date, undetermined.admission_date) as date ) as admission_date\n\t, cast(coalesce(dates.maximum_discharge_date, undetermined.discharge_date) as date ) as discharge_date\n\t, cast(coalesce(ad_source.normalized_code, undetermined.admit_source_code) as TEXT ) as admit_source_code\n\t, cast(coalesce(ad_type.normalized_code, undetermined.admit_type_code) as TEXT ) as admit_type_code\n\t, cast(coalesce(disch_disp.normalized_code, undetermined.discharge_disposition_code) as TEXT ) as discharge_disposition_code\n\t, cast(coalesce(pos.normalized_code, undetermined.place_of_service_code) as TEXT ) as place_of_service_code\n\t, cast(coalesce(bill.normalized_code, undetermined.bill_type_code) as TEXT ) as bill_type_code\n\t, cast(coalesce(ms.normalized_code, undetermined.ms_drg_code) as TEXT ) as ms_drg_code\n\t, cast(coalesce(apr.normalized_code, undetermined.apr_drg_code) as TEXT ) as apr_drg_code\n\t, cast(coalesce(rev.normalized_code, undetermined.revenue_center_code) as TEXT ) as revenue_center_code\n\t, cast(med.service_unit_quantity as TEXT ) as service_unit_quantity\n\t, cast(med.hcpcs_code as TEXT ) as hcpcs_code\n\t, cast(med.hcpcs_modifier_1 as TEXT ) as hcpcs_modifier_1\n\t, cast(med.hcpcs_modifier_2 as TEXT ) as hcpcs_modifier_2\n\t, cast(med.hcpcs_modifier_3 as TEXT ) as hcpcs_modifier_3\n\t, cast(med.hcpcs_modifier_4 as TEXT ) as hcpcs_modifier_4\n\t, cast(med.hcpcs_modifier_5 as TEXT ) as hcpcs_modifier_5\n\t, cast(coalesce(med_npi.normalized_rendering_npi, undetermined.rendering_npi) as TEXT ) as rendering_npi\n\t, cast(coalesce(med_npi.normalized_billing_npi, undetermined.billing_npi) as TEXT ) as billing_npi\n\t, cast(coalesce(med_npi.normalized_facility_npi, undetermined.facility_npi) as TEXT ) as facility_npi\n\t, cast(med.paid_date as date ) as paid_date\n\t, cast(med.paid_amount as numeric(28,6) ) as paid_amount\n\t, cast(med.allowed_amount as numeric(28,6) ) as allowed_amount\n\t, cast(med.charge_amount as numeric(28,6) ) as charge_amount\n\t, cast(med.coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n\t, cast(med.copayment_amount as numeric(28,6) ) as copayment_amount\n\t, cast(med.deductible_amount as numeric(28,6) ) as deductible_amount\n\t, cast(med.total_cost_amount as numeric(28,6) ) as total_cost_amount\n\t, cast(med.diagnosis_code_type as TEXT ) as diagnosis_code_type\n\t, cast(coalesce(dx_code.diagnosis_code_1, undetermined.diagnosis_code_1) as TEXT ) as diagnosis_code_1\n\t, cast(coalesce(dx_code.diagnosis_code_2, undetermined.diagnosis_code_2) as TEXT ) as diagnosis_code_2\n\t, cast(coalesce(dx_code.diagnosis_code_3, undetermined.diagnosis_code_3) as TEXT ) as diagnosis_code_3\n\t, cast(coalesce(dx_code.diagnosis_code_4, undetermined.diagnosis_code_4) as TEXT ) as diagnosis_code_4\n\t, cast(coalesce(dx_code.diagnosis_code_5, undetermined.diagnosis_code_5) as TEXT ) as diagnosis_code_5\n\t, cast(coalesce(dx_code.diagnosis_code_6, undetermined.diagnosis_code_6) as TEXT ) as diagnosis_code_6\n\t, cast(coalesce(dx_code.diagnosis_code_7, undetermined.diagnosis_code_7) as TEXT ) as diagnosis_code_7\n\t, cast(coalesce(dx_code.diagnosis_code_8, undetermined.diagnosis_code_8) as TEXT ) as diagnosis_code_8\n\t, cast(coalesce(dx_code.diagnosis_code_9, undetermined.diagnosis_code_9) as TEXT ) as diagnosis_code_9\n\t, cast(coalesce(dx_code.diagnosis_code_10, undetermined.diagnosis_code_10) as TEXT ) as diagnosis_code_10\n\t, cast(coalesce(dx_code.diagnosis_code_11, undetermined.diagnosis_code_11) as TEXT ) as diagnosis_code_11\n\t, cast(coalesce(dx_code.diagnosis_code_12, undetermined.diagnosis_code_12) as TEXT ) as diagnosis_code_12\n\t, cast(coalesce(dx_code.diagnosis_code_13, undetermined.diagnosis_code_13) as TEXT ) as diagnosis_code_13\n\t, cast(coalesce(dx_code.diagnosis_code_14, undetermined.diagnosis_code_14) as TEXT ) as diagnosis_code_14\n\t, cast(coalesce(dx_code.diagnosis_code_15, undetermined.diagnosis_code_15) as TEXT ) as diagnosis_code_15\n\t, cast(coalesce(dx_code.diagnosis_code_16, undetermined.diagnosis_code_16) as TEXT ) as diagnosis_code_16\n\t, cast(coalesce(dx_code.diagnosis_code_17, undetermined.diagnosis_code_17) as TEXT ) as diagnosis_code_17\n\t, cast(coalesce(dx_code.diagnosis_code_18, undetermined.diagnosis_code_18) as TEXT ) as diagnosis_code_18\n\t, cast(coalesce(dx_code.diagnosis_code_19, undetermined.diagnosis_code_19) as TEXT ) as diagnosis_code_19\n\t, cast(coalesce(dx_code.diagnosis_code_20, undetermined.diagnosis_code_20) as TEXT ) as diagnosis_code_20\n\t, cast(coalesce(dx_code.diagnosis_code_21, undetermined.diagnosis_code_21) as TEXT ) as diagnosis_code_21\n\t, cast(coalesce(dx_code.diagnosis_code_22, undetermined.diagnosis_code_22) as TEXT ) as diagnosis_code_22\n\t, cast(coalesce(dx_code.diagnosis_code_23, undetermined.diagnosis_code_23) as TEXT ) as diagnosis_code_23\n\t, cast(coalesce(dx_code.diagnosis_code_24, undetermined.diagnosis_code_24) as TEXT ) as diagnosis_code_24\n\t, cast(coalesce(dx_code.diagnosis_code_25, undetermined.diagnosis_code_25) as TEXT ) as diagnosis_code_25\n\t, cast(coalesce(poa.diagnosis_poa_1, undetermined.diagnosis_poa_1) as TEXT ) as diagnosis_poa_1\n\t, cast(coalesce(poa.diagnosis_poa_2, undetermined.diagnosis_poa_2) as TEXT ) as diagnosis_poa_2\n\t, cast(coalesce(poa.diagnosis_poa_3, undetermined.diagnosis_poa_3) as TEXT ) as diagnosis_poa_3\n\t, cast(coalesce(poa.diagnosis_poa_4, undetermined.diagnosis_poa_4) as TEXT ) as diagnosis_poa_4\n\t, cast(coalesce(poa.diagnosis_poa_5, undetermined.diagnosis_poa_5) as TEXT ) as diagnosis_poa_5\n\t, cast(coalesce(poa.diagnosis_poa_6, undetermined.diagnosis_poa_6) as TEXT ) as diagnosis_poa_6\n\t, cast(coalesce(poa.diagnosis_poa_7, undetermined.diagnosis_poa_7) as TEXT ) as diagnosis_poa_7\n\t, cast(coalesce(poa.diagnosis_poa_8, undetermined.diagnosis_poa_8) as TEXT ) as diagnosis_poa_8\n\t, cast(coalesce(poa.diagnosis_poa_9, undetermined.diagnosis_poa_9) as TEXT ) as diagnosis_poa_9\n\t, cast(coalesce(poa.diagnosis_poa_10, undetermined.diagnosis_poa_10) as TEXT ) as diagnosis_poa_10\n\t, cast(coalesce(poa.diagnosis_poa_11, undetermined.diagnosis_poa_11) as TEXT ) as diagnosis_poa_11\n\t, cast(coalesce(poa.diagnosis_poa_12, undetermined.diagnosis_poa_12) as TEXT ) as diagnosis_poa_12\n\t, cast(coalesce(poa.diagnosis_poa_13, undetermined.diagnosis_poa_13) as TEXT ) as diagnosis_poa_13\n\t, cast(coalesce(poa.diagnosis_poa_14, undetermined.diagnosis_poa_14) as TEXT ) as diagnosis_poa_14\n\t, cast(coalesce(poa.diagnosis_poa_15, undetermined.diagnosis_poa_15) as TEXT ) as diagnosis_poa_15\n\t, cast(coalesce(poa.diagnosis_poa_16, undetermined.diagnosis_poa_16) as TEXT ) as diagnosis_poa_16\n\t, cast(coalesce(poa.diagnosis_poa_17, undetermined.diagnosis_poa_17) as TEXT ) as diagnosis_poa_17\n\t, cast(coalesce(poa.diagnosis_poa_18, undetermined.diagnosis_poa_18) as TEXT ) as diagnosis_poa_18\n\t, cast(coalesce(poa.diagnosis_poa_19, undetermined.diagnosis_poa_19) as TEXT ) as diagnosis_poa_19\n\t, cast(coalesce(poa.diagnosis_poa_20, undetermined.diagnosis_poa_20) as TEXT ) as diagnosis_poa_20\n\t, cast(coalesce(poa.diagnosis_poa_21, undetermined.diagnosis_poa_21) as TEXT ) as diagnosis_poa_21\n\t, cast(coalesce(poa.diagnosis_poa_22, undetermined.diagnosis_poa_22) as TEXT ) as diagnosis_poa_22\n\t, cast(coalesce(poa.diagnosis_poa_23, undetermined.diagnosis_poa_23) as TEXT ) as diagnosis_poa_23\n\t, cast(coalesce(poa.diagnosis_poa_24, undetermined.diagnosis_poa_24) as TEXT ) as diagnosis_poa_24\n\t, cast(coalesce(poa.diagnosis_poa_25, undetermined.diagnosis_poa_25) as TEXT ) as diagnosis_poa_25\n\t, cast(med.procedure_code_type as TEXT ) as procedure_code_type\n\t, cast(coalesce(px_code.procedure_code_1, undetermined.procedure_code_1) as TEXT ) as procedure_code_1\n\t, cast(coalesce(px_code.procedure_code_2, undetermined.procedure_code_2) as TEXT ) as procedure_code_2\n\t, cast(coalesce(px_code.procedure_code_3, undetermined.procedure_code_3) as TEXT ) as procedure_code_3\n\t, cast(coalesce(px_code.procedure_code_4, undetermined.procedure_code_4) as TEXT ) as procedure_code_4\n\t, cast(coalesce(px_code.procedure_code_5, undetermined.procedure_code_5) as TEXT ) as procedure_code_5\n\t, cast(coalesce(px_code.procedure_code_6, undetermined.procedure_code_6) as TEXT ) as procedure_code_6\n\t, cast(coalesce(px_code.procedure_code_7, undetermined.procedure_code_7) as TEXT ) as procedure_code_7\n\t, cast(coalesce(px_code.procedure_code_8, undetermined.procedure_code_8) as TEXT ) as procedure_code_8\n\t, cast(coalesce(px_code.procedure_code_9, undetermined.procedure_code_9) as TEXT ) as procedure_code_9\n\t, cast(coalesce(px_code.procedure_code_10, undetermined.procedure_code_10) as TEXT ) as procedure_code_10\n\t, cast(coalesce(px_code.procedure_code_11, undetermined.procedure_code_11) as TEXT ) as procedure_code_11\n\t, cast(coalesce(px_code.procedure_code_12, undetermined.procedure_code_12) as TEXT ) as procedure_code_12\n\t, cast(coalesce(px_code.procedure_code_13, undetermined.procedure_code_13) as TEXT ) as procedure_code_13\n\t, cast(coalesce(px_code.procedure_code_14, undetermined.procedure_code_14) as TEXT ) as procedure_code_14\n\t, cast(coalesce(px_code.procedure_code_15, undetermined.procedure_code_15) as TEXT ) as procedure_code_15\n\t, cast(coalesce(px_code.procedure_code_16, undetermined.procedure_code_16) as TEXT ) as procedure_code_16\n\t, cast(coalesce(px_code.procedure_code_17, undetermined.procedure_code_17) as TEXT ) as procedure_code_17\n\t, cast(coalesce(px_code.procedure_code_18, undetermined.procedure_code_18) as TEXT ) as procedure_code_18\n\t, cast(coalesce(px_code.procedure_code_19, undetermined.procedure_code_19) as TEXT ) as procedure_code_19\n\t, cast(coalesce(px_code.procedure_code_20, undetermined.procedure_code_20) as TEXT ) as procedure_code_20\n\t, cast(coalesce(px_code.procedure_code_21, undetermined.procedure_code_21) as TEXT ) as procedure_code_21\n\t, cast(coalesce(px_code.procedure_code_22, undetermined.procedure_code_22) as TEXT ) as procedure_code_22\n\t, cast(coalesce(px_code.procedure_code_23, undetermined.procedure_code_23) as TEXT ) as procedure_code_23\n\t, cast(coalesce(px_code.procedure_code_24, undetermined.procedure_code_24) as TEXT ) as procedure_code_24\n\t, cast(coalesce(px_code.procedure_code_25, undetermined.procedure_code_25) as TEXT ) as procedure_code_25\n\t, cast(coalesce(px_date.procedure_date_1, undetermined.procedure_date_1) as date ) as procedure_date_1\n\t, cast(coalesce(px_date.procedure_date_2, undetermined.procedure_date_2) as date ) as procedure_date_2\n\t, cast(coalesce(px_date.procedure_date_3, undetermined.procedure_date_3) as date ) as procedure_date_3\n\t, cast(coalesce(px_date.procedure_date_4, undetermined.procedure_date_4) as date ) as procedure_date_4\n\t, cast(coalesce(px_date.procedure_date_5, undetermined.procedure_date_5) as date ) as procedure_date_5\n\t, cast(coalesce(px_date.procedure_date_6, undetermined.procedure_date_6) as date ) as procedure_date_6\n\t, cast(coalesce(px_date.procedure_date_7, undetermined.procedure_date_7) as date ) as procedure_date_7\n\t, cast(coalesce(px_date.procedure_date_8, undetermined.procedure_date_8) as date ) as procedure_date_8\n\t, cast(coalesce(px_date.procedure_date_9, undetermined.procedure_date_9) as date ) as procedure_date_9\n\t, cast(coalesce(px_date.procedure_date_10, undetermined.procedure_date_10) as date ) as procedure_date_10\n\t, cast(coalesce(px_date.procedure_date_11, undetermined.procedure_date_11) as date ) as procedure_date_11\n\t, cast(coalesce(px_date.procedure_date_12, undetermined.procedure_date_12) as date ) as procedure_date_12\n\t, cast(coalesce(px_date.procedure_date_13, undetermined.procedure_date_13) as date ) as procedure_date_13\n\t, cast(coalesce(px_date.procedure_date_14, undetermined.procedure_date_14) as date ) as procedure_date_14\n\t, cast(coalesce(px_date.procedure_date_15, undetermined.procedure_date_15) as date ) as procedure_date_15\n\t, cast(coalesce(px_date.procedure_date_16, undetermined.procedure_date_16) as date ) as procedure_date_16\n\t, cast(coalesce(px_date.procedure_date_17, undetermined.procedure_date_17) as date ) as procedure_date_17\n\t, cast(coalesce(px_date.procedure_date_18, undetermined.procedure_date_18) as date ) as procedure_date_18\n\t, cast(coalesce(px_date.procedure_date_19, undetermined.procedure_date_19) as date ) as procedure_date_19\n\t, cast(coalesce(px_date.procedure_date_20, undetermined.procedure_date_20) as date ) as procedure_date_20\n\t, cast(coalesce(px_date.procedure_date_21, undetermined.procedure_date_21) as date ) as procedure_date_21\n\t, cast(coalesce(px_date.procedure_date_22, undetermined.procedure_date_22) as date ) as procedure_date_22\n\t, cast(coalesce(px_date.procedure_date_23, undetermined.procedure_date_23) as date ) as procedure_date_23\n\t, cast(coalesce(px_date.procedure_date_24, undetermined.procedure_date_24) as date ) as procedure_date_24\n\t, cast(coalesce(px_date.procedure_date_25, undetermined.procedure_date_25) as date ) as procedure_date_25\n\t, cast(med.data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_admit_source_final ad_source\n    on med.claim_id = ad_source.claim_id\n    and med.data_source = ad_source.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_admit_type_final ad_type\n    on med.claim_id = ad_type.claim_id\n    and med.data_source = ad_type.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_apr_drg_final apr\n    on med.claim_id = apr.claim_id\n    and med.data_source = apr.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_bill_type_final bill\n    on med.claim_id = bill.claim_id\n    and med.data_source = bill.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_medical_claim_date_normalize claim_line_dates\n    on med.claim_id = claim_line_dates.claim_id\n    and med.claim_line_number = claim_line_dates.claim_line_number\n    and med.data_source = claim_line_dates.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_medical_date_aggregation dates\n    on med.claim_id = dates.claim_id\n    and med.data_source = dates.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_medical_npi_normalize med_npi\n    on med.claim_id = med_npi.claim_id\n    and med.claim_line_number = med_npi.claim_line_number\n    and med.data_source = med_npi.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_discharge_disposition_final disch_disp\n    on med.claim_id = disch_disp.claim_id\n    and med.data_source = disch_disp.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_ms_drg_final ms\n    on med.claim_id = ms.claim_id\n    and med.data_source = ms.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_place_of_service_normalize pos\n    on med.claim_id = pos.claim_id\n    and med.claim_line_number = pos.claim_line_number\n    and med.data_source = pos.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_diagnosis_code_final dx_code\n    on med.claim_id = dx_code.claim_id\n    and med.data_source = dx_code.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_present_on_admit_final poa\n    on med.claim_id = poa.claim_id\n    and med.data_source = poa.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_code_final px_code\n    on med.claim_id = px_code.claim_id\n    and med.data_source = px_code.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_date_final px_date\n    on med.claim_id = px_date.claim_id\n    and med.data_source = px_date.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_revenue_center_normalize rev\n    on med.claim_id = rev.claim_id\n    and med.claim_line_number = rev.claim_line_number\n    and med.data_source = rev.data_source\nleft join tuva_project_demo.claims_preprocessing._int_normalized_input_undetermined_claim_type undetermined\n    on med.claim_id = undetermined.claim_id\n    and med.claim_line_number = undetermined.claim_line_number\n    and med.data_source = undetermined.data_source", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__pharmacy_claim": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/final/normalized_input__pharmacy_claim.sql", "original_file_path": "models/claims_preprocessing/normalized_input/final/normalized_input__pharmacy_claim.sql", "unique_id": "model.the_tuva_project.normalized_input__pharmacy_claim", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "final", "normalized_input__pharmacy_claim"], "alias": "normalized_input_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "5af915af398c991d649a9b70bd7c951c8db80c16d046e144037e2b9faf12aad0"}, "config": {"enabled": true, "alias": "normalized_input_pharmacy_claim", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "The pharmacy claim table contains information on prescription drugs that \nwere filled and billed to the insurer.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or  health plan. A patient can have more than one member_id because they  can have more than one insurance product/plan.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prescribing_provider_npi": {"name": "prescribing_provider_npi", "description": "NPI for the provider that wrote the prescription (e.g. priamry care  physician).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispensing_provider_npi": {"name": "dispensing_provider_npi", "description": "NPI for the provider that dispensed the prescription (e.g. pharmacy).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispensing_date": {"name": "dispensing_date", "description": "Date the prescription was filled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ndc_code": {"name": "ndc_code", "description": "National drug code on the claim.", "meta": {"terminology": "https://www.fda.gov/drugs/drug-approvals-and-databases/national-drug-code-directory"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Number of doses.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "days_supply": {"name": "days_supply", "description": "Number of days supply.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "refills": {"name": "refills", "description": "Number of refills for the prescription.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "Date the claim was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "Amount paid by the health insurer for the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "Contractual amount allowed to be paid by the payer + patient.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coinsurance_amount": {"name": "coinsurance_amount", "description": "The total coinsurance charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "copayment_amount": {"name": "copayment_amount", "description": "The total copayment charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deductible_amount": {"name": "deductible_amount", "description": "The total amount charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "normalized_input_pharmacy_claim", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5125866, "relation_name": "tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n      cast(claim_id as {{ dbt.type_string() }} ) as claim_id\r\n    , cast(claim_line_number as int ) as claim_line_number\r\n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\r\n    , cast(member_id as {{ dbt.type_string() }} ) as member_id\r\n    , cast(payer as {{ dbt.type_string() }} ) as payer\r\n    , cast(plan as {{ dbt.type_string() }} ) as plan\r\n    , cast(prescribing_provider_npi as {{ dbt.type_string() }} ) as prescribing_provider_npi\r\n    , cast(dispensing_provider_npi as {{ dbt.type_string() }} ) as dispensing_provider_npi\r\n    , cast(dispensing_date as date ) as dispensing_date\r\n    , cast(ndc_code as {{ dbt.type_string() }} ) as ndc_code\r\n    , cast(quantity as int ) as quantity\r\n    , cast(days_supply as int ) as days_supply\r\n    , cast(refills as int ) as refills\r\n    , cast(paid_date as date ) as paid_date\r\n    , cast(paid_amount as {{ dbt.type_numeric() }} ) as paid_amount\r\n    , cast(allowed_amount as {{ dbt.type_numeric() }} ) as allowed_amount\r\n    , cast(coinsurance_amount as {{ dbt.type_numeric() }} ) as coinsurance_amount\r\n    , cast(copayment_amount as {{ dbt.type_numeric() }} ) as copayment_amount\r\n    , cast(deductible_amount as {{ dbt.type_numeric() }} ) as deductible_amount\r\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\r\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_string() }} ) as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_pharmacy_claim') }}", "language": "sql", "refs": [{"name": "normalized_input__stg_pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.normalized_input__stg_pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/final/normalized_input__pharmacy_claim.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_pharmacy_claim as (\n\n\n\nselect\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.pharmacy_claim\n) select\n      cast(claim_id as TEXT ) as claim_id\n    , cast(claim_line_number as int ) as claim_line_number\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(member_id as TEXT ) as member_id\n    , cast(payer as TEXT ) as payer\n    , cast(plan as TEXT ) as plan\n    , cast(prescribing_provider_npi as TEXT ) as prescribing_provider_npi\n    , cast(dispensing_provider_npi as TEXT ) as dispensing_provider_npi\n    , cast(dispensing_date as date ) as dispensing_date\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(quantity as int ) as quantity\n    , cast(days_supply as int ) as days_supply\n    , cast(refills as int ) as refills\n    , cast(paid_date as date ) as paid_date\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n    , cast(copayment_amount as numeric(28,6) ) as copayment_amount\n    , cast(deductible_amount as numeric(28,6) ) as deductible_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_pharmacy_claim", "sql": " __dbt__cte__normalized_input__stg_pharmacy_claim as (\n\n\n\nselect\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.pharmacy_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_admit_source_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_admit_source_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_source_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_source_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_admit_source_final"], "alias": "_int_normalized_input_admit_source_final", "checksum": {"name": "sha256", "checksum": "17a7cb7168578fdf2f0d7c73c62f60761f888e93eca226f77cb72a8147fe3b45"}, "config": {"enabled": true, "alias": "_int_normalized_input_admit_source_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_admit_source_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5163903, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_admit_source_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_admit_source_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)", "language": "sql", "refs": [{"name": "normalized_input__int_admit_source_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_admit_source_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_source_final.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_admit_source_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_admit_source_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_admit_source_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_source_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_source_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_admit_source_voting"], "alias": "_int_normalized_input_admit_source_voting", "checksum": {"name": "sha256", "checksum": "f40a899a84de820391256602e3643c1547058d8d950fe41919beda218c4ede36"}, "config": {"enabled": true, "alias": "_int_normalized_input_admit_source_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_admit_source_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5200524, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_admit_source_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith normalize as(\r\n    select \r\n        med.claim_id\r\n        , med.data_source\r\n        , admit.admit_source_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }} med\r\n    inner join {{ ref('terminology__admit_source') }} admit\r\n        on med.admit_source_code = admit.admit_source_code\r\n    where claim_type = 'institutional'\r\n)\r\n, distinct_counts as(\r\n    select \r\n        claim_id\r\n        , data_source\r\n        , admit_source_code\r\n        , count(*) as admit_source_occurrence_count\r\n    from normalize\r\n    where admit_source_code is not null\r\n    group by \r\n        claim_id\r\n        , data_source\r\n        , admit_source_code\r\n)\r\n\r\n, occurence_comparison as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , 'admit_source_code' as column_name\r\n        , admit_source_code as normalized_code\r\n        , admit_source_occurrence_count as occurrence_count\r\n        , coalesce(lead(admit_source_occurrence_count) \r\n            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count\r\n        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count\r\n    from distinct_counts dist\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom occurence_comparison", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__admit_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__admit_source"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_source_voting.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_source_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join tuva_project_demo.terminology.admit_source admit\n        on med.admit_source_code = admit.admit_source_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_source_code\n        , count(*) as admit_source_occurrence_count\n    from normalize\n    where admit_source_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_source_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_source_code' as column_name\n        , admit_source_code as normalized_code\n        , admit_source_occurrence_count as occurrence_count\n        , coalesce(lead(admit_source_occurrence_count) \n            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom occurence_comparison", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_admit_type_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_admit_type_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_type_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_type_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_admit_type_final"], "alias": "_int_normalized_input_admit_type_final", "checksum": {"name": "sha256", "checksum": "12164226bf781f5b7aa766243c8a8b957f7558a3bf10c13cb6a3078439fe199b"}, "config": {"enabled": true, "alias": "_int_normalized_input_admit_type_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_admit_type_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5233831, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_admit_type_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_admit_type_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)", "language": "sql", "refs": [{"name": "normalized_input__int_admit_type_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_admit_type_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_type_final.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_admit_type_normalize_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_admit_type_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_admit_type_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_type_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_type_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_admit_type_voting"], "alias": "_int_normalized_input_admit_type_normalize_voting", "checksum": {"name": "sha256", "checksum": "79f36e1dd41392587aa1017ffc492d4548d17e6c1cb02ef3afae8abe7f6c9686"}, "config": {"enabled": true, "alias": "_int_normalized_input_admit_type_normalize_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_admit_type_normalize_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5267324, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_admit_type_normalize_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith normalize as(\r\n    select \r\n        med.claim_id\r\n        , med.data_source\r\n        , admit.admit_type_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }} med\r\n    inner join {{ ref('terminology__admit_type') }} admit\r\n        on med.admit_type_code = admit.admit_type_code\r\n    where claim_type = 'institutional'\r\n)\r\n, distinct_counts as(\r\n    select \r\n        claim_id\r\n        , data_source\r\n        , admit_type_code\r\n        , count(*) as admit_type_occurrence_count\r\n    from normalize\r\n    where admit_type_code is not null\r\n    group by \r\n        claim_id\r\n        , data_source\r\n        , admit_type_code\r\n)\r\n\r\n, occurence_comparison as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , 'admit_type_code' as column_name\r\n        , admit_type_code as normalized_code\r\n        , admit_type_occurrence_count as occurrence_count\r\n        , coalesce(lead(admit_type_occurrence_count) \r\n            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count\r\n        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count\r\n    from distinct_counts dist\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom occurence_comparison", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__admit_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__admit_type"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_admit_type_voting.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_type_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join tuva_project_demo.terminology.admit_type admit\n        on med.admit_type_code = admit.admit_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_type_code\n        , count(*) as admit_type_occurrence_count\n    from normalize\n    where admit_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_type_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_type_code' as column_name\n        , admit_type_code as normalized_code\n        , admit_type_occurrence_count as occurrence_count\n        , coalesce(lead(admit_type_occurrence_count) \n            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom occurence_comparison", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_apr_drg_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_apr_drg_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_apr_drg_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_apr_drg_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_apr_drg_final"], "alias": "_int_normalized_input_apr_drg_final", "checksum": {"name": "sha256", "checksum": "2c28690e3137992d723a90f2f4618c5811d3546aec4cc983083bec63e090f7d4"}, "config": {"enabled": true, "alias": "_int_normalized_input_apr_drg_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_apr_drg_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5343654, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_apr_drg_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_apr_drg_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)", "language": "sql", "refs": [{"name": "normalized_input__int_apr_drg_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_apr_drg_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_apr_drg_final.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_apr_drg_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_apr_drg_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_apr_drg_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_apr_drg_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_apr_drg_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_apr_drg_voting"], "alias": "_int_normalized_input_apr_drg_voting", "checksum": {"name": "sha256", "checksum": "bf6834f3874beba22539014b13acb3c38305237ddd0560a230a1886a9bc3d0b2"}, "config": {"enabled": true, "alias": "_int_normalized_input_apr_drg_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_apr_drg_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5388732, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_apr_drg_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith normalize as(\r\n    select \r\n        med.claim_id\r\n        , med.data_source\r\n        , apr.apr_drg_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }} med\r\n    inner join {{ ref('terminology__apr_drg') }} apr\r\n        on med.apr_drg_code = apr.apr_drg_code\r\n    where claim_type = 'institutional'\r\n)\r\n, distinct_counts as(\r\n    select \r\n        claim_id\r\n        , data_source\r\n        , apr_drg_code\r\n        , count(*) as apr_drg_occurrence_count\r\n    from normalize\r\n    where apr_drg_code is not null\r\n    group by \r\n        claim_id\r\n        , data_source\r\n        , apr_drg_code\r\n)\r\n\r\n, occurence_comparison as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , 'apr_drg_code' as column_name\r\n        , apr_drg_code as normalized_code\r\n        , apr_drg_occurrence_count as occurrence_count\r\n        , coalesce(lead(apr_drg_occurrence_count) \r\n            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count\r\n        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count\r\n    from distinct_counts dist\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom occurence_comparison", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__apr_drg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__apr_drg"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_apr_drg_voting.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , apr.apr_drg_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join tuva_project_demo.terminology.apr_drg apr\n        on med.apr_drg_code = apr.apr_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , apr_drg_code\n        , count(*) as apr_drg_occurrence_count\n    from normalize\n    where apr_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , apr_drg_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'apr_drg_code' as column_name\n        , apr_drg_code as normalized_code\n        , apr_drg_occurrence_count as occurrence_count\n        , coalesce(lead(apr_drg_occurrence_count) \n            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom occurence_comparison", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_bill_type_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_bill_type_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_bill_type_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_bill_type_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_bill_type_final"], "alias": "_int_normalized_input_bill_type_final", "checksum": {"name": "sha256", "checksum": "b16902fc33d80b498f1d912e164c90f832a958b73d0aa18f160ffe5eba45305d"}, "config": {"enabled": true, "alias": "_int_normalized_input_bill_type_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_bill_type_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5426419, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_bill_type_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_bill_type_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)", "language": "sql", "refs": [{"name": "normalized_input__int_bill_type_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_bill_type_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_bill_type_final.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_bill_type_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_bill_type_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_bill_type_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_bill_type_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_bill_type_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_bill_type_voting"], "alias": "_int_normalized_input_bill_type_voting", "checksum": {"name": "sha256", "checksum": "b0be29a7229507ec00c128b8cbd10012e01b8050d5f658152cd25168f26da085"}, "config": {"enabled": true, "alias": "_int_normalized_input_bill_type_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_bill_type_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5468652, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_bill_type_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith normalize as(\r\n    select \r\n        med.claim_id\r\n        , med.data_source\r\n        , bill.bill_type_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }} med\r\n    inner join {{ ref('terminology__bill_type') }} bill\r\n        on med.bill_type_code = bill.bill_type_code\r\n    where claim_type = 'institutional'\r\n)\r\n, distinct_counts as(\r\n    select \r\n        claim_id\r\n        , data_source\r\n        , bill_type_code\r\n        , count(*) as bill_type_occurrence_count\r\n    from normalize\r\n    where bill_type_code is not null\r\n    group by \r\n        claim_id\r\n        , data_source\r\n        , bill_type_code\r\n)\r\n\r\n, occurence_comparison as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , 'bill_type_code' as column_name\r\n        , bill_type_code as normalized_code\r\n        , bill_type_occurrence_count as occurrence_count\r\n        , coalesce(lead(bill_type_occurrence_count) \r\n            over (partition by claim_id, data_source order by bill_type_occurrence_count desc),0) as next_occurrence_count\r\n        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc) as occurrence_row_count\r\n    from distinct_counts dist\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom occurence_comparison", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__bill_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__bill_type"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_bill_type_voting.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , bill.bill_type_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join tuva_project_demo.terminology.bill_type bill\n        on med.bill_type_code = bill.bill_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , bill_type_code\n        , count(*) as bill_type_occurrence_count\n    from normalize\n    where bill_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , bill_type_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'bill_type_code' as column_name\n        , bill_type_code as normalized_code\n        , bill_type_occurrence_count as occurrence_count\n        , coalesce(lead(bill_type_occurrence_count) \n            over (partition by claim_id, data_source order by bill_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom occurence_comparison", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_diagnosis_code_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_diagnosis_code_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_diagnosis_code_final"], "alias": "_int_normalized_input_diagnosis_code_final", "checksum": {"name": "sha256", "checksum": "5c8863b1cd997ce1b20470b7fc27d4419ac09f2f5b132d6179e90549c1d9a223"}, "config": {"enabled": true, "alias": "_int_normalized_input_diagnosis_code_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_diagnosis_code_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5506706, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_diagnosis_code_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , max(case when lower(column_name) = 'diagnosis_code_1' then normalized_code else null end) as diagnosis_code_1\r\n    , max(case when lower(column_name) = 'diagnosis_code_2' then normalized_code else null end) as diagnosis_code_2\r\n    , max(case when lower(column_name) = 'diagnosis_code_3' then normalized_code else null end) as diagnosis_code_3\r\n    , max(case when lower(column_name) = 'diagnosis_code_4' then normalized_code else null end) as diagnosis_code_4\r\n    , max(case when lower(column_name) = 'diagnosis_code_5' then normalized_code else null end) as diagnosis_code_5\r\n    , max(case when lower(column_name) = 'diagnosis_code_6' then normalized_code else null end) as diagnosis_code_6\r\n    , max(case when lower(column_name) = 'diagnosis_code_7' then normalized_code else null end) as diagnosis_code_7\r\n    , max(case when lower(column_name) = 'diagnosis_code_8' then normalized_code else null end) as diagnosis_code_8\r\n    , max(case when lower(column_name) = 'diagnosis_code_9' then normalized_code else null end) as diagnosis_code_9\r\n    , max(case when lower(column_name) = 'diagnosis_code_10' then normalized_code else null end) as diagnosis_code_10\r\n    , max(case when lower(column_name) = 'diagnosis_code_11' then normalized_code else null end) as diagnosis_code_11\r\n    , max(case when lower(column_name) = 'diagnosis_code_12' then normalized_code else null end) as diagnosis_code_12\r\n    , max(case when lower(column_name) = 'diagnosis_code_13' then normalized_code else null end) as diagnosis_code_13\r\n    , max(case when lower(column_name) = 'diagnosis_code_14' then normalized_code else null end) as diagnosis_code_14\r\n    , max(case when lower(column_name) = 'diagnosis_code_15' then normalized_code else null end) as diagnosis_code_15\r\n    , max(case when lower(column_name) = 'diagnosis_code_16' then normalized_code else null end) as diagnosis_code_16\r\n    , max(case when lower(column_name) = 'diagnosis_code_17' then normalized_code else null end) as diagnosis_code_17\r\n    , max(case when lower(column_name) = 'diagnosis_code_18' then normalized_code else null end) as diagnosis_code_18\r\n    , max(case when lower(column_name) = 'diagnosis_code_19' then normalized_code else null end) as diagnosis_code_19\r\n    , max(case when lower(column_name) = 'diagnosis_code_20' then normalized_code else null end) as diagnosis_code_20\r\n    , max(case when lower(column_name) = 'diagnosis_code_21' then normalized_code else null end) as diagnosis_code_21\r\n    , max(case when lower(column_name) = 'diagnosis_code_22' then normalized_code else null end) as diagnosis_code_22\r\n    , max(case when lower(column_name) = 'diagnosis_code_23' then normalized_code else null end) as diagnosis_code_23\r\n    , max(case when lower(column_name) = 'diagnosis_code_24' then normalized_code else null end) as diagnosis_code_24\r\n    , max(case when lower(column_name) = 'diagnosis_code_25' then normalized_code else null end) as diagnosis_code_25\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_diagnosis_code_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)\r\ngroup by\r\n    claim_id\r\n    , data_source", "language": "sql", "refs": [{"name": "normalized_input__int_diagnosis_code_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_diagnosis_code_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_final.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'diagnosis_code_1' then normalized_code else null end) as diagnosis_code_1\n    , max(case when lower(column_name) = 'diagnosis_code_2' then normalized_code else null end) as diagnosis_code_2\n    , max(case when lower(column_name) = 'diagnosis_code_3' then normalized_code else null end) as diagnosis_code_3\n    , max(case when lower(column_name) = 'diagnosis_code_4' then normalized_code else null end) as diagnosis_code_4\n    , max(case when lower(column_name) = 'diagnosis_code_5' then normalized_code else null end) as diagnosis_code_5\n    , max(case when lower(column_name) = 'diagnosis_code_6' then normalized_code else null end) as diagnosis_code_6\n    , max(case when lower(column_name) = 'diagnosis_code_7' then normalized_code else null end) as diagnosis_code_7\n    , max(case when lower(column_name) = 'diagnosis_code_8' then normalized_code else null end) as diagnosis_code_8\n    , max(case when lower(column_name) = 'diagnosis_code_9' then normalized_code else null end) as diagnosis_code_9\n    , max(case when lower(column_name) = 'diagnosis_code_10' then normalized_code else null end) as diagnosis_code_10\n    , max(case when lower(column_name) = 'diagnosis_code_11' then normalized_code else null end) as diagnosis_code_11\n    , max(case when lower(column_name) = 'diagnosis_code_12' then normalized_code else null end) as diagnosis_code_12\n    , max(case when lower(column_name) = 'diagnosis_code_13' then normalized_code else null end) as diagnosis_code_13\n    , max(case when lower(column_name) = 'diagnosis_code_14' then normalized_code else null end) as diagnosis_code_14\n    , max(case when lower(column_name) = 'diagnosis_code_15' then normalized_code else null end) as diagnosis_code_15\n    , max(case when lower(column_name) = 'diagnosis_code_16' then normalized_code else null end) as diagnosis_code_16\n    , max(case when lower(column_name) = 'diagnosis_code_17' then normalized_code else null end) as diagnosis_code_17\n    , max(case when lower(column_name) = 'diagnosis_code_18' then normalized_code else null end) as diagnosis_code_18\n    , max(case when lower(column_name) = 'diagnosis_code_19' then normalized_code else null end) as diagnosis_code_19\n    , max(case when lower(column_name) = 'diagnosis_code_20' then normalized_code else null end) as diagnosis_code_20\n    , max(case when lower(column_name) = 'diagnosis_code_21' then normalized_code else null end) as diagnosis_code_21\n    , max(case when lower(column_name) = 'diagnosis_code_22' then normalized_code else null end) as diagnosis_code_22\n    , max(case when lower(column_name) = 'diagnosis_code_23' then normalized_code else null end) as diagnosis_code_23\n    , max(case when lower(column_name) = 'diagnosis_code_24' then normalized_code else null end) as diagnosis_code_24\n    , max(case when lower(column_name) = 'diagnosis_code_25' then normalized_code else null end) as diagnosis_code_25\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_diagnosis_code_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_diagnosis_code_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_diagnosis_code_normalize"], "alias": "_int_normalized_input_diagnosis_code_normalize", "checksum": {"name": "sha256", "checksum": "4e2fc490025b435a5e30b1dd40103cdc12728965c8e59b89faaaad3d646bcb97"}, "config": {"enabled": true, "alias": "_int_normalized_input_diagnosis_code_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_diagnosis_code_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.554048, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_diagnosis_code_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith pivot_diagnosis as(\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_1'  as diagnosis_column\r\n        ,  diagnosis_code_1  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_2'  as diagnosis_column\r\n        ,  diagnosis_code_2  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_3'  as diagnosis_column\r\n        ,  diagnosis_code_3  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_4'  as diagnosis_column\r\n        ,  diagnosis_code_4  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_5'  as diagnosis_column\r\n        ,  diagnosis_code_5  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_6'  as diagnosis_column\r\n        ,  diagnosis_code_6  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_7'  as diagnosis_column\r\n        ,  diagnosis_code_7  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_8'  as diagnosis_column\r\n        ,  diagnosis_code_8  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_9'  as diagnosis_column\r\n        ,  diagnosis_code_9  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_10'  as diagnosis_column\r\n        ,  diagnosis_code_10  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_11'  as diagnosis_column\r\n        ,  diagnosis_code_11  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_12'  as diagnosis_column\r\n        ,  diagnosis_code_12  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_13'  as diagnosis_column\r\n        ,  diagnosis_code_13  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_14'  as diagnosis_column\r\n        ,  diagnosis_code_14  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_15'  as diagnosis_column\r\n        ,  diagnosis_code_15  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_16'  as diagnosis_column\r\n        ,  diagnosis_code_16  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_17'  as diagnosis_column\r\n        ,  diagnosis_code_17  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_18'  as diagnosis_column\r\n        ,  diagnosis_code_18  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_19'  as diagnosis_column\r\n        ,  diagnosis_code_19  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_20'  as diagnosis_column\r\n        ,  diagnosis_code_20  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_21'  as diagnosis_column\r\n        ,  diagnosis_code_21  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_22'  as diagnosis_column\r\n        ,  diagnosis_code_22  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_23'  as diagnosis_column\r\n        ,  diagnosis_code_24  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_24'  as diagnosis_column\r\n        ,  diagnosis_code_24  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , diagnosis_code_type\r\n        , 'diagnosis_code_25'  as diagnosis_column\r\n        ,  diagnosis_code_25  as diagnosis_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , diagnosis_code_type\r\n    , diagnosis_column\r\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm) as normalized_diagnosis_code\r\n    , count(*) as diagnosis_code_occurrence_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom pivot_diagnosis piv\r\nleft join {{ ref('terminology__icd_10_cm') }} icd_10\r\n    on replace(piv.diagnosis_code,'.','') = icd_10.icd_10_cm\r\n    and piv.diagnosis_code_type = 'icd-10-cm'\r\nleft join {{ ref('terminology__icd_9_cm') }} icd_9\r\n    on replace(piv.diagnosis_code,'.','') = icd_9.icd_9_cm\r\n    and piv.diagnosis_code_type = 'icd-9-cm'\r\nwhere claim_type <> 'undetermined'\r\ngroup by \r\n    claim_id\r\n    , data_source\r\n    , diagnosis_code_type\r\n    , diagnosis_column\r\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm)", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__icd_10_cm", "package": null, "version": null}, {"name": "terminology__icd_9_cm", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__icd_9_cm"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), pivot_diagnosis as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_1'  as diagnosis_column\n        ,  diagnosis_code_1  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_2'  as diagnosis_column\n        ,  diagnosis_code_2  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_3'  as diagnosis_column\n        ,  diagnosis_code_3  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_4'  as diagnosis_column\n        ,  diagnosis_code_4  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_5'  as diagnosis_column\n        ,  diagnosis_code_5  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_6'  as diagnosis_column\n        ,  diagnosis_code_6  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_7'  as diagnosis_column\n        ,  diagnosis_code_7  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_8'  as diagnosis_column\n        ,  diagnosis_code_8  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_9'  as diagnosis_column\n        ,  diagnosis_code_9  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_10'  as diagnosis_column\n        ,  diagnosis_code_10  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_11'  as diagnosis_column\n        ,  diagnosis_code_11  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_12'  as diagnosis_column\n        ,  diagnosis_code_12  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_13'  as diagnosis_column\n        ,  diagnosis_code_13  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_14'  as diagnosis_column\n        ,  diagnosis_code_14  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_15'  as diagnosis_column\n        ,  diagnosis_code_15  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_16'  as diagnosis_column\n        ,  diagnosis_code_16  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_17'  as diagnosis_column\n        ,  diagnosis_code_17  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_18'  as diagnosis_column\n        ,  diagnosis_code_18  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_19'  as diagnosis_column\n        ,  diagnosis_code_19  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_20'  as diagnosis_column\n        ,  diagnosis_code_20  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_21'  as diagnosis_column\n        ,  diagnosis_code_21  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_22'  as diagnosis_column\n        ,  diagnosis_code_22  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_23'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_24'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_25'  as diagnosis_column\n        ,  diagnosis_code_25  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm) as normalized_diagnosis_code\n    , count(*) as diagnosis_code_occurrence_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom pivot_diagnosis piv\nleft join tuva_project_demo.terminology.icd_10_cm icd_10\n    on replace(piv.diagnosis_code,'.','') = icd_10.icd_10_cm\n    and piv.diagnosis_code_type = 'icd-10-cm'\nleft join tuva_project_demo.terminology.icd_9_cm icd_9\n    on replace(piv.diagnosis_code,'.','') = icd_9.icd_9_cm\n    and piv.diagnosis_code_type = 'icd-9-cm'\nwhere claim_type <> 'undetermined'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_diagnosis_code_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_diagnosis_code_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_diagnosis_code_voting"], "alias": "_int_normalized_input_diagnosis_code_voting", "checksum": {"name": "sha256", "checksum": "5821debac2d4385a548764da8eb4a90453b6abfae5fe985294d3489f5b69d282"}, "config": {"enabled": true, "alias": "_int_normalized_input_diagnosis_code_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_diagnosis_code_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5583026, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_diagnosis_code_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith distinct_count as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , diagnosis_column\r\n        , count(*) as distinct_count\r\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\r\n    from {{ ref('normalized_input__int_diagnosis_code_normalize') }}\r\n    group by\r\n        claim_id\r\n        , data_source\r\n        , diagnosis_column\r\n)\r\n\r\nselect \r\n    norm.claim_id\r\n    , norm.data_source\r\n    , norm.diagnosis_column as column_name\r\n    , norm.normalized_diagnosis_code as normalized_code\r\n    , norm.diagnosis_code_occurrence_count as occurrence_count\r\n    , coalesce(lead(diagnosis_code_occurrence_count) \r\n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc),0) as next_occurrence_count\r\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc) as occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_diagnosis_code_normalize') }} norm\r\ninner join distinct_count dist\r\n    on norm.claim_id = dist.claim_id\r\n    and norm.data_source = dist.data_source\r\n    and norm.diagnosis_column = dist.diagnosis_column", "language": "sql", "refs": [{"name": "normalized_input__int_diagnosis_code_normalize", "package": null, "version": null}, {"name": "normalized_input__int_diagnosis_code_normalize", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_voting.sql", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , diagnosis_column\n        , count(*) as distinct_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing._int_normalized_input_diagnosis_code_normalize\n    group by\n        claim_id\n        , data_source\n        , diagnosis_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.diagnosis_column as column_name\n    , norm.normalized_diagnosis_code as normalized_code\n    , norm.diagnosis_code_occurrence_count as occurrence_count\n    , coalesce(lead(diagnosis_code_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc) as occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_diagnosis_code_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.diagnosis_column = dist.diagnosis_column", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_discharge_disposition_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_discharge_disposition_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_discharge_disposition_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_discharge_disposition_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_discharge_disposition_final"], "alias": "_int_normalized_input_discharge_disposition_final", "checksum": {"name": "sha256", "checksum": "2400b286d1d3482ce59f7f943bc5a61578e41d6a85c83d93a9592e7ac4eef438"}, "config": {"enabled": true, "alias": "_int_normalized_input_discharge_disposition_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_discharge_disposition_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5616634, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_discharge_disposition_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_discharge_disposition_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)", "language": "sql", "refs": [{"name": "normalized_input__int_discharge_disposition_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_discharge_disposition_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_discharge_disposition_final.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_discharge_disposition_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_discharge_disposition_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_discharge_disposition_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_discharge_disposition_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_discharge_disposition_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_discharge_disposition_voting"], "alias": "_int_normalized_input_discharge_disposition_voting", "checksum": {"name": "sha256", "checksum": "d0a6e4f1a257ff8e6de8ec8e8badbcafc39cf564c8d4ee3b49c20479e37b489a"}, "config": {"enabled": true, "alias": "_int_normalized_input_discharge_disposition_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_discharge_disposition_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5653653, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_discharge_disposition_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith normalize as(\r\n    select \r\n        med.claim_id\r\n        , med.data_source\r\n        , disch.discharge_disposition_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }} med\r\n    inner join {{ ref('terminology__discharge_disposition') }} disch\r\n        on med.discharge_disposition_code = disch.discharge_disposition_code\r\n    where claim_type = 'institutional'\r\n)\r\n, distinct_counts as(\r\n    select \r\n        claim_id\r\n        , data_source\r\n        , discharge_disposition_code\r\n        , count(*) as discharge_disposition_occurrence_count\r\n    from normalize\r\n    where discharge_disposition_code is not null\r\n    group by \r\n        claim_id\r\n        , data_source\r\n        , discharge_disposition_code\r\n)\r\n\r\n, occurence_comparison as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , 'discharge_disposition_code' as column_name\r\n        , discharge_disposition_code as normalized_code\r\n        , discharge_disposition_occurrence_count as occurrence_count\r\n        , coalesce(lead(discharge_disposition_occurrence_count) \r\n            over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc),0) as next_occurrence_count\r\n        , row_number() over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc) as occurrence_row_count\r\n    from distinct_counts dist\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom occurence_comparison", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__discharge_disposition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__discharge_disposition"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_discharge_disposition_voting.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , disch.discharge_disposition_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join tuva_project_demo.terminology.discharge_disposition disch\n        on med.discharge_disposition_code = disch.discharge_disposition_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , discharge_disposition_code\n        , count(*) as discharge_disposition_occurrence_count\n    from normalize\n    where discharge_disposition_code is not null\n    group by \n        claim_id\n        , data_source\n        , discharge_disposition_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'discharge_disposition_code' as column_name\n        , discharge_disposition_code as normalized_code\n        , discharge_disposition_occurrence_count as occurrence_count\n        , coalesce(lead(discharge_disposition_occurrence_count) \n            over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom occurence_comparison", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_eligibility_dates_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_eligibility_dates_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_eligibility_dates_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_eligibility_dates_normalize"], "alias": "_int_normalized_input_eligibility_dates_normalize", "checksum": {"name": "sha256", "checksum": "66daf381a7f007c86c837a50f0a2ade7380c712eaa36d129f0d8741d4ac9d278"}, "config": {"enabled": true, "alias": "_int_normalized_input_eligibility_dates_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_eligibility_dates_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5690725, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_eligibility_dates_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect distinct\r\n  elig.patient_id\r\n  , elig.patient_id||elig.data_source||elig.payer||elig.plan||elig.enrollment_start_date||elig.enrollment_end_date as patient_id_key\r\n  , cal_dob.full_date as normalized_birth_date\r\n  , cal_death.full_date as normalized_death_date\r\n  , cal_enroll_start.full_date as normalized_enrollment_start_date\r\n  , cal_enroll_end.full_date as normalized_enrollment_end_date\r\n  , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_eligibility') }} elig\r\nleft join {{ ref('terminology__calendar') }} cal_dob\r\n    on elig.birth_date = cal_dob.full_date\r\nleft join {{ ref('terminology__calendar') }} cal_death\r\n    on elig.death_date = cal_death.full_date\r\nleft join {{ ref('terminology__calendar') }} cal_enroll_start\r\n    on elig.enrollment_start_date = cal_enroll_start.full_date\r\nleft join {{ ref('terminology__calendar') }} cal_enroll_end\r\n    on elig.enrollment_end_date = cal_enroll_end.full_date", "language": "sql", "refs": [{"name": "normalized_input__stg_eligibility", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_eligibility", "seed.the_tuva_project.terminology__calendar"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_eligibility_dates_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.eligibility\n) select distinct\n  elig.patient_id\n  , elig.patient_id||elig.data_source||elig.payer||elig.plan||elig.enrollment_start_date||elig.enrollment_end_date as patient_id_key\n  , cal_dob.full_date as normalized_birth_date\n  , cal_death.full_date as normalized_death_date\n  , cal_enroll_start.full_date as normalized_enrollment_start_date\n  , cal_enroll_end.full_date as normalized_enrollment_end_date\n  , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join tuva_project_demo.terminology.calendar cal_dob\n    on elig.birth_date = cal_dob.full_date\nleft join tuva_project_demo.terminology.calendar cal_death\n    on elig.death_date = cal_death.full_date\nleft join tuva_project_demo.terminology.calendar cal_enroll_start\n    on elig.enrollment_start_date = cal_enroll_start.full_date\nleft join tuva_project_demo.terminology.calendar cal_enroll_end\n    on elig.enrollment_end_date = cal_enroll_end.full_date", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_eligibility", "sql": " __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.eligibility\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_medical_claim_date_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_claim_date_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_claim_date_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_medical_claim_date_normalize"], "alias": "_int_normalized_input_medical_claim_date_normalize", "checksum": {"name": "sha256", "checksum": "9e956a80bc67c42e0c25e31dcad4eb03c5067497399a71131146272fde36c846"}, "config": {"enabled": true, "alias": "_int_normalized_input_medical_claim_date_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_medical_claim_date_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.572518, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_medical_claim_date_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect distinct\r\n  med.claim_id\r\n  , med.claim_line_number\r\n  , med.claim_type\r\n  , med.data_source\r\n  , cal_claim_start.full_date as normalized_claim_start_date\r\n  , cal_claim_end.full_date as normalized_claim_end_date\r\n  , cal_claim_line_start.full_date as normalized_claim_line_start_date\r\n  , cal_claim_line_end.full_date as normalized_claim_line_end_date\r\n  , cal_admission.full_date as normalized_admission_date\r\n  , cal_discharge.full_date as normalized_discharge_date\r\n  , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_medical_claim') }} med\r\nleft join {{ ref('terminology__calendar') }} cal_claim_start\r\n    on med.claim_start_date = cal_claim_start.full_date\r\nleft join {{ ref('terminology__calendar') }} cal_claim_end\r\n    on med.claim_end_Date = cal_claim_end.full_date\r\nleft join {{ ref('terminology__calendar') }} cal_claim_line_start\r\n    on med.claim_line_start_date = cal_claim_line_start.full_date\r\nleft join {{ ref('terminology__calendar') }} cal_claim_line_end\r\n    on med.claim_line_end_date = cal_claim_line_end.full_date\r\nleft join {{ ref('terminology__calendar') }} cal_admission\r\n    on med.admission_date = cal_admission.full_date\r\nleft join {{ ref('terminology__calendar') }} cal_discharge\r\n    on med.discharge_date = cal_discharge.full_date", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__calendar"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_claim_date_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n) select distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , cal_claim_start.full_date as normalized_claim_start_date\n  , cal_claim_end.full_date as normalized_claim_end_date\n  , cal_claim_line_start.full_date as normalized_claim_line_start_date\n  , cal_claim_line_end.full_date as normalized_claim_line_end_date\n  , cal_admission.full_date as normalized_admission_date\n  , cal_discharge.full_date as normalized_discharge_date\n  , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join tuva_project_demo.terminology.calendar cal_claim_start\n    on med.claim_start_date = cal_claim_start.full_date\nleft join tuva_project_demo.terminology.calendar cal_claim_end\n    on med.claim_end_Date = cal_claim_end.full_date\nleft join tuva_project_demo.terminology.calendar cal_claim_line_start\n    on med.claim_line_start_date = cal_claim_line_start.full_date\nleft join tuva_project_demo.terminology.calendar cal_claim_line_end\n    on med.claim_line_end_date = cal_claim_line_end.full_date\nleft join tuva_project_demo.terminology.calendar cal_admission\n    on med.admission_date = cal_admission.full_date\nleft join tuva_project_demo.terminology.calendar cal_discharge\n    on med.discharge_date = cal_discharge.full_date", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_medical_date_aggregation": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_medical_date_aggregation", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_date_aggregation.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_date_aggregation.sql", "unique_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_medical_date_aggregation"], "alias": "_int_normalized_input_medical_date_aggregation", "checksum": {"name": "sha256", "checksum": "9cbf9b7508ec14d11e2f92daac9395852e98fdbb2436fe689f03d7f889406eb8"}, "config": {"enabled": true, "alias": "_int_normalized_input_medical_date_aggregation", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_medical_date_aggregation", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5758734, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_medical_date_aggregation", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , min(normalized_claim_start_date) as minimum_claim_start_date\r\n    , max(normalized_claim_end_date) as maximum_claim_end_date\r\n    , min(normalized_admission_date) as minimum_admission_date\r\n    , max(normalized_discharge_date) as maximum_discharge_date\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_medical_claim_date_normalize') }}\r\nwhere claim_type = 'institutional'\r\ngroup by\r\n    claim_id\r\n    , data_source\r\n\r\nunion all\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , min(normalized_claim_start_date) as minimum_claim_start_date\r\n    , max(normalized_claim_end_date) as maximum_claim_end_date\r\n    , null as minimum_admission_date\r\n    , null as maximum_discharge_date\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_medical_claim_date_normalize') }}\r\nwhere claim_type = 'professional'\r\ngroup by\r\n    claim_id\r\n    , data_source", "language": "sql", "refs": [{"name": "normalized_input__int_medical_claim_date_normalize", "package": null, "version": null}, {"name": "normalized_input__int_medical_claim_date_normalize", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_date_aggregation.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , min(normalized_admission_date) as minimum_admission_date\n    , max(normalized_discharge_date) as maximum_discharge_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_medical_claim_date_normalize\nwhere claim_type = 'institutional'\ngroup by\n    claim_id\n    , data_source\n\nunion all\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , null as minimum_admission_date\n    , null as maximum_discharge_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_medical_claim_date_normalize\nwhere claim_type = 'professional'\ngroup by\n    claim_id\n    , data_source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_medical_npi_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_medical_npi_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_npi_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_npi_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_medical_npi_normalize"], "alias": "_int_normalized_input_medical_npi_normalize", "checksum": {"name": "sha256", "checksum": "e398ec28bf7f358013b41c209730f4ea3c9921d9c11977e42364c027f4ca33f2"}, "config": {"enabled": true, "alias": "_int_normalized_input_medical_npi_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_medical_npi_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.579581, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_medical_npi_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect distinct\r\n  med.claim_id\r\n  , med.claim_line_number\r\n  , med.claim_type\r\n  , med.data_source\r\n  , rend_prov.npi as normalized_rendering_npi\r\n  , bill_prov.npi as normalized_billing_npi\r\n  , fac_prov.npi as normalized_facility_npi\r\n  , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_medical_claim') }} med\r\nleft join {{ ref('terminology__provider') }} rend_prov\r\n    on med.rendering_npi = rend_prov.npi\r\n    and rend_prov.entity_type_description = 'Individual'\r\nleft join {{ ref('terminology__provider') }} bill_prov\r\n    on med.billing_npi = bill_prov.npi\r\nleft join {{ ref('terminology__provider') }} fac_prov\r\n    on med.facility_npi = fac_prov.npi\r\n    and fac_prov.entity_type_description = 'Organization'\r\n    and med.claim_type = 'institutional'", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__provider"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_medical_npi_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n) select distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , rend_prov.npi as normalized_rendering_npi\n  , bill_prov.npi as normalized_billing_npi\n  , fac_prov.npi as normalized_facility_npi\n  , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join tuva_project_demo.terminology.provider rend_prov\n    on med.rendering_npi = rend_prov.npi\n    and rend_prov.entity_type_description = 'Individual'\nleft join tuva_project_demo.terminology.provider bill_prov\n    on med.billing_npi = bill_prov.npi\nleft join tuva_project_demo.terminology.provider fac_prov\n    on med.facility_npi = fac_prov.npi\n    and fac_prov.entity_type_description = 'Organization'\n    and med.claim_type = 'institutional'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_ms_drg_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_ms_drg_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_ms_drg_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_ms_drg_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_ms_drg_final"], "alias": "_int_normalized_input_ms_drg_final", "checksum": {"name": "sha256", "checksum": "245252ab22177d0c9bc003c951fdf23bb24d817aae9757151e54201677c22d7d"}, "config": {"enabled": true, "alias": "_int_normalized_input_ms_drg_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_ms_drg_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.583751, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_ms_drg_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_ms_drg_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)", "language": "sql", "refs": [{"name": "normalized_input__int_ms_drg_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_ms_drg_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_ms_drg_final.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_ms_drg_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_ms_drg_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_ms_drg_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_ms_drg_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_ms_drg_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_ms_drg_voting"], "alias": "_int_normalized_input_ms_drg_voting", "checksum": {"name": "sha256", "checksum": "da9fdbd807eea2707b65cea07732b41f5109df30ea6645d5dab36cbbdd1eb95e"}, "config": {"enabled": true, "alias": "_int_normalized_input_ms_drg_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_ms_drg_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.587065, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_ms_drg_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith normalize as(\r\n    select \r\n        med.claim_id\r\n        , med.data_source\r\n        , ms.ms_drg_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }} med\r\n    inner join {{ ref('terminology__ms_drg') }} ms\r\n        on med.ms_drg_code = ms.ms_drg_code\r\n    where claim_type = 'institutional'\r\n)\r\n, distinct_counts as(\r\n    select \r\n        claim_id\r\n        , data_source\r\n        , ms_drg_code\r\n        , count(*) as ms_drg_occurrence_count\r\n    from normalize\r\n    where ms_drg_code is not null\r\n    group by \r\n        claim_id\r\n        , data_source\r\n        , ms_drg_code\r\n)\r\n\r\n, occurence_comparison as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , 'ms_drg_code' as column_name\r\n        , ms_drg_code as normalized_code\r\n        , ms_drg_occurrence_count as occurrence_count\r\n        , coalesce(lead(ms_drg_occurrence_count) \r\n            over (partition by claim_id, data_source order by ms_drg_occurrence_count desc),0) as next_occurrence_count\r\n        , row_number() over (partition by claim_id, data_source order by ms_drg_occurrence_count desc) as occurrence_row_count\r\n    from distinct_counts dist\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , column_name\r\n    , normalized_code\r\n    , occurrence_count\r\n    , next_occurrence_count\r\n    , occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom occurence_comparison", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__ms_drg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__ms_drg"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_ms_drg_voting.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , ms.ms_drg_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join tuva_project_demo.terminology.ms_drg ms\n        on med.ms_drg_code = ms.ms_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , ms_drg_code\n        , count(*) as ms_drg_occurrence_count\n    from normalize\n    where ms_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , ms_drg_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'ms_drg_code' as column_name\n        , ms_drg_code as normalized_code\n        , ms_drg_occurrence_count as occurrence_count\n        , coalesce(lead(ms_drg_occurrence_count) \n            over (partition by claim_id, data_source order by ms_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by ms_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom occurence_comparison", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_place_of_service_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_place_of_service_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_place_of_service_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_place_of_service_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_place_of_service_normalize"], "alias": "_int_normalized_input_place_of_service_normalize", "checksum": {"name": "sha256", "checksum": "481b460bd1fe4add4fea5adeb375783c07f6f52df54da992b508bcc9b10e9230"}, "config": {"enabled": true, "alias": "_int_normalized_input_place_of_service_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_place_of_service_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5913455, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_place_of_service_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , claim_line_number\r\n    , data_source\r\n    , pos.place_of_service_code as normalized_code\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_medical_claim') }} med\r\nleft join {{ ref('terminology__place_of_service') }} pos\r\n    on lpad(med.place_of_service_code, 2, '0') = pos.place_of_service_code\r\nwhere claim_type = 'professional'", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__place_of_service", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__place_of_service"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_place_of_service_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n) select\n    claim_id\n    , claim_line_number\n    , data_source\n    , pos.place_of_service_code as normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join tuva_project_demo.terminology.place_of_service pos\n    on lpad(med.place_of_service_code, 2, '0') = pos.place_of_service_code\nwhere claim_type = 'professional'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_present_on_admit_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_present_on_admit_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_present_on_admit_final"], "alias": "_int_normalized_input_present_on_admit_final", "checksum": {"name": "sha256", "checksum": "cd4234ff913908b2b0d196d6150245cd2455fb6ff6138f9bd218158ac5a1b57b"}, "config": {"enabled": true, "alias": "_int_normalized_input_present_on_admit_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_present_on_admit_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.5949922, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_present_on_admit_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , max(case when column_name = 'DIAGNOSIS_POA_1' then normalized_code else null end) as diagnosis_poa_1\r\n    , max(case when column_name = 'DIAGNOSIS_POA_2' then normalized_code else null end) as diagnosis_poa_2\r\n    , max(case when column_name = 'DIAGNOSIS_POA_3' then normalized_code else null end) as diagnosis_poa_3\r\n    , max(case when column_name = 'DIAGNOSIS_POA_4' then normalized_code else null end) as diagnosis_poa_4\r\n    , max(case when column_name = 'DIAGNOSIS_POA_5' then normalized_code else null end) as diagnosis_poa_5\r\n    , max(case when column_name = 'DIAGNOSIS_POA_6' then normalized_code else null end) as diagnosis_poa_6\r\n    , max(case when column_name = 'DIAGNOSIS_POA_7' then normalized_code else null end) as diagnosis_poa_7\r\n    , max(case when column_name = 'DIAGNOSIS_POA_8' then normalized_code else null end) as diagnosis_poa_8\r\n    , max(case when column_name = 'DIAGNOSIS_POA_9' then normalized_code else null end) as diagnosis_poa_9\r\n    , max(case when column_name = 'DIAGNOSIS_POA_10' then normalized_code else null end) as diagnosis_poa_10\r\n    , max(case when column_name = 'DIAGNOSIS_POA_11' then normalized_code else null end) as diagnosis_poa_11\r\n    , max(case when column_name = 'DIAGNOSIS_POA_12' then normalized_code else null end) as diagnosis_poa_12\r\n    , max(case when column_name = 'DIAGNOSIS_POA_13' then normalized_code else null end) as diagnosis_poa_13\r\n    , max(case when column_name = 'DIAGNOSIS_POA_14' then normalized_code else null end) as diagnosis_poa_14\r\n    , max(case when column_name = 'DIAGNOSIS_POA_15' then normalized_code else null end) as diagnosis_poa_15\r\n    , max(case when column_name = 'DIAGNOSIS_POA_16' then normalized_code else null end) as diagnosis_poa_16\r\n    , max(case when column_name = 'DIAGNOSIS_POA_17' then normalized_code else null end) as diagnosis_poa_17\r\n    , max(case when column_name = 'DIAGNOSIS_POA_18' then normalized_code else null end) as diagnosis_poa_18\r\n    , max(case when column_name = 'DIAGNOSIS_POA_19' then normalized_code else null end) as diagnosis_poa_19\r\n    , max(case when column_name = 'DIAGNOSIS_POA_20' then normalized_code else null end) as diagnosis_poa_20\r\n    , max(case when column_name = 'DIAGNOSIS_POA_21' then normalized_code else null end) as diagnosis_poa_21\r\n    , max(case when column_name = 'DIAGNOSIS_POA_22' then normalized_code else null end) as diagnosis_poa_22\r\n    , max(case when column_name = 'DIAGNOSIS_POA_23' then normalized_code else null end) as diagnosis_poa_23\r\n    , max(case when column_name = 'DIAGNOSIS_POA_24' then normalized_code else null end) as diagnosis_poa_24\r\n    , max(case when column_name = 'DIAGNOSIS_POA_25' then normalized_code else null end) as diagnosis_poa_25\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_present_on_admit_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)\r\ngroup by\r\n    claim_id\r\n    , data_source", "language": "sql", "refs": [{"name": "normalized_input__int_present_on_admit_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_present_on_admit_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_final.sql", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when column_name = 'DIAGNOSIS_POA_1' then normalized_code else null end) as diagnosis_poa_1\n    , max(case when column_name = 'DIAGNOSIS_POA_2' then normalized_code else null end) as diagnosis_poa_2\n    , max(case when column_name = 'DIAGNOSIS_POA_3' then normalized_code else null end) as diagnosis_poa_3\n    , max(case when column_name = 'DIAGNOSIS_POA_4' then normalized_code else null end) as diagnosis_poa_4\n    , max(case when column_name = 'DIAGNOSIS_POA_5' then normalized_code else null end) as diagnosis_poa_5\n    , max(case when column_name = 'DIAGNOSIS_POA_6' then normalized_code else null end) as diagnosis_poa_6\n    , max(case when column_name = 'DIAGNOSIS_POA_7' then normalized_code else null end) as diagnosis_poa_7\n    , max(case when column_name = 'DIAGNOSIS_POA_8' then normalized_code else null end) as diagnosis_poa_8\n    , max(case when column_name = 'DIAGNOSIS_POA_9' then normalized_code else null end) as diagnosis_poa_9\n    , max(case when column_name = 'DIAGNOSIS_POA_10' then normalized_code else null end) as diagnosis_poa_10\n    , max(case when column_name = 'DIAGNOSIS_POA_11' then normalized_code else null end) as diagnosis_poa_11\n    , max(case when column_name = 'DIAGNOSIS_POA_12' then normalized_code else null end) as diagnosis_poa_12\n    , max(case when column_name = 'DIAGNOSIS_POA_13' then normalized_code else null end) as diagnosis_poa_13\n    , max(case when column_name = 'DIAGNOSIS_POA_14' then normalized_code else null end) as diagnosis_poa_14\n    , max(case when column_name = 'DIAGNOSIS_POA_15' then normalized_code else null end) as diagnosis_poa_15\n    , max(case when column_name = 'DIAGNOSIS_POA_16' then normalized_code else null end) as diagnosis_poa_16\n    , max(case when column_name = 'DIAGNOSIS_POA_17' then normalized_code else null end) as diagnosis_poa_17\n    , max(case when column_name = 'DIAGNOSIS_POA_18' then normalized_code else null end) as diagnosis_poa_18\n    , max(case when column_name = 'DIAGNOSIS_POA_19' then normalized_code else null end) as diagnosis_poa_19\n    , max(case when column_name = 'DIAGNOSIS_POA_20' then normalized_code else null end) as diagnosis_poa_20\n    , max(case when column_name = 'DIAGNOSIS_POA_21' then normalized_code else null end) as diagnosis_poa_21\n    , max(case when column_name = 'DIAGNOSIS_POA_22' then normalized_code else null end) as diagnosis_poa_22\n    , max(case when column_name = 'DIAGNOSIS_POA_23' then normalized_code else null end) as diagnosis_poa_23\n    , max(case when column_name = 'DIAGNOSIS_POA_24' then normalized_code else null end) as diagnosis_poa_24\n    , max(case when column_name = 'DIAGNOSIS_POA_25' then normalized_code else null end) as diagnosis_poa_25\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_present_on_admit_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_present_on_admit_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_present_on_admit_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_present_on_admit_normalize"], "alias": "_int_normalized_input_present_on_admit_normalize", "checksum": {"name": "sha256", "checksum": "542e9d1021ce7a94505a22f9a918996c7967fe7ab8c4240a3c755559af4362aa"}, "config": {"enabled": true, "alias": "_int_normalized_input_present_on_admit_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_present_on_admit_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.598978, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_present_on_admit_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith pivot_poa as(\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_1'  as diagnosis_column\r\n        ,  diagnosis_poa_1  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_2'  as diagnosis_column\r\n        ,  diagnosis_poa_2  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_3'  as diagnosis_column\r\n        ,  diagnosis_poa_3  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_4'  as diagnosis_column\r\n        ,  diagnosis_poa_4  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_5'  as diagnosis_column\r\n        ,  diagnosis_poa_5  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_6'  as diagnosis_column\r\n        ,  diagnosis_poa_6  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_7'  as diagnosis_column\r\n        ,  diagnosis_poa_7  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_8'  as diagnosis_column\r\n        ,  diagnosis_poa_8  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_9'  as diagnosis_column\r\n        ,  diagnosis_poa_9  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_10'  as diagnosis_column\r\n        ,  diagnosis_poa_10  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_11'  as diagnosis_column\r\n        ,  diagnosis_poa_11  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_12'  as diagnosis_column\r\n        ,  diagnosis_poa_12  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_13'  as diagnosis_column\r\n        ,  diagnosis_poa_13  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_14'  as diagnosis_column\r\n        ,  diagnosis_poa_14  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_15'  as diagnosis_column\r\n        ,  diagnosis_poa_15  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_16'  as diagnosis_column\r\n        ,  diagnosis_poa_16  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_17'  as diagnosis_column\r\n        ,  diagnosis_poa_17  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_18'  as diagnosis_column\r\n        ,  diagnosis_poa_18  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_19'  as diagnosis_column\r\n        ,  diagnosis_poa_19  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_20'  as diagnosis_column\r\n        ,  diagnosis_poa_20  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_21'  as diagnosis_column\r\n        ,  diagnosis_poa_21  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_22'  as diagnosis_column\r\n        ,  diagnosis_poa_22  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_23'  as diagnosis_column\r\n        ,  diagnosis_poa_24  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_24'  as diagnosis_column\r\n        ,  diagnosis_poa_24  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'diagnosis_poa_25'  as diagnosis_column\r\n        ,  diagnosis_poa_25  as present_on_admit_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , diagnosis_column\r\n    , poa.present_on_admit_code as normalized_present_on_admit_code\r\n    , count(*) as present_on_admit_occurrence_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom pivot_poa piv\r\nleft join {{ ref('terminology__present_on_admission') }} poa\r\n    on replace(piv.present_on_admit_code,'.','') = poa.present_on_admit_code\r\nwhere claim_type = 'institutional'\r\ngroup by \r\n    claim_id\r\n    , data_source\r\n    , diagnosis_column\r\n    , poa.present_on_admit_code", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__present_on_admission", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__present_on_admission"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), pivot_poa as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_1'  as diagnosis_column\n        ,  diagnosis_poa_1  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_2'  as diagnosis_column\n        ,  diagnosis_poa_2  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_3'  as diagnosis_column\n        ,  diagnosis_poa_3  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_4'  as diagnosis_column\n        ,  diagnosis_poa_4  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_5'  as diagnosis_column\n        ,  diagnosis_poa_5  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_6'  as diagnosis_column\n        ,  diagnosis_poa_6  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_7'  as diagnosis_column\n        ,  diagnosis_poa_7  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_8'  as diagnosis_column\n        ,  diagnosis_poa_8  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_9'  as diagnosis_column\n        ,  diagnosis_poa_9  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_10'  as diagnosis_column\n        ,  diagnosis_poa_10  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_11'  as diagnosis_column\n        ,  diagnosis_poa_11  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_12'  as diagnosis_column\n        ,  diagnosis_poa_12  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_13'  as diagnosis_column\n        ,  diagnosis_poa_13  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_14'  as diagnosis_column\n        ,  diagnosis_poa_14  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_15'  as diagnosis_column\n        ,  diagnosis_poa_15  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_16'  as diagnosis_column\n        ,  diagnosis_poa_16  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_17'  as diagnosis_column\n        ,  diagnosis_poa_17  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_18'  as diagnosis_column\n        ,  diagnosis_poa_18  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_19'  as diagnosis_column\n        ,  diagnosis_poa_19  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_20'  as diagnosis_column\n        ,  diagnosis_poa_20  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_21'  as diagnosis_column\n        ,  diagnosis_poa_21  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_22'  as diagnosis_column\n        ,  diagnosis_poa_22  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_23'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_24'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_25'  as diagnosis_column\n        ,  diagnosis_poa_25  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code as normalized_present_on_admit_code\n    , count(*) as present_on_admit_occurrence_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom pivot_poa piv\nleft join tuva_project_demo.terminology.present_on_admission poa\n    on replace(piv.present_on_admit_code,'.','') = poa.present_on_admit_code\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_present_on_admit_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_present_on_admit_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_present_on_admit_voting"], "alias": "_int_normalized_input_present_on_admit_voting", "checksum": {"name": "sha256", "checksum": "8e4a982e97a1d755bf910c60681e50b5e5819e130b913dc53b0c40988d27f4bd"}, "config": {"enabled": true, "alias": "_int_normalized_input_present_on_admit_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_present_on_admit_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.603966, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_present_on_admit_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith distinct_count as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , diagnosis_column\r\n        , count(*) as distinct_count\r\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\r\n    from {{ ref('normalized_input__int_present_on_admit_normalize') }}\r\n    group by\r\n        claim_id\r\n        , data_source\r\n        , diagnosis_column\r\n)\r\n\r\nselect \r\n    norm.claim_id\r\n    , norm.data_source\r\n    , norm.diagnosis_column as column_name\r\n    , norm.normalized_present_on_admit_code as normalized_code\r\n    , norm.present_on_admit_occurrence_count as occurrence_count\r\n    , coalesce(lead(present_on_admit_occurrence_count) \r\n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc),0) as next_occurrence_count\r\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc) as occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_present_on_admit_normalize') }} norm\r\ninner join distinct_count dist\r\n    on norm.claim_id = dist.claim_id\r\n    and norm.data_source = dist.data_source\r\n    and norm.diagnosis_column = dist.diagnosis_column", "language": "sql", "refs": [{"name": "normalized_input__int_present_on_admit_normalize", "package": null, "version": null}, {"name": "normalized_input__int_present_on_admit_normalize", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_present_on_admit_normalize"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_voting.sql", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , diagnosis_column\n        , count(*) as distinct_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing._int_normalized_input_present_on_admit_normalize\n    group by\n        claim_id\n        , data_source\n        , diagnosis_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.diagnosis_column as column_name\n    , norm.normalized_present_on_admit_code as normalized_code\n    , norm.present_on_admit_occurrence_count as occurrence_count\n    , coalesce(lead(present_on_admit_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc) as occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_present_on_admit_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.diagnosis_column = dist.diagnosis_column", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_procedure_code_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_procedure_code_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_procedure_code_final"], "alias": "_int_normalized_input_procedure_code_final", "checksum": {"name": "sha256", "checksum": "097462fff450a8bae20fdbae6bc36cb9ecfedfd3be3a86e7eb6c524b7988e904"}, "config": {"enabled": true, "alias": "_int_normalized_input_procedure_code_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_procedure_code_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6073015, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_code_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , max(case when lower(column_name) = 'procedure_code_1' then normalized_code else null end) as procedure_code_1\r\n    , max(case when lower(column_name) = 'procedure_code_2' then normalized_code else null end) as procedure_code_2\r\n    , max(case when lower(column_name) = 'procedure_code_3' then normalized_code else null end) as procedure_code_3\r\n    , max(case when lower(column_name) = 'procedure_code_4' then normalized_code else null end) as procedure_code_4\r\n    , max(case when lower(column_name) = 'procedure_code_5' then normalized_code else null end) as procedure_code_5\r\n    , max(case when lower(column_name) = 'procedure_code_6' then normalized_code else null end) as procedure_code_6\r\n    , max(case when lower(column_name) = 'procedure_code_7' then normalized_code else null end) as procedure_code_7\r\n    , max(case when lower(column_name) = 'procedure_code_8' then normalized_code else null end) as procedure_code_8\r\n    , max(case when lower(column_name) = 'procedure_code_9' then normalized_code else null end) as procedure_code_9\r\n    , max(case when lower(column_name) = 'procedure_code_10' then normalized_code else null end) as procedure_code_10\r\n    , max(case when lower(column_name) = 'procedure_code_11' then normalized_code else null end) as procedure_code_11\r\n    , max(case when lower(column_name) = 'procedure_code_12' then normalized_code else null end) as procedure_code_12\r\n    , max(case when lower(column_name) = 'procedure_code_13' then normalized_code else null end) as procedure_code_13\r\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_14\r\n    , max(case when lower(column_name) = 'procedure_code_15' then normalized_code else null end) as procedure_code_15\r\n    , max(case when lower(column_name) = 'procedure_code_16' then normalized_code else null end) as procedure_code_16\r\n    , max(case when lower(column_name) = 'procedure_code_17' then normalized_code else null end) as procedure_code_17\r\n    , max(case when lower(column_name) = 'procedure_code_18' then normalized_code else null end) as procedure_code_18\r\n    , max(case when lower(column_name) = 'procedure_code_19' then normalized_code else null end) as procedure_code_19\r\n    , max(case when lower(column_name) = 'procedure_code_20' then normalized_code else null end) as procedure_code_20\r\n    , max(case when lower(column_name) = 'procedure_code_21' then normalized_code else null end) as procedure_code_21\r\n    , max(case when lower(column_name) = 'procedure_code_22' then normalized_code else null end) as procedure_code_22\r\n    , max(case when lower(column_name) = 'procedure_code_23' then normalized_code else null end) as procedure_code_23\r\n    , max(case when lower(column_name) = 'procedure_code_24' then normalized_code else null end) as procedure_code_24\r\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_25\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_procedure_code_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)\r\ngroup by\r\n    claim_id\r\n    , data_source", "language": "sql", "refs": [{"name": "normalized_input__int_procedure_code_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_procedure_code_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_final.sql", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'procedure_code_1' then normalized_code else null end) as procedure_code_1\n    , max(case when lower(column_name) = 'procedure_code_2' then normalized_code else null end) as procedure_code_2\n    , max(case when lower(column_name) = 'procedure_code_3' then normalized_code else null end) as procedure_code_3\n    , max(case when lower(column_name) = 'procedure_code_4' then normalized_code else null end) as procedure_code_4\n    , max(case when lower(column_name) = 'procedure_code_5' then normalized_code else null end) as procedure_code_5\n    , max(case when lower(column_name) = 'procedure_code_6' then normalized_code else null end) as procedure_code_6\n    , max(case when lower(column_name) = 'procedure_code_7' then normalized_code else null end) as procedure_code_7\n    , max(case when lower(column_name) = 'procedure_code_8' then normalized_code else null end) as procedure_code_8\n    , max(case when lower(column_name) = 'procedure_code_9' then normalized_code else null end) as procedure_code_9\n    , max(case when lower(column_name) = 'procedure_code_10' then normalized_code else null end) as procedure_code_10\n    , max(case when lower(column_name) = 'procedure_code_11' then normalized_code else null end) as procedure_code_11\n    , max(case when lower(column_name) = 'procedure_code_12' then normalized_code else null end) as procedure_code_12\n    , max(case when lower(column_name) = 'procedure_code_13' then normalized_code else null end) as procedure_code_13\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_14\n    , max(case when lower(column_name) = 'procedure_code_15' then normalized_code else null end) as procedure_code_15\n    , max(case when lower(column_name) = 'procedure_code_16' then normalized_code else null end) as procedure_code_16\n    , max(case when lower(column_name) = 'procedure_code_17' then normalized_code else null end) as procedure_code_17\n    , max(case when lower(column_name) = 'procedure_code_18' then normalized_code else null end) as procedure_code_18\n    , max(case when lower(column_name) = 'procedure_code_19' then normalized_code else null end) as procedure_code_19\n    , max(case when lower(column_name) = 'procedure_code_20' then normalized_code else null end) as procedure_code_20\n    , max(case when lower(column_name) = 'procedure_code_21' then normalized_code else null end) as procedure_code_21\n    , max(case when lower(column_name) = 'procedure_code_22' then normalized_code else null end) as procedure_code_22\n    , max(case when lower(column_name) = 'procedure_code_23' then normalized_code else null end) as procedure_code_23\n    , max(case when lower(column_name) = 'procedure_code_24' then normalized_code else null end) as procedure_code_24\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_25\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_code_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_procedure_code_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_procedure_code_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_procedure_code_normalize"], "alias": "_int_normalized_input_procedure_code_normalize", "checksum": {"name": "sha256", "checksum": "dcdffb2c8c3b11d97e191de119277714560c0e78a4afd0ac823e1f3b5b0b81cc"}, "config": {"enabled": true, "alias": "_int_normalized_input_procedure_code_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_procedure_code_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6115289, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_code_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith pivot_procedure as(\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_1'  as procedure_column\r\n        ,  procedure_code_1  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_2'  as procedure_column\r\n        ,  procedure_code_2  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_3'  as procedure_column\r\n        ,  procedure_code_3  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_4'  as procedure_column\r\n        ,  procedure_code_4  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_5'  as procedure_column\r\n        ,  procedure_code_5  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_6'  as procedure_column\r\n        ,  procedure_code_6  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_7'  as procedure_column\r\n        ,  procedure_code_7  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_8'  as procedure_column\r\n        ,  procedure_code_8  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_9'  as procedure_column\r\n        ,  procedure_code_9  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_10'  as procedure_column\r\n        ,  procedure_code_10  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_11'  as procedure_column\r\n        ,  procedure_code_11  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_12'  as procedure_column\r\n        ,  procedure_code_12  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_13'  as procedure_column\r\n        ,  procedure_code_13  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_14'  as procedure_column\r\n        ,  procedure_code_14  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_15'  as procedure_column\r\n        ,  procedure_code_15  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_16'  as procedure_column\r\n        ,  procedure_code_16  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_17'  as procedure_column\r\n        ,  procedure_code_17  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_18'  as procedure_column\r\n        ,  procedure_code_18  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_19'  as procedure_column\r\n        ,  procedure_code_19  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_20'  as procedure_column\r\n        ,  procedure_code_20  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_21'  as procedure_column\r\n        ,  procedure_code_21  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_22'  as procedure_column\r\n        ,  procedure_code_22  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_23'  as procedure_column\r\n        ,  procedure_code_24  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_24'  as procedure_column\r\n        ,  procedure_code_24  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , procedure_code_type\r\n        , 'procedure_code_25'  as procedure_column\r\n        ,  procedure_code_25  as procedure_code\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , procedure_code_type\r\n    , procedure_column\r\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs) as normalized_procedure_code\r\n    , count(*) as procedure_code_occurrence_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom pivot_procedure piv\r\nleft join {{ ref('terminology__icd_10_pcs') }} icd_10\r\n    on replace(piv.procedure_code,'.','') = icd_10.icd_10_pcs\r\n    and piv.procedure_code_type = 'icd-10-pcs'\r\nleft join {{ ref('terminology__icd_9_pcs') }} icd_9\r\n    on replace(piv.procedure_code,'.','') = icd_9.icd_9_pcs\r\n    and piv.procedure_code_type = 'icd-9-pcs'\r\nwhere claim_type = 'institutional'\r\ngroup by \r\n    claim_id\r\n    , data_source\r\n    , procedure_code_type\r\n    , procedure_column\r\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs)", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__icd_10_pcs", "package": null, "version": null}, {"name": "terminology__icd_9_pcs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__icd_10_pcs", "seed.the_tuva_project.terminology__icd_9_pcs"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_1'  as procedure_column\n        ,  procedure_code_1  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_2'  as procedure_column\n        ,  procedure_code_2  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_3'  as procedure_column\n        ,  procedure_code_3  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_4'  as procedure_column\n        ,  procedure_code_4  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_5'  as procedure_column\n        ,  procedure_code_5  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_6'  as procedure_column\n        ,  procedure_code_6  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_7'  as procedure_column\n        ,  procedure_code_7  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_8'  as procedure_column\n        ,  procedure_code_8  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_9'  as procedure_column\n        ,  procedure_code_9  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_10'  as procedure_column\n        ,  procedure_code_10  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_11'  as procedure_column\n        ,  procedure_code_11  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_12'  as procedure_column\n        ,  procedure_code_12  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_13'  as procedure_column\n        ,  procedure_code_13  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_14'  as procedure_column\n        ,  procedure_code_14  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_15'  as procedure_column\n        ,  procedure_code_15  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_16'  as procedure_column\n        ,  procedure_code_16  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_17'  as procedure_column\n        ,  procedure_code_17  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_18'  as procedure_column\n        ,  procedure_code_18  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_19'  as procedure_column\n        ,  procedure_code_19  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_20'  as procedure_column\n        ,  procedure_code_20  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_21'  as procedure_column\n        ,  procedure_code_21  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_22'  as procedure_column\n        ,  procedure_code_22  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_23'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_24'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_25'  as procedure_column\n        ,  procedure_code_25  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs) as normalized_procedure_code\n    , count(*) as procedure_code_occurrence_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join tuva_project_demo.terminology.icd_10_pcs icd_10\n    on replace(piv.procedure_code,'.','') = icd_10.icd_10_pcs\n    and piv.procedure_code_type = 'icd-10-pcs'\nleft join tuva_project_demo.terminology.icd_9_pcs icd_9\n    on replace(piv.procedure_code,'.','') = icd_9.icd_9_pcs\n    and piv.procedure_code_type = 'icd-9-pcs'\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_procedure_code_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_procedure_code_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_procedure_code_voting"], "alias": "_int_normalized_input_procedure_code_voting", "checksum": {"name": "sha256", "checksum": "757d7a1c6ae50c1fa759619309f3133f98b10abc966e5eaea9bf2540d8429d00"}, "config": {"enabled": true, "alias": "_int_normalized_input_procedure_code_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_procedure_code_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6154885, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_code_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith distinct_count as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , procedure_column\r\n        , count(*) as distinct_count\r\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\r\n    from {{ ref('normalized_input__int_procedure_code_normalize') }}\r\n    group by\r\n        claim_id\r\n        , data_source\r\n        , procedure_column\r\n)\r\n\r\nselect \r\n    norm.claim_id\r\n    , norm.data_source\r\n    , norm.procedure_column as column_name\r\n    , norm.normalized_procedure_code as normalized_code\r\n    , norm.procedure_code_occurrence_count as occurrence_count\r\n    , coalesce(lead(procedure_code_occurrence_count) \r\n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc),0) as next_occurrence_count\r\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc) as occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_procedure_code_normalize') }} norm\r\ninner join distinct_count dist\r\n    on norm.claim_id = dist.claim_id\r\n    and norm.data_source = dist.data_source\r\n    and norm.procedure_column = dist.procedure_column", "language": "sql", "refs": [{"name": "normalized_input__int_procedure_code_normalize", "package": null, "version": null}, {"name": "normalized_input__int_procedure_code_normalize", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_procedure_code_normalize"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_voting.sql", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , procedure_column\n        , count(*) as distinct_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_code_normalize\n    group by\n        claim_id\n        , data_source\n        , procedure_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.procedure_column as column_name\n    , norm.normalized_procedure_code as normalized_code\n    , norm.procedure_code_occurrence_count as occurrence_count\n    , coalesce(lead(procedure_code_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc) as occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_code_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.procedure_column = dist.procedure_column", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_procedure_date_final": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_procedure_date_final", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_final.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_final.sql", "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_final", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_procedure_date_final"], "alias": "_int_normalized_input_procedure_date_final", "checksum": {"name": "sha256", "checksum": "1e1007a03a83eb45173da14639e96a8bd7bcd23b6717ec6de962d2a94b495f09"}, "config": {"enabled": true, "alias": "_int_normalized_input_procedure_date_final", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_procedure_date_final", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6195986, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_date_final", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , max(case when lower(column_name) = 'procedure_date_1' then normalized_code else null end) as procedure_date_1\r\n    , max(case when lower(column_name) = 'procedure_date_2' then normalized_code else null end) as procedure_date_2\r\n    , max(case when lower(column_name) = 'procedure_date_3' then normalized_code else null end) as procedure_date_3\r\n    , max(case when lower(column_name) = 'procedure_date_4' then normalized_code else null end) as procedure_date_4\r\n    , max(case when lower(column_name) = 'procedure_date_5' then normalized_code else null end) as procedure_date_5\r\n    , max(case when lower(column_name) = 'procedure_date_6' then normalized_code else null end) as procedure_date_6\r\n    , max(case when lower(column_name) = 'procedure_date_7' then normalized_code else null end) as procedure_date_7\r\n    , max(case when lower(column_name) = 'procedure_date_8' then normalized_code else null end) as procedure_date_8\r\n    , max(case when lower(column_name) = 'procedure_date_9' then normalized_code else null end) as procedure_date_9\r\n    , max(case when lower(column_name) = 'procedure_date_10' then normalized_code else null end) as procedure_date_10\r\n    , max(case when lower(column_name) = 'procedure_date_11' then normalized_code else null end) as procedure_date_11\r\n    , max(case when lower(column_name) = 'procedure_date_12' then normalized_code else null end) as procedure_date_12\r\n    , max(case when lower(column_name) = 'procedure_date_13' then normalized_code else null end) as procedure_date_13\r\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_14\r\n    , max(case when lower(column_name) = 'procedure_date_15' then normalized_code else null end) as procedure_date_15\r\n    , max(case when lower(column_name) = 'procedure_date_16' then normalized_code else null end) as procedure_date_16\r\n    , max(case when lower(column_name) = 'procedure_date_17' then normalized_code else null end) as procedure_date_17\r\n    , max(case when lower(column_name) = 'procedure_date_18' then normalized_code else null end) as procedure_date_18\r\n    , max(case when lower(column_name) = 'procedure_date_19' then normalized_code else null end) as procedure_date_19\r\n    , max(case when lower(column_name) = 'procedure_date_20' then normalized_code else null end) as procedure_date_20\r\n    , max(case when lower(column_name) = 'procedure_date_21' then normalized_code else null end) as procedure_date_21\r\n    , max(case when lower(column_name) = 'procedure_date_22' then normalized_code else null end) as procedure_date_22\r\n    , max(case when lower(column_name) = 'procedure_date_23' then normalized_code else null end) as procedure_date_23\r\n    , max(case when lower(column_name) = 'procedure_date_24' then normalized_code else null end) as procedure_date_24\r\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_25\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_procedure_date_voting') }}\r\nwhere (occurrence_row_count = 1\r\n        and occurrence_count > next_occurrence_count)\r\ngroup by\r\n    claim_id\r\n    , data_source", "language": "sql", "refs": [{"name": "normalized_input__int_procedure_date_voting", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_procedure_date_voting"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_final.sql", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'procedure_date_1' then normalized_code else null end) as procedure_date_1\n    , max(case when lower(column_name) = 'procedure_date_2' then normalized_code else null end) as procedure_date_2\n    , max(case when lower(column_name) = 'procedure_date_3' then normalized_code else null end) as procedure_date_3\n    , max(case when lower(column_name) = 'procedure_date_4' then normalized_code else null end) as procedure_date_4\n    , max(case when lower(column_name) = 'procedure_date_5' then normalized_code else null end) as procedure_date_5\n    , max(case when lower(column_name) = 'procedure_date_6' then normalized_code else null end) as procedure_date_6\n    , max(case when lower(column_name) = 'procedure_date_7' then normalized_code else null end) as procedure_date_7\n    , max(case when lower(column_name) = 'procedure_date_8' then normalized_code else null end) as procedure_date_8\n    , max(case when lower(column_name) = 'procedure_date_9' then normalized_code else null end) as procedure_date_9\n    , max(case when lower(column_name) = 'procedure_date_10' then normalized_code else null end) as procedure_date_10\n    , max(case when lower(column_name) = 'procedure_date_11' then normalized_code else null end) as procedure_date_11\n    , max(case when lower(column_name) = 'procedure_date_12' then normalized_code else null end) as procedure_date_12\n    , max(case when lower(column_name) = 'procedure_date_13' then normalized_code else null end) as procedure_date_13\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_14\n    , max(case when lower(column_name) = 'procedure_date_15' then normalized_code else null end) as procedure_date_15\n    , max(case when lower(column_name) = 'procedure_date_16' then normalized_code else null end) as procedure_date_16\n    , max(case when lower(column_name) = 'procedure_date_17' then normalized_code else null end) as procedure_date_17\n    , max(case when lower(column_name) = 'procedure_date_18' then normalized_code else null end) as procedure_date_18\n    , max(case when lower(column_name) = 'procedure_date_19' then normalized_code else null end) as procedure_date_19\n    , max(case when lower(column_name) = 'procedure_date_20' then normalized_code else null end) as procedure_date_20\n    , max(case when lower(column_name) = 'procedure_date_21' then normalized_code else null end) as procedure_date_21\n    , max(case when lower(column_name) = 'procedure_date_22' then normalized_code else null end) as procedure_date_22\n    , max(case when lower(column_name) = 'procedure_date_23' then normalized_code else null end) as procedure_date_23\n    , max(case when lower(column_name) = 'procedure_date_24' then normalized_code else null end) as procedure_date_24\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_25\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_date_voting\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_procedure_date_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_procedure_date_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_procedure_date_normalize"], "alias": "_int_normalized_input_procedure_date_normalize", "checksum": {"name": "sha256", "checksum": "a5277f6a929fc4773879cef62c4215915c0f91de7c728828657c4dcc72dbedc1"}, "config": {"enabled": true, "alias": "_int_normalized_input_procedure_date_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_procedure_date_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.62326, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_date_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith pivot_procedure as(\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_1'  as procedure_column\r\n        ,  procedure_date_1  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_2'  as procedure_column\r\n        ,  procedure_date_2  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_3'  as procedure_column\r\n        ,  procedure_date_3  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_4'  as procedure_column\r\n        ,  procedure_date_4  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_5'  as procedure_column\r\n        ,  procedure_date_5  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_6'  as procedure_column\r\n        ,  procedure_date_6  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_7'  as procedure_column\r\n        ,  procedure_date_7  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_8'  as procedure_column\r\n        ,  procedure_date_8  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_9'  as procedure_column\r\n        ,  procedure_date_9  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_10'  as procedure_column\r\n        ,  procedure_date_10  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_11'  as procedure_column\r\n        ,  procedure_date_11  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_12'  as procedure_column\r\n        ,  procedure_date_12  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_13'  as procedure_column\r\n        ,  procedure_date_13  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_14'  as procedure_column\r\n        ,  procedure_date_14  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_15'  as procedure_column\r\n        ,  procedure_date_15  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_16'  as procedure_column\r\n        ,  procedure_date_16  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_17'  as procedure_column\r\n        ,  procedure_date_17  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_18'  as procedure_column\r\n        ,  procedure_date_18  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_19'  as procedure_column\r\n        ,  procedure_date_19  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_20'  as procedure_column\r\n        ,  procedure_date_20  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_21'  as procedure_column\r\n        ,  procedure_date_21  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_22'  as procedure_column\r\n        ,  procedure_date_22  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_23'  as procedure_column\r\n        ,  procedure_date_24  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_24'  as procedure_column\r\n        ,  procedure_date_24  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n\r\n    union all\r\n\r\n    select\r\n        claim_id\r\n        , claim_type\r\n        , data_source\r\n        , 'procedure_date_25'  as procedure_column\r\n        ,  procedure_date_25  as procedure_date\r\n    from {{ ref('normalized_input__stg_medical_claim') }}\r\n)\r\n\r\nselect\r\n    claim_id\r\n    , data_source\r\n    , procedure_column\r\n    , cal.full_date as procedure_date\r\n    , count(*) as procedure_date_occurrence_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom pivot_procedure piv\r\nleft join {{ ref('terminology__calendar') }} cal\r\n    on piv.procedure_date = cal.full_date\r\nwhere claim_type = 'institutional'\r\ngroup by \r\n    claim_id\r\n    , data_source\r\n    , procedure_column\r\n    , cal.full_date", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__calendar"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n), pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_1'  as procedure_column\n        ,  procedure_date_1  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_2'  as procedure_column\n        ,  procedure_date_2  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_3'  as procedure_column\n        ,  procedure_date_3  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_4'  as procedure_column\n        ,  procedure_date_4  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_5'  as procedure_column\n        ,  procedure_date_5  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_6'  as procedure_column\n        ,  procedure_date_6  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_7'  as procedure_column\n        ,  procedure_date_7  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_8'  as procedure_column\n        ,  procedure_date_8  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_9'  as procedure_column\n        ,  procedure_date_9  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_10'  as procedure_column\n        ,  procedure_date_10  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_11'  as procedure_column\n        ,  procedure_date_11  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_12'  as procedure_column\n        ,  procedure_date_12  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_13'  as procedure_column\n        ,  procedure_date_13  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_14'  as procedure_column\n        ,  procedure_date_14  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_15'  as procedure_column\n        ,  procedure_date_15  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_16'  as procedure_column\n        ,  procedure_date_16  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_17'  as procedure_column\n        ,  procedure_date_17  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_18'  as procedure_column\n        ,  procedure_date_18  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_19'  as procedure_column\n        ,  procedure_date_19  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_20'  as procedure_column\n        ,  procedure_date_20  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_21'  as procedure_column\n        ,  procedure_date_21  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_22'  as procedure_column\n        ,  procedure_date_22  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_23'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_24'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_25'  as procedure_column\n        ,  procedure_date_25  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date as procedure_date\n    , count(*) as procedure_date_occurrence_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join tuva_project_demo.terminology.calendar cal\n    on piv.procedure_date = cal.full_date\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_procedure_date_voting": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_procedure_date_voting", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_voting.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_voting.sql", "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_voting", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_procedure_date_voting"], "alias": "_int_normalized_input_procedure_date_voting", "checksum": {"name": "sha256", "checksum": "304a071cf4de6809044353fc708384a99a18d0b364a6bd66e9b39b3c8e7b07c8"}, "config": {"enabled": true, "alias": "_int_normalized_input_procedure_date_voting", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_procedure_date_voting", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6268334, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_date_voting", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith distinct_count as(\r\n    select\r\n        claim_id\r\n        , data_source\r\n        , procedure_column\r\n        , count(*) as distinct_count\r\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\r\n    from {{ ref('normalized_input__int_procedure_code_normalize') }}\r\n    group by\r\n        claim_id\r\n        , data_source\r\n        , procedure_column\r\n)\r\n\r\nselect \r\n    norm.claim_id\r\n    , norm.data_source\r\n    , norm.procedure_column as column_name\r\n    , norm.procedure_date as normalized_code\r\n    , norm.procedure_date_occurrence_count as occurrence_count\r\n    , coalesce(lead(procedure_date_occurrence_count) \r\n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc),0) as next_occurrence_count\r\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc) as occurrence_row_count\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__int_procedure_date_normalize') }} norm\r\ninner join distinct_count dist\r\n    on norm.claim_id = dist.claim_id\r\n    and norm.data_source = dist.data_source\r\n    and norm.procedure_column = dist.procedure_column", "language": "sql", "refs": [{"name": "normalized_input__int_procedure_code_normalize", "package": null, "version": null}, {"name": "normalized_input__int_procedure_date_normalize", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__int_procedure_code_normalize", "model.the_tuva_project.normalized_input__int_procedure_date_normalize"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_voting.sql", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , procedure_column\n        , count(*) as distinct_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_code_normalize\n    group by\n        claim_id\n        , data_source\n        , procedure_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.procedure_column as column_name\n    , norm.procedure_date as normalized_code\n    , norm.procedure_date_occurrence_count as occurrence_count\n    , coalesce(lead(procedure_date_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc) as occurrence_row_count\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_normalized_input_procedure_date_normalize norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.procedure_column = dist.procedure_column", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_revenue_center_normalize": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_revenue_center_normalize", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_revenue_center_normalize.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_revenue_center_normalize.sql", "unique_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_revenue_center_normalize"], "alias": "_int_normalized_input_revenue_center_normalize", "checksum": {"name": "sha256", "checksum": "9d3a39508a7585596a1395c9f828313fdf5fe61a1312b59f4468ba652527e7eb"}, "config": {"enabled": true, "alias": "_int_normalized_input_revenue_center_normalize", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_revenue_center_normalize", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6300719, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_revenue_center_normalize", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , claim_line_number\r\n    , data_source\r\n    , rev.revenue_center_code as normalized_code\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_medical_claim') }} med\r\nleft join {{ ref('terminology__revenue_center') }} rev\r\n    on lpad(med.revenue_center_code, 4, '0') = rev.revenue_center_code\r\nwhere claim_type = 'institutional'", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__revenue_center", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__revenue_center"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_revenue_center_normalize.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n) select\n    claim_id\n    , claim_line_number\n    , data_source\n    , rev.revenue_center_code as normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join tuva_project_demo.terminology.revenue_center rev\n    on lpad(med.revenue_center_code, 4, '0') = rev.revenue_center_code\nwhere claim_type = 'institutional'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__int_undetermined_claim_type": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "normalized_input__int_undetermined_claim_type", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/intermediate/normalized_input__int_undetermined_claim_type.sql", "original_file_path": "models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_undetermined_claim_type.sql", "unique_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "intermediate", "normalized_input__int_undetermined_claim_type"], "alias": "_int_normalized_input_undetermined_claim_type", "checksum": {"name": "sha256", "checksum": "0c92eb7d6c2a1f41ce01492444d104a6979f15b75bacfacece09d06bf2235cad"}, "config": {"enabled": true, "alias": "_int_normalized_input_undetermined_claim_type", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_normalized_input_undetermined_claim_type", "materialized": "table", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.634162, "relation_name": "tuva_project_demo.claims_preprocessing._int_normalized_input_undetermined_claim_type", "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n    claim_id\r\n    , claim_line_number\r\n    , claim_type\r\n    , patient_id\r\n    , member_id\r\n    , payer\r\n    , plan\r\n    , claim_start_date\r\n    , claim_end_date\r\n    , claim_line_start_date\r\n    , claim_line_end_date\r\n    , admission_date\r\n    , discharge_date\r\n    , admit_source_code\r\n    , admit_type_code\r\n    , discharge_disposition_code\r\n    , place_of_service_code\r\n    , bill_type_code\r\n    , ms_drg_code\r\n    , apr_drg_code\r\n    , revenue_center_code\r\n    , service_unit_quantity\r\n    , hcpcs_code\r\n    , hcpcs_modifier_1\r\n    , hcpcs_modifier_2\r\n    , hcpcs_modifier_3\r\n    , hcpcs_modifier_4\r\n    , hcpcs_modifier_5\r\n    , rendering_npi\r\n    , billing_npi\r\n    , facility_npi\r\n    , paid_date\r\n    , paid_amount\r\n    , allowed_amount\r\n    , charge_amount\r\n    , coinsurance_amount\r\n    , copayment_amount\r\n    , deductible_amount\r\n    , total_cost_amount\r\n    , diagnosis_code_type\r\n    , diagnosis_code_1\r\n    , diagnosis_code_2\r\n    , diagnosis_code_3\r\n    , diagnosis_code_4\r\n    , diagnosis_code_5\r\n    , diagnosis_code_6\r\n    , diagnosis_code_7\r\n    , diagnosis_code_8\r\n    , diagnosis_code_9\r\n    , diagnosis_code_10\r\n    , diagnosis_code_11\r\n    , diagnosis_code_12\r\n    , diagnosis_code_13\r\n    , diagnosis_code_14\r\n    , diagnosis_code_15\r\n    , diagnosis_code_16\r\n    , diagnosis_code_17\r\n    , diagnosis_code_18\r\n    , diagnosis_code_19\r\n    , diagnosis_code_20\r\n    , diagnosis_code_21\r\n    , diagnosis_code_22\r\n    , diagnosis_code_23\r\n    , diagnosis_code_24\r\n    , diagnosis_code_25\r\n    , diagnosis_poa_1\r\n    , diagnosis_poa_2\r\n    , diagnosis_poa_3\r\n    , diagnosis_poa_4\r\n    , diagnosis_poa_5\r\n    , diagnosis_poa_6\r\n    , diagnosis_poa_7\r\n    , diagnosis_poa_8\r\n    , diagnosis_poa_9\r\n    , diagnosis_poa_10\r\n    , diagnosis_poa_11\r\n    , diagnosis_poa_12\r\n    , diagnosis_poa_13\r\n    , diagnosis_poa_14\r\n    , diagnosis_poa_15\r\n    , diagnosis_poa_16\r\n    , diagnosis_poa_17\r\n    , diagnosis_poa_18\r\n    , diagnosis_poa_19\r\n    , diagnosis_poa_20\r\n    , diagnosis_poa_21\r\n    , diagnosis_poa_22\r\n    , diagnosis_poa_23\r\n    , diagnosis_poa_24\r\n    , diagnosis_poa_25\r\n    , procedure_code_type\r\n    , procedure_code_1\r\n    , procedure_code_2\r\n    , procedure_code_3\r\n    , procedure_code_4\r\n    , procedure_code_5\r\n    , procedure_code_6\r\n    , procedure_code_7\r\n    , procedure_code_8\r\n    , procedure_code_9\r\n    , procedure_code_10\r\n    , procedure_code_11\r\n    , procedure_code_12\r\n    , procedure_code_13\r\n    , procedure_code_14\r\n    , procedure_code_15\r\n    , procedure_code_16\r\n    , procedure_code_17\r\n    , procedure_code_18\r\n    , procedure_code_19\r\n    , procedure_code_20\r\n    , procedure_code_21\r\n    , procedure_code_22\r\n    , procedure_code_23\r\n    , procedure_code_24\r\n    , procedure_code_25\r\n    , procedure_date_1\r\n    , procedure_date_2\r\n    , procedure_date_3\r\n    , procedure_date_4\r\n    , procedure_date_5\r\n    , procedure_date_6\r\n    , procedure_date_7\r\n    , procedure_date_8\r\n    , procedure_date_9\r\n    , procedure_date_10\r\n    , procedure_date_11\r\n    , procedure_date_12\r\n    , procedure_date_13\r\n    , procedure_date_14\r\n    , procedure_date_15\r\n    , procedure_date_16\r\n    , procedure_date_17\r\n    , procedure_date_18\r\n    , procedure_date_19\r\n    , procedure_date_20\r\n    , procedure_date_21\r\n    , procedure_date_22\r\n    , procedure_date_23\r\n    , procedure_date_24\r\n    , procedure_date_25\r\n    , data_source\r\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\r\nfrom {{ ref('normalized_input__stg_medical_claim') }}\r\nwhere claim_type in ('undetermined')", "language": "sql", "refs": [{"name": "normalized_input__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_undetermined_claim_type.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n) select\n    claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim\nwhere claim_type in ('undetermined')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.normalized_input__stg_medical_claim", "sql": " __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__stg_eligibility": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "normalized_input__stg_eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/staging/normalized_input__stg_eligibility.sql", "original_file_path": "models/claims_preprocessing/normalized_input/staging/normalized_input__stg_eligibility.sql", "unique_id": "model.the_tuva_project.normalized_input__stg_eligibility", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "staging", "normalized_input__stg_eligibility"], "alias": "normalized_input__stg_eligibility", "checksum": {"name": "sha256", "checksum": "5eafa446e34549f9a1f2152ff1a82cb433d39fe6697ca4b8e91f867f05ca982d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6371574, "relation_name": null, "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n      patient_id\r\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\r\n    , member_id\r\n    , gender\r\n    , race\r\n    , birth_date\r\n    , death_date\r\n    , death_flag\r\n    , enrollment_start_date\r\n    , enrollment_end_date\r\n    , payer\r\n    , payer_type\r\n    , plan\r\n    , original_reason_entitlement_code\r\n    , dual_status_code\r\n    , medicare_status_code\r\n    , first_name\r\n    , last_name\r\n    , address\r\n    , city\r\n    , state\r\n    , zip_code\r\n    , phone\r\n    , data_source\r\nfrom {{ ref('eligibility') }}", "language": "sql", "refs": [{"name": "eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project_demo.eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/staging/normalized_input__stg_eligibility.sql", "compiled": true, "compiled_code": "\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.eligibility", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__stg_medical_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "normalized_input__stg_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/staging/normalized_input__stg_medical_claim.sql", "original_file_path": "models/claims_preprocessing/normalized_input/staging/normalized_input__stg_medical_claim.sql", "unique_id": "model.the_tuva_project.normalized_input__stg_medical_claim", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "staging", "normalized_input__stg_medical_claim"], "alias": "normalized_input__stg_medical_claim", "checksum": {"name": "sha256", "checksum": "eaf70f97b4939050012ee673ec5483aa0bd65bbec55daedd76e52722d1c10f79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6391273, "relation_name": null, "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect\r\n      claim_id\r\n    , claim_line_number\r\n    , claim_type\r\n    , patient_id\r\n    , member_id\r\n    , payer\r\n    , plan\r\n    , claim_start_date\r\n    , claim_end_date\r\n    , claim_line_start_date\r\n    , claim_line_end_date\r\n    , admission_date\r\n    , discharge_date\r\n    , admit_source_code\r\n    , admit_type_code\r\n    , discharge_disposition_code\r\n    , place_of_service_code\r\n    , bill_type_code\r\n    , ms_drg_code\r\n    , apr_drg_code\r\n    , revenue_center_code\r\n    , service_unit_quantity\r\n    , hcpcs_code\r\n    , hcpcs_modifier_1\r\n    , hcpcs_modifier_2\r\n    , hcpcs_modifier_3\r\n    , hcpcs_modifier_4\r\n    , hcpcs_modifier_5\r\n    , rendering_npi\r\n    , billing_npi\r\n    , facility_npi\r\n    , paid_date\r\n    , paid_amount\r\n    , allowed_amount\r\n    , charge_amount\r\n    , coinsurance_amount\r\n    , copayment_amount\r\n    , deductible_amount\r\n    , total_cost_amount\r\n    , diagnosis_code_type\r\n    , diagnosis_code_1\r\n    , diagnosis_code_2\r\n    , diagnosis_code_3\r\n    , diagnosis_code_4\r\n    , diagnosis_code_5\r\n    , diagnosis_code_6\r\n    , diagnosis_code_7\r\n    , diagnosis_code_8\r\n    , diagnosis_code_9\r\n    , diagnosis_code_10\r\n    , diagnosis_code_11\r\n    , diagnosis_code_12\r\n    , diagnosis_code_13\r\n    , diagnosis_code_14\r\n    , diagnosis_code_15\r\n    , diagnosis_code_16\r\n    , diagnosis_code_17\r\n    , diagnosis_code_18\r\n    , diagnosis_code_19\r\n    , diagnosis_code_20\r\n    , diagnosis_code_21\r\n    , diagnosis_code_22\r\n    , diagnosis_code_23\r\n    , diagnosis_code_24\r\n    , diagnosis_code_25\r\n    , diagnosis_poa_1\r\n    , diagnosis_poa_2\r\n    , diagnosis_poa_3\r\n    , diagnosis_poa_4\r\n    , diagnosis_poa_5\r\n    , diagnosis_poa_6\r\n    , diagnosis_poa_7\r\n    , diagnosis_poa_8\r\n    , diagnosis_poa_9\r\n    , diagnosis_poa_10\r\n    , diagnosis_poa_11\r\n    , diagnosis_poa_12\r\n    , diagnosis_poa_13\r\n    , diagnosis_poa_14\r\n    , diagnosis_poa_15\r\n    , diagnosis_poa_16\r\n    , diagnosis_poa_17\r\n    , diagnosis_poa_18\r\n    , diagnosis_poa_19\r\n    , diagnosis_poa_20\r\n    , diagnosis_poa_21\r\n    , diagnosis_poa_22\r\n    , diagnosis_poa_23\r\n    , diagnosis_poa_24\r\n    , diagnosis_poa_25\r\n    , procedure_code_type\r\n    , procedure_code_1\r\n    , procedure_code_2\r\n    , procedure_code_3\r\n    , procedure_code_4\r\n    , procedure_code_5\r\n    , procedure_code_6\r\n    , procedure_code_7\r\n    , procedure_code_8\r\n    , procedure_code_9\r\n    , procedure_code_10\r\n    , procedure_code_11\r\n    , procedure_code_12\r\n    , procedure_code_13\r\n    , procedure_code_14\r\n    , procedure_code_15\r\n    , procedure_code_16\r\n    , procedure_code_17\r\n    , procedure_code_18\r\n    , procedure_code_19\r\n    , procedure_code_20\r\n    , procedure_code_21\r\n    , procedure_code_22\r\n    , procedure_code_23\r\n    , procedure_code_24\r\n    , procedure_code_25\r\n    , procedure_date_1\r\n    , procedure_date_2\r\n    , procedure_date_3\r\n    , procedure_date_4\r\n    , procedure_date_5\r\n    , procedure_date_6\r\n    , procedure_date_7\r\n    , procedure_date_8\r\n    , procedure_date_9\r\n    , procedure_date_10\r\n    , procedure_date_11\r\n    , procedure_date_12\r\n    , procedure_date_13\r\n    , procedure_date_14\r\n    , procedure_date_15\r\n    , procedure_date_16\r\n    , procedure_date_17\r\n    , procedure_date_18\r\n    , procedure_date_19\r\n    , procedure_date_20\r\n    , procedure_date_21\r\n    , procedure_date_22\r\n    , procedure_date_23\r\n    , procedure_date_24\r\n    , procedure_date_25\r\n    , data_source\r\nfrom {{ ref('medical_claim') }}", "language": "sql", "refs": [{"name": "medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project_demo.medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/staging/normalized_input__stg_medical_claim.sql", "compiled": true, "compiled_code": "\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.normalized_input__stg_pharmacy_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "normalized_input__stg_pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/normalized_input/staging/normalized_input__stg_pharmacy_claim.sql", "original_file_path": "models/claims_preprocessing/normalized_input/staging/normalized_input__stg_pharmacy_claim.sql", "unique_id": "model.the_tuva_project.normalized_input__stg_pharmacy_claim", "fqn": ["the_tuva_project", "claims_preprocessing", "normalized_input", "staging", "normalized_input__stg_pharmacy_claim"], "alias": "normalized_input__stg_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "1ee6891e10952c2c81f3f999533b13b161c75aad32abd5040dbb32668298f510"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["normalized_input", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["normalized_input", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": ["normalized_input", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6409261, "relation_name": null, "raw_code": "{{ config(\r\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect\r\n      claim_id\r\n    , claim_line_number\r\n    , patient_id\r\n    , member_id\r\n    , payer\r\n    , plan\r\n    , prescribing_provider_npi\r\n    , dispensing_provider_npi\r\n    , dispensing_date\r\n    , ndc_code\r\n    , quantity\r\n    , days_supply\r\n    , refills\r\n    , paid_date\r\n    , paid_amount\r\n    , allowed_amount\r\n    , coinsurance_amount\r\n    , copayment_amount\r\n    , deductible_amount\r\n    , data_source\r\nfrom {{ ref('pharmacy_claim') }}", "language": "sql", "refs": [{"name": "pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project_demo.pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/normalized_input/staging/normalized_input__stg_pharmacy_claim.sql", "compiled": true, "compiled_code": "\n\n\nselect\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , data_source\nfrom TUVA_PROJECT_DEMO.input_layer.pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__dq_input_layer_results": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__dq_input_layer_results", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/data_quality/service_category__dq_input_layer_results.sql", "original_file_path": "models/claims_preprocessing/service_category/data_quality/service_category__dq_input_layer_results.sql", "unique_id": "model.the_tuva_project.service_category__dq_input_layer_results", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "data_quality", "service_category__dq_input_layer_results"], "alias": "_dq_input_layer_results", "checksum": {"name": "sha256", "checksum": "0153d75e226c9f3d5403c0ce0ca022c42b397004ae6111cbd5701d98c79138dc"}, "config": {"enabled": true, "alias": "_dq_input_layer_results", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_dq_input_layer_results", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4505622, "relation_name": "tuva_project_demo.claims_preprocessing._dq_input_layer_results", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n  dq_problem\n, count(distinct claim_id) as distinct_claims\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__dq_input_layer_tests') }}\ngroup by 1", "language": "sql", "refs": [{"name": "service_category__dq_input_layer_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__dq_input_layer_tests"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/data_quality/service_category__dq_input_layer_results.sql", "compiled": true, "compiled_code": "\n\nselect\n  dq_problem\n, count(distinct claim_id) as distinct_claims\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._dq_input_layer_tests\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__dq_input_layer_tests": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__dq_input_layer_tests", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/data_quality/service_category__dq_input_layer_tests.sql", "original_file_path": "models/claims_preprocessing/service_category/data_quality/service_category__dq_input_layer_tests.sql", "unique_id": "model.the_tuva_project.service_category__dq_input_layer_tests", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "data_quality", "service_category__dq_input_layer_tests"], "alias": "_dq_input_layer_tests", "checksum": {"name": "sha256", "checksum": "fc16e6bfa3c2a7c10ae467283d062e71fc0d35fb9da979b6a8c65fdd76f7782a"}, "config": {"enabled": true, "alias": "_dq_input_layer_tests", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_dq_input_layer_tests", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4541306, "relation_name": "tuva_project_demo.claims_preprocessing._dq_input_layer_tests", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, 'Multiple claim_type' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\ngroup by 1\nhaving count(distinct claim_type) > 1\n\nunion all\n\nselect distinct \n  claim_id\n, 'Multiple bill_type_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\ngroup by 1\nhaving count(distinct bill_type_code) > 1\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing claim_type' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing place_of_service_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing bill_type_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and bill_type_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing revenue_center_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and revenue_center_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing hcpcs_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and hcpcs_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid claim_type' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\ninner join {{ ref('terminology__claim_type') }} b\n  on a.claim_type = b.claim_type\nwhere b.claim_type is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid place_of_service_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\ninner join {{ ref('terminology__place_of_service') }} b\n  on a.place_of_service_code = b.place_of_service_code\nwhere a.claim_type = 'professional'\n  and b.place_of_service_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid bill_type_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\ninner join {{ ref('terminology__bill_type') }} b\n  on a.bill_type_code = b.bill_type_code\nwhere a.claim_type = 'institutional'\n  and b.bill_type_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid revenue_center_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\ninner join {{ ref('terminology__revenue_center') }} b\n  on a.revenue_center_code = b.revenue_center_code\nwhere a.claim_type = 'institutional'\n  and b.revenue_center_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid hcpcs_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\ninner join {{ ref('terminology__hcpcs_level_2') }} b\n  on a.hcpcs_code = b.hcpcs\nwhere a.claim_type = 'professional'\n  and b.hcpcs is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid ms_drg_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\ninner join {{ ref('terminology__ms_drg') }} b\n  on a.ms_drg_code = b.ms_drg_code\nwhere a.claim_type = 'institutional'\n  and b.ms_drg_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid apr_drg_code' as dq_problem\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\ninner join {{ ref('terminology__apr_drg') }} b\n  on a.apr_drg_code = b.apr_drg_code\nwhere a.claim_type = 'institutional'\n  and b.apr_drg_code is null", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__claim_type", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__place_of_service", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__bill_type", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__revenue_center", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__hcpcs_level_2", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__ms_drg", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__apr_drg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "seed.the_tuva_project.terminology__claim_type", "seed.the_tuva_project.terminology__place_of_service", "seed.the_tuva_project.terminology__bill_type", "seed.the_tuva_project.terminology__revenue_center", "seed.the_tuva_project.terminology__hcpcs_level_2", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__apr_drg"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/data_quality/service_category__dq_input_layer_tests.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, 'Multiple claim_type' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\ngroup by 1\nhaving count(distinct claim_type) > 1\n\nunion all\n\nselect distinct \n  claim_id\n, 'Multiple bill_type_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\ngroup by 1\nhaving count(distinct bill_type_code) > 1\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing claim_type' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing place_of_service_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing bill_type_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and bill_type_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing revenue_center_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and revenue_center_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing hcpcs_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and hcpcs_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid claim_type' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join tuva_project_demo.terminology.claim_type b\n  on a.claim_type = b.claim_type\nwhere b.claim_type is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid place_of_service_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join tuva_project_demo.terminology.place_of_service b\n  on a.place_of_service_code = b.place_of_service_code\nwhere a.claim_type = 'professional'\n  and b.place_of_service_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid bill_type_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join tuva_project_demo.terminology.bill_type b\n  on a.bill_type_code = b.bill_type_code\nwhere a.claim_type = 'institutional'\n  and b.bill_type_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid revenue_center_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join tuva_project_demo.terminology.revenue_center b\n  on a.revenue_center_code = b.revenue_center_code\nwhere a.claim_type = 'institutional'\n  and b.revenue_center_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid hcpcs_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join tuva_project_demo.terminology.hcpcs_level_2 b\n  on a.hcpcs_code = b.hcpcs\nwhere a.claim_type = 'professional'\n  and b.hcpcs is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid ms_drg_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join tuva_project_demo.terminology.ms_drg b\n  on a.ms_drg_code = b.ms_drg_code\nwhere a.claim_type = 'institutional'\n  and b.ms_drg_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid apr_drg_code' as dq_problem\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join tuva_project_demo.terminology.apr_drg b\n  on a.apr_drg_code = b.apr_drg_code\nwhere a.claim_type = 'institutional'\n  and b.apr_drg_code is null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__dq_multiple_service_categories_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__dq_multiple_service_categories_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/data_quality/service_category__dq_multiple_service_categories_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/data_quality/service_category__dq_multiple_service_categories_institutional.sql", "unique_id": "model.the_tuva_project.service_category__dq_multiple_service_categories_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "data_quality", "service_category__dq_multiple_service_categories_institutional"], "alias": "_dq_multiple_service_categories_institutional", "checksum": {"name": "sha256", "checksum": "b0aa09f9d0ba10b8b974ed8890e0a5791f3a7607dff0d7ef10b2dbf41f51541f"}, "config": {"enabled": true, "alias": "_dq_multiple_service_categories_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_dq_multiple_service_categories_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4592795, "relation_name": "tuva_project_demo.claims_preprocessing._dq_multiple_service_categories_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n  claim_id\n, count(distinct service_category_2) as distinct_service_category_count\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__combined_institutional') }}\ngroup by 1\nhaving count(distinct service_category_2) > 1", "language": "sql", "refs": [{"name": "service_category__combined_institutional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__combined_institutional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/data_quality/service_category__dq_multiple_service_categories_institutional.sql", "compiled": true, "compiled_code": "\n\nselect\n  claim_id\n, count(distinct service_category_2) as distinct_service_category_count\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_combined_institutional\ngroup by 1\nhaving count(distinct service_category_2) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__dq_multiple_service_categories_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__dq_multiple_service_categories_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/data_quality/service_category__dq_multiple_service_categories_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/data_quality/service_category__dq_multiple_service_categories_professional.sql", "unique_id": "model.the_tuva_project.service_category__dq_multiple_service_categories_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "data_quality", "service_category__dq_multiple_service_categories_professional"], "alias": "_dq_multiple_service_categories_professional", "checksum": {"name": "sha256", "checksum": "75b2b979b8bd7d1d1251a7aa90f4f765b47d1a463596be3dd21570537d35d9ff"}, "config": {"enabled": true, "alias": "_dq_multiple_service_categories_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_dq_multiple_service_categories_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4632692, "relation_name": "tuva_project_demo.claims_preprocessing._dq_multiple_service_categories_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n  claim_id\n, claim_line_number\n, count(distinct service_category_2) as distinct_service_category_count\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__combined_professional') }}\ngroup by 1,2\nhaving count(distinct service_category_2) > 1", "language": "sql", "refs": [{"name": "service_category__combined_professional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__combined_professional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/data_quality/service_category__dq_multiple_service_categories_professional.sql", "compiled": true, "compiled_code": "\n\nselect\n  claim_id\n, claim_line_number\n, count(distinct service_category_2) as distinct_service_category_count\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_combined_professional\ngroup by 1,2\nhaving count(distinct service_category_2) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__service_category_grouper": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__service_category_grouper", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/final/service_category__service_category_grouper.sql", "original_file_path": "models/claims_preprocessing/service_category/final/service_category__service_category_grouper.sql", "unique_id": "model.the_tuva_project.service_category__service_category_grouper", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "final", "service_category__service_category_grouper"], "alias": "service_category_grouper", "checksum": {"name": "sha256", "checksum": "ef849e362fb992c82a4c7e60e3a7d9fac20c8be30de7d767fb7b5844e2e4d218"}, "config": {"enabled": true, "alias": "service_category_grouper", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "Assigns every claim line into a unique service category.", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Indicated the type of claims", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_category_1": {"name": "service_category_1", "description": "The first service category of the claim line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_category_2": {"name": "service_category_2", "description": "The second, more specific service category of the claim line", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "service_category_grouper", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2397497, "relation_name": "tuva_project_demo.claims_preprocessing.service_category_grouper", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\nwith service_category_1_mapping as(\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case\n            when service_category_2 = 'Acute Inpatient'               then 'Inpatient'\n            when service_category_2 = 'Ambulance'                     then 'Ancillary'\n            when service_category_2 = 'Ambulatory Surgery'            then 'Outpatient'\n            when service_category_2 = 'Dialysis'                      then 'Outpatient'\n            when service_category_2 = 'Durable Medical Equipment'     then 'Ancillary'\n            when service_category_2 = 'Emergency Department'          then 'Outpatient'\n            when service_category_2 = 'Home Health'                   then 'Outpatient'\n            when service_category_2 = 'Hospice'                       then 'Outpatient'\n            when service_category_2 = 'Inpatient Psychiatric'         then 'Inpatient'\n            when service_category_2 = 'Inpatient Rehabilitation'      then 'Inpatient'\n            when service_category_2 = 'Lab'                           then 'Ancillary'\n            when service_category_2 = 'Office Visit'                  then 'Office Visit'\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 'Outpatient'\n            when service_category_2 = 'Outpatient Psychiatric'        then 'Outpatient'\n            when service_category_2 = 'Outpatient Rehabilitation'     then 'Outpatient'\n            when service_category_2 = 'Skilled Nursing'               then 'Inpatient'\n            when service_category_2 = 'Urgent Care'                   then 'Outpatient'\n            when service_category_2 is null                           then 'Other'\n        end service_category_1\n        , case\n            when service_category_2 is null then 'Other'\n            else service_category_2\n        end service_category_2\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from {{ ref('service_category__stg_medical_claim') }} a\n    left join {{ ref('service_category__combined_professional') }} b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    where a.claim_type = 'professional'\n\n    union all\n\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case\n            when service_category_2 = 'Acute Inpatient'               then 'Inpatient'\n            when service_category_2 = 'Ambulatory Surgery'            then 'Outpatient'\n            when service_category_2 = 'Dialysis'                      then 'Outpatient'\n            when service_category_2 = 'Emergency Department'          then 'Outpatient'\n            when service_category_2 = 'Home Health'                   then 'Outpatient'\n            when service_category_2 = 'Hospice'                       then 'Outpatient'\n            when service_category_2 = 'Inpatient Psychiatric'         then 'Inpatient'\n            when service_category_2 = 'Inpatient Rehabilitation'      then 'Inpatient'\n            when service_category_2 = 'Lab'                           then 'Ancillary'\n            when service_category_2 = 'Office Visit'                  then 'Office Visit'\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 'Outpatient'\n            when service_category_2 = 'Outpatient Psychiatric'        then 'Outpatient'\n            when service_category_2 = 'Skilled Nursing'               then 'Inpatient'\n            when service_category_2 = 'Urgent Care'                   then 'Outpatient'\n            when service_category_2 is null                           then 'Other'\n        end service_category_1\n        , case\n            when service_category_2 is null then 'Other'\n            else service_category_2\n        end service_category_2\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from {{ ref('service_category__stg_medical_claim') }} a\n    left join {{ ref('service_category__combined_institutional') }} b\n    on a.claim_id = b.claim_id\n    where a.claim_type = 'institutional'\n)\n, service_category_2_deduplication as(\n    select \n        claim_id\n        , claim_line_number\n        , claim_type\n        , service_category_1\n        , service_category_2\n        , row_number() over (partition by claim_id, claim_line_number order by \n            case\n            when service_category_2 = 'Acute Inpatient'               then 3\n            when service_category_2 = 'Ambulance'                     then 7\n            when service_category_2 = 'Ambulatory Surgery'            then 8\n            when service_category_2 = 'Dialysis'                      then 17\n            when service_category_2 = 'Durable Medical Equipment'     then 1\n            when service_category_2 = 'Emergency Department'          then 5\n            when service_category_2 = 'Home Health'                   then 9\n            when service_category_2 = 'Hospice'                       then 10\n            when service_category_2 = 'Inpatient Psychiatric'         then 11\n            when service_category_2 = 'Inpatient Rehabilitation'      then 12\n            when service_category_2 = 'Lab'                           then 13\n            when service_category_2 = 'Office Visit'                  then 4\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 14\n            when service_category_2 = 'Outpatient Psychiatric'        then 15\n            when service_category_2 = 'Outpatient Rehabilitation'     then 16\n            when service_category_2 = 'Skilled Nursing'               then 6\n            when service_category_2 = 'Urgent Care'                   then 2\n            when service_category_2 is null                           then 18\n                else 99 end) as duplicate_row_number\n    from service_category_1_mapping\n)\n\nselect\n    claim_id\n    , claim_line_number\n    , claim_type\n    , service_category_1\n    , service_category_2\nfrom service_category_2_deduplication\nwhere duplicate_row_number = 1", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__combined_professional", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__combined_institutional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "model.the_tuva_project.service_category__combined_professional", "model.the_tuva_project.service_category__combined_institutional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/final/service_category__service_category_grouper.sql", "compiled": true, "compiled_code": "\nwith  __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n), service_category_1_mapping as(\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case\n            when service_category_2 = 'Acute Inpatient'               then 'Inpatient'\n            when service_category_2 = 'Ambulance'                     then 'Ancillary'\n            when service_category_2 = 'Ambulatory Surgery'            then 'Outpatient'\n            when service_category_2 = 'Dialysis'                      then 'Outpatient'\n            when service_category_2 = 'Durable Medical Equipment'     then 'Ancillary'\n            when service_category_2 = 'Emergency Department'          then 'Outpatient'\n            when service_category_2 = 'Home Health'                   then 'Outpatient'\n            when service_category_2 = 'Hospice'                       then 'Outpatient'\n            when service_category_2 = 'Inpatient Psychiatric'         then 'Inpatient'\n            when service_category_2 = 'Inpatient Rehabilitation'      then 'Inpatient'\n            when service_category_2 = 'Lab'                           then 'Ancillary'\n            when service_category_2 = 'Office Visit'                  then 'Office Visit'\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 'Outpatient'\n            when service_category_2 = 'Outpatient Psychiatric'        then 'Outpatient'\n            when service_category_2 = 'Outpatient Rehabilitation'     then 'Outpatient'\n            when service_category_2 = 'Skilled Nursing'               then 'Inpatient'\n            when service_category_2 = 'Urgent Care'                   then 'Outpatient'\n            when service_category_2 is null                           then 'Other'\n        end service_category_1\n        , case\n            when service_category_2 is null then 'Other'\n            else service_category_2\n        end service_category_2\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from __dbt__cte__service_category__stg_medical_claim a\n    left join tuva_project_demo.claims_preprocessing._int_combined_professional b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    where a.claim_type = 'professional'\n\n    union all\n\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case\n            when service_category_2 = 'Acute Inpatient'               then 'Inpatient'\n            when service_category_2 = 'Ambulatory Surgery'            then 'Outpatient'\n            when service_category_2 = 'Dialysis'                      then 'Outpatient'\n            when service_category_2 = 'Emergency Department'          then 'Outpatient'\n            when service_category_2 = 'Home Health'                   then 'Outpatient'\n            when service_category_2 = 'Hospice'                       then 'Outpatient'\n            when service_category_2 = 'Inpatient Psychiatric'         then 'Inpatient'\n            when service_category_2 = 'Inpatient Rehabilitation'      then 'Inpatient'\n            when service_category_2 = 'Lab'                           then 'Ancillary'\n            when service_category_2 = 'Office Visit'                  then 'Office Visit'\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 'Outpatient'\n            when service_category_2 = 'Outpatient Psychiatric'        then 'Outpatient'\n            when service_category_2 = 'Skilled Nursing'               then 'Inpatient'\n            when service_category_2 = 'Urgent Care'                   then 'Outpatient'\n            when service_category_2 is null                           then 'Other'\n        end service_category_1\n        , case\n            when service_category_2 is null then 'Other'\n            else service_category_2\n        end service_category_2\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from __dbt__cte__service_category__stg_medical_claim a\n    left join tuva_project_demo.claims_preprocessing._int_combined_institutional b\n    on a.claim_id = b.claim_id\n    where a.claim_type = 'institutional'\n)\n, service_category_2_deduplication as(\n    select \n        claim_id\n        , claim_line_number\n        , claim_type\n        , service_category_1\n        , service_category_2\n        , row_number() over (partition by claim_id, claim_line_number order by \n            case\n            when service_category_2 = 'Acute Inpatient'               then 3\n            when service_category_2 = 'Ambulance'                     then 7\n            when service_category_2 = 'Ambulatory Surgery'            then 8\n            when service_category_2 = 'Dialysis'                      then 17\n            when service_category_2 = 'Durable Medical Equipment'     then 1\n            when service_category_2 = 'Emergency Department'          then 5\n            when service_category_2 = 'Home Health'                   then 9\n            when service_category_2 = 'Hospice'                       then 10\n            when service_category_2 = 'Inpatient Psychiatric'         then 11\n            when service_category_2 = 'Inpatient Rehabilitation'      then 12\n            when service_category_2 = 'Lab'                           then 13\n            when service_category_2 = 'Office Visit'                  then 4\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 14\n            when service_category_2 = 'Outpatient Psychiatric'        then 15\n            when service_category_2 = 'Outpatient Rehabilitation'     then 16\n            when service_category_2 = 'Skilled Nursing'               then 6\n            when service_category_2 = 'Urgent Care'                   then 2\n            when service_category_2 is null                           then 18\n                else 99 end) as duplicate_row_number\n    from service_category_1_mapping\n)\n\nselect\n    claim_id\n    , claim_line_number\n    , claim_type\n    , service_category_1\n    , service_category_2\nfrom service_category_2_deduplication\nwhere duplicate_row_number = 1", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__acute_inpatient_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__acute_inpatient_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__acute_inpatient_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__acute_inpatient_institutional.sql", "unique_id": "model.the_tuva_project.service_category__acute_inpatient_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__acute_inpatient_institutional"], "alias": "_int_acute_inpatient_institutional", "checksum": {"name": "sha256", "checksum": "102b98bfad308a4b15a56e009424b8cb75e94d87ac512dff9d6b400066ca685c"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2586966, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith room_and_board_requirement as (\nselect distinct \n  claim_id\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and revenue_center_code in\n  ('0100','0101',\n   '0110','0111','0112','0113','0114','0116','0117','0118','0119',\n   '0120','0121','0122','0123','0124','0126','0127','0128','0129',\n   '0130','0131','0132','0133','0134','0136','0137','0138','0139',\n   '0140','0141','0142','0143','0144','0146','0147','0148','0149',\n   '0150','0151','0152','0153','0154','0156','0157','0158','0159',\n   '0160','0164','0167','0169',\n   '0170','0171','0172','0173','0174','0179',\n   '0190','0191','0192','0193','0194','0199',\n   '0200','0201','0202','0203','0204','0206','0207','0208','0209',\n   '0210','0211','0212','0213','0214','0219',\n   '1000','1001','1002')\n)\n\n, drg_requirement as (\nselect distinct \n  mc.claim_id\nfrom {{ ref('service_category__stg_medical_claim') }} mc\nleft join {{ ref('terminology__ms_drg')}} msdrg\n  on mc.ms_drg_code = msdrg.ms_drg_code\nleft join {{ ref('terminology__apr_drg')}} aprdrg\n  on mc.apr_drg_code = aprdrg.apr_drg_code\nwhere claim_type = 'institutional'\n  and (msdrg.ms_drg_code is not null or aprdrg.apr_drg_code is not null)\n)\n\n, bill_type_requirement as (\nselect distinct \n  claim_id\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('11','12') \n)\n\nselect distinct \n  a.claim_id\n, 'Acute Inpatient' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\ninner join room_and_board_requirement b\n  on a.claim_id = b.claim_id\ninner join drg_requirement c\n  on a.claim_id = c.claim_id\ninner join bill_type_requirement d\n  on a.claim_id = d.claim_id", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "terminology__ms_drg", "package": null, "version": null}, {"name": "terminology__apr_drg", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__apr_drg"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__acute_inpatient_institutional.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n), room_and_board_requirement as (\nselect distinct \n  claim_id\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and revenue_center_code in\n  ('0100','0101',\n   '0110','0111','0112','0113','0114','0116','0117','0118','0119',\n   '0120','0121','0122','0123','0124','0126','0127','0128','0129',\n   '0130','0131','0132','0133','0134','0136','0137','0138','0139',\n   '0140','0141','0142','0143','0144','0146','0147','0148','0149',\n   '0150','0151','0152','0153','0154','0156','0157','0158','0159',\n   '0160','0164','0167','0169',\n   '0170','0171','0172','0173','0174','0179',\n   '0190','0191','0192','0193','0194','0199',\n   '0200','0201','0202','0203','0204','0206','0207','0208','0209',\n   '0210','0211','0212','0213','0214','0219',\n   '1000','1001','1002')\n)\n\n, drg_requirement as (\nselect distinct \n  mc.claim_id\nfrom __dbt__cte__service_category__stg_medical_claim mc\nleft join tuva_project_demo.terminology.ms_drg msdrg\n  on mc.ms_drg_code = msdrg.ms_drg_code\nleft join tuva_project_demo.terminology.apr_drg aprdrg\n  on mc.apr_drg_code = aprdrg.apr_drg_code\nwhere claim_type = 'institutional'\n  and (msdrg.ms_drg_code is not null or aprdrg.apr_drg_code is not null)\n)\n\n, bill_type_requirement as (\nselect distinct \n  claim_id\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('11','12') \n)\n\nselect distinct \n  a.claim_id\n, 'Acute Inpatient' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join room_and_board_requirement b\n  on a.claim_id = b.claim_id\ninner join drg_requirement c\n  on a.claim_id = c.claim_id\ninner join bill_type_requirement d\n  on a.claim_id = d.claim_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__acute_inpatient_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__acute_inpatient_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__acute_inpatient_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__acute_inpatient_professional.sql", "unique_id": "model.the_tuva_project.service_category__acute_inpatient_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__acute_inpatient_professional"], "alias": "_int_acute_inpatient_professional", "checksum": {"name": "sha256", "checksum": "e9bab19d3e02d461a0c3eaa360c38fdf7b386a92891d50701b326e976e9d0e58"}, "config": {"enabled": true, "alias": "_int_acute_inpatient_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_acute_inpatient_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.265655, "relation_name": "tuva_project_demo.claims_preprocessing._int_acute_inpatient_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct\n  claim_id\n, claim_line_number\n, 'Acute Inpatient' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code = '21'", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__acute_inpatient_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct\n  claim_id\n, claim_line_number\n, 'Acute Inpatient' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '21'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__ambulance_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__ambulance_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__ambulance_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__ambulance_professional.sql", "unique_id": "model.the_tuva_project.service_category__ambulance_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__ambulance_professional"], "alias": "_int_ambulance_professional", "checksum": {"name": "sha256", "checksum": "9c87f7bd92242edff13bdd35479f6f2c0003d3922e0f684f5a08f25a03af4834"}, "config": {"enabled": true, "alias": "_int_ambulance_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_ambulance_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2726836, "relation_name": "tuva_project_demo.claims_preprocessing._int_ambulance_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Ambulance' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and (hcpcs_code between 'A0425' and 'A0436' or place_of_service_code in ('41','42'))", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__ambulance_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Ambulance' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and (hcpcs_code between 'A0425' and 'A0436' or place_of_service_code in ('41','42'))", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__ambulatory_surgery_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__ambulatory_surgery_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__ambulatory_surgery_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__ambulatory_surgery_professional.sql", "unique_id": "model.the_tuva_project.service_category__ambulatory_surgery_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__ambulatory_surgery_professional"], "alias": "_int_ambulatory_surgery_professional", "checksum": {"name": "sha256", "checksum": "a436c587da1c3c136440ebcfbd6601b73f13bb2c2e7ac18268f3f31c66ee29e9"}, "config": {"enabled": true, "alias": "_int_ambulatory_surgery_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_ambulatory_surgery_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2791204, "relation_name": "tuva_project_demo.claims_preprocessing._int_ambulatory_surgery_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  a.claim_id\n, a.claim_line_number\n, 'Ambulatory Surgery' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\nleft join {{ ref('service_category__dme_professional') }} b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere a.claim_type = 'professional'\n  and a.place_of_service_code in ('24')\n  and (b.claim_id is null and b.claim_line_number is null)", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__dme_professional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "model.the_tuva_project.service_category__dme_professional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__ambulatory_surgery_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  a.claim_id\n, a.claim_line_number\n, 'Ambulatory Surgery' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join tuva_project_demo.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere a.claim_type = 'professional'\n  and a.place_of_service_code in ('24')\n  and (b.claim_id is null and b.claim_line_number is null)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__combined_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__combined_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__combined_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__combined_institutional.sql", "unique_id": "model.the_tuva_project.service_category__combined_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__combined_institutional"], "alias": "_int_combined_institutional", "checksum": {"name": "sha256", "checksum": "8377a660dddc3d14e32abe964be532dac9dd6be19bd7163689d5e51c19db3d4f"}, "config": {"enabled": true, "alias": "_int_combined_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_combined_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2546804, "relation_name": "tuva_project_demo.claims_preprocessing._int_combined_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith duplicate_bill_types as (\nselect distinct\n  claim_id\n, 'Other' as service_category_2\nfrom {{ ref('service_category__duplicate_bill_types') }}\n)\n\n, combine as (\nselect *\nfrom {{ ref('service_category__acute_inpatient_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__dialysis_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__emergency_department_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__home_health_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__hospice_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__lab_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__outpatient_hospital_or_clinic_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__outpatient_psychiatric_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__skilled_nursing_institutional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__urgent_care_institutional') }}\n)\n\nselect\n  claim_id\n, service_category_2\nfrom duplicate_bill_types\n\nunion all\n\nselect\n  a.claim_id\n, a.service_category_2\nfrom combine a\nleft join duplicate_bill_types b\n  on a.claim_id = b.claim_id\nwhere b.claim_id is null", "language": "sql", "refs": [{"name": "service_category__duplicate_bill_types", "package": null, "version": null}, {"name": "service_category__acute_inpatient_institutional", "package": null, "version": null}, {"name": "service_category__dialysis_institutional", "package": null, "version": null}, {"name": "service_category__emergency_department_institutional", "package": null, "version": null}, {"name": "service_category__home_health_institutional", "package": null, "version": null}, {"name": "service_category__hospice_institutional", "package": null, "version": null}, {"name": "service_category__lab_institutional", "package": null, "version": null}, {"name": "service_category__outpatient_hospital_or_clinic_institutional", "package": null, "version": null}, {"name": "service_category__outpatient_psychiatric_institutional", "package": null, "version": null}, {"name": "service_category__skilled_nursing_institutional", "package": null, "version": null}, {"name": "service_category__urgent_care_institutional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__duplicate_bill_types", "model.the_tuva_project.service_category__acute_inpatient_institutional", "model.the_tuva_project.service_category__dialysis_institutional", "model.the_tuva_project.service_category__emergency_department_institutional", "model.the_tuva_project.service_category__home_health_institutional", "model.the_tuva_project.service_category__hospice_institutional", "model.the_tuva_project.service_category__lab_institutional", "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "model.the_tuva_project.service_category__outpatient_psychiatric_institutional", "model.the_tuva_project.service_category__skilled_nursing_institutional", "model.the_tuva_project.service_category__urgent_care_institutional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__combined_institutional.sql", "compiled": true, "compiled_code": "\n\nwith duplicate_bill_types as (\nselect distinct\n  claim_id\n, 'Other' as service_category_2\nfrom tuva_project_demo.claims_preprocessing._int_duplicate_bill_types\n)\n\n, combine as (\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_dialysis_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_emergency_department_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_home_health_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_hospice_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_lab_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_outpatient_hospital_or_clinic_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_outpatient_psychiatric_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_skilled_nursing_institutional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_urgent_care_institutional\n)\n\nselect\n  claim_id\n, service_category_2\nfrom duplicate_bill_types\n\nunion all\n\nselect\n  a.claim_id\n, a.service_category_2\nfrom combine a\nleft join duplicate_bill_types b\n  on a.claim_id = b.claim_id\nwhere b.claim_id is null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__combined_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__combined_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__combined_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__combined_professional.sql", "unique_id": "model.the_tuva_project.service_category__combined_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__combined_professional"], "alias": "_int_combined_professional", "checksum": {"name": "sha256", "checksum": "3d32397613f5bce6e4fc5ec30b388512cf712a18a5e53a3bc1965c4fabbe37f4"}, "config": {"enabled": true, "alias": "_int_combined_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_combined_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2475235, "relation_name": "tuva_project_demo.claims_preprocessing._int_combined_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith combined as (\nselect *\nfrom {{ ref('service_category__acute_inpatient_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__ambulatory_surgery_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__dialysis_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__emergency_department_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__home_health_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__hospice_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__inpatient_psychiatric_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__inpatient_rehab_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__lab_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__office_visit_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__outpatient_hospital_or_clinic_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__outpatient_psychiatric_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__outpatient_rehab_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__skilled_nursing_professional') }}\n\nunion all\n\nselect *\nfrom {{ ref('service_category__urgent_care_professional') }}\n)\n\nselect \n  claim_id\n, claim_line_number\n, service_category_2\n, tuva_last_run\nfrom {{ ref('service_category__dme_professional') }}\n\nunion all\n\nselect \n  a.claim_id\n, a.claim_line_number\n, a.service_category_2\n, a.tuva_last_run\nfrom {{ ref('service_category__ambulance_professional') }} a\nleft join {{ ref('service_category__dme_professional') }} b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere (b.claim_id is null and b.claim_line_number is null)\n\nunion all\n\nselect \n  a.claim_id\n, a.claim_line_number\n, a.service_category_2\n, a.tuva_last_run\nfrom combined a\nleft join {{ ref('service_category__dme_professional') }} b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nleft join {{ ref('service_category__ambulance_professional') }} c\n  on a.claim_id = c.claim_id\n  and a.claim_line_number = c.claim_line_number\nwhere (b.claim_id is null and b.claim_line_number is null)\n  and (c.claim_id is null and c.claim_line_number is null)", "language": "sql", "refs": [{"name": "service_category__acute_inpatient_professional", "package": null, "version": null}, {"name": "service_category__ambulatory_surgery_professional", "package": null, "version": null}, {"name": "service_category__dialysis_professional", "package": null, "version": null}, {"name": "service_category__emergency_department_professional", "package": null, "version": null}, {"name": "service_category__home_health_professional", "package": null, "version": null}, {"name": "service_category__hospice_professional", "package": null, "version": null}, {"name": "service_category__inpatient_psychiatric_professional", "package": null, "version": null}, {"name": "service_category__inpatient_rehab_professional", "package": null, "version": null}, {"name": "service_category__lab_professional", "package": null, "version": null}, {"name": "service_category__office_visit_professional", "package": null, "version": null}, {"name": "service_category__outpatient_hospital_or_clinic_professional", "package": null, "version": null}, {"name": "service_category__outpatient_psychiatric_professional", "package": null, "version": null}, {"name": "service_category__outpatient_rehab_professional", "package": null, "version": null}, {"name": "service_category__skilled_nursing_professional", "package": null, "version": null}, {"name": "service_category__urgent_care_professional", "package": null, "version": null}, {"name": "service_category__dme_professional", "package": null, "version": null}, {"name": "service_category__ambulance_professional", "package": null, "version": null}, {"name": "service_category__dme_professional", "package": null, "version": null}, {"name": "service_category__dme_professional", "package": null, "version": null}, {"name": "service_category__ambulance_professional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__acute_inpatient_professional", "model.the_tuva_project.service_category__ambulatory_surgery_professional", "model.the_tuva_project.service_category__dialysis_professional", "model.the_tuva_project.service_category__emergency_department_professional", "model.the_tuva_project.service_category__home_health_professional", "model.the_tuva_project.service_category__hospice_professional", "model.the_tuva_project.service_category__inpatient_psychiatric_professional", "model.the_tuva_project.service_category__inpatient_rehab_professional", "model.the_tuva_project.service_category__lab_professional", "model.the_tuva_project.service_category__office_visit_professional", "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional", "model.the_tuva_project.service_category__outpatient_psychiatric_professional", "model.the_tuva_project.service_category__outpatient_rehab_professional", "model.the_tuva_project.service_category__skilled_nursing_professional", "model.the_tuva_project.service_category__urgent_care_professional", "model.the_tuva_project.service_category__dme_professional", "model.the_tuva_project.service_category__ambulance_professional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__combined_professional.sql", "compiled": true, "compiled_code": "\n\nwith combined as (\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_acute_inpatient_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_ambulatory_surgery_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_dialysis_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_emergency_department_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_home_health_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_hospice_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_inpatient_psychiatric_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_inpatient_rehab_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_lab_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_office_visit_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_outpatient_hospital_or_clinic_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_outpatient_psychiatric_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_outpatient_rehab_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_skilled_nursing_professional\n\nunion all\n\nselect *\nfrom tuva_project_demo.claims_preprocessing._int_urgent_care_professional\n)\n\nselect \n  claim_id\n, claim_line_number\n, service_category_2\n, tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_dme_professional\n\nunion all\n\nselect \n  a.claim_id\n, a.claim_line_number\n, a.service_category_2\n, a.tuva_last_run\nfrom tuva_project_demo.claims_preprocessing._int_ambulance_professional a\nleft join tuva_project_demo.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere (b.claim_id is null and b.claim_line_number is null)\n\nunion all\n\nselect \n  a.claim_id\n, a.claim_line_number\n, a.service_category_2\n, a.tuva_last_run\nfrom combined a\nleft join tuva_project_demo.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nleft join tuva_project_demo.claims_preprocessing._int_ambulance_professional c\n  on a.claim_id = c.claim_id\n  and a.claim_line_number = c.claim_line_number\nwhere (b.claim_id is null and b.claim_line_number is null)\n  and (c.claim_id is null and c.claim_line_number is null)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__dialysis_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__dialysis_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__dialysis_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__dialysis_institutional.sql", "unique_id": "model.the_tuva_project.service_category__dialysis_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__dialysis_institutional"], "alias": "_int_dialysis_institutional", "checksum": {"name": "sha256", "checksum": "e87b3fb04157060b754b143bb632437e5c3d8f337db49ab996c625800681516c"}, "config": {"enabled": true, "alias": "_int_dialysis_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_dialysis_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2872925, "relation_name": "tuva_project_demo.claims_preprocessing._int_dialysis_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, 'Dialysis' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('72')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__dialysis_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, 'Dialysis' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('72')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__dialysis_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__dialysis_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__dialysis_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__dialysis_professional.sql", "unique_id": "model.the_tuva_project.service_category__dialysis_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__dialysis_professional"], "alias": "_int_dialysis_professional", "checksum": {"name": "sha256", "checksum": "a1103666e1955236a3a92c6080e228b8f77b83e68635f29bcb914e1cd52d9b9d"}, "config": {"enabled": true, "alias": "_int_dialysis_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_dialysis_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.2954974, "relation_name": "tuva_project_demo.claims_preprocessing._int_dialysis_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Dialysis' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('65')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__dialysis_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Dialysis' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('65')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__dme_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__dme_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__dme_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__dme_professional.sql", "unique_id": "model.the_tuva_project.service_category__dme_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__dme_professional"], "alias": "_int_dme_professional", "checksum": {"name": "sha256", "checksum": "3da976d802838832089da97b1cb25ea0840a6847fa3cfc6b9606a10059051a8a"}, "config": {"enabled": true, "alias": "_int_dme_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_dme_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.304911, "relation_name": "tuva_project_demo.claims_preprocessing._int_dme_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Durable Medical Equipment' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and hcpcs_code between 'E0100' and 'E8002'", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__dme_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Durable Medical Equipment' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and hcpcs_code between 'E0100' and 'E8002'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__duplicate_bill_types": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__duplicate_bill_types", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__duplicate_bill_types.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__duplicate_bill_types.sql", "unique_id": "model.the_tuva_project.service_category__duplicate_bill_types", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__duplicate_bill_types"], "alias": "_int_duplicate_bill_types", "checksum": {"name": "sha256", "checksum": "18f8d12e785b1774510a0dfbac2e5f68d8796690d63c726bab111863630bc3b9"}, "config": {"enabled": true, "alias": "_int_duplicate_bill_types", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_duplicate_bill_types", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4443445, "relation_name": "tuva_project_demo.claims_preprocessing._int_duplicate_bill_types", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct\n  claim_id\n, count(distinct bill_type_code) as cnt\nfrom {{ ref('service_category__stg_medical_claim') }}\ngroup by 1\nhaving count(distinct bill_type_code) > 1", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__duplicate_bill_types.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct\n  claim_id\n, count(distinct bill_type_code) as cnt\nfrom __dbt__cte__service_category__stg_medical_claim\ngroup by 1\nhaving count(distinct bill_type_code) > 1", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__emergency_department_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__emergency_department_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__emergency_department_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__emergency_department_institutional.sql", "unique_id": "model.the_tuva_project.service_category__emergency_department_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__emergency_department_institutional"], "alias": "_int_emergency_department_institutional", "checksum": {"name": "sha256", "checksum": "28541b14bd2f5f643cbe8567d6bbc45847512c8743abc6e30fe0f7f0145f6fdd"}, "config": {"enabled": true, "alias": "_int_emergency_department_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3116364, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n    med.claim_id\n    , 'Emergency Department' as service_category_2\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} med\nleft join {{ ref('service_category__acute_inpatient_institutional') }} inpatient\n    on med.claim_id = inpatient.claim_id\nwhere claim_type = 'institutional'\nand revenue_center_code in ('0450','0451','0452','0459','0981')\nand inpatient.claim_id is null\n-- 0456, urgent care, is included in most published definitions\n-- that also include a requirement of a bill type code for\n-- inpatient or outpatient hospital.", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__acute_inpatient_institutional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "model.the_tuva_project.service_category__acute_inpatient_institutional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__emergency_department_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n    med.claim_id\n    , 'Emergency Department' as service_category_2\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim med\nleft join tuva_project_demo.claims_preprocessing._int_acute_inpatient_institutional inpatient\n    on med.claim_id = inpatient.claim_id\nwhere claim_type = 'institutional'\nand revenue_center_code in ('0450','0451','0452','0459','0981')\nand inpatient.claim_id is null\n-- 0456, urgent care, is included in most published definitions\n-- that also include a requirement of a bill type code for\n-- inpatient or outpatient hospital.", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__emergency_department_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__emergency_department_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__emergency_department_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__emergency_department_professional.sql", "unique_id": "model.the_tuva_project.service_category__emergency_department_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__emergency_department_professional"], "alias": "_int_emergency_department_professional", "checksum": {"name": "sha256", "checksum": "cf9780868cac6827175f1d20fd1bb0640515ac5363adb43911d262bdb53479e9"}, "config": {"enabled": true, "alias": "_int_emergency_department_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_emergency_department_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3205836, "relation_name": "tuva_project_demo.claims_preprocessing._int_emergency_department_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Emergency Department' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code = '23'", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__emergency_department_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Emergency Department' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '23'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__home_health_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__home_health_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__home_health_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__home_health_institutional.sql", "unique_id": "model.the_tuva_project.service_category__home_health_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__home_health_institutional"], "alias": "_int_home_health_institutional", "checksum": {"name": "sha256", "checksum": "77a4486d50c971f389fab51b12ab709e2d8ebe82b5fbd043d034a19e5fc2812f"}, "config": {"enabled": true, "alias": "_int_home_health_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_home_health_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3263297, "relation_name": "tuva_project_demo.claims_preprocessing._int_home_health_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, 'Home Health' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('31','32','33')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__home_health_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, 'Home Health' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('31','32','33')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__home_health_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__home_health_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__home_health_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__home_health_professional.sql", "unique_id": "model.the_tuva_project.service_category__home_health_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__home_health_professional"], "alias": "_int_home_health_professional", "checksum": {"name": "sha256", "checksum": "38e31f8d999aa71d65097982d7e04728980c4da6651a522cf2538d1a0e8257a2"}, "config": {"enabled": true, "alias": "_int_home_health_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_home_health_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3337364, "relation_name": "tuva_project_demo.claims_preprocessing._int_home_health_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  a.claim_id\n, a.claim_line_number\n, 'Home Health' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\nleft join {{ ref('service_category__dme_professional') }} b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere a.claim_type = 'professional'\n  and a.place_of_service_code in ('12')\n  and (b.claim_id is null and b.claim_line_number is null)", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__dme_professional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "model.the_tuva_project.service_category__dme_professional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__home_health_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  a.claim_id\n, a.claim_line_number\n, 'Home Health' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join tuva_project_demo.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere a.claim_type = 'professional'\n  and a.place_of_service_code in ('12')\n  and (b.claim_id is null and b.claim_line_number is null)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__hospice_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__hospice_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__hospice_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__hospice_institutional.sql", "unique_id": "model.the_tuva_project.service_category__hospice_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__hospice_institutional"], "alias": "_int_hospice_institutional", "checksum": {"name": "sha256", "checksum": "da772e2317bfec7bcc63e298d964292d904b609db5249ff912cc70bec6b98474"}, "config": {"enabled": true, "alias": "_int_hospice_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_hospice_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3419838, "relation_name": "tuva_project_demo.claims_preprocessing._int_hospice_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, 'Hospice' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('81','82')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__hospice_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, 'Hospice' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('81','82')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__hospice_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__hospice_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__hospice_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__hospice_professional.sql", "unique_id": "model.the_tuva_project.service_category__hospice_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__hospice_professional"], "alias": "_int_hospice_professional", "checksum": {"name": "sha256", "checksum": "0849ed9fefd848360e2ba84e2e3b67e2233c06e8ba0c7d82e1273715267dca31"}, "config": {"enabled": true, "alias": "_int_hospice_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_hospice_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3477507, "relation_name": "tuva_project_demo.claims_preprocessing._int_hospice_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Hospice' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('34')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__hospice_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Hospice' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('34')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__inpatient_psychiatric_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__inpatient_psychiatric_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__inpatient_psychiatric_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__inpatient_psychiatric_professional.sql", "unique_id": "model.the_tuva_project.service_category__inpatient_psychiatric_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__inpatient_psychiatric_professional"], "alias": "_int_inpatient_psychiatric_professional", "checksum": {"name": "sha256", "checksum": "5a40ccbeee23816a3870f286c3f05096708bf70b82d4d5439e706fe5139a0578"}, "config": {"enabled": true, "alias": "_int_inpatient_psychiatric_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_inpatient_psychiatric_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.353801, "relation_name": "tuva_project_demo.claims_preprocessing._int_inpatient_psychiatric_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Inpatient Psychiatric' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('51','55','56')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__inpatient_psychiatric_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Inpatient Psychiatric' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('51','55','56')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__inpatient_rehab_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__inpatient_rehab_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__inpatient_rehab_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__inpatient_rehab_professional.sql", "unique_id": "model.the_tuva_project.service_category__inpatient_rehab_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__inpatient_rehab_professional"], "alias": "_int_inpatient_rehab_professional", "checksum": {"name": "sha256", "checksum": "f7cdbee3bc0c6cd211896663eaad9bb24cdc6529a9380588c4cbb2eb2f9a5e8c"}, "config": {"enabled": true, "alias": "_int_inpatient_rehab_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_inpatient_rehab_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3632872, "relation_name": "tuva_project_demo.claims_preprocessing._int_inpatient_rehab_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Inpatient Rehabilitation' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('61')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__inpatient_rehab_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Inpatient Rehabilitation' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('61')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__lab_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__lab_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__lab_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__lab_institutional.sql", "unique_id": "model.the_tuva_project.service_category__lab_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__lab_institutional"], "alias": "_int_lab_institutional", "checksum": {"name": "sha256", "checksum": "00d1a133350a480370210b6fd38c18f11dfe34eeb8186adfa98433dd31088c9b"}, "config": {"enabled": true, "alias": "_int_lab_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_lab_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.368541, "relation_name": "tuva_project_demo.claims_preprocessing._int_lab_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, 'Lab' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('14')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__lab_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, 'Lab' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('14')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__lab_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__lab_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__lab_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__lab_professional.sql", "unique_id": "model.the_tuva_project.service_category__lab_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__lab_professional"], "alias": "_int_lab_professional", "checksum": {"name": "sha256", "checksum": "68f546244a6804a163d287689b2972bd5b19383b159ef818e650facfd897ca5b"}, "config": {"enabled": true, "alias": "_int_lab_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_lab_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3761818, "relation_name": "tuva_project_demo.claims_preprocessing._int_lab_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Lab' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code = '81'", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__lab_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Lab' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '81'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__office_visit_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__office_visit_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__office_visit_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__office_visit_professional.sql", "unique_id": "model.the_tuva_project.service_category__office_visit_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__office_visit_professional"], "alias": "_int_office_visit_professional", "checksum": {"name": "sha256", "checksum": "714362d9d5e7713ddc40d1bfff85985858e9dd312724820f6e7ad4196b495c7f"}, "config": {"enabled": true, "alias": "_int_office_visit_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_office_visit_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3813083, "relation_name": "tuva_project_demo.claims_preprocessing._int_office_visit_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Office Visit' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('11','02')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__office_visit_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Office Visit' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('11','02')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__outpatient_hospital_or_clinic_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__outpatient_hospital_or_clinic_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__outpatient_hospital_or_clinic_institutional.sql", "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__outpatient_hospital_or_clinic_institutional"], "alias": "_int_outpatient_hospital_or_clinic_institutional", "checksum": {"name": "sha256", "checksum": "38ea9381aea4b8bc59db855cdc3cdb4e3731e51ad89812548f20055947f5d790"}, "config": {"enabled": true, "alias": "_int_outpatient_hospital_or_clinic_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_outpatient_hospital_or_clinic_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.388435, "relation_name": "tuva_project_demo.claims_preprocessing._int_outpatient_hospital_or_clinic_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  a.claim_id\n, 'Outpatient Hospital or Clinic' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\nleft join {{ ref('service_category__emergency_department_institutional') }} b\n  on a.claim_id = b.claim_id\nleft join {{ ref('service_category__urgent_care_institutional') }} c\n  on a.claim_id = c.claim_id\nwhere a.claim_type = 'institutional'\n  and left(a.bill_type_code,2) in ('13','71','73')\n  and b.claim_id is null\n  and c.claim_id is null", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__emergency_department_institutional", "package": null, "version": null}, {"name": "service_category__urgent_care_institutional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "model.the_tuva_project.service_category__emergency_department_institutional", "model.the_tuva_project.service_category__urgent_care_institutional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__outpatient_hospital_or_clinic_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  a.claim_id\n, 'Outpatient Hospital or Clinic' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join tuva_project_demo.claims_preprocessing._int_emergency_department_institutional b\n  on a.claim_id = b.claim_id\nleft join tuva_project_demo.claims_preprocessing._int_urgent_care_institutional c\n  on a.claim_id = c.claim_id\nwhere a.claim_type = 'institutional'\n  and left(a.bill_type_code,2) in ('13','71','73')\n  and b.claim_id is null\n  and c.claim_id is null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__outpatient_hospital_or_clinic_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__outpatient_hospital_or_clinic_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__outpatient_hospital_or_clinic_professional.sql", "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__outpatient_hospital_or_clinic_professional"], "alias": "_int_outpatient_hospital_or_clinic_professional", "checksum": {"name": "sha256", "checksum": "c848d3c7c4de938000dd2406919e5527c0ba5d74aa404f81fdabf3dbdaa9c68a"}, "config": {"enabled": true, "alias": "_int_outpatient_hospital_or_clinic_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_outpatient_hospital_or_clinic_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.3970683, "relation_name": "tuva_project_demo.claims_preprocessing._int_outpatient_hospital_or_clinic_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Hospital or Clinic' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('15','17','19','22','49','50','60','71','72')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__outpatient_hospital_or_clinic_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Hospital or Clinic' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('15','17','19','22','49','50','60','71','72')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__outpatient_psychiatric_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__outpatient_psychiatric_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__outpatient_psychiatric_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__outpatient_psychiatric_institutional.sql", "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__outpatient_psychiatric_institutional"], "alias": "_int_outpatient_psychiatric_institutional", "checksum": {"name": "sha256", "checksum": "1ead303ca265ac69f58db45dc1775dc9ffc31afb44832c946a7352d9577be5fe"}, "config": {"enabled": true, "alias": "_int_outpatient_psychiatric_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_outpatient_psychiatric_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4019465, "relation_name": "tuva_project_demo.claims_preprocessing._int_outpatient_psychiatric_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, 'Outpatient Psychiatric' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('52')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__outpatient_psychiatric_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, 'Outpatient Psychiatric' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('52')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__outpatient_psychiatric_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__outpatient_psychiatric_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__outpatient_psychiatric_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__outpatient_psychiatric_professional.sql", "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__outpatient_psychiatric_professional"], "alias": "_int_outpatient_psychiatric_professional", "checksum": {"name": "sha256", "checksum": "ce3cd6545a108168c75c03ce898461c83ea7ffc15cdadb089611b74c876452e0"}, "config": {"enabled": true, "alias": "_int_outpatient_psychiatric_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_outpatient_psychiatric_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4101741, "relation_name": "tuva_project_demo.claims_preprocessing._int_outpatient_psychiatric_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Psychiatric' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('52','53','57','58')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__outpatient_psychiatric_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Psychiatric' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('52','53','57','58')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__outpatient_rehab_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__outpatient_rehab_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__outpatient_rehab_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__outpatient_rehab_professional.sql", "unique_id": "model.the_tuva_project.service_category__outpatient_rehab_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__outpatient_rehab_professional"], "alias": "_int_outpatient_rehab_professional", "checksum": {"name": "sha256", "checksum": "756c8e5857e003bbe3dbbbcc7c007d5249eed2ecc7efd2c1b45d4fd80a19348e"}, "config": {"enabled": true, "alias": "_int_outpatient_rehab_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_outpatient_rehab_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4178243, "relation_name": "tuva_project_demo.claims_preprocessing._int_outpatient_rehab_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Rehabilitation' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('62')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__outpatient_rehab_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Rehabilitation' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('62')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__skilled_nursing_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__skilled_nursing_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__skilled_nursing_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__skilled_nursing_institutional.sql", "unique_id": "model.the_tuva_project.service_category__skilled_nursing_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__skilled_nursing_institutional"], "alias": "_int_skilled_nursing_institutional", "checksum": {"name": "sha256", "checksum": "abd4b9e63ac055443fdb99fd9f5c63599b60714b3cb43e7ead9078ab78e699c8"}, "config": {"enabled": true, "alias": "_int_skilled_nursing_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_skilled_nursing_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4251015, "relation_name": "tuva_project_demo.claims_preprocessing._int_skilled_nursing_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, 'Skilled Nursing' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('21','22')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__skilled_nursing_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, 'Skilled Nursing' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('21','22')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__skilled_nursing_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__skilled_nursing_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__skilled_nursing_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__skilled_nursing_professional.sql", "unique_id": "model.the_tuva_project.service_category__skilled_nursing_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__skilled_nursing_professional"], "alias": "_int_skilled_nursing_professional", "checksum": {"name": "sha256", "checksum": "debea2d60c300d893d9bc199b921647cbb01b50419be3464128efab5b43b464e"}, "config": {"enabled": true, "alias": "_int_skilled_nursing_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_skilled_nursing_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4298437, "relation_name": "tuva_project_demo.claims_preprocessing._int_skilled_nursing_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  a.claim_id\n, a.claim_line_number\n, 'Skilled Nursing' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\nleft join {{ ref('service_category__dme_professional') }} b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere claim_type = 'professional'\n  and place_of_service_code in ('31','32')\n  and (b.claim_id is null and b.claim_line_number is null)", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__dme_professional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "model.the_tuva_project.service_category__dme_professional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__skilled_nursing_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  a.claim_id\n, a.claim_line_number\n, 'Skilled Nursing' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join tuva_project_demo.claims_preprocessing._int_dme_professional b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere claim_type = 'professional'\n  and place_of_service_code in ('31','32')\n  and (b.claim_id is null and b.claim_line_number is null)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__urgent_care_institutional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__urgent_care_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__urgent_care_institutional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__urgent_care_institutional.sql", "unique_id": "model.the_tuva_project.service_category__urgent_care_institutional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__urgent_care_institutional"], "alias": "_int_urgent_care_institutional", "checksum": {"name": "sha256", "checksum": "a898cce0b160386f3a8535ff38c663c51149e9bfb6efc42530b126bc204859ae"}, "config": {"enabled": true, "alias": "_int_urgent_care_institutional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_urgent_care_institutional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4339437, "relation_name": "tuva_project_demo.claims_preprocessing._int_urgent_care_institutional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  a.claim_id\n, 'Urgent Care' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }} a\nleft join {{ ref('service_category__emergency_department_institutional') }} b\n  on a.claim_id = b.claim_id\nwhere claim_type = 'institutional'\n  and revenue_center_code = '0456'\n  and left(bill_type_code,2) in ('13','71','73')\n  and b.claim_id is null", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}, {"name": "service_category__emergency_department_institutional", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim", "model.the_tuva_project.service_category__emergency_department_institutional"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__urgent_care_institutional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  a.claim_id\n, 'Urgent Care' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join tuva_project_demo.claims_preprocessing._int_emergency_department_institutional b\n  on a.claim_id = b.claim_id\nwhere claim_type = 'institutional'\n  and revenue_center_code = '0456'\n  and left(bill_type_code,2) in ('13','71','73')\n  and b.claim_id is null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__urgent_care_professional": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__urgent_care_professional", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/intermediate/service_category__urgent_care_professional.sql", "original_file_path": "models/claims_preprocessing/service_category/intermediate/service_category__urgent_care_professional.sql", "unique_id": "model.the_tuva_project.service_category__urgent_care_professional", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "intermediate", "service_category__urgent_care_professional"], "alias": "_int_urgent_care_professional", "checksum": {"name": "sha256", "checksum": "12539d6e3ff3bd9377447e928586480d5abec9469ae483fba2679c180d9d0695"}, "config": {"enabled": true, "alias": "_int_urgent_care_professional", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "N/A", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_int_urgent_care_professional", "materialized": "table", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.438684, "relation_name": "tuva_project_demo.claims_preprocessing._int_urgent_care_professional", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct \n  claim_id\n, claim_line_number\n, 'Urgent Care' as service_category_2\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('service_category__stg_medical_claim') }}\nwhere claim_type = 'professional'\n  and place_of_service_code in ('20')", "language": "sql", "refs": [{"name": "service_category__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.service_category__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/intermediate/service_category__urgent_care_professional.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n) select distinct \n  claim_id\n, claim_line_number\n, 'Urgent Care' as service_category_2\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('20')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.service_category__stg_medical_claim", "sql": " __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.service_category__stg_medical_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "service_category__stg_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "claims_preprocessing/service_category/staging/service_category__stg_medical_claim.sql", "original_file_path": "models/claims_preprocessing/service_category/staging/service_category__stg_medical_claim.sql", "unique_id": "model.the_tuva_project.service_category__stg_medical_claim", "fqn": ["the_tuva_project", "claims_preprocessing", "service_category", "staging", "service_category__stg_medical_claim"], "alias": "service_category__stg_medical_claim", "checksum": {"name": "sha256", "checksum": "b26c844757968eeea28c6395551b8a0cd13c66e4d598efaef28f1555216553b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["service_category_grouper", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["service_category_grouper", "claims_preprocessing"], "description": "Staging med claims for sc grouper", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/claims_preprocessing/claims_preprocessing_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "tags": ["service_category_grouper", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.4465895, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('normalized_input__medical_claim') }}", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/service_category/staging/service_category__stg_medical_claim.sql", "compiled": true, "compiled_code": "\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__patient_hcc_history": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__patient_hcc_history", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/final/cms_hcc__patient_hcc_history.sql", "original_file_path": "models/cms_hcc/final/cms_hcc__patient_hcc_history.sql", "unique_id": "model.the_tuva_project.cms_hcc__patient_hcc_history", "fqn": ["the_tuva_project", "cms_hcc", "final", "cms_hcc__patient_hcc_history"], "alias": "patient_hcc_history", "checksum": {"name": "sha256", "checksum": "cf67e86288ead7fd7683c4e05771b80c6787c8172ee8aaea5b4697fe399634a7"}, "config": {"enabled": true, "alias": "patient_hcc_history", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "This final model displays the full history of a patient's recorded HCCs with a flag for recorded during the payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recorded_date": {"name": "recorded_date", "description": "Date in which the ICD-10-CM condition was recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_type": {"name": "condition_type", "description": "The type of condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "icd_10_cm_code": {"name": "icd_10_cm_code", "description": "The ICD-10-CM condition code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/cms_hcc/cms_hcc__icd_10_cm_mappings.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_code": {"name": "hcc_code", "description": "HCC code from the latest CMS HCC model available in the mart.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/cms_hcc/cms_hcc__icd_10_cm_mappings.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_description": {"name": "hcc_description", "description": "HCC description from the latest CMS HCC model available in the mart.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_recorded": {"name": "first_recorded", "description": "Date the HCC was first recorded in the patient's record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_recorded": {"name": "last_recorded", "description": "Date the HCC was last recorded in the patient's record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year_recorded": {"name": "payment_year_recorded", "description": "Flag indicating that the ICD-10-CM code mapped to the HCC was recorded during the payment year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "patient_hcc_history", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.652587, "relation_name": "tuva_project_demo.cms_hcc.patient_hcc_history", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith all_conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , icd_10_cm_code\n        , hcc_code\n        , hcc_description\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_all_conditions') }}\n\n)\n\n, grouped as (\n\n    select\n          patient_id\n        , hcc_code\n        , hcc_description\n        , payment_year\n        , min(recorded_date) as first_recorded\n        , max(recorded_date) as last_recorded\n    from all_conditions\n    where hcc_code is not null\n    group by\n          patient_id\n        , hcc_code\n        , hcc_description\n        , payment_year\n\n)\n\n, add_flag as (\n\n    select\n          patient_id\n        , hcc_code\n        , hcc_description\n        , first_recorded\n        , last_recorded\n        , payment_year\n        , case\n            when extract(year from last_recorded) = payment_year\n            then 1\n            else 0\n          end as payment_year_recorded\n    from grouped\n\n)\n\n, all_conditions_with_flag as (\n\n    select\n          all_conditions.patient_id\n        , all_conditions.recorded_date\n        , all_conditions.condition_type\n        , all_conditions.icd_10_cm_code\n        , all_conditions.hcc_code\n        , all_conditions.hcc_description\n        , all_conditions.model_version\n        , all_conditions.payment_year\n        , add_flag.first_recorded\n        , add_flag.last_recorded\n        , add_flag.payment_year_recorded\n    from all_conditions\n         left join add_flag\n            on all_conditions.patient_id = add_flag.patient_id\n            and all_conditions.hcc_code = add_flag.hcc_code\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as {{ dbt.type_string() }}) as condition_type\n        , cast(icd_10_cm_code as {{ dbt.type_string() }}) as icd_10_cm_code\n        , cast(hcc_code as {{ dbt.type_string() }}) as hcc_code\n        , cast(hcc_description as {{ dbt.type_string() }}) as hcc_description\n        , cast(first_recorded as date) as first_recorded\n        , cast(last_recorded as date) as last_recorded\n        , cast(payment_year_recorded as boolean) as payment_year_recorded\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from all_conditions_with_flag\n\n)\n\nselect\n      patient_id\n    , recorded_date\n    , condition_type\n    , icd_10_cm_code\n    , hcc_code\n    , hcc_description\n    , first_recorded\n    , last_recorded\n    , payment_year_recorded\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_all_conditions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.cms_hcc__int_all_conditions"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/final/cms_hcc__patient_hcc_history.sql", "compiled": true, "compiled_code": "\n\nwith all_conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , icd_10_cm_code\n        , hcc_code\n        , hcc_description\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_all_conditions\n\n)\n\n, grouped as (\n\n    select\n          patient_id\n        , hcc_code\n        , hcc_description\n        , payment_year\n        , min(recorded_date) as first_recorded\n        , max(recorded_date) as last_recorded\n    from all_conditions\n    where hcc_code is not null\n    group by\n          patient_id\n        , hcc_code\n        , hcc_description\n        , payment_year\n\n)\n\n, add_flag as (\n\n    select\n          patient_id\n        , hcc_code\n        , hcc_description\n        , first_recorded\n        , last_recorded\n        , payment_year\n        , case\n            when extract(year from last_recorded) = payment_year\n            then 1\n            else 0\n          end as payment_year_recorded\n    from grouped\n\n)\n\n, all_conditions_with_flag as (\n\n    select\n          all_conditions.patient_id\n        , all_conditions.recorded_date\n        , all_conditions.condition_type\n        , all_conditions.icd_10_cm_code\n        , all_conditions.hcc_code\n        , all_conditions.hcc_description\n        , all_conditions.model_version\n        , all_conditions.payment_year\n        , add_flag.first_recorded\n        , add_flag.last_recorded\n        , add_flag.payment_year_recorded\n    from all_conditions\n         left join add_flag\n            on all_conditions.patient_id = add_flag.patient_id\n            and all_conditions.hcc_code = add_flag.hcc_code\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as TEXT) as condition_type\n        , cast(icd_10_cm_code as TEXT) as icd_10_cm_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast(first_recorded as date) as first_recorded\n        , cast(last_recorded as date) as last_recorded\n        , cast(payment_year_recorded as boolean) as payment_year_recorded\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from all_conditions_with_flag\n\n)\n\nselect\n      patient_id\n    , recorded_date\n    , condition_type\n    , icd_10_cm_code\n    , hcc_code\n    , hcc_description\n    , first_recorded\n    , last_recorded\n    , payment_year_recorded\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__patient_risk_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__patient_risk_factors", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/final/cms_hcc__patient_risk_factors.sql", "original_file_path": "models/cms_hcc/final/cms_hcc__patient_risk_factors.sql", "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_factors", "fqn": ["the_tuva_project", "cms_hcc", "final", "cms_hcc__patient_risk_factors"], "alias": "patient_risk_factors", "checksum": {"name": "sha256", "checksum": "07d50d984e63daf5f14627ada10a1d6b3d5f27bc23575d1b49b69a11899f7c09"}, "config": {"enabled": true, "alias": "patient_risk_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "This final model displays the contributing demographic and disease risk  factors, interactions, and HCCs for each enrollee in the payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_status_default": {"name": "enrollment_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medicaid_dual_status_default": {"name": "medicaid_dual_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orec_default": {"name": "orec_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "institutional_status_default": {"name": "institutional_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "risk_factor_description": {"name": "risk_factor_description", "description": "Description of the risk factor.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coefficient": {"name": "coefficient", "description": "Relative factor value that correspond to the CMS HCC model's  risk indicators.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "factor_type": {"name": "factor_type", "description": "Type of risk factor, e.g. Demographic, Disease, etc.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "patient_risk_factors", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.659755, "relation_name": "tuva_project_demo.cms_hcc.patient_risk_factors", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\nwith demographic_factors as (\n\n    select\n          patient_id\n        /* concatenate demographic risk factors */\n        , gender\n            || ', '\n            || age_group\n            || ' Years'\n            || ', '\n            || enrollment_status\n            || ' Enrollee'\n            || ', '\n            || case\n                when medicaid_status = 'Yes' then 'Medicaid'\n                else 'Non-Medicaid'\n                end\n            || ', '\n            || dual_status\n            || ' Dual'\n            || ', '\n            || orec\n            || ', '\n            || case\n                when institutional_status = 'Yes' then 'Institutional'\n                else 'Non-Institutional'\n                end\n          as description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_demographic_factors') }}\n\n)\n\n, demographic_defaults as (\n\n    select\n          patient_id\n        , enrollment_status_default\n        , medicaid_dual_status_default\n        , orec_default\n        , institutional_status_default\n    from {{ ref('cms_hcc__int_demographic_factors') }}\n\n)\n\n, disease_factors as (\n\n    select\n          patient_id\n        , hcc_description || ' (HCC ' || hcc_code || ')' as description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_disease_factors') }}\n\n)\n\n, enrollment_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_enrollment_interaction_factors') }}\n\n)\n\n, disabled_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_disabled_interaction_factors') }}\n\n)\n\n, disease_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_disease_interaction_factors') }}\n\n)\n\n, hcc_counts as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_hcc_count_factors') }}\n\n)\n\n, unioned as (\n\n    select * from demographic_factors\n    union all\n    select * from disease_factors\n    union all\n    select * from enrollment_interactions\n    union all\n    select * from disabled_interactions\n    union all\n    select * from disease_interactions\n    union all\n    select * from hcc_counts\n\n)\n\n, add_defaults as (\n\n    select\n          unioned.patient_id\n        , demographic_defaults.enrollment_status_default\n        , demographic_defaults.medicaid_dual_status_default\n        , demographic_defaults.orec_default\n        , demographic_defaults.institutional_status_default\n        , unioned.description as risk_factor_description\n        , unioned.coefficient\n        , unioned.factor_type\n        , unioned.model_version\n        , unioned.payment_year\n    from unioned\n         left join demographic_defaults\n         on unioned.patient_id = demographic_defaults.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(enrollment_status_default as boolean) as enrollment_status_default\n        , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n        , cast(orec_default as boolean) as orec_default\n        , cast(institutional_status_default as boolean) as institutional_status_default\n        , cast(factor_type as {{ dbt.type_string() }}) as factor_type\n        , cast(risk_factor_description as {{ dbt.type_string() }}) as risk_factor_description\n        , round(cast(coefficient as {{ dbt.type_numeric() }}),3) as coefficient\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from add_defaults\n\n)\n\nselect\n      patient_id\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , factor_type\n    , risk_factor_description\n    , coefficient\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_demographic_factors", "package": null, "version": null}, {"name": "cms_hcc__int_demographic_factors", "package": null, "version": null}, {"name": "cms_hcc__int_disease_factors", "package": null, "version": null}, {"name": "cms_hcc__int_enrollment_interaction_factors", "package": null, "version": null}, {"name": "cms_hcc__int_disabled_interaction_factors", "package": null, "version": null}, {"name": "cms_hcc__int_disease_interaction_factors", "package": null, "version": null}, {"name": "cms_hcc__int_hcc_count_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_disease_factors", "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors", "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "model.the_tuva_project.cms_hcc__int_hcc_count_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/final/cms_hcc__patient_risk_factors.sql", "compiled": true, "compiled_code": "\nwith demographic_factors as (\n\n    select\n          patient_id\n        /* concatenate demographic risk factors */\n        , gender\n            || ', '\n            || age_group\n            || ' Years'\n            || ', '\n            || enrollment_status\n            || ' Enrollee'\n            || ', '\n            || case\n                when medicaid_status = 'Yes' then 'Medicaid'\n                else 'Non-Medicaid'\n                end\n            || ', '\n            || dual_status\n            || ' Dual'\n            || ', '\n            || orec\n            || ', '\n            || case\n                when institutional_status = 'Yes' then 'Institutional'\n                else 'Non-Institutional'\n                end\n          as description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_demographic_factors\n\n)\n\n, demographic_defaults as (\n\n    select\n          patient_id\n        , enrollment_status_default\n        , medicaid_dual_status_default\n        , orec_default\n        , institutional_status_default\n    from tuva_project_demo.cms_hcc._int_demographic_factors\n\n)\n\n, disease_factors as (\n\n    select\n          patient_id\n        , hcc_description || ' (HCC ' || hcc_code || ')' as description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_disease_factors\n\n)\n\n, enrollment_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_enrollment_interaction_factors\n\n)\n\n, disabled_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_disabled_interaction_factors\n\n)\n\n, disease_interactions as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_disease_interaction_factors\n\n)\n\n, hcc_counts as (\n\n    select\n          patient_id\n        , description\n        , coefficient\n        , factor_type\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_hcc_count_factors\n\n)\n\n, unioned as (\n\n    select * from demographic_factors\n    union all\n    select * from disease_factors\n    union all\n    select * from enrollment_interactions\n    union all\n    select * from disabled_interactions\n    union all\n    select * from disease_interactions\n    union all\n    select * from hcc_counts\n\n)\n\n, add_defaults as (\n\n    select\n          unioned.patient_id\n        , demographic_defaults.enrollment_status_default\n        , demographic_defaults.medicaid_dual_status_default\n        , demographic_defaults.orec_default\n        , demographic_defaults.institutional_status_default\n        , unioned.description as risk_factor_description\n        , unioned.coefficient\n        , unioned.factor_type\n        , unioned.model_version\n        , unioned.payment_year\n    from unioned\n         left join demographic_defaults\n         on unioned.patient_id = demographic_defaults.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(enrollment_status_default as boolean) as enrollment_status_default\n        , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n        , cast(orec_default as boolean) as orec_default\n        , cast(institutional_status_default as boolean) as institutional_status_default\n        , cast(factor_type as TEXT) as factor_type\n        , cast(risk_factor_description as TEXT) as risk_factor_description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from add_defaults\n\n)\n\nselect\n      patient_id\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , factor_type\n    , risk_factor_description\n    , coefficient\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__patient_risk_scores": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__patient_risk_scores", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/final/cms_hcc__patient_risk_scores.sql", "original_file_path": "models/cms_hcc/final/cms_hcc__patient_risk_scores.sql", "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_scores", "fqn": ["the_tuva_project", "cms_hcc", "final", "cms_hcc__patient_risk_scores"], "alias": "patient_risk_scores", "checksum": {"name": "sha256", "checksum": "9674cf463450eb72482dc12dc60ede45ea0afa83e792dc8bf86bc88ae5673aaf"}, "config": {"enabled": true, "alias": "patient_risk_scores", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "This final model calculates the CMS HCC raw risk score, normalized risk  score, and payment risk score for each enrollee in the payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "raw_risk_score": {"name": "raw_risk_score", "description": "The sum of all patient risk factors.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_risk_score": {"name": "normalized_risk_score", "description": "The raw risk score divided by the normalization adjustment factor  for the corresponding HCC model version and payment year's rate  announcement from CMS.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_risk_score": {"name": "payment_risk_score", "description": "The normalized risk score multiplied by the MA coding pattern  adjustment factor for the corresponding HCC model version  and payment years rate announcement from CMS.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "patient_risk_scores", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6649828, "relation_name": "tuva_project_demo.cms_hcc.patient_risk_scores", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\nwith seed_adjustment_rates as (\n\n    select\n          model_version\n        , payment_year\n        , normalization_factor\n        , ma_coding_pattern_adjustment\n    from {{ ref('cms_hcc__adjustment_rates') }}\n\n)\n\n, risk_factors as (\n\n    select\n          patient_id\n        , coefficient\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__patient_risk_factors') }}\n\n)\n\n, raw_score as (\n\n    select\n          patient_id\n        , round(cast(sum(coefficient) as {{ dbt.type_numeric() }}),3) as risk_score\n        , model_version\n        , payment_year\n    from risk_factors\n    group by\n          patient_id\n        , model_version\n        , payment_year\n\n)\n\n, normalized as (\n\n    select\n          raw_score.patient_id\n        , raw_score.risk_score as raw_risk_score\n        , round(cast(raw_score.risk_score / seed_adjustment_rates.normalization_factor as {{ dbt.type_numeric() }}),3) as normalized_risk_score\n        , raw_score.model_version\n        , raw_score.payment_year\n    from raw_score\n         left join seed_adjustment_rates\n         on raw_score.payment_year = seed_adjustment_rates.payment_year\n         and raw_score.model_version = seed_adjustment_rates.model_version\n\n)\n\n, payment as (\n\n    select\n          normalized.patient_id\n        , normalized.raw_risk_score\n        , normalized.normalized_risk_score\n        , round(cast(normalized.normalized_risk_score * (1 - seed_adjustment_rates.ma_coding_pattern_adjustment) as {{ dbt.type_numeric() }}),3) as payment_risk_score\n        , normalized.model_version\n        , normalized.payment_year\n    from normalized\n         left join seed_adjustment_rates\n         on normalized.payment_year = seed_adjustment_rates.payment_year\n         and normalized.model_version = seed_adjustment_rates.model_version\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , round(cast(raw_risk_score as {{ dbt.type_numeric() }}),3) as raw_risk_score\n        , round(cast(normalized_risk_score as {{ dbt.type_numeric() }}),3) as normalized_risk_score\n        , round(cast(payment_risk_score as {{ dbt.type_numeric() }}),3) as payment_risk_score\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from payment\n\n)\n\nselect\n      patient_id\n    , raw_risk_score\n    , normalized_risk_score\n    , payment_risk_score\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__adjustment_rates", "package": null, "version": null}, {"name": "cms_hcc__patient_risk_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_string"], "nodes": ["seed.the_tuva_project.cms_hcc__adjustment_rates", "model.the_tuva_project.cms_hcc__patient_risk_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/final/cms_hcc__patient_risk_scores.sql", "compiled": true, "compiled_code": "\nwith seed_adjustment_rates as (\n\n    select\n          model_version\n        , payment_year\n        , normalization_factor\n        , ma_coding_pattern_adjustment\n    from tuva_project_demo.cms_hcc._value_set_adjustment_rates\n\n)\n\n, risk_factors as (\n\n    select\n          patient_id\n        , coefficient\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc.patient_risk_factors\n\n)\n\n, raw_score as (\n\n    select\n          patient_id\n        , round(cast(sum(coefficient) as numeric(28,6)),3) as risk_score\n        , model_version\n        , payment_year\n    from risk_factors\n    group by\n          patient_id\n        , model_version\n        , payment_year\n\n)\n\n, normalized as (\n\n    select\n          raw_score.patient_id\n        , raw_score.risk_score as raw_risk_score\n        , round(cast(raw_score.risk_score / seed_adjustment_rates.normalization_factor as numeric(28,6)),3) as normalized_risk_score\n        , raw_score.model_version\n        , raw_score.payment_year\n    from raw_score\n         left join seed_adjustment_rates\n         on raw_score.payment_year = seed_adjustment_rates.payment_year\n         and raw_score.model_version = seed_adjustment_rates.model_version\n\n)\n\n, payment as (\n\n    select\n          normalized.patient_id\n        , normalized.raw_risk_score\n        , normalized.normalized_risk_score\n        , round(cast(normalized.normalized_risk_score * (1 - seed_adjustment_rates.ma_coding_pattern_adjustment) as numeric(28,6)),3) as payment_risk_score\n        , normalized.model_version\n        , normalized.payment_year\n    from normalized\n         left join seed_adjustment_rates\n         on normalized.payment_year = seed_adjustment_rates.payment_year\n         and normalized.model_version = seed_adjustment_rates.model_version\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , round(cast(raw_risk_score as numeric(28,6)),3) as raw_risk_score\n        , round(cast(normalized_risk_score as numeric(28,6)),3) as normalized_risk_score\n        , round(cast(payment_risk_score as numeric(28,6)),3) as payment_risk_score\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from payment\n\n)\n\nselect\n      patient_id\n    , raw_risk_score\n    , normalized_risk_score\n    , payment_risk_score\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_all_conditions": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_all_conditions", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_all_conditions.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_all_conditions.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_all_conditions", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_all_conditions"], "alias": "_int_all_conditions", "checksum": {"name": "sha256", "checksum": "30a65294d80a7dcea30bed44caf60294b9c14e533f890f60f565a8b3b53ef052"}, "config": {"enabled": true, "alias": "_int_all_conditions", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "All historical conditions mapped to HCCs.", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recorded_date": {"name": "recorded_date", "description": "Date in which the condition was recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_type": {"name": "condition_type", "description": "The type of condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "icd_10_cm_code": {"name": "icd_10_cm_code", "description": "The ICD-10-CM condition code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_code": {"name": "hcc_code", "description": "HCC code from the latest CMS HCC model available in the mart.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_description": {"name": "hcc_description", "description": "HCC description from the latest CMS HCC model available in the mart.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_all_conditions", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6688893, "relation_name": "tuva_project_demo.cms_hcc._int_all_conditions", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n{% set payment_year_compiled = var('cms_hcc_payment_year') -%}\n\nwith conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n    from {{ ref('cms_hcc__stg_core__condition') }}\n\n)\n\n, seed_hcc_mapping as (\n\n    select\n          diagnosis_code\n        , cms_hcc_v24\n    from {{ ref('cms_hcc__icd_10_cm_mappings') }}\n    where payment_year = (select max(payment_year) from {{ ref('cms_hcc__icd_10_cm_mappings') }})\n    and cms_hcc_v24_flag = 'Yes'\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , description\n    from {{ ref('cms_hcc__disease_factors') }}\n    where model_version = '{{ model_version_compiled }}'\n\n)\n\n, joined as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code\n        , seed_hcc_mapping.cms_hcc_v24 as hcc_code\n        , seed_hcc_descriptions.description as hcc_description\n    from conditions\n         left join seed_hcc_mapping\n         on conditions.code = seed_hcc_mapping.diagnosis_code\n         left join seed_hcc_descriptions\n         on seed_hcc_mapping.cms_hcc_v24 = seed_hcc_descriptions.hcc_code\n    where conditions.code_type = 'icd-10-cm'\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as {{ dbt.type_string() }}) as condition_type\n        , cast(code as {{ dbt.type_string() }}) as icd_10_cm_code\n        , cast(hcc_code as {{ dbt.type_string() }}) as hcc_code\n        , cast(hcc_description as {{ dbt.type_string() }}) as hcc_description\n        , cast('{{ model_version_compiled }}' as {{ dbt.type_string() }}) as model_version\n        , cast({{ payment_year_compiled }} as integer) as payment_year\n    from joined\n\n)\n\nselect\n      patient_id\n    , recorded_date\n    , condition_type\n    , icd_10_cm_code\n    , hcc_code\n    , hcc_description\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__stg_core__condition", "package": null, "version": null}, {"name": "cms_hcc__icd_10_cm_mappings", "package": null, "version": null}, {"name": "cms_hcc__icd_10_cm_mappings", "package": null, "version": null}, {"name": "cms_hcc__disease_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.cms_hcc__stg_core__condition", "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings", "seed.the_tuva_project.cms_hcc__disease_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_all_conditions.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__cms_hcc__stg_core__condition as (\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , normalized_code_type as code_type\n    , normalized_code as code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n), conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , condition_type\n        , code_type\n        , code\n    from __dbt__cte__cms_hcc__stg_core__condition\n\n)\n\n, seed_hcc_mapping as (\n\n    select\n          diagnosis_code\n        , cms_hcc_v24\n    from tuva_project_demo.cms_hcc._value_set_icd_10_cm_mappings\n    where payment_year = (select max(payment_year) from tuva_project_demo.cms_hcc._value_set_icd_10_cm_mappings)\n    and cms_hcc_v24_flag = 'Yes'\n\n)\n\n, seed_hcc_descriptions as (\n\n    select distinct\n          hcc_code\n        , description\n    from tuva_project_demo.cms_hcc._value_set_disease_factors\n    where model_version = 'CMS-HCC-V24'\n\n)\n\n, joined as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , conditions.condition_type\n        , conditions.code\n        , seed_hcc_mapping.cms_hcc_v24 as hcc_code\n        , seed_hcc_descriptions.description as hcc_description\n    from conditions\n         left join seed_hcc_mapping\n         on conditions.code = seed_hcc_mapping.diagnosis_code\n         left join seed_hcc_descriptions\n         on seed_hcc_mapping.cms_hcc_v24 = seed_hcc_descriptions.hcc_code\n    where conditions.code_type = 'icd-10-cm'\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(recorded_date as date) as recorded_date\n        , cast(condition_type as TEXT) as condition_type\n        , cast(code as TEXT) as icd_10_cm_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(hcc_description as TEXT) as hcc_description\n        , cast('CMS-HCC-V24' as TEXT) as model_version\n        , cast(2019 as integer) as payment_year\n    from joined\n\n)\n\nselect\n      patient_id\n    , recorded_date\n    , condition_type\n    , icd_10_cm_code\n    , hcc_code\n    , hcc_description\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.cms_hcc__stg_core__condition", "sql": " __dbt__cte__cms_hcc__stg_core__condition as (\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , normalized_code_type as code_type\n    , normalized_code as code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_demographic_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_demographic_factors", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_demographic_factors.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_demographic_factors.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_demographic_factors", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_demographic_factors"], "alias": "_int_demographic_factors", "checksum": {"name": "sha256", "checksum": "5b8e0542ec1ea58f9dfda8c438f5c5f26656f81e295300acfcd8c4d5c25e9830"}, "config": {"enabled": true, "alias": "_int_demographic_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Demographic and enrollment risk relative factor values for the  corresponding HCC model version and payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_status": {"name": "enrollment_status", "description": "Indicates whether the patient is a \"Continuing\" or \"New\" enrollee.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Indicates whether the patient is \"Female\" or \"Male\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "age_group": {"name": "age_group", "description": "Indicates what age group the patient is in. (e.g. \"60-64\").  CMS guidance: Age is calculated as of Feb 1 of the payment year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medicaid_status": {"name": "medicaid_status", "description": "Indicates whether the patient is enrolled in Medicaid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dual_status": {"name": "dual_status", "description": "Indicates whether the patient has \"Full\", \"Partial\", or \"Non\"  dual status.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orec": {"name": "orec", "description": "Indicates the Original Reason for Entitlement Code (OREC)  \"Aged\", \"Disabled\", or \"ESRD\".\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "institutional_status": {"name": "institutional_status", "description": "Indicates whether the patient resided in an institution for at  least 90 days.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_status_default": {"name": "enrollment_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medicaid_dual_status_default": {"name": "medicaid_dual_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orec_default": {"name": "orec_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "institutional_status_default": {"name": "institutional_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coefficient": {"name": "coefficient", "description": "Relative factor value that correspond to the CMS HCC model's  risk indicators.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "factor_type": {"name": "factor_type", "description": "Type of risk factor, e.g. Demographic, Disease, etc.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_demographic_factors", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6760936, "relation_name": "tuva_project_demo.cms_hcc._int_demographic_factors", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n\nwith members as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , enrollment_status_default\n        , medicaid_dual_status_default\n        , orec_default\n        , institutional_status_default\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_members') }}\n\n)\n\n, seed_demographic_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , coefficient\n    from {{ ref('cms_hcc__demographic_factors') }}\n    where plan_segment is null /* data not available */\n    and model_version = '{{ model_version_compiled }}'\n\n)\n\n, new_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.model_version\n        , members.payment_year\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n         inner join seed_demographic_factors\n         on members.enrollment_status = seed_demographic_factors.enrollment_status\n         and members.gender = seed_demographic_factors.gender\n         and members.age_group = seed_demographic_factors.age_group\n         and members.medicaid_status = seed_demographic_factors.medicaid_status\n         and members.orec = seed_demographic_factors.orec\n    where members.enrollment_status = 'New'\n\n)\n\n, continuining_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.model_version\n        , members.payment_year\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n         inner join seed_demographic_factors\n         on members.enrollment_status = seed_demographic_factors.enrollment_status\n         and members.gender = seed_demographic_factors.gender\n         and members.age_group = seed_demographic_factors.age_group\n         and members.medicaid_status = seed_demographic_factors.medicaid_status\n         and members.dual_status = seed_demographic_factors.dual_status\n         and members.orec = seed_demographic_factors.orec\n         and members.institutional_status = seed_demographic_factors.institutional_status\n    where members.enrollment_status = 'Continuing'\n\n)\n\n, unioned as (\n\n    select * from new_enrollees\n    union all\n    select * from continuining_enrollees\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(enrollment_status as {{ dbt.type_string() }}) as enrollment_status\n        , cast(gender as {{ dbt.type_string() }}) as gender\n        , cast(age_group as {{ dbt.type_string() }}) as age_group\n        , cast(medicaid_status as {{ dbt.type_string() }}) as medicaid_status\n        , cast(dual_status as {{ dbt.type_string() }}) as dual_status\n        , cast(orec as {{ dbt.type_string() }}) as orec\n        , cast(institutional_status as {{ dbt.type_string() }}) as institutional_status\n        , cast(enrollment_status_default as boolean) as enrollment_status_default\n        , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n        , cast(orec_default as boolean) as orec_default\n        , cast(institutional_status_default as boolean) as institutional_status_default\n        , round(cast(coefficient as {{ dbt.type_numeric() }}),3) as coefficient\n        , cast(factor_type as {{ dbt.type_string() }}) as factor_type\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , enrollment_status\n    , gender\n    , age_group\n    , medicaid_status\n    , dual_status\n    , orec\n    , institutional_status\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_members", "package": null, "version": null}, {"name": "cms_hcc__demographic_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.cms_hcc__int_members", "seed.the_tuva_project.cms_hcc__demographic_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_demographic_factors.sql", "compiled": true, "compiled_code": "\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\nwith members as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , enrollment_status_default\n        , medicaid_dual_status_default\n        , orec_default\n        , institutional_status_default\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_members\n\n)\n\n, seed_demographic_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , coefficient\n    from tuva_project_demo.cms_hcc._value_set_demographic_factors\n    where plan_segment is null /* data not available */\n    and model_version = 'CMS-HCC-V24'\n\n)\n\n, new_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.model_version\n        , members.payment_year\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n         inner join seed_demographic_factors\n         on members.enrollment_status = seed_demographic_factors.enrollment_status\n         and members.gender = seed_demographic_factors.gender\n         and members.age_group = seed_demographic_factors.age_group\n         and members.medicaid_status = seed_demographic_factors.medicaid_status\n         and members.orec = seed_demographic_factors.orec\n    where members.enrollment_status = 'New'\n\n)\n\n, continuining_enrollees as (\n\n    select\n          members.patient_id\n        , members.enrollment_status\n        , members.gender\n        , members.age_group\n        , members.medicaid_status\n        , members.dual_status\n        , members.orec\n        , members.institutional_status\n        , members.enrollment_status_default\n        , members.medicaid_dual_status_default\n        , members.orec_default\n        , members.institutional_status_default\n        , members.model_version\n        , members.payment_year\n        , seed_demographic_factors.factor_type\n        , seed_demographic_factors.coefficient\n    from members\n         inner join seed_demographic_factors\n         on members.enrollment_status = seed_demographic_factors.enrollment_status\n         and members.gender = seed_demographic_factors.gender\n         and members.age_group = seed_demographic_factors.age_group\n         and members.medicaid_status = seed_demographic_factors.medicaid_status\n         and members.dual_status = seed_demographic_factors.dual_status\n         and members.orec = seed_demographic_factors.orec\n         and members.institutional_status = seed_demographic_factors.institutional_status\n    where members.enrollment_status = 'Continuing'\n\n)\n\n, unioned as (\n\n    select * from new_enrollees\n    union all\n    select * from continuining_enrollees\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(enrollment_status as TEXT) as enrollment_status\n        , cast(gender as TEXT) as gender\n        , cast(age_group as TEXT) as age_group\n        , cast(medicaid_status as TEXT) as medicaid_status\n        , cast(dual_status as TEXT) as dual_status\n        , cast(orec as TEXT) as orec\n        , cast(institutional_status as TEXT) as institutional_status\n        , cast(enrollment_status_default as boolean) as enrollment_status_default\n        , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n        , cast(orec_default as boolean) as orec_default\n        , cast(institutional_status_default as boolean) as institutional_status_default\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , enrollment_status\n    , gender\n    , age_group\n    , medicaid_status\n    , dual_status\n    , orec\n    , institutional_status\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_disabled_interaction_factors", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_disabled_interaction_factors.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_disabled_interaction_factors.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_disabled_interaction_factors"], "alias": "_int_disabled_interaction_factors", "checksum": {"name": "sha256", "checksum": "1cda2ed7f93f93b6791914273e3d958397b5b49b4940e3ae9ee53967a898ef1e"}, "config": {"enabled": true, "alias": "_int_disabled_interaction_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Disabled and disease interaction factor values for the corresponding  HCC model version and payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the disabled and disease interaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coefficient": {"name": "coefficient", "description": "Relative factor value that correspond to the CMS HCC model's  risk indicators.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "factor_type": {"name": "factor_type", "description": "Type of risk factor, e.g. Demographic, Disease, etc.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_disabled_interaction_factors", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6814325, "relation_name": "tuva_project_demo.cms_hcc._int_disabled_interaction_factors", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , institutional_status\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_demographic_factors') }}\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n    from {{ ref('cms_hcc__int_hcc_hierarchy') }}\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , institutional_status\n        , short_name\n        , description\n        , hcc_code\n        , coefficient\n    from {{ ref('cms_hcc__disabled_interaction_factors') }}\n    where model_version = '{{ model_version_compiled }}'\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n         inner join hcc_hierarchy\n         on demographics.patient_id = hcc_hierarchy.patient_id\n\n)\n\n, interactions as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics_with_hccs\n         inner join seed_interaction_factors\n         on demographics_with_hccs.enrollment_status = seed_interaction_factors.enrollment_status\n         and demographics_with_hccs.institutional_status = seed_interaction_factors.institutional_status\n         and demographics_with_hccs.hcc_code = seed_interaction_factors.hcc_code\n\n)\n\n, add_data_types as (\n\nselect\n      cast(patient_id as {{ dbt.type_string() }}) as patient_id\n    , cast(description as {{ dbt.type_string() }}) as description\n    , round(cast(coefficient as {{ dbt.type_numeric() }}),3) as coefficient\n    , cast(factor_type as {{ dbt.type_string() }}) as factor_type\n    , cast(model_version as {{ dbt.type_string() }}) as model_version\n    , cast(payment_year as integer) as payment_year\nfrom interactions\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_demographic_factors", "package": null, "version": null}, {"name": "cms_hcc__int_hcc_hierarchy", "package": null, "version": null}, {"name": "cms_hcc__disabled_interaction_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "seed.the_tuva_project.cms_hcc__disabled_interaction_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_disabled_interaction_factors.sql", "compiled": true, "compiled_code": "\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , institutional_status\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n    from tuva_project_demo.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , institutional_status\n        , short_name\n        , description\n        , hcc_code\n        , coefficient\n    from tuva_project_demo.cms_hcc._value_set_disabled_interaction_factors\n    where model_version = 'CMS-HCC-V24'\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n         inner join hcc_hierarchy\n         on demographics.patient_id = hcc_hierarchy.patient_id\n\n)\n\n, interactions as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics_with_hccs\n         inner join seed_interaction_factors\n         on demographics_with_hccs.enrollment_status = seed_interaction_factors.enrollment_status\n         and demographics_with_hccs.institutional_status = seed_interaction_factors.institutional_status\n         and demographics_with_hccs.hcc_code = seed_interaction_factors.hcc_code\n\n)\n\n, add_data_types as (\n\nselect\n      cast(patient_id as TEXT) as patient_id\n    , cast(description as TEXT) as description\n    , round(cast(coefficient as numeric(28,6)),3) as coefficient\n    , cast(factor_type as TEXT) as factor_type\n    , cast(model_version as TEXT) as model_version\n    , cast(payment_year as integer) as payment_year\nfrom interactions\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_disease_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_disease_factors", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_disease_factors.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_disease_factors.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_disease_factors", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_disease_factors"], "alias": "_int_disease_factors", "checksum": {"name": "sha256", "checksum": "4a0c169b8860a5a2a81badaae447e8a566948d9aaa3089d251112ae6e61d01bc"}, "config": {"enabled": true, "alias": "_int_disease_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Disease factor values for every enrollee's final payment-eligible HCC after the hierarchy has been applied and necessary HCCs dropped for the  corresponding HCC model version and payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_code": {"name": "hcc_code", "description": "HCC code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_description": {"name": "hcc_description", "description": "HCC description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coefficient": {"name": "coefficient", "description": "Relative factor value that correspond to the CMS HCC model's  risk indicators.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "factor_type": {"name": "factor_type", "description": "Type of risk factor, e.g. Demographic, Disease, etc.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_disease_factors", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6859915, "relation_name": "tuva_project_demo.cms_hcc._int_disease_factors", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_demographic_factors') }}\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n    from {{ ref('cms_hcc__int_hcc_hierarchy') }}\n\n)\n\n, seed_disease_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , hcc_code\n        , description\n        , coefficient\n    from {{ ref('cms_hcc__disease_factors') }}\n    where model_version = '{{ model_version_compiled }}'\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.gender\n        , demographics.age_group\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n         inner join hcc_hierarchy\n         on demographics.patient_id = hcc_hierarchy.patient_id\n\n)\n\n, disease_factors as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.hcc_code\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , seed_disease_factors.factor_type\n        , seed_disease_factors.description\n        , seed_disease_factors.coefficient\n    from demographics_with_hccs\n         inner join seed_disease_factors\n         on demographics_with_hccs.enrollment_status = seed_disease_factors.enrollment_status\n         and demographics_with_hccs.medicaid_status = seed_disease_factors.medicaid_status\n         and demographics_with_hccs.dual_status = seed_disease_factors.dual_status\n         and demographics_with_hccs.orec = seed_disease_factors.orec\n         and demographics_with_hccs.institutional_status = seed_disease_factors.institutional_status\n         and demographics_with_hccs.hcc_code = seed_disease_factors.hcc_code\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(hcc_code as {{ dbt.type_string() }}) as hcc_code\n        , cast(description as {{ dbt.type_string() }}) as hcc_description\n        , round(cast(coefficient as {{ dbt.type_numeric() }}),3) as coefficient\n        , cast(factor_type as {{ dbt.type_string() }}) as factor_type\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from disease_factors\n\n)\n\nselect\n      patient_id\n    , hcc_code\n    , hcc_description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_demographic_factors", "package": null, "version": null}, {"name": "cms_hcc__int_hcc_hierarchy", "package": null, "version": null}, {"name": "cms_hcc__disease_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "seed.the_tuva_project.cms_hcc__disease_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_disease_factors.sql", "compiled": true, "compiled_code": "\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n    from tuva_project_demo.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_disease_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , hcc_code\n        , description\n        , coefficient\n    from tuva_project_demo.cms_hcc._value_set_disease_factors\n    where model_version = 'CMS-HCC-V24'\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.gender\n        , demographics.age_group\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n         inner join hcc_hierarchy\n         on demographics.patient_id = hcc_hierarchy.patient_id\n\n)\n\n, disease_factors as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.hcc_code\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , seed_disease_factors.factor_type\n        , seed_disease_factors.description\n        , seed_disease_factors.coefficient\n    from demographics_with_hccs\n         inner join seed_disease_factors\n         on demographics_with_hccs.enrollment_status = seed_disease_factors.enrollment_status\n         and demographics_with_hccs.medicaid_status = seed_disease_factors.medicaid_status\n         and demographics_with_hccs.dual_status = seed_disease_factors.dual_status\n         and demographics_with_hccs.orec = seed_disease_factors.orec\n         and demographics_with_hccs.institutional_status = seed_disease_factors.institutional_status\n         and demographics_with_hccs.hcc_code = seed_disease_factors.hcc_code\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(description as TEXT) as hcc_description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from disease_factors\n\n)\n\nselect\n      patient_id\n    , hcc_code\n    , hcc_description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_disease_interaction_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_disease_interaction_factors", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_disease_interaction_factors.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_disease_interaction_factors.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_disease_interaction_factors"], "alias": "_int_disease_interaction_factors", "checksum": {"name": "sha256", "checksum": "e15ffaa857df927530cc21df4d5348d0dc60d338fffa5ead8a095aaca3baba4e"}, "config": {"enabled": true, "alias": "_int_disease_interaction_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Disease interaction factor values for final payment-eligible HCC  after the hierarchy has been applied and necessary HCCs dropped for the  corresponding HCC model version and payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_code_1": {"name": "hcc_code_1", "description": "HCC code 1 of the interaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_code_2": {"name": "hcc_code_2", "description": "HCC code 2 of the interaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the disease interaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coefficient": {"name": "coefficient", "description": "Relative factor value that correspond to the CMS HCC model's  risk indicators.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "factor_type": {"name": "factor_type", "description": "Type of risk factor, e.g. Demographic, Disease, etc.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_disease_interaction_factors", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6913555, "relation_name": "tuva_project_demo.cms_hcc._int_disease_interaction_factors", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_demographic_factors') }}\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n    from {{ ref('cms_hcc__int_hcc_hierarchy') }}\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , short_name\n        , description\n        , hcc_code_1\n        , hcc_code_2\n        , coefficient\n    from {{ ref('cms_hcc__disease_interaction_factors') }}\n    where model_version = '{{ model_version_compiled }}'\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n         inner join hcc_hierarchy\n         on demographics.patient_id = hcc_hierarchy.patient_id\n\n)\n\n, demographics_with_interactions as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , interactions_code_1.factor_type\n        , interactions_code_1.description\n        , interactions_code_1.hcc_code_1\n        , interactions_code_1.hcc_code_2\n        , interactions_code_1.coefficient\n    from demographics_with_hccs\n         inner join seed_interaction_factors as interactions_code_1\n         on demographics_with_hccs.enrollment_status = interactions_code_1.enrollment_status\n         and demographics_with_hccs.medicaid_status = interactions_code_1.medicaid_status\n         and demographics_with_hccs.dual_status = interactions_code_1.dual_status\n         and demographics_with_hccs.orec = interactions_code_1.orec\n         and demographics_with_hccs.institutional_status = interactions_code_1.institutional_status\n         and demographics_with_hccs.hcc_code = interactions_code_1.hcc_code_1\n\n)\n\n, disease_interactions as (\n\n    select\n          demographics_with_interactions.patient_id\n        , demographics_with_interactions.factor_type\n        , demographics_with_interactions.hcc_code_1\n        , demographics_with_interactions.hcc_code_2\n        , demographics_with_interactions.description\n        , demographics_with_interactions.coefficient\n        , demographics_with_interactions.model_version\n        , demographics_with_interactions.payment_year\n    from demographics_with_interactions\n        inner join demographics_with_hccs as interactions_code_2\n        on demographics_with_interactions.patient_id = interactions_code_2.patient_id\n        and demographics_with_interactions.hcc_code_2 = interactions_code_2.hcc_code\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(hcc_code_1 as {{ dbt.type_string() }}) as hcc_code_1\n        , cast(hcc_code_2 as {{ dbt.type_string() }}) as hcc_code_2\n        , cast(description as {{ dbt.type_string() }}) as description\n        , round(cast(coefficient as {{ dbt.type_numeric() }}),3) as coefficient\n        , cast(factor_type as {{ dbt.type_string() }}) as factor_type\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from disease_interactions\n\n)\n\nselect\n      patient_id\n    , hcc_code_1\n    , hcc_code_2\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_demographic_factors", "package": null, "version": null}, {"name": "cms_hcc__int_hcc_hierarchy", "package": null, "version": null}, {"name": "cms_hcc__disease_interaction_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "seed.the_tuva_project.cms_hcc__disease_interaction_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_disease_interaction_factors.sql", "compiled": true, "compiled_code": "\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_demographic_factors\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n    from tuva_project_demo.cms_hcc._int_hcc_hierarchy\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , short_name\n        , description\n        , hcc_code_1\n        , hcc_code_2\n        , coefficient\n    from tuva_project_demo.cms_hcc._value_set_disease_interaction_factors\n    where model_version = 'CMS-HCC-V24'\n\n)\n\n, demographics_with_hccs as (\n\n    select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , hcc_hierarchy.hcc_code\n    from demographics\n         inner join hcc_hierarchy\n         on demographics.patient_id = hcc_hierarchy.patient_id\n\n)\n\n, demographics_with_interactions as (\n\n    select\n          demographics_with_hccs.patient_id\n        , demographics_with_hccs.model_version\n        , demographics_with_hccs.payment_year\n        , interactions_code_1.factor_type\n        , interactions_code_1.description\n        , interactions_code_1.hcc_code_1\n        , interactions_code_1.hcc_code_2\n        , interactions_code_1.coefficient\n    from demographics_with_hccs\n         inner join seed_interaction_factors as interactions_code_1\n         on demographics_with_hccs.enrollment_status = interactions_code_1.enrollment_status\n         and demographics_with_hccs.medicaid_status = interactions_code_1.medicaid_status\n         and demographics_with_hccs.dual_status = interactions_code_1.dual_status\n         and demographics_with_hccs.orec = interactions_code_1.orec\n         and demographics_with_hccs.institutional_status = interactions_code_1.institutional_status\n         and demographics_with_hccs.hcc_code = interactions_code_1.hcc_code_1\n\n)\n\n, disease_interactions as (\n\n    select\n          demographics_with_interactions.patient_id\n        , demographics_with_interactions.factor_type\n        , demographics_with_interactions.hcc_code_1\n        , demographics_with_interactions.hcc_code_2\n        , demographics_with_interactions.description\n        , demographics_with_interactions.coefficient\n        , demographics_with_interactions.model_version\n        , demographics_with_interactions.payment_year\n    from demographics_with_interactions\n        inner join demographics_with_hccs as interactions_code_2\n        on demographics_with_interactions.patient_id = interactions_code_2.patient_id\n        and demographics_with_interactions.hcc_code_2 = interactions_code_2.hcc_code\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(hcc_code_1 as TEXT) as hcc_code_1\n        , cast(hcc_code_2 as TEXT) as hcc_code_2\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from disease_interactions\n\n)\n\nselect\n      patient_id\n    , hcc_code_1\n    , hcc_code_2\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_eligible_conditions": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_eligible_conditions", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_eligible_conditions.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_eligible_conditions.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_eligible_conditions", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_eligible_conditions"], "alias": "_int_eligible_conditions", "checksum": {"name": "sha256", "checksum": "0618fc2a34ddf522126972aeec56c49f6b34ece779faae370f57836849053156"}, "config": {"enabled": true, "alias": "_int_eligible_conditions", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Conditions from eligible risk-adjustable claims per claim type for the  collection year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_code": {"name": "condition_code", "description": "The condition code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_eligible_conditions", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.695682, "relation_name": "tuva_project_demo.cms_hcc._int_eligible_conditions", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nSteps for staging condition data:\n    1) Filter to risk-adjustable claims per claim type for the collection year.\n    2) Gather diagnosis codes from condition for the eligible claims.\n    3) Map and filter diagnosis codes to HCCs\n\nClaims filtering logic:\n - Professional:\n    - CPT/HCPCS in CPT/HCPCS seed file from CMS\n - Inpatient:\n    - Bill type code in (11X, 41X)\n - Outpatient:\n    - Bill type code in (12X, 13X, 43X, 71X, 73X, 76X, 77X, 85X)\n    - CPT/HCPCS in CPT/HCPCS seed file from CMS\n\nJinja is used to set payment and collection year variables.\n - The hcc_model_version and payment_year vars have been set here\n   so they get compiled.\n - The collection year is one year prior to the payment year.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n{% set payment_year_compiled = var('cms_hcc_payment_year') -%}\n{% set collection_year = payment_year_compiled - 1 -%}\n\nwith medical_claims as (\n\n    select\n          claim_id\n        , claim_line_number\n        , claim_type\n        , patient_id\n        , claim_start_date\n        , claim_end_date\n        , bill_type_code\n        , hcpcs_code\n    from {{ ref('cms_hcc__stg_core__medical_claim') }}\n\n)\n\n, conditions as (\n\n    select\n          claim_id\n        , patient_id\n        , code\n    from {{ ref('cms_hcc__stg_core__condition') }}\n    where code_type = 'icd-10-cm'\n\n)\n\n, cpt_hcpcs_list as (\n\n    select\n          payment_year\n        , hcpcs_cpt_code\n    from {{ ref('cms_hcc__cpt_hcpcs') }}\n\n)\n\n, professional_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n         inner join cpt_hcpcs_list\n         on medical_claims.hcpcs_code = cpt_hcpcs_list.hcpcs_cpt_code\n    where claim_type = 'professional'\n    and extract(year from claim_end_date) = {{ collection_year }}\n    and cpt_hcpcs_list.payment_year = {{ payment_year_compiled }}\n\n)\n\n, inpatient_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n    where claim_type = 'institutional'\n    and extract(year from claim_end_date) = {{ collection_year }}\n    and left(bill_type_code,2) in ('11','41')\n\n)\n\n, outpatient_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n         inner join cpt_hcpcs_list\n         on medical_claims.hcpcs_code = cpt_hcpcs_list.hcpcs_cpt_code\n    where claim_type = 'institutional'\n    and extract(year from claim_end_date) = {{ collection_year }}\n    and cpt_hcpcs_list.payment_year = {{ payment_year_compiled }}\n    and left(bill_type_code,2) in ('12','13','43','71','73','76','77','85')\n\n)\n\n, eligible_claims as (\n\n    select * from professional_claims\n    union all\n    select * from inpatient_claims\n    union all\n    select * from outpatient_claims\n\n)\n\n, eligible_conditions as (\n\n    select distinct\n          eligible_claims.claim_id\n        , eligible_claims.patient_id\n        , conditions.code\n    from eligible_claims\n         inner join conditions\n         on eligible_claims.claim_id = conditions.claim_id\n         and eligible_claims.patient_id = conditions.patient_id\n\n)\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(code as {{ dbt.type_string() }}) as condition_code\n        , cast('{{ model_version_compiled }}' as {{ dbt.type_string() }}) as model_version\n        , cast('{{ payment_year_compiled }}' as integer) as payment_year\n    from eligible_conditions\n\n)\n\nselect\n      patient_id\n    , condition_code\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__stg_core__medical_claim", "package": null, "version": null}, {"name": "cms_hcc__stg_core__condition", "package": null, "version": null}, {"name": "cms_hcc__cpt_hcpcs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.cms_hcc__stg_core__medical_claim", "model.the_tuva_project.cms_hcc__stg_core__condition", "seed.the_tuva_project.cms_hcc__cpt_hcpcs"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_eligible_conditions.sql", "compiled": true, "compiled_code": "\n/*\nSteps for staging condition data:\n    1) Filter to risk-adjustable claims per claim type for the collection year.\n    2) Gather diagnosis codes from condition for the eligible claims.\n    3) Map and filter diagnosis codes to HCCs\n\nClaims filtering logic:\n - Professional:\n    - CPT/HCPCS in CPT/HCPCS seed file from CMS\n - Inpatient:\n    - Bill type code in (11X, 41X)\n - Outpatient:\n    - Bill type code in (12X, 13X, 43X, 71X, 73X, 76X, 77X, 85X)\n    - CPT/HCPCS in CPT/HCPCS seed file from CMS\n\nJinja is used to set payment and collection year variables.\n - The hcc_model_version and payment_year vars have been set here\n   so they get compiled.\n - The collection year is one year prior to the payment year.\n*/\n\nwith  __dbt__cte__cms_hcc__stg_core__medical_claim as (\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , claim_start_date\n    , claim_end_date\n    , bill_type_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n),  __dbt__cte__cms_hcc__stg_core__condition as (\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , normalized_code_type as code_type\n    , normalized_code as code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n), medical_claims as (\n\n    select\n          claim_id\n        , claim_line_number\n        , claim_type\n        , patient_id\n        , claim_start_date\n        , claim_end_date\n        , bill_type_code\n        , hcpcs_code\n    from __dbt__cte__cms_hcc__stg_core__medical_claim\n\n)\n\n, conditions as (\n\n    select\n          claim_id\n        , patient_id\n        , code\n    from __dbt__cte__cms_hcc__stg_core__condition\n    where code_type = 'icd-10-cm'\n\n)\n\n, cpt_hcpcs_list as (\n\n    select\n          payment_year\n        , hcpcs_cpt_code\n    from tuva_project_demo.cms_hcc._value_set_cpt_hcpcs\n\n)\n\n, professional_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n         inner join cpt_hcpcs_list\n         on medical_claims.hcpcs_code = cpt_hcpcs_list.hcpcs_cpt_code\n    where claim_type = 'professional'\n    and extract(year from claim_end_date) = 2018\n    and cpt_hcpcs_list.payment_year = 2019\n\n)\n\n, inpatient_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n    where claim_type = 'institutional'\n    and extract(year from claim_end_date) = 2018\n    and left(bill_type_code,2) in ('11','41')\n\n)\n\n, outpatient_claims as (\n\n    select\n          medical_claims.claim_id\n        , medical_claims.claim_line_number\n        , medical_claims.claim_type\n        , medical_claims.patient_id\n        , medical_claims.claim_start_date\n        , medical_claims.claim_end_date\n        , medical_claims.bill_type_code\n        , medical_claims.hcpcs_code\n    from medical_claims\n         inner join cpt_hcpcs_list\n         on medical_claims.hcpcs_code = cpt_hcpcs_list.hcpcs_cpt_code\n    where claim_type = 'institutional'\n    and extract(year from claim_end_date) = 2018\n    and cpt_hcpcs_list.payment_year = 2019\n    and left(bill_type_code,2) in ('12','13','43','71','73','76','77','85')\n\n)\n\n, eligible_claims as (\n\n    select * from professional_claims\n    union all\n    select * from inpatient_claims\n    union all\n    select * from outpatient_claims\n\n)\n\n, eligible_conditions as (\n\n    select distinct\n          eligible_claims.claim_id\n        , eligible_claims.patient_id\n        , conditions.code\n    from eligible_claims\n         inner join conditions\n         on eligible_claims.claim_id = conditions.claim_id\n         and eligible_claims.patient_id = conditions.patient_id\n\n)\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(code as TEXT) as condition_code\n        , cast('CMS-HCC-V24' as TEXT) as model_version\n        , cast('2019' as integer) as payment_year\n    from eligible_conditions\n\n)\n\nselect\n      patient_id\n    , condition_code\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.cms_hcc__stg_core__medical_claim", "sql": " __dbt__cte__cms_hcc__stg_core__medical_claim as (\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , claim_start_date\n    , claim_end_date\n    , bill_type_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n)"}, {"id": "model.the_tuva_project.cms_hcc__stg_core__condition", "sql": " __dbt__cte__cms_hcc__stg_core__condition as (\n\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , normalized_code_type as code_type\n    , normalized_code as code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_enrollment_interaction_factors", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_enrollment_interaction_factors.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_enrollment_interaction_factors.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_enrollment_interaction_factors"], "alias": "_int_enrollment_interaction_factors", "checksum": {"name": "sha256", "checksum": "13121c69461d4f45d628242b57c7d84c551561a10c9a236c901ebb9261e96d49"}, "config": {"enabled": true, "alias": "_int_enrollment_interaction_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Enrollment interaction factor values for the corresponding HCC model  version and payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the enrollment interaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coefficient": {"name": "coefficient", "description": "Relative factor value that correspond to the CMS HCC model's  risk indicators.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "factor_type": {"name": "factor_type", "description": "Type of risk factor, e.g. Demographic, Disease, etc.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_enrollment_interaction_factors", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.6996913, "relation_name": "tuva_project_demo.cms_hcc._int_enrollment_interaction_factors", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_demographic_factors') }}\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , gender\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , institutional_status\n        , description\n        , coefficient\n    from {{ ref('cms_hcc__enrollment_interaction_factors') }}\n    where model_version = '{{ model_version_compiled }}'\n\n)\n\n/*\n    Originally disabled interactions for non-institutional members >= 65\n*/\n, non_institutional_interactions as (\n\n    select\n          demographics.patient_id\n        , demographics.model_version\n        , demographics.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics\n         inner join seed_interaction_factors\n         on demographics.gender = seed_interaction_factors.gender\n         and demographics.enrollment_status = seed_interaction_factors.enrollment_status\n         and demographics.medicaid_status = seed_interaction_factors.medicaid_status\n         and demographics.dual_status = seed_interaction_factors.dual_status\n         and demographics.institutional_status = seed_interaction_factors.institutional_status\n    where demographics.institutional_status = 'No'\n    and demographics.orec = 'Disabled'\n    and demographics.age_group in (\n          '65-69'\n        , '70-74'\n        , '75-79'\n        , '80-84'\n        , '85-89'\n        , '90-94'\n        , '>=95'\n    )\n\n)\n\n/*\n    Medicaid interactions for institutional members\n*/\n, institutional_interactions as (\n\n    select\n          demographics.patient_id\n        , demographics.model_version\n        , demographics.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics\n         inner join seed_interaction_factors\n         on demographics.enrollment_status = seed_interaction_factors.enrollment_status\n         and demographics.institutional_status = seed_interaction_factors.institutional_status\n    where demographics.institutional_status = 'Yes'\n    and demographics.medicaid_status = 'Yes'\n\n)\n\n, unioned as (\n\n    select * from non_institutional_interactions\n    union all\n    select * from institutional_interactions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(description as {{ dbt.type_string() }}) as description\n        , round(cast(coefficient as {{ dbt.type_numeric() }}),3) as coefficient\n        , cast(factor_type as {{ dbt.type_string() }}) as factor_type\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_demographic_factors", "package": null, "version": null}, {"name": "cms_hcc__enrollment_interaction_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "seed.the_tuva_project.cms_hcc__enrollment_interaction_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_enrollment_interaction_factors.sql", "compiled": true, "compiled_code": "\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , gender\n        , age_group\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_demographic_factors\n\n)\n\n, seed_interaction_factors as (\n\n    select\n          model_version\n        , factor_type\n        , gender\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , institutional_status\n        , description\n        , coefficient\n    from tuva_project_demo.cms_hcc._value_set_enrollment_interaction_factors\n    where model_version = 'CMS-HCC-V24'\n\n)\n\n/*\n    Originally disabled interactions for non-institutional members >= 65\n*/\n, non_institutional_interactions as (\n\n    select\n          demographics.patient_id\n        , demographics.model_version\n        , demographics.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics\n         inner join seed_interaction_factors\n         on demographics.gender = seed_interaction_factors.gender\n         and demographics.enrollment_status = seed_interaction_factors.enrollment_status\n         and demographics.medicaid_status = seed_interaction_factors.medicaid_status\n         and demographics.dual_status = seed_interaction_factors.dual_status\n         and demographics.institutional_status = seed_interaction_factors.institutional_status\n    where demographics.institutional_status = 'No'\n    and demographics.orec = 'Disabled'\n    and demographics.age_group in (\n          '65-69'\n        , '70-74'\n        , '75-79'\n        , '80-84'\n        , '85-89'\n        , '90-94'\n        , '>=95'\n    )\n\n)\n\n/*\n    Medicaid interactions for institutional members\n*/\n, institutional_interactions as (\n\n    select\n          demographics.patient_id\n        , demographics.model_version\n        , demographics.payment_year\n        , seed_interaction_factors.factor_type\n        , seed_interaction_factors.description\n        , seed_interaction_factors.coefficient\n    from demographics\n         inner join seed_interaction_factors\n         on demographics.enrollment_status = seed_interaction_factors.enrollment_status\n         and demographics.institutional_status = seed_interaction_factors.institutional_status\n    where demographics.institutional_status = 'Yes'\n    and demographics.medicaid_status = 'Yes'\n\n)\n\n, unioned as (\n\n    select * from non_institutional_interactions\n    union all\n    select * from institutional_interactions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from unioned\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_hcc_count_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_hcc_count_factors", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_hcc_count_factors.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_hcc_count_factors.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_count_factors", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_hcc_count_factors"], "alias": "_int_hcc_count_factors", "checksum": {"name": "sha256", "checksum": "207b160ded0440e04109f7b5abccb2803943276eb81fcc1aa4df62b0fc4049f6"}, "config": {"enabled": true, "alias": "_int_hcc_count_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Final payment-eligible HCC count factor values for the corresponding  HCC model version and payment year.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "HCC counts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coefficient": {"name": "coefficient", "description": "Relative factor value that correspond to the CMS HCC model's  risk indicators.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "factor_type": {"name": "factor_type", "description": "Type of risk factor, e.g. Demographic, Disease, etc.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_hcc_count_factors", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.7036254, "relation_name": "tuva_project_demo.cms_hcc._int_hcc_count_factors", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_demographic_factors') }}\n\n)\n\n, seed_payment_hcc_count_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , payment_hcc_count\n        , description\n        , coefficient\n    from {{ ref('cms_hcc__payment_hcc_count_factors') }}\n    where model_version = '{{ model_version_compiled }}'\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n    from {{ ref('cms_hcc__int_hcc_hierarchy') }}\n\n)\n\n, demographics_with_hcc_counts as (\n\n        select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , count(hcc_hierarchy.hcc_code) as hcc_count\n    from demographics\n         inner join hcc_hierarchy\n         on demographics.patient_id = hcc_hierarchy.patient_id\n    group by\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n\n)\n\n, hcc_counts_normalized as (\n\n    select\n          patient_id\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n        , case\n            when hcc_count >= 10 then '>=10'\n            else cast(hcc_count as {{ dbt.type_string() }})\n          end as hcc_count_string\n    from demographics_with_hcc_counts\n\n)\n\n, hcc_counts as (\n\n    select\n          hcc_counts_normalized.patient_id\n        , hcc_counts_normalized.model_version\n        , hcc_counts_normalized.payment_year\n        , seed_payment_hcc_count_factors.factor_type\n        , seed_payment_hcc_count_factors.description\n        , seed_payment_hcc_count_factors.coefficient\n    from hcc_counts_normalized\n         inner join seed_payment_hcc_count_factors\n         on hcc_counts_normalized.enrollment_status = seed_payment_hcc_count_factors.enrollment_status\n         and hcc_counts_normalized.medicaid_status = seed_payment_hcc_count_factors.medicaid_status\n         and hcc_counts_normalized.dual_status = seed_payment_hcc_count_factors.dual_status\n         and hcc_counts_normalized.orec = seed_payment_hcc_count_factors.orec\n         and hcc_counts_normalized.institutional_status = seed_payment_hcc_count_factors.institutional_status\n         and hcc_counts_normalized.hcc_count_string = seed_payment_hcc_count_factors.payment_hcc_count\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(description as {{ dbt.type_string() }}) as description\n        , round(cast(coefficient as {{ dbt.type_numeric() }}),3) as coefficient\n        , cast(factor_type as {{ dbt.type_string() }}) as factor_type\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from hcc_counts\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_demographic_factors", "package": null, "version": null}, {"name": "cms_hcc__payment_hcc_count_factors", "package": null, "version": null}, {"name": "cms_hcc__int_hcc_hierarchy", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "seed.the_tuva_project.cms_hcc__payment_hcc_count_factors", "model.the_tuva_project.cms_hcc__int_hcc_hierarchy"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_hcc_count_factors.sql", "compiled": true, "compiled_code": "\n/*\nThe hcc_model_version var has been set here so it gets compiled.\n*/\n\nwith demographics as (\n\n    select\n          patient_id\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_demographic_factors\n\n)\n\n, seed_payment_hcc_count_factors as (\n\n    select\n          model_version\n        , factor_type\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , payment_hcc_count\n        , description\n        , coefficient\n    from tuva_project_demo.cms_hcc._value_set_payment_hcc_count_factors\n    where model_version = 'CMS-HCC-V24'\n\n)\n\n, hcc_hierarchy as (\n\n    select\n          patient_id\n        , hcc_code\n    from tuva_project_demo.cms_hcc._int_hcc_hierarchy\n\n)\n\n, demographics_with_hcc_counts as (\n\n        select\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n        , count(hcc_hierarchy.hcc_code) as hcc_count\n    from demographics\n         inner join hcc_hierarchy\n         on demographics.patient_id = hcc_hierarchy.patient_id\n    group by\n          demographics.patient_id\n        , demographics.enrollment_status\n        , demographics.medicaid_status\n        , demographics.dual_status\n        , demographics.orec\n        , demographics.institutional_status\n        , demographics.model_version\n        , demographics.payment_year\n\n)\n\n, hcc_counts_normalized as (\n\n    select\n          patient_id\n        , enrollment_status\n        , medicaid_status\n        , dual_status\n        , orec\n        , institutional_status\n        , model_version\n        , payment_year\n        , case\n            when hcc_count >= 10 then '>=10'\n            else cast(hcc_count as TEXT)\n          end as hcc_count_string\n    from demographics_with_hcc_counts\n\n)\n\n, hcc_counts as (\n\n    select\n          hcc_counts_normalized.patient_id\n        , hcc_counts_normalized.model_version\n        , hcc_counts_normalized.payment_year\n        , seed_payment_hcc_count_factors.factor_type\n        , seed_payment_hcc_count_factors.description\n        , seed_payment_hcc_count_factors.coefficient\n    from hcc_counts_normalized\n         inner join seed_payment_hcc_count_factors\n         on hcc_counts_normalized.enrollment_status = seed_payment_hcc_count_factors.enrollment_status\n         and hcc_counts_normalized.medicaid_status = seed_payment_hcc_count_factors.medicaid_status\n         and hcc_counts_normalized.dual_status = seed_payment_hcc_count_factors.dual_status\n         and hcc_counts_normalized.orec = seed_payment_hcc_count_factors.orec\n         and hcc_counts_normalized.institutional_status = seed_payment_hcc_count_factors.institutional_status\n         and hcc_counts_normalized.hcc_count_string = seed_payment_hcc_count_factors.payment_hcc_count\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(description as TEXT) as description\n        , round(cast(coefficient as numeric(28,6)),3) as coefficient\n        , cast(factor_type as TEXT) as factor_type\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from hcc_counts\n\n)\n\nselect\n      patient_id\n    , description\n    , coefficient\n    , factor_type\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_hcc_hierarchy": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_hcc_hierarchy", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_hcc_hierarchy.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_hcc_hierarchy.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_hcc_hierarchy"], "alias": "_int_hcc_hierarchy", "checksum": {"name": "sha256", "checksum": "d72a8368dfff17bb6361c0711b59e459ae3999ce90f098845030ff7d62f69d94"}, "config": {"enabled": true, "alias": "_int_hcc_hierarchy", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "HCC hierarchy for the corresponding HCC model version and payment year applied to the mapped payment-eligible HCCs.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_code": {"name": "hcc_code", "description": "HCC code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_hcc_hierarchy", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.707603, "relation_name": "tuva_project_demo.cms_hcc._int_hcc_hierarchy", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\n    Staging HCCs that will be used in disease factor calculations.\n    Final output includes:\n        - hccs without a hierarchy\n        - lower-level hccs with hierarchy where top-level hcc is missing\n        - top-level hccs from hierarchy\n\n    The hcc_model_version var has been set here so it gets compiled.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n\nwith hcc_mapping as (\n\n    select distinct\n          patient_id\n        , hcc_code\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_hcc_mapping') }}\n\n)\n\n, seed_hcc_hierarchy as (\n\n    select\n          model_version\n        , hcc_code\n        , description\n        , hccs_to_exclude\n    from {{ ref('cms_hcc__disease_hierarchy') }}\n    where model_version = '{{ model_version_compiled }}'\n\n)\n\n/*\n    selecting hccs that do not have a hierarchy\n    all codes in this cte are included in final output\n*/\n, hccs_without_hierarchy as (\n\n    select distinct\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n    from hcc_mapping\n         left join seed_hcc_hierarchy as hcc_top_level\n           on hcc_mapping.hcc_code = hcc_top_level.hcc_code\n         left join seed_hcc_hierarchy as hcc_exclusions\n           on hcc_mapping.hcc_code = hcc_exclusions.hccs_to_exclude\n    where hcc_top_level.hcc_code is null\n    and hcc_exclusions.hccs_to_exclude is null\n\n)\n\n/*\n    selecting hccs that have a hierarchy to be evaluated in the next cte\n*/\n, hccs_with_hierarchy as (\n\n    select\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n        , seed_hcc_hierarchy.hcc_code as top_level_hcc\n    from hcc_mapping\n         inner join seed_hcc_hierarchy\n           on hcc_mapping.hcc_code = seed_hcc_hierarchy.hccs_to_exclude\n\n)\n\n/*\n    applying hcc hierarchy and grouping by patient and hcc\n    to account for multiple hcc combinations\n    minimum HCC is included following CMS's severity logic\n*/\n, hierarchy_applied as (\n\n    select\n          hccs_with_hierarchy.patient_id\n        , hccs_with_hierarchy.model_version\n        , hccs_with_hierarchy.payment_year\n        , hccs_with_hierarchy.hcc_code\n        , min(hcc_mapping.hcc_code) as top_level_hcc\n    from hccs_with_hierarchy\n         left join hcc_mapping\n            on hcc_mapping.patient_id = hccs_with_hierarchy.patient_id\n            and hcc_mapping.hcc_code = hccs_with_hierarchy.top_level_hcc\n    group by\n          hccs_with_hierarchy.patient_id\n        , hccs_with_hierarchy.model_version\n        , hccs_with_hierarchy.payment_year\n        , hccs_with_hierarchy.hcc_code\n\n)\n\n/*\n    selecting lower-level hccs in hierarchy\n    all codes in this cte are included in final output\n*/\n, lower_level_inclusions as (\n\n    select distinct\n          patient_id\n        , model_version\n        , payment_year\n        , case\n            when top_level_hcc is not null then top_level_hcc\n            else hcc_code\n          end as hcc_code\n    from hierarchy_applied\n\n)\n\n/*\n    selecting top-level hccs not in previous steps\n    all codes in this cte are included in final output\n*/\n, top_level_inclusions as (\n\n    select distinct\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n    from hcc_mapping\n         inner join seed_hcc_hierarchy\n           on hcc_mapping.hcc_code = seed_hcc_hierarchy.hcc_code\n         left join lower_level_inclusions\n           on hcc_mapping.patient_id = lower_level_inclusions.patient_id\n           and hcc_mapping.hcc_code = lower_level_inclusions.hcc_code\n         left join hierarchy_applied\n            on hcc_mapping.patient_id = hierarchy_applied.patient_id\n           and hcc_mapping.hcc_code = hierarchy_applied.hcc_code\n    where lower_level_inclusions.hcc_code is null\n    and hierarchy_applied.top_level_hcc is null\n\n)\n\n, unioned as (\n\n    select * from hccs_without_hierarchy\n    union all\n    select * from lower_level_inclusions\n    union all\n    select * from top_level_inclusions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n        , cast(hcc_code as {{ dbt.type_string() }}) as hcc_code\n    from unioned\n\n)\n\nselect\n      patient_id\n    , model_version\n    , payment_year\n    , hcc_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_hcc_mapping", "package": null, "version": null}, {"name": "cms_hcc__disease_hierarchy", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.cms_hcc__int_hcc_mapping", "seed.the_tuva_project.cms_hcc__disease_hierarchy"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_hcc_hierarchy.sql", "compiled": true, "compiled_code": "\n/*\n    Staging HCCs that will be used in disease factor calculations.\n    Final output includes:\n        - hccs without a hierarchy\n        - lower-level hccs with hierarchy where top-level hcc is missing\n        - top-level hccs from hierarchy\n\n    The hcc_model_version var has been set here so it gets compiled.\n*/\n\nwith hcc_mapping as (\n\n    select distinct\n          patient_id\n        , hcc_code\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_hcc_mapping\n\n)\n\n, seed_hcc_hierarchy as (\n\n    select\n          model_version\n        , hcc_code\n        , description\n        , hccs_to_exclude\n    from tuva_project_demo.cms_hcc._value_set_disease_hierarchy\n    where model_version = 'CMS-HCC-V24'\n\n)\n\n/*\n    selecting hccs that do not have a hierarchy\n    all codes in this cte are included in final output\n*/\n, hccs_without_hierarchy as (\n\n    select distinct\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n    from hcc_mapping\n         left join seed_hcc_hierarchy as hcc_top_level\n           on hcc_mapping.hcc_code = hcc_top_level.hcc_code\n         left join seed_hcc_hierarchy as hcc_exclusions\n           on hcc_mapping.hcc_code = hcc_exclusions.hccs_to_exclude\n    where hcc_top_level.hcc_code is null\n    and hcc_exclusions.hccs_to_exclude is null\n\n)\n\n/*\n    selecting hccs that have a hierarchy to be evaluated in the next cte\n*/\n, hccs_with_hierarchy as (\n\n    select\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n        , seed_hcc_hierarchy.hcc_code as top_level_hcc\n    from hcc_mapping\n         inner join seed_hcc_hierarchy\n           on hcc_mapping.hcc_code = seed_hcc_hierarchy.hccs_to_exclude\n\n)\n\n/*\n    applying hcc hierarchy and grouping by patient and hcc\n    to account for multiple hcc combinations\n    minimum HCC is included following CMS's severity logic\n*/\n, hierarchy_applied as (\n\n    select\n          hccs_with_hierarchy.patient_id\n        , hccs_with_hierarchy.model_version\n        , hccs_with_hierarchy.payment_year\n        , hccs_with_hierarchy.hcc_code\n        , min(hcc_mapping.hcc_code) as top_level_hcc\n    from hccs_with_hierarchy\n         left join hcc_mapping\n            on hcc_mapping.patient_id = hccs_with_hierarchy.patient_id\n            and hcc_mapping.hcc_code = hccs_with_hierarchy.top_level_hcc\n    group by\n          hccs_with_hierarchy.patient_id\n        , hccs_with_hierarchy.model_version\n        , hccs_with_hierarchy.payment_year\n        , hccs_with_hierarchy.hcc_code\n\n)\n\n/*\n    selecting lower-level hccs in hierarchy\n    all codes in this cte are included in final output\n*/\n, lower_level_inclusions as (\n\n    select distinct\n          patient_id\n        , model_version\n        , payment_year\n        , case\n            when top_level_hcc is not null then top_level_hcc\n            else hcc_code\n          end as hcc_code\n    from hierarchy_applied\n\n)\n\n/*\n    selecting top-level hccs not in previous steps\n    all codes in this cte are included in final output\n*/\n, top_level_inclusions as (\n\n    select distinct\n          hcc_mapping.patient_id\n        , hcc_mapping.model_version\n        , hcc_mapping.payment_year\n        , hcc_mapping.hcc_code\n    from hcc_mapping\n         inner join seed_hcc_hierarchy\n           on hcc_mapping.hcc_code = seed_hcc_hierarchy.hcc_code\n         left join lower_level_inclusions\n           on hcc_mapping.patient_id = lower_level_inclusions.patient_id\n           and hcc_mapping.hcc_code = lower_level_inclusions.hcc_code\n         left join hierarchy_applied\n            on hcc_mapping.patient_id = hierarchy_applied.patient_id\n           and hcc_mapping.hcc_code = hierarchy_applied.hcc_code\n    where lower_level_inclusions.hcc_code is null\n    and hierarchy_applied.top_level_hcc is null\n\n)\n\n, unioned as (\n\n    select * from hccs_without_hierarchy\n    union all\n    select * from lower_level_inclusions\n    union all\n    select * from top_level_inclusions\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n        , cast(hcc_code as TEXT) as hcc_code\n    from unioned\n\n)\n\nselect\n      patient_id\n    , model_version\n    , payment_year\n    , hcc_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_hcc_mapping": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_hcc_mapping", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_hcc_mapping.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_hcc_mapping.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_mapping", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_hcc_mapping"], "alias": "_int_hcc_mapping", "checksum": {"name": "sha256", "checksum": "2b8fd3acbfac51227f62775148a39ca809467f8aaa1d62328b7d1e97f7efc872"}, "config": {"enabled": true, "alias": "_int_hcc_mapping", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Eligible conditions mapped to HCC codes for the corresponding HCC model  version and payment year\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_code": {"name": "condition_code", "description": "Condition code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcc_code": {"name": "hcc_code", "description": "HCC code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_hcc_mapping", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.711592, "relation_name": "tuva_project_demo.cms_hcc._int_hcc_mapping", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nSteps for staging the medical claim data:\n    1) Filter to risk-adjustable claims per claim type for the collection year.\n    2) Gather diagnosis codes from Condition for the eligible claims.\n    3) Map and filter diagnosis codes to HCCs\n\nJinja is used to set payment and collection year variables.\n - The hcc_model_version and payment_year vars have been set here\n   so they get compiled.\n - The collection year is one year prior to the payment year.\n*/\n\n{% set model_version_compiled = var('cms_hcc_model_version') -%}\n{% set payment_year_compiled = var('cms_hcc_payment_year') -%}\n\nwith conditions as (\n\n    select\n          patient_id\n        , condition_code\n        , model_version\n        , payment_year\n    from {{ ref('cms_hcc__int_eligible_conditions') }}\n\n)\n\n/*\n    Using jinja to choose the correct column based on hcc_model_version var.\n*/\n, seed_hcc_mapping as (\n\n    select\n          diagnosis_code\n        , cms_hcc_v24 as hcc_code /* will be replaced with logic to use correct col based on version var */\n    from {{ ref('cms_hcc__icd_10_cm_mappings') }}\n    where payment_year = {{ payment_year_compiled }}\n    and cms_hcc_v24_flag = 'Yes' /* will be replaced with logic to use correct col based on version var */\n\n)\n\n, mapped as (\n\n    select distinct\n          conditions.patient_id\n        , conditions.condition_code\n        , conditions.model_version\n        , conditions.payment_year\n        , seed_hcc_mapping.hcc_code\n    from conditions\n         inner join seed_hcc_mapping\n         on conditions.condition_code = seed_hcc_mapping.diagnosis_code\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(condition_code as {{ dbt.type_string() }}) as condition_code\n        , cast(hcc_code as {{ dbt.type_string() }}) as hcc_code\n        , cast(model_version as {{ dbt.type_string() }}) as model_version\n        , cast(payment_year as integer) as payment_year\n    from mapped\n\n)\n\nselect\n      patient_id\n    , condition_code\n    , hcc_code\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__int_eligible_conditions", "package": null, "version": null}, {"name": "cms_hcc__icd_10_cm_mappings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.cms_hcc__int_eligible_conditions", "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_hcc_mapping.sql", "compiled": true, "compiled_code": "\n/*\nSteps for staging the medical claim data:\n    1) Filter to risk-adjustable claims per claim type for the collection year.\n    2) Gather diagnosis codes from Condition for the eligible claims.\n    3) Map and filter diagnosis codes to HCCs\n\nJinja is used to set payment and collection year variables.\n - The hcc_model_version and payment_year vars have been set here\n   so they get compiled.\n - The collection year is one year prior to the payment year.\n*/\n\nwith conditions as (\n\n    select\n          patient_id\n        , condition_code\n        , model_version\n        , payment_year\n    from tuva_project_demo.cms_hcc._int_eligible_conditions\n\n)\n\n/*\n    Using jinja to choose the correct column based on hcc_model_version var.\n*/\n, seed_hcc_mapping as (\n\n    select\n          diagnosis_code\n        , cms_hcc_v24 as hcc_code /* will be replaced with logic to use correct col based on version var */\n    from tuva_project_demo.cms_hcc._value_set_icd_10_cm_mappings\n    where payment_year = 2019\n    and cms_hcc_v24_flag = 'Yes' /* will be replaced with logic to use correct col based on version var */\n\n)\n\n, mapped as (\n\n    select distinct\n          conditions.patient_id\n        , conditions.condition_code\n        , conditions.model_version\n        , conditions.payment_year\n        , seed_hcc_mapping.hcc_code\n    from conditions\n         inner join seed_hcc_mapping\n         on conditions.condition_code = seed_hcc_mapping.diagnosis_code\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(condition_code as TEXT) as condition_code\n        , cast(hcc_code as TEXT) as hcc_code\n        , cast(model_version as TEXT) as model_version\n        , cast(payment_year as integer) as payment_year\n    from mapped\n\n)\n\nselect\n      patient_id\n    , condition_code\n    , hcc_code\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__int_members": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__int_members", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/intermediate/cms_hcc__int_members.sql", "original_file_path": "models/cms_hcc/intermediate/cms_hcc__int_members.sql", "unique_id": "model.the_tuva_project.cms_hcc__int_members", "fqn": ["the_tuva_project", "cms_hcc", "intermediate", "cms_hcc__int_members"], "alias": "_int_members", "checksum": {"name": "sha256", "checksum": "59eda8c59d3c83e9d022ab049fec3b6c9ffb940b85bfa4724e4daa86886010c3"}, "config": {"enabled": true, "alias": "_int_members", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Transformed eligibility data into the demographic risk segments required  for the CMS HCC and risk calculations.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_status": {"name": "enrollment_status", "description": "Indicates whether the patient is a \"Continuing\" or \"New\" enrollee.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Indicates whether the patient is \"Female\" or \"Male\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "age_group": {"name": "age_group", "description": "Indicates what age group the patient is in. (e.g. \"60-64\"). CMS guidance: Age is calculated as of Feb 1 of the payment year.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medicaid_status": {"name": "medicaid_status", "description": "Indicates whether the patient is enrolled in Medicaid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dual_status": {"name": "dual_status", "description": "Indicates whether the patient has \"Full\", \"Partial\", or \"Non\"  dual status.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orec": {"name": "orec", "description": "Indicates the Original Reason for Entitlement Code (OREC)  \"Aged\", \"Disabled\", or \"ESRD\". If available, current Medicare Status  is used when OREC is missing.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "institutional_status": {"name": "institutional_status", "description": "Indicates whether the patient resided in an institution for at  least 90 days.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_status_default": {"name": "enrollment_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medicaid_dual_status_default": {"name": "medicaid_dual_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "orec_default": {"name": "orec_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "institutional_status_default": {"name": "institutional_status_default", "description": "Indicates the input data was missing and a default status was used.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_version": {"name": "model_version", "description": "CMS HCC model version.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_year": {"name": "payment_year", "description": "The payment year the HCC and risk scores are being calculated for.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date the model was run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_int_members", "tags": "cms_hcc", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.7159839, "relation_name": "tuva_project_demo.cms_hcc._int_members", "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\nSteps for transforming eligibility data into member demographics:\n    1) Determine enrollment status using eligibility from the collection year.\n    2) Roll up to latest eligibility record.\n    3) Add age groups based on the payment year.\n    4) Determine other statuses.\n\nJinja is used to set payment and collection year variables.\n - The hcc_model_version and payment_year vars have been set here\n   so they get compiled.\n - CMS guidance: Age is calculated as of Feb 1 of the payment year.\n - The collection year is one year prior to the payment year.\n*/\n\n{% set model_version = var('cms_hcc_model_version') -%}\n{% set payment_year = var('cms_hcc_payment_year') -%}\n{% set payment_year_age_date = payment_year ~ '-02-01' -%}\n{% set collection_year = payment_year - 1 -%}\n{% set collection_year_start = collection_year ~ '-01-01' -%}\n{% set collection_year_end = collection_year ~ '-12-31' -%}\n\nwith stg_eligibility as (\n\n    select\n          patient_id\n        , enrollment_start_date\n        , enrollment_end_date\n        , original_reason_entitlement_code\n        , dual_status_code\n        , medicare_status_code\n        , row_number() over(\n            partition by patient_id\n            order by enrollment_end_date desc\n        ) as row_num /* used to dedupe eligibility */\n    from {{ ref('cms_hcc__stg_core__eligibility') }}\n    where\n    /* filter to members with eligibility in collection or payment year */\n    (extract(year from enrollment_start_date) >= {{ collection_year }}\n     or extract(year from enrollment_end_date) <= {{ payment_year }})\n\n)\n\n, stg_patient as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        , floor({{ datediff('birth_date', \"'\"~payment_year_age_date~\"'\", 'hour') }} / 8766.0) as payment_year_age\n        , death_date\n    from {{ ref('cms_hcc__stg_core__patient') }}\n\n)\n\n, cap_collection_start_end_dates as (\n\n    select\n          patient_id\n        , enrollment_start_date\n        , enrollment_end_date\n        , case\n            when enrollment_start_date < '{{ collection_year_start }}'\n            then '{{ collection_year_start }}'\n            else enrollment_start_date\n          end as proxy_enrollment_start_date\n        , case\n            when enrollment_end_date > '{{ collection_year_end }}'\n            then '{{ collection_year_end }}'\n            else enrollment_end_date\n          end as proxy_enrollment_end_date\n    from stg_eligibility\n    where\n    /* filter to members with eligibility in collection year */\n    (extract(year from enrollment_start_date) = {{ collection_year }}\n     or extract(year from enrollment_end_date) = {{ collection_year }})\n\n)\n\n, calculate_prior_coverage as (\n\n    select patient_id\n        , sum({{ datediff('proxy_enrollment_start_date', 'proxy_enrollment_end_date', 'month') }} + 1) as coverage_months  /* include starting month */\n    from cap_collection_start_end_dates\n    group by patient_id\n\n)\n\n/*\n   CMS guidance: A \u201cNew Enrollee\u201d status is when a beneficiary has less than\n   12 months of coverage prior to the payment year.\n*/\n, add_enrollment as (\n\n    select\n          patient_id\n        , case\n            when coverage_months < 12 then 'New'\n            else 'Continuing'\n          end as enrollment_status\n    from calculate_prior_coverage\n\n)\n\n, latest_eligibility as (\n\n    select\n          stg_eligibility.patient_id\n        , stg_patient.sex as gender\n        , stg_patient.payment_year_age\n        , stg_eligibility.original_reason_entitlement_code\n        , stg_eligibility.dual_status_code\n        , stg_eligibility.medicare_status_code\n        /*\n           Defaulting to \"New\" enrollment status when missing.\n        */\n        , case\n            when add_enrollment.enrollment_status is null then 'New'\n            else add_enrollment.enrollment_status\n          end as enrollment_status\n        , case\n            when add_enrollment.enrollment_status is null then TRUE\n            else FALSE\n          end as enrollment_status_default\n    from stg_eligibility\n         left join add_enrollment\n            on stg_eligibility.patient_id = add_enrollment.patient_id\n         left join stg_patient\n            on stg_eligibility.patient_id = stg_patient.patient_id\n    where stg_eligibility.row_num = 1\n      /* filter to members with eligibility in payment year */\n      and extract(year from stg_eligibility.enrollment_start_date) <= {{ payment_year }}\n      and extract(year from stg_eligibility.enrollment_end_date) >= {{ payment_year }}\n\n)\n\n, add_age_group as (\n\n    select\n          patient_id\n        , gender\n        , payment_year_age\n        , original_reason_entitlement_code\n        , dual_status_code\n        , medicare_status_code\n        , enrollment_status\n        , enrollment_status_default\n        , case\n            when enrollment_status = 'Continuing' and payment_year_age between 0 and 34 then '0-34'\n            when enrollment_status = 'Continuing' and payment_year_age between 35 and 44 then '35-44'\n            when enrollment_status = 'Continuing' and payment_year_age between 45 and 54 then '45-54'\n            when enrollment_status = 'Continuing' and payment_year_age between 55 and 59 then '55-59'\n            when enrollment_status = 'Continuing' and payment_year_age between 60 and 64 then '60-64'\n            when enrollment_status = 'Continuing' and payment_year_age between 65 and 69 then '65-69'\n            when enrollment_status = 'Continuing' and payment_year_age between 70 and 74 then '70-74'\n            when enrollment_status = 'Continuing' and payment_year_age between 75 and 79 then '75-79'\n            when enrollment_status = 'Continuing' and payment_year_age between 80 and 84 then '80-84'\n            when enrollment_status = 'Continuing' and payment_year_age between 85 and 89 then '85-89'\n            when enrollment_status = 'Continuing' and payment_year_age between 90 and 94 then '90-94'\n            when enrollment_status = 'Continuing' and payment_year_age >= 95 then '>=95'\n            when enrollment_status = 'New' and payment_year_age between 0 and 34 then '0-34'\n            when enrollment_status = 'New' and payment_year_age between 35 and 44 then '35-44'\n            when enrollment_status = 'New' and payment_year_age between 45 and 54 then '45-54'\n            when enrollment_status = 'New' and payment_year_age between 55 and 59 then '55-59'\n            when enrollment_status = 'New' and payment_year_age between 60 and 64 then '60-64'\n            when enrollment_status = 'New' and payment_year_age = 65 then '65'\n            when enrollment_status = 'New' and payment_year_age = 66 then '66'\n            when enrollment_status = 'New' and payment_year_age = 67 then '67'\n            when enrollment_status = 'New' and payment_year_age = 68 then '68'\n            when enrollment_status = 'New' and payment_year_age = 69 then '69'\n            when enrollment_status = 'New' and payment_year_age between 70 and 74 then '70-74'\n            when enrollment_status = 'New' and payment_year_age between 75 and 79 then '75-79'\n            when enrollment_status = 'New' and payment_year_age between 80 and 84 then '80-84'\n            when enrollment_status = 'New' and payment_year_age between 85 and 89 then '85-89'\n            when enrollment_status = 'New' and payment_year_age between 90 and 94 then '90-94'\n            when enrollment_status = 'New' and payment_year_age >= 95 then '>=95'\n          end as age_group\n    from latest_eligibility\n\n)\n\n, add_status_logic as (\n\n    select\n          patient_id\n        , enrollment_status\n        , case\n            when gender = 'female' then 'Female'\n            when gender = 'male' then 'Male'\n            else null\n          end as gender\n        , age_group\n        , case\n            when dual_status_code in ('01','02','03','04','05','06','08') then 'Yes'\n            else 'No'\n          end as medicaid_status\n        , case\n            when dual_status_code in ('02','04','08') then 'Full'\n            when dual_status_code in ('01','03','05','06') then 'Partial'\n            else 'Non'\n          end as dual_status\n        /*\n           The CMS-HCC model does not have factors for ESRD for these edge-cases,\n           we default to 'Aged'. When OREC is missing, latest Medicare status is\n           used, if available.\n        */\n        , case\n            when original_reason_entitlement_code in ('0','2') then 'Aged'\n            when original_reason_entitlement_code in ('1','3') then 'Disabled'\n            when original_reason_entitlement_code is null and medicare_status_code in ('10','11','31') then 'Aged'\n            when original_reason_entitlement_code is null and medicare_status_code in ('20','21') then 'Disabled'\n            when coalesce(original_reason_entitlement_code,medicare_status_code) is null then 'Aged'\n          end as orec\n        /*\n           Defaulting everyone to non-institutional until logic is added\n        */\n        , cast('No' as {{ dbt.type_string() }}) as institutional_status\n        , enrollment_status_default\n        , case\n            when dual_status_code is null then TRUE\n            else FALSE\n          end as medicaid_dual_status_default\n        /*\n           Setting default true when OREC or Medicare Status is ESRD, or null.\n        */\n        , case\n            when original_reason_entitlement_code in ('2') then TRUE\n            when original_reason_entitlement_code is null and medicare_status_code in ('31') then TRUE\n            when coalesce(original_reason_entitlement_code,medicare_status_code) is null then TRUE\n            else FALSE\n          end as orec_default\n        /*\n           Setting default true until institutional logic is added\n        */\n        , TRUE as institutional_status_default\n    from add_age_group\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(enrollment_status as {{ dbt.type_string() }}) as enrollment_status\n        , cast(gender as {{ dbt.type_string() }}) as gender\n        , cast(age_group as {{ dbt.type_string() }}) as age_group\n        , cast(medicaid_status as {{ dbt.type_string() }}) as medicaid_status\n        , cast(dual_status as {{ dbt.type_string() }}) as dual_status\n        , cast(orec as {{ dbt.type_string() }}) as orec\n        , cast(institutional_status as {{ dbt.type_string() }}) as institutional_status\n        , cast(enrollment_status_default as boolean) as enrollment_status_default\n        , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n        , cast(orec_default as boolean) as orec_default\n        , cast(institutional_status_default as boolean) as institutional_status_default\n        , cast('{{ model_version }}' as {{ dbt.type_string() }}) as model_version\n        , cast('{{ payment_year }}' as integer) as payment_year\n    from add_status_logic\n\n)\n\nselect\n      patient_id\n    , enrollment_status\n    , gender\n    , age_group\n    , medicaid_status\n    , dual_status\n    , orec\n    , institutional_status\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , model_version\n    , payment_year\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "cms_hcc__stg_core__eligibility", "package": null, "version": null}, {"name": "cms_hcc__stg_core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.type_string"], "nodes": ["model.the_tuva_project.cms_hcc__stg_core__eligibility", "model.the_tuva_project.cms_hcc__stg_core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/intermediate/cms_hcc__int_members.sql", "compiled": true, "compiled_code": "\n/*\nSteps for transforming eligibility data into member demographics:\n    1) Determine enrollment status using eligibility from the collection year.\n    2) Roll up to latest eligibility record.\n    3) Add age groups based on the payment year.\n    4) Determine other statuses.\n\nJinja is used to set payment and collection year variables.\n - The hcc_model_version and payment_year vars have been set here\n   so they get compiled.\n - CMS guidance: Age is calculated as of Feb 1 of the payment year.\n - The collection year is one year prior to the payment year.\n*/\n\nwith  __dbt__cte__cms_hcc__stg_core__eligibility as (\n\nselect\n      patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.eligibility\n),  __dbt__cte__cms_hcc__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n), stg_eligibility as (\n\n    select\n          patient_id\n        , enrollment_start_date\n        , enrollment_end_date\n        , original_reason_entitlement_code\n        , dual_status_code\n        , medicare_status_code\n        , row_number() over(\n            partition by patient_id\n            order by enrollment_end_date desc\n        ) as row_num /* used to dedupe eligibility */\n    from __dbt__cte__cms_hcc__stg_core__eligibility\n    where\n    /* filter to members with eligibility in collection or payment year */\n    (extract(year from enrollment_start_date) >= 2018\n     or extract(year from enrollment_end_date) <= 2019)\n\n)\n\n, stg_patient as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        '2019-02-01'\n        ) / 8766.0) as payment_year_age\n        , death_date\n    from __dbt__cte__cms_hcc__stg_core__patient\n\n)\n\n, cap_collection_start_end_dates as (\n\n    select\n          patient_id\n        , enrollment_start_date\n        , enrollment_end_date\n        , case\n            when enrollment_start_date < '2018-01-01'\n            then '2018-01-01'\n            else enrollment_start_date\n          end as proxy_enrollment_start_date\n        , case\n            when enrollment_end_date > '2018-12-31'\n            then '2018-12-31'\n            else enrollment_end_date\n          end as proxy_enrollment_end_date\n    from stg_eligibility\n    where\n    /* filter to members with eligibility in collection year */\n    (extract(year from enrollment_start_date) = 2018\n     or extract(year from enrollment_end_date) = 2018)\n\n)\n\n, calculate_prior_coverage as (\n\n    select patient_id\n        , sum(datediff(\n        month,\n        proxy_enrollment_start_date,\n        proxy_enrollment_end_date\n        ) + 1) as coverage_months  /* include starting month */\n    from cap_collection_start_end_dates\n    group by patient_id\n\n)\n\n/*\n   CMS guidance: A \u201cNew Enrollee\u201d status is when a beneficiary has less than\n   12 months of coverage prior to the payment year.\n*/\n, add_enrollment as (\n\n    select\n          patient_id\n        , case\n            when coverage_months < 12 then 'New'\n            else 'Continuing'\n          end as enrollment_status\n    from calculate_prior_coverage\n\n)\n\n, latest_eligibility as (\n\n    select\n          stg_eligibility.patient_id\n        , stg_patient.sex as gender\n        , stg_patient.payment_year_age\n        , stg_eligibility.original_reason_entitlement_code\n        , stg_eligibility.dual_status_code\n        , stg_eligibility.medicare_status_code\n        /*\n           Defaulting to \"New\" enrollment status when missing.\n        */\n        , case\n            when add_enrollment.enrollment_status is null then 'New'\n            else add_enrollment.enrollment_status\n          end as enrollment_status\n        , case\n            when add_enrollment.enrollment_status is null then TRUE\n            else FALSE\n          end as enrollment_status_default\n    from stg_eligibility\n         left join add_enrollment\n            on stg_eligibility.patient_id = add_enrollment.patient_id\n         left join stg_patient\n            on stg_eligibility.patient_id = stg_patient.patient_id\n    where stg_eligibility.row_num = 1\n      /* filter to members with eligibility in payment year */\n      and extract(year from stg_eligibility.enrollment_start_date) <= 2019\n      and extract(year from stg_eligibility.enrollment_end_date) >= 2019\n\n)\n\n, add_age_group as (\n\n    select\n          patient_id\n        , gender\n        , payment_year_age\n        , original_reason_entitlement_code\n        , dual_status_code\n        , medicare_status_code\n        , enrollment_status\n        , enrollment_status_default\n        , case\n            when enrollment_status = 'Continuing' and payment_year_age between 0 and 34 then '0-34'\n            when enrollment_status = 'Continuing' and payment_year_age between 35 and 44 then '35-44'\n            when enrollment_status = 'Continuing' and payment_year_age between 45 and 54 then '45-54'\n            when enrollment_status = 'Continuing' and payment_year_age between 55 and 59 then '55-59'\n            when enrollment_status = 'Continuing' and payment_year_age between 60 and 64 then '60-64'\n            when enrollment_status = 'Continuing' and payment_year_age between 65 and 69 then '65-69'\n            when enrollment_status = 'Continuing' and payment_year_age between 70 and 74 then '70-74'\n            when enrollment_status = 'Continuing' and payment_year_age between 75 and 79 then '75-79'\n            when enrollment_status = 'Continuing' and payment_year_age between 80 and 84 then '80-84'\n            when enrollment_status = 'Continuing' and payment_year_age between 85 and 89 then '85-89'\n            when enrollment_status = 'Continuing' and payment_year_age between 90 and 94 then '90-94'\n            when enrollment_status = 'Continuing' and payment_year_age >= 95 then '>=95'\n            when enrollment_status = 'New' and payment_year_age between 0 and 34 then '0-34'\n            when enrollment_status = 'New' and payment_year_age between 35 and 44 then '35-44'\n            when enrollment_status = 'New' and payment_year_age between 45 and 54 then '45-54'\n            when enrollment_status = 'New' and payment_year_age between 55 and 59 then '55-59'\n            when enrollment_status = 'New' and payment_year_age between 60 and 64 then '60-64'\n            when enrollment_status = 'New' and payment_year_age = 65 then '65'\n            when enrollment_status = 'New' and payment_year_age = 66 then '66'\n            when enrollment_status = 'New' and payment_year_age = 67 then '67'\n            when enrollment_status = 'New' and payment_year_age = 68 then '68'\n            when enrollment_status = 'New' and payment_year_age = 69 then '69'\n            when enrollment_status = 'New' and payment_year_age between 70 and 74 then '70-74'\n            when enrollment_status = 'New' and payment_year_age between 75 and 79 then '75-79'\n            when enrollment_status = 'New' and payment_year_age between 80 and 84 then '80-84'\n            when enrollment_status = 'New' and payment_year_age between 85 and 89 then '85-89'\n            when enrollment_status = 'New' and payment_year_age between 90 and 94 then '90-94'\n            when enrollment_status = 'New' and payment_year_age >= 95 then '>=95'\n          end as age_group\n    from latest_eligibility\n\n)\n\n, add_status_logic as (\n\n    select\n          patient_id\n        , enrollment_status\n        , case\n            when gender = 'female' then 'Female'\n            when gender = 'male' then 'Male'\n            else null\n          end as gender\n        , age_group\n        , case\n            when dual_status_code in ('01','02','03','04','05','06','08') then 'Yes'\n            else 'No'\n          end as medicaid_status\n        , case\n            when dual_status_code in ('02','04','08') then 'Full'\n            when dual_status_code in ('01','03','05','06') then 'Partial'\n            else 'Non'\n          end as dual_status\n        /*\n           The CMS-HCC model does not have factors for ESRD for these edge-cases,\n           we default to 'Aged'. When OREC is missing, latest Medicare status is\n           used, if available.\n        */\n        , case\n            when original_reason_entitlement_code in ('0','2') then 'Aged'\n            when original_reason_entitlement_code in ('1','3') then 'Disabled'\n            when original_reason_entitlement_code is null and medicare_status_code in ('10','11','31') then 'Aged'\n            when original_reason_entitlement_code is null and medicare_status_code in ('20','21') then 'Disabled'\n            when coalesce(original_reason_entitlement_code,medicare_status_code) is null then 'Aged'\n          end as orec\n        /*\n           Defaulting everyone to non-institutional until logic is added\n        */\n        , cast('No' as TEXT) as institutional_status\n        , enrollment_status_default\n        , case\n            when dual_status_code is null then TRUE\n            else FALSE\n          end as medicaid_dual_status_default\n        /*\n           Setting default true when OREC or Medicare Status is ESRD, or null.\n        */\n        , case\n            when original_reason_entitlement_code in ('2') then TRUE\n            when original_reason_entitlement_code is null and medicare_status_code in ('31') then TRUE\n            when coalesce(original_reason_entitlement_code,medicare_status_code) is null then TRUE\n            else FALSE\n          end as orec_default\n        /*\n           Setting default true until institutional logic is added\n        */\n        , TRUE as institutional_status_default\n    from add_age_group\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(enrollment_status as TEXT) as enrollment_status\n        , cast(gender as TEXT) as gender\n        , cast(age_group as TEXT) as age_group\n        , cast(medicaid_status as TEXT) as medicaid_status\n        , cast(dual_status as TEXT) as dual_status\n        , cast(orec as TEXT) as orec\n        , cast(institutional_status as TEXT) as institutional_status\n        , cast(enrollment_status_default as boolean) as enrollment_status_default\n        , cast(medicaid_dual_status_default as boolean) as medicaid_dual_status_default\n        , cast(orec_default as boolean) as orec_default\n        , cast(institutional_status_default as boolean) as institutional_status_default\n        , cast('CMS-HCC-V24' as TEXT) as model_version\n        , cast('2019' as integer) as payment_year\n    from add_status_logic\n\n)\n\nselect\n      patient_id\n    , enrollment_status\n    , gender\n    , age_group\n    , medicaid_status\n    , dual_status\n    , orec\n    , institutional_status\n    , enrollment_status_default\n    , medicaid_dual_status_default\n    , orec_default\n    , institutional_status_default\n    , model_version\n    , payment_year\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.cms_hcc__stg_core__eligibility", "sql": " __dbt__cte__cms_hcc__stg_core__eligibility as (\n\nselect\n      patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.eligibility\n)"}, {"id": "model.the_tuva_project.cms_hcc__stg_core__patient", "sql": " __dbt__cte__cms_hcc__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__stg_core__condition": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__stg_core__condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/staging/cms_hcc__stg_core__condition.sql", "original_file_path": "models/cms_hcc/staging/cms_hcc__stg_core__condition.sql", "unique_id": "model.the_tuva_project.cms_hcc__stg_core__condition", "fqn": ["the_tuva_project", "cms_hcc", "staging", "cms_hcc__stg_core__condition"], "alias": "_stg_condition", "checksum": {"name": "sha256", "checksum": "c98db96a6175d161b62ffc89de15c2ab5081d89da22a120c026c15ce99b7f5b0"}, "config": {"enabled": true, "alias": "_stg_condition", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Staging conditions from core.", "columns": {"claim_id": {"name": "claim_id", "description": "Unique claim_id for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recorded_date": {"name": "recorded_date", "description": "Date in which the condition was recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_type": {"name": "condition_type", "description": "The type of condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code_type": {"name": "code_type", "description": "The type of condition code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "The condition code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_stg_condition", "tags": "cms_hcc", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.719534, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , normalized_code_type as code_type\n    , normalized_code as code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__condition') }}", "language": "sql", "refs": [{"name": "core__condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/staging/cms_hcc__stg_core__condition.sql", "compiled": true, "compiled_code": "\nselect\n      claim_id\n    , patient_id\n    , recorded_date\n    , condition_type\n    , normalized_code_type as code_type\n    , normalized_code as code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__stg_core__eligibility": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__stg_core__eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/staging/cms_hcc__stg_core__eligibility.sql", "original_file_path": "models/cms_hcc/staging/cms_hcc__stg_core__eligibility.sql", "unique_id": "model.the_tuva_project.cms_hcc__stg_core__eligibility", "fqn": ["the_tuva_project", "cms_hcc", "staging", "cms_hcc__stg_core__eligibility"], "alias": "_stg_eligibility", "checksum": {"name": "sha256", "checksum": "b9477f45b603026a03efcbf99a649bc6c6efed51def11e7394ced446affafc0a"}, "config": {"enabled": true, "alias": "_stg_eligibility", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Staging eligibility from core.", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_start_date": {"name": "enrollment_start_date", "description": "Date the patient's insurance eligibility began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_end_date": {"name": "enrollment_end_date", "description": "Date the patient's insurance eligibility ended.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dual_status_code": {"name": "dual_status_code", "description": "Indicates whether the patient is dually eligible for Medicare  and Medicaid.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medicare_status_code": {"name": "medicare_status_code", "description": "Indicates how the patient became eligible for Medicare.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_stg_eligibility", "tags": "cms_hcc", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.7252436, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\nselect\n      patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__eligibility') }}", "language": "sql", "refs": [{"name": "core__eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/staging/cms_hcc__stg_core__eligibility.sql", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , enrollment_start_date\n    , enrollment_end_date\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.eligibility", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__stg_core__medical_claim": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__stg_core__medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/staging/cms_hcc__stg_core__medical_claim.sql", "original_file_path": "models/cms_hcc/staging/cms_hcc__stg_core__medical_claim.sql", "unique_id": "model.the_tuva_project.cms_hcc__stg_core__medical_claim", "fqn": ["the_tuva_project", "cms_hcc", "staging", "cms_hcc__stg_core__medical_claim"], "alias": "_stg_medical_claim", "checksum": {"name": "sha256", "checksum": "ac9505314ff81401a8769ba8ca69e5b557247ffdf67064119e1761431e14ccec"}, "config": {"enabled": true, "alias": "_stg_medical_claim", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Staging medical claims from core.", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500),  institutional (UB-04), dental, or vision.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_start_date": {"name": "claim_start_date", "description": "Start date for the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_end_date": {"name": "claim_end_date", "description": "End date for the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_type_code": {"name": "bill_type_code", "description": "Bill type code for the claim (institutional claims only).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_code": {"name": "hcpcs_code", "description": "HCPCS level 1 or level 2 code for the claim line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_stg_medical_claim", "tags": "cms_hcc", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.729441, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , claim_start_date\n    , claim_end_date\n    , bill_type_code\n    , hcpcs_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__medical_claim') }}", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/staging/cms_hcc__stg_core__medical_claim.sql", "compiled": true, "compiled_code": "\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , claim_start_date\n    , claim_end_date\n    , bill_type_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.cms_hcc__stg_core__patient": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__stg_core__patient", "resource_type": "model", "package_name": "the_tuva_project", "path": "cms_hcc/staging/cms_hcc__stg_core__patient.sql", "original_file_path": "models/cms_hcc/staging/cms_hcc__stg_core__patient.sql", "unique_id": "model.the_tuva_project.cms_hcc__stg_core__patient", "fqn": ["the_tuva_project", "cms_hcc", "staging", "cms_hcc__stg_core__patient"], "alias": "_stg_patient", "checksum": {"name": "sha256", "checksum": "e7856238a902887befd29ec7e3bac11a7b4f47acd1c1fdfddfd2c399f96b08a0"}, "config": {"enabled": true, "alias": "_stg_patient", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["cms_hcc"], "description": "Staging patient from core.", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sex": {"name": "sex", "description": "Biological sex of the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Date the patient was born.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "The death date of the patient if there is one.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/cms_hcc/cms_hcc_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_stg_patient", "tags": "cms_hcc", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.7340395, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('cms_hcc_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__patient') }}", "language": "sql", "refs": [{"name": "core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/staging/cms_hcc__stg_core__patient.sql", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__condition": {"database": "tuva_project_demo", "schema": "core", "name": "core__condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__condition.sql", "original_file_path": "models/core/final/core__condition.sql", "unique_id": "model.the_tuva_project.core__condition", "fqn": ["the_tuva_project", "core", "final", "core__condition"], "alias": "condition", "checksum": {"name": "sha256", "checksum": "6bf20ce96592d16fd9ab798870231dc2cb5fd32632e677db4eccf028738d1a4f"}, "config": {"enabled": true, "alias": "condition", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The core condition table contains information related to medical  conditions patients have, including problems, admitting diagnosis codes,  and billable diagnosis codes.\n", "columns": {"condition_id": {"name": "condition_id", "description": "Unique identifier for each condition in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique identifier for each encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recorded_date": {"name": "recorded_date", "description": "Date when the condition was recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "onset_date": {"name": "onset_date", "description": "Date when the condition first occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resolved_date": {"name": "resolved_date", "description": "Date when the condition was resolved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the condition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_type": {"name": "condition_type", "description": "The type of condition i.e. problem, admitting, or billing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "The type of condition code reported in the source system e.g.  ICD-10-CM.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "The condition code in the source system e.g. the ICD-10 code.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__icd_10_cm.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_description": {"name": "source_description", "description": "Description of the condition code in the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code_type": {"name": "normalized_code_type", "description": "The normalized type of condition code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "The normalized condition code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__icd_10_cm.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_description": {"name": "normalized_description", "description": "Normalized description of the condition code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_rank": {"name": "condition_rank", "description": "The numerical ranking of a diagnosis code in a claim.  Principle  diagnosis code is given a ranking of 1. Claims data typically has a  strict ranking of conditions whereas medical records will often not  have this information or the information won't be accurate.\n", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "present_on_admit_code": {"name": "present_on_admit_code", "description": "The present_on_admit_code related to the condition.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__present_on_admission.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "present_on_admit_description": {"name": "present_on_admit_description", "description": "The description of the present_on_admit_code for the condition.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "condition", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.7564006, "relation_name": "tuva_project_demo.core.condition", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_condition') }}\r\nunion all\r\nselect * from {{ ref('core__stg_clinical_condition') }}\r\n\r\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_clinical_condition') }}\r\n\r\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_condition') }}\r\n\r\n{%- endif %}", "language": "sql", "refs": [{"name": "core__stg_claims_condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__condition.sql", "compiled": true, "compiled_code": "\n\n\nselect * from tuva_project_demo.core._stg_claims_condition", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__eligibility": {"database": "tuva_project_demo", "schema": "core", "name": "core__eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__eligibility.sql", "original_file_path": "models/core/final/core__eligibility.sql", "unique_id": "model.the_tuva_project.core__eligibility", "fqn": ["the_tuva_project", "core", "final", "core__eligibility"], "alias": "eligibility", "checksum": {"name": "sha256", "checksum": "6c4444c95ace83c2f6bc4f2e9dfc69bef360c3b0a01bea5e67b3da4761485111"}, "config": {"enabled": true, "alias": "eligibility", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The eligibility table contains information on patient health plan and  supplemental insurance eligibility.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or  health plan. A patient can have more than one member_id because they  can have more than one insurance product/plan.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Date the patient was born.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "Date the patient died.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_start_date": {"name": "enrollment_start_date", "description": "Date the patient's insurance eligibility began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_end_date": {"name": "enrollment_end_date", "description": "Date the patient's insurance eligibility ended.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer (i.e. health insurer) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer_type": {"name": "payer_type", "description": "Type of payer (e.g. commercial, medicare, medicaid, etc.).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__payer_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan (i.e. sub contract) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_reason_entitlement_code": {"name": "original_reason_entitlement_code", "description": "Original reason for Medicare entitlement code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__medicare_orec.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dual_status_code": {"name": "dual_status_code", "description": "Indicates whether the patient is dually eligible for Medicare and  Medicaid.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__medicare_dual_eligibility.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medicare_status_code": {"name": "medicare_status_code", "description": "Indicates how the patient became eligible for Medicare.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__medicare_status.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "eligibility", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.762061, "relation_name": "tuva_project_demo.core.eligibility", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\r\n   )\r\n}}\r\n\r\n\r\nselect * from {{ ref('core__stg_claims_eligibility')}}", "language": "sql", "refs": [{"name": "core__stg_claims_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__eligibility.sql", "compiled": true, "compiled_code": "\n\n\nselect * from tuva_project_demo.core._stg_claims_eligibility", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__encounter": {"database": "tuva_project_demo", "schema": "core", "name": "core__encounter", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__encounter.sql", "original_file_path": "models/core/final/core__encounter.sql", "unique_id": "model.the_tuva_project.core__encounter", "fqn": ["the_tuva_project", "core", "final", "core__encounter"], "alias": "encounter", "checksum": {"name": "sha256", "checksum": "fdcb9a40f227bf4cdad6aec9e5697db02ee3e64eda31110e1a9c06a412f6185d"}, "config": {"enabled": true, "alias": "encounter", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The encounter table contains information about patients visits (i.e.  encounters).  This includes acute inpatient, emergency department, office  visits, SNF stays, etc.\n", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier for each encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for a patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_type": {"name": "encounter_type", "description": "Indicates the type of encounter e.g. acute inpatient, emergency  department, etc.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__encounter_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "Date when the encounter started.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "Date when the encounter ended.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "Length of the encounter calculated as encounter_end_date -  encounter_start_date.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "Admission source code for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__admit_source.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_source_description": {"name": "admit_source_description", "description": "Description of the admit_source_code for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "Admission type code for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__admit_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_type_description": {"name": "admit_type_description", "description": "Description of the admit_type_code for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "Discharge disposition code for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__discharge_disposition.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_description": {"name": "discharge_disposition_description", "description": "Description of the discharge_disposition_code for the encounter.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attending_provider_id": {"name": "attending_provider_id", "description": "attending provider for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "Facility NPI for the encounter (typically represents the facility  where services were performed).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_diagnosis_code_type": {"name": "primary_diagnosis_code_type", "description": "The type of condition code reported in the source system e.g.  ICD-10-CM.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_diagnosis_code": {"name": "primary_diagnosis_code", "description": "Primary diagnosis code for the encounter.  If from claims the primary  diagnosis code comes from the institutional claim.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__icd_10_cm.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_diagnosis_description": {"name": "primary_diagnosis_description", "description": "Description of the primary diagnosis code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "MS-DRG code for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__ms_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_description": {"name": "ms_drg_description", "description": "Description of the ms_drg_code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apr_drg_code": {"name": "apr_drg_code", "description": "APR-DRG code for the encounter.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__apr_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apr_drg_description": {"name": "apr_drg_description", "description": "Description of the APR-DRG code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "The total amount paid for the encounter by the insurer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "The total amount allowed (includes amount paid by the insurer and  patient) on the encounter.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The total amount charged on the encounter by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "encounter", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.769249, "relation_name": "tuva_project_demo.core.encounter", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n{% if var('clinical_enabled', false) == true and var('claims_enabled', false) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_encounter') }}\r\nunion all\r\nselect * from {{ ref('core__stg_clinical_encounter') }}\r\n\r\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_clinical_encounter') }}\r\n\r\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_encounter') }}\r\n\r\n{%- endif %}", "language": "sql", "refs": [{"name": "core__stg_claims_encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__encounter.sql", "compiled": true, "compiled_code": "\n\nselect * from tuva_project_demo.core._stg_claims_encounter", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__location": {"database": "tuva_project_demo", "schema": "core", "name": "core__location", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__location.sql", "original_file_path": "models/core/final/core__location.sql", "unique_id": "model.the_tuva_project.core__location", "fqn": ["the_tuva_project", "core", "final", "core__location"], "alias": "location", "checksum": {"name": "sha256", "checksum": "978a0da0c66bbea4fd6018afdebb6ca1dd8e3d47d0dcab69f1cc72d9356f52b9"}, "config": {"enabled": true, "alias": "location", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The location table contains information on practice and facility locations  where patients receive medical care.\n", "columns": {"location_id": {"name": "location_id", "description": "Unique identifier for each location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "npi": {"name": "npi", "description": "The national provider identifier associated with the location e.g.  facility_npi.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_type": {"name": "facility_type", "description": "The type of facility e.g. acute care hospital.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_organization": {"name": "parent_organization", "description": "The parent organization associated with the facility.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "The street address of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "The city of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The state of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "The zip code of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "The latitude of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "The longitude of the location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Custom description of the source system e.g. Epic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "location", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.7942727, "relation_name": "tuva_project_demo.core.location", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_location') }}\r\nunion all\r\nselect * from {{ ref('core__stg_clinical_location') }}\r\n\r\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_clinical_location') }}\r\n\r\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_location') }}\r\n\r\n{%- endif %}", "language": "sql", "refs": [{"name": "core__stg_claims_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_location"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__location.sql", "compiled": true, "compiled_code": "\n\nselect * from tuva_project_demo.core._stg_claims_location", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__medical_claim": {"database": "tuva_project_demo", "schema": "core", "name": "core__medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__medical_claim.sql", "original_file_path": "models/core/final/core__medical_claim.sql", "unique_id": "model.the_tuva_project.core__medical_claim", "fqn": ["the_tuva_project", "core", "final", "core__medical_claim"], "alias": "medical_claim", "checksum": {"name": "sha256", "checksum": "b126bbc3a07a5f93f701d0199e8fde6ef13a7fd9ac7ad71619de948a8d49fdc1"}, "config": {"enabled": true, "alias": "medical_claim", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The medical claim table contains information on services rendered to  patients and billed by the provider to the insurer as claims.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.\n", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional  (UB-04), dental, or vision.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__claim_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or  health plan. A patient can have more than one member_id because they  can have more than one insurance product/plan.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_start_date": {"name": "claim_start_date", "description": "Start date for the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_end_date": {"name": "claim_end_date", "description": "End date for the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_start_date": {"name": "claim_line_start_date", "description": "Start date for the claim line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_end_date": {"name": "claim_line_end_date", "description": "End date for the claim line.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admission_date": {"name": "admission_date", "description": "Admission date for the claim (inpatient claims only).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "Discharge date for the claim (inpatient claims only).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "Indicates where the patient was before the healthcare encounter  (inpatient claims only).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__admit_source.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "Indicates the type of admission (inpatient claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__admit_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "Indicates the type of setting the patient was discharged to  (institutional inpatient claims only).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__discharge_disposition.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "place_of_service_code": {"name": "place_of_service_code", "description": "Place of service for the claim (professional claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__place_of_service.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_type_code": {"name": "bill_type_code", "description": "Bill type code for the claim (institutional claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__bill_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "MS-DRG for the claim (inpatient claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__ms_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apr_drg_code": {"name": "apr_drg_code", "description": "APR-DRG for the claim (inpatient claims only).", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__apr_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "revenue_center_code": {"name": "revenue_center_code", "description": "Revenue center code for the claim line (institutional only and  typically multiple codes per claim).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__revenue_center.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_unit_quantity": {"name": "service_unit_quantity", "description": "The number of units for the particular revenue center code.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "hcpcs_code": {"name": "hcpcs_code", "description": "HCPCS level 1 or level 2 code for the claim line.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_1": {"name": "hcpcs_modifier_1", "description": "1st modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_2": {"name": "hcpcs_modifier_2", "description": "2nd modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_3": {"name": "hcpcs_modifier_3", "description": "3rd modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_4": {"name": "hcpcs_modifier_4", "description": "4th modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_modifier_5": {"name": "hcpcs_modifier_5", "description": "5th modifier for HCPCS code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rendering_npi": {"name": "rendering_npi", "description": "Rendering NPI for the claim (typically represents the physician or  entity providing services).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_npi": {"name": "billing_npi", "description": "Billing NPI for the claim (typically represents organization billing  the claim).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "Facility NPI for the claim (typically represents the facility where  services were performed).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "The date the claim was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "The total amount paid on the claim by the insurer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "The total amount allowed (includes amount paid by the insurer and  patient) on the claim.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The total amount charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coinsurance_amount": {"name": "coinsurance_amount", "description": "The total coinsurance charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "copayment_amount": {"name": "copayment_amount", "description": "The total copayment charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deductible_amount": {"name": "deductible_amount", "description": "The total amount charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_cost_amount": {"name": "total_cost_amount", "description": "The total amount paid on the claim by different parties.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_type": {"name": "encounter_type", "description": "The type of encounter this claim belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "The encounter_id for the encounter that this claims belongs to.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_category_1": {"name": "service_category_1", "description": "The broader service category this claim belongs to.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/service_categories/service_category__service_categories.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_category_2": {"name": "service_category_2", "description": "The more specific service category this claim belongs to.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/service_categories/service_category__service_categories.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "medical_claim", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8004985, "relation_name": "tuva_project_demo.core.medical_claim", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\r\n   )\r\n}}\r\n\r\n\r\nselect * from {{ ref('core__stg_claims_medical_claim')}}", "language": "sql", "refs": [{"name": "core__stg_claims_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__medical_claim.sql", "compiled": true, "compiled_code": "\n\n\nselect * from tuva_project_demo.core._stg_claims_medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__patient": {"database": "tuva_project_demo", "schema": "core", "name": "core__patient", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__patient.sql", "original_file_path": "models/core/final/core__patient.sql", "unique_id": "model.the_tuva_project.core__patient", "fqn": ["the_tuva_project", "core", "final", "core__patient"], "alias": "patient", "checksum": {"name": "sha256", "checksum": "a66973783354be761131b8742966bf7655b486e3e75b1f1c298bec92c348f49a"}, "config": {"enabled": true, "alias": "patient", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The patient table contains demographic and geographic information on  patients.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each person across all datasets.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sex": {"name": "sex", "description": "The gender of the patient.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__gender.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "race": {"name": "race", "description": "The race of the patient.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__race.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "The birth date of the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "The death date of the patient if there is one.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "death_flag": {"name": "death_flag", "description": "A flag indicating if the patient has died.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "The address of the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "The city where the patient lives.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The state where the patient lives.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "The zip code for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "county": {"name": "county", "description": "The county for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "The latitude for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "The longitude for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "The phone number for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "patient", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8234215, "relation_name": "tuva_project_demo.core.patient", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_patient') }}\r\nunion all\r\nselect * from {{ ref('core__stg_clinical_patient') }}\r\n\r\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_clinical_patient') }}\r\n\r\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_patient') }}\r\n\r\n{%- endif %}", "language": "sql", "refs": [{"name": "core__stg_claims_patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__patient.sql", "compiled": true, "compiled_code": "\n\nselect * from tuva_project_demo.core._stg_claims_patient", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__pharmacy_claim": {"database": "tuva_project_demo", "schema": "core", "name": "core__pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__pharmacy_claim.sql", "original_file_path": "models/core/final/core__pharmacy_claim.sql", "unique_id": "model.the_tuva_project.core__pharmacy_claim", "fqn": ["the_tuva_project", "core", "final", "core__pharmacy_claim"], "alias": "pharmacy_claim", "checksum": {"name": "sha256", "checksum": "d6e2bac51e9f18580249d402ed5ddc88c616d33d70781c4adf4dfd980499f836"}, "config": {"enabled": true, "alias": "pharmacy_claim", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The pharmacy claim table contains information on prescription drugs that  were filled and billed to the insurer.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or  health plan. A patient can have more than one member_id because they  can have more than one insurance product/plan.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prescribing_provider_npi": {"name": "prescribing_provider_npi", "description": "NPI for the provider that wrote the prescription (e.g. priamry care  physician).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispensing_provider_npi": {"name": "dispensing_provider_npi", "description": "NPI for the provider that dispensed the prescription (e.g. pharmacy).\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispensing_date": {"name": "dispensing_date", "description": "Date the prescription was filled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ndc_code": {"name": "ndc_code", "description": "National drug code on the claim.", "meta": {"terminology": "https://www.fda.gov/drugs/drug-approvals-and-databases/national-drug-code-directory"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Number of doses.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "days_supply": {"name": "days_supply", "description": "Number of days supply.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "refills": {"name": "refills", "description": "Number of refills for the prescription.", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "Date the claim was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "Amount paid by the health insurer for the claim.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "Contractual amount allowed to be paid by the payer + patient.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coinsurance_amount": {"name": "coinsurance_amount", "description": "The total coinsurance charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "copayment_amount": {"name": "copayment_amount", "description": "The total copayment charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deductible_amount": {"name": "deductible_amount", "description": "The total amount charged on the claim by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "pharmacy_claim", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8305178, "relation_name": "tuva_project_demo.core.pharmacy_claim", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\r\n   )\r\n}}\r\n\r\nselect * from {{ ref('core__stg_claims_pharmacy_claim')}}", "language": "sql", "refs": [{"name": "core__stg_claims_pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__pharmacy_claim.sql", "compiled": true, "compiled_code": "\n\nselect * from tuva_project_demo.core._stg_claims_pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__practitioner": {"database": "tuva_project_demo", "schema": "core", "name": "core__practitioner", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__practitioner.sql", "original_file_path": "models/core/final/core__practitioner.sql", "unique_id": "model.the_tuva_project.core__practitioner", "fqn": ["the_tuva_project", "core", "final", "core__practitioner"], "alias": "practitioner", "checksum": {"name": "sha256", "checksum": "dc5b35a5bbe081c71df40883440b3b6eb12bc8d7fead93c496176c6e50da8ac8"}, "config": {"enabled": true, "alias": "practitioner", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The practitioner table contains information on the providers in the  dataset e.g. physicians, physicians assistants, etc.\n", "columns": {"practitioner_id": {"name": "practitioner_id", "description": "Unique ID for the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "npi": {"name": "npi", "description": "NPI for the provider.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_first_name": {"name": "provider_first_name", "description": "First name of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_last_name": {"name": "provider_last_name", "description": "Last name of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "practice_affiliation": {"name": "practice_affiliation", "description": "Practice affiliation of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specialty": {"name": "specialty", "description": "Specialty of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_specialty": {"name": "sub_specialty", "description": "Sub specialty of the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "practitioner", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8359632, "relation_name": "tuva_project_demo.core.practitioner", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true-%}\r\n\r\nselect * from {{ ref('core__stg_claims_practitioner') }}\r\nunion all\r\nselect * from {{ ref('core__stg_clinical_practitioner') }}\r\n\r\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_clinical_practitioner') }}\r\n\r\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_practitioner') }}\r\n\r\n{%- endif %}", "language": "sql", "refs": [{"name": "core__stg_claims_practitioner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_practitioner"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__practitioner.sql", "compiled": true, "compiled_code": "\n\nselect * from tuva_project_demo.core._stg_claims_practitioner", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__procedure": {"database": "tuva_project_demo", "schema": "core", "name": "core__procedure", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__procedure.sql", "original_file_path": "models/core/final/core__procedure.sql", "unique_id": "model.the_tuva_project.core__procedure", "fqn": ["the_tuva_project", "core", "final", "core__procedure"], "alias": "procedure", "checksum": {"name": "sha256", "checksum": "a88b9caf3980e1ee823faa433af0c5947ef0f37507508f67b22190afbf349dd8"}, "config": {"enabled": true, "alias": "procedure", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The procedure table contains information on procedures that were performed  on patients in the dataset.\n", "columns": {"procedure_id": {"name": "procedure_id", "description": "The unique identifier for the performed procedure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "The encounter_id for the encounter where this procedure was performed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "The claim on which the procedure was recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each person across all datasets.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "procedure_date": {"name": "procedure_date", "description": "Date when the procedure was performed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "Type of procedure code for the procedure in the source system.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "The procedure code in the source system.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__icd_10_pcs.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_description": {"name": "source_description", "description": "Description of the procedure code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code_type": {"name": "normalized_code_type", "description": "Normalized type of procedure code for the procedure.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "The normalized procedure code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__icd_10_pcs.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_description": {"name": "normalized_description", "description": "Description of the procedure code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modifier_1": {"name": "modifier_1", "description": "First modifier for the procedure code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modifier_2": {"name": "modifier_2", "description": "Second modifier for the procedure code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modifier_3": {"name": "modifier_3", "description": "Third modifier for the procedure code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modifier_4": {"name": "modifier_4", "description": "Fourth modifier for the procedure code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modifier_5": {"name": "modifier_5", "description": "Fifth modifier for the procedure code.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__hcpcs_level_2.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "practitioner_id": {"name": "practitioner_id", "description": "ID of the provider who performed the procedure.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "procedure", "tags": "core", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8435552, "relation_name": "tuva_project_demo.core.procedure", "raw_code": "{{ config(\r\n     enabled = var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_procedure') }}\r\nunion all\r\nselect * from {{ ref('core__stg_clinical_procedure') }}\r\n\r\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_clinical_procedure') }}\r\n\r\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\r\n\r\nselect * from {{ ref('core__stg_claims_procedure') }}\r\n\r\n{%- endif %}", "language": "sql", "refs": [{"name": "core__stg_claims_procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__stg_claims_procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/final/core__procedure.sql", "compiled": true, "compiled_code": "\n\nselect * from tuva_project_demo.core._stg_claims_procedure", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_condition": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_condition.sql", "original_file_path": "models/core/staging/core__stg_claims_condition.sql", "unique_id": "model.the_tuva_project.core__stg_claims_condition", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_condition"], "alias": "_stg_claims_condition", "checksum": {"name": "sha256", "checksum": "37ed117eb9332ae4a49626502b21fc342d9ee6de32c4e5c57fc114f612dd49e6"}, "config": {"enabled": true, "alias": "_stg_claims_condition", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core claims conditions", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_condition", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.867001, "relation_name": "tuva_project_demo.core._stg_claims_condition", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\n\n{{ config(\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n-- *************************************************\n-- This dbt model creates the condition table in core.\n-- *************************************************\n\nwith unpivot_cte as (\n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_1 as source_code\n  , 1 as diagnosis_rank\n  , diagnosis_poa_1 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere diagnosis_code_1 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n\t       , discharge_date\n\t       , claim_end_date\n\t       , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_2 as source_code\n  , 2 as diagnosis_rank\n  , diagnosis_poa_2 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_2 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_3 as source_code\n  , 3 as diagnosis_rank\n  , diagnosis_poa_3 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_3 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_4 as source_code\n  , 4 as diagnosis_rank\n  , diagnosis_poa_4 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_4 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_5 as source_code\n  , 5 as diagnosis_rank\n  , diagnosis_poa_5 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_5 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_6 as source_code\n  , 6 as diagnosis_rank\n  , diagnosis_poa_6 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_6 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_7 as source_code\n  , 7 as diagnosis_rank\n  , diagnosis_poa_7 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_7 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_8 as source_code\n  , 8 as diagnosis_rank\n  , diagnosis_poa_8 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_8 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_9 as source_code\n  , 9 as diagnosis_rank\n  , diagnosis_poa_9 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_9 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_10 as source_code\n  , 10 as diagnosis_rank\n  , diagnosis_poa_10 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_10 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_11 as source_code\n  , 11 as diagnosis_rank\n  , diagnosis_poa_11 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_11 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_12 as source_code\n  , 12 as diagnosis_rank\n  , diagnosis_poa_12 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_12 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_13 as source_code\n  , 13 as diagnosis_rank\n  , diagnosis_poa_13 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_13 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_14 as source_code\n  , 14 as diagnosis_rank\n  , diagnosis_poa_14 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_14 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_15 as source_code\n  , 15 as diagnosis_rank\n  , diagnosis_poa_15 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_15 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_16 as source_code\n  , 16 as diagnosis_rank\n  , diagnosis_poa_16 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_16 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_17 as source_code\n  , 17 as diagnosis_rank\n  , diagnosis_poa_17 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_17 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_18 as source_code\n  , 18 as diagnosis_rank\n  , diagnosis_poa_18 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_18 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_19 as source_code\n  , 19 as diagnosis_rank\n  , diagnosis_poa_19 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_19 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_20 as source_code\n  , 20 as diagnosis_rank\n  , diagnosis_poa_20 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_20 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_21 as source_code\n  , 21 as diagnosis_rank\n  , diagnosis_poa_21 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_21 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_22 as source_code\n  , 22 as diagnosis_rank\n  , diagnosis_poa_22 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_22 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_23 as source_code\n  , 23 as diagnosis_rank\n  , diagnosis_poa_23 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_23 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_24 as source_code\n  , 24 as diagnosis_rank\n  , diagnosis_poa_24 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_24 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_25 as source_code\n  , 25 as diagnosis_rank\n  , diagnosis_poa_25 as present_on_admit_code\n  , data_source\nfrom {{ ref('normalized_input__medical_claim') }}\nwhere diagnosis_code_25 is not null\n\n)\n\nselect distinct\n      cast(unpivot_cte.data_source||'_'||unpivot_cte.claim_id||'_'||unpivot_cte.diagnosis_rank||'_'||unpivot_cte.source_code as {{ dbt.type_string() }} ) as condition_id\n    , cast(unpivot_cte.patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(coalesce(ap.encounter_id, ed.encounter_id) as {{ dbt.type_string() }} ) as encounter_id\n    , cast(unpivot_cte.claim_id as {{ dbt.type_string() }} ) as claim_id\n    , {{ try_to_cast_date('unpivot_cte.condition_date', 'YYYY-MM-DD') }} as recorded_date\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as onset_date\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as resolved_date\n    , cast('active' as {{ dbt.type_string() }} ) as status\n    , cast(unpivot_cte.condition_type as {{ dbt.type_string() }} ) as condition_type\n    , cast(unpivot_cte.source_code_type as {{ dbt.type_string() }} ) as source_code_type\n    , cast(unpivot_cte.source_code as {{ dbt.type_string() }} ) as source_code\n    , cast(null as {{ dbt.type_string() }} ) as source_description\n    , cast(\n        case\n        when icd.icd_10_cm is not null then 'icd-10-cm'\n        end as {{ dbt.type_string() }}\n      ) as normalized_code_type\n    , cast(icd.icd_10_cm as {{ dbt.type_string() }} ) as normalized_code\n    , cast(icd.description as {{ dbt.type_string() }} ) as normalized_description\n    , cast(unpivot_cte.diagnosis_rank as {{ dbt.type_int() }} ) as condition_rank\n    , cast(unpivot_cte.present_on_admit_code as {{ dbt.type_string() }} ) as present_on_admit_code\n    , cast(poa.present_on_admit_description as {{ dbt.type_string() }} ) as present_on_admit_description\n    , cast(unpivot_cte.data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom unpivot_cte\nleft join {{ ref('acute_inpatient__encounter_id')}} as ap\n    on unpivot_cte.claim_id = ap.claim_id\nleft join {{ ref('emergency_department__int_encounter_id')}} as ed\n    on unpivot_cte.claim_id = ed.claim_id\nleft join {{ ref('terminology__icd_10_cm') }} icd\n    on unpivot_cte.source_code = icd.icd_10_cm\nleft join {{ ref('terminology__present_on_admission') }} as poa\n    on unpivot_cte.present_on_admit_code = poa.present_on_admit_code", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "emergency_department__int_encounter_id", "package": null, "version": null}, {"name": "terminology__icd_10_cm", "package": null, "version": null}, {"name": "terminology__present_on_admission", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_int", "macro.dbt.type_timestamp"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__medical_claim", "model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.emergency_department__int_encounter_id", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__present_on_admission"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_condition.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\n-- *************************************************\n-- This dbt model creates the condition table in core.\n-- *************************************************\n\nwith unpivot_cte as (\n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_1 as source_code\n  , 1 as diagnosis_rank\n  , diagnosis_poa_1 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere diagnosis_code_1 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n\t       , discharge_date\n\t       , claim_end_date\n\t       , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_2 as source_code\n  , 2 as diagnosis_rank\n  , diagnosis_poa_2 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_2 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_3 as source_code\n  , 3 as diagnosis_rank\n  , diagnosis_poa_3 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_3 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_4 as source_code\n  , 4 as diagnosis_rank\n  , diagnosis_poa_4 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_4 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_5 as source_code\n  , 5 as diagnosis_rank\n  , diagnosis_poa_5 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_5 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_6 as source_code\n  , 6 as diagnosis_rank\n  , diagnosis_poa_6 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_6 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_7 as source_code\n  , 7 as diagnosis_rank\n  , diagnosis_poa_7 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_7 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_8 as source_code\n  , 8 as diagnosis_rank\n  , diagnosis_poa_8 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_8 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_9 as source_code\n  , 9 as diagnosis_rank\n  , diagnosis_poa_9 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_9 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_10 as source_code\n  , 10 as diagnosis_rank\n  , diagnosis_poa_10 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_10 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_11 as source_code\n  , 11 as diagnosis_rank\n  , diagnosis_poa_11 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_11 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_12 as source_code\n  , 12 as diagnosis_rank\n  , diagnosis_poa_12 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_12 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_13 as source_code\n  , 13 as diagnosis_rank\n  , diagnosis_poa_13 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_13 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_14 as source_code\n  , 14 as diagnosis_rank\n  , diagnosis_poa_14 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_14 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_15 as source_code\n  , 15 as diagnosis_rank\n  , diagnosis_poa_15 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_15 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_16 as source_code\n  , 16 as diagnosis_rank\n  , diagnosis_poa_16 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_16 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_17 as source_code\n  , 17 as diagnosis_rank\n  , diagnosis_poa_17 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_17 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_18 as source_code\n  , 18 as diagnosis_rank\n  , diagnosis_poa_18 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_18 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_19 as source_code\n  , 19 as diagnosis_rank\n  , diagnosis_poa_19 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_19 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_20 as source_code\n  , 20 as diagnosis_rank\n  , diagnosis_poa_20 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_20 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_21 as source_code\n  , 21 as diagnosis_rank\n  , diagnosis_poa_21 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_21 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_22 as source_code\n  , 22 as diagnosis_rank\n  , diagnosis_poa_22 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_22 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_23 as source_code\n  , 23 as diagnosis_rank\n  , diagnosis_poa_23 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_23 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_24 as source_code\n  , 24 as diagnosis_rank\n  , diagnosis_poa_24 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_24 is not null\n\nunion all \n\nselect\n    claim_id\n  , patient_id\n  , coalesce(admission_date\n           , claim_start_date\n           , claim_line_start_date\n           , discharge_date\n           , claim_end_date\n           , claim_line_end_date\n    ) as condition_date\n  , 'discharge_diagnosis' as condition_type\n  , diagnosis_code_type as source_code_type\n  , diagnosis_code_25 as source_code\n  , 25 as diagnosis_rank\n  , diagnosis_poa_25 as present_on_admit_code\n  , data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere diagnosis_code_25 is not null\n\n)\n\nselect distinct\n      cast(unpivot_cte.data_source||'_'||unpivot_cte.claim_id||'_'||unpivot_cte.diagnosis_rank||'_'||unpivot_cte.source_code as TEXT ) as condition_id\n    , cast(unpivot_cte.patient_id as TEXT ) as patient_id\n    , cast(coalesce(ap.encounter_id, ed.encounter_id) as TEXT ) as encounter_id\n    , cast(unpivot_cte.claim_id as TEXT ) as claim_id\n    , try_cast( unpivot_cte.condition_date as date ) as recorded_date\n    , try_cast( null as date ) as onset_date\n    , try_cast( null as date ) as resolved_date\n    , cast('active' as TEXT ) as status\n    , cast(unpivot_cte.condition_type as TEXT ) as condition_type\n    , cast(unpivot_cte.source_code_type as TEXT ) as source_code_type\n    , cast(unpivot_cte.source_code as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(\n        case\n        when icd.icd_10_cm is not null then 'icd-10-cm'\n        end as TEXT\n      ) as normalized_code_type\n    , cast(icd.icd_10_cm as TEXT ) as normalized_code\n    , cast(icd.description as TEXT ) as normalized_description\n    , cast(unpivot_cte.diagnosis_rank as integer ) as condition_rank\n    , cast(unpivot_cte.present_on_admit_code as TEXT ) as present_on_admit_code\n    , cast(poa.present_on_admit_description as TEXT ) as present_on_admit_description\n    , cast(unpivot_cte.data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as timestamp ) as tuva_last_run\nfrom unpivot_cte\nleft join tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id as ap\n    on unpivot_cte.claim_id = ap.claim_id\nleft join tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id as ed\n    on unpivot_cte.claim_id = ed.claim_id\nleft join tuva_project_demo.terminology.icd_10_cm icd\n    on unpivot_cte.source_code = icd.icd_10_cm\nleft join tuva_project_demo.terminology.present_on_admission as poa\n    on unpivot_cte.present_on_admit_code = poa.present_on_admit_code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_eligibility": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_eligibility.sql", "original_file_path": "models/core/staging/core__stg_claims_eligibility.sql", "unique_id": "model.the_tuva_project.core__stg_claims_eligibility", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_eligibility"], "alias": "_stg_claims_eligibility", "checksum": {"name": "sha256", "checksum": "9bd0664acba7fa0fd6f901f52f8431618c5cdc5292c6669837e4e5064574d954"}, "config": {"enabled": true, "alias": "_stg_claims_eligibility", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core eligibility", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_eligibility", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.882946, "relation_name": "tuva_project_demo.core._stg_claims_eligibility", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\n\n{{ config(\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n-- *************************************************\n-- This dbt model creates the eligibility table in core.\n-- *************************************************\n\n\n\n\nselect\n         cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n       , cast(member_id as {{ dbt.type_string() }} ) as member_id\n       , cast(birth_date as date) as birth_date\n       , cast(death_date as date) as death_date\n       , cast(enrollment_start_date as date ) as enrollment_start_date\n       , cast(enrollment_end_date as date ) as enrollment_end_date\n       , cast(payer as {{ dbt.type_string() }} ) as payer\n       , cast(payer_type as {{ dbt.type_string() }} ) as payer_type\n       , cast(plan as {{ dbt.type_string() }} ) as plan\n       , cast(original_reason_entitlement_code as {{ dbt.type_string() }} ) as original_reason_entitlement_code\n       , cast(dual_status_code as {{ dbt.type_string() }} ) as dual_status_code\n       , cast(medicare_status_code as {{ dbt.type_string() }} ) as medicare_status_code\n       , cast(data_source as {{ dbt.type_string() }} ) as data_source\n       , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('normalized_input__eligibility') }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "normalized_input__eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_eligibility.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\n-- *************************************************\n-- This dbt model creates the eligibility table in core.\n-- *************************************************\n\n\n\n\nselect\n         cast(patient_id as TEXT ) as patient_id\n       , cast(member_id as TEXT ) as member_id\n       , cast(birth_date as date) as birth_date\n       , cast(death_date as date) as death_date\n       , cast(enrollment_start_date as date ) as enrollment_start_date\n       , cast(enrollment_end_date as date ) as enrollment_end_date\n       , cast(payer as TEXT ) as payer\n       , cast(payer_type as TEXT ) as payer_type\n       , cast(plan as TEXT ) as plan\n       , cast(original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code\n       , cast(dual_status_code as TEXT ) as dual_status_code\n       , cast(medicare_status_code as TEXT ) as medicare_status_code\n       , cast(data_source as TEXT ) as data_source\n       , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_eligibility", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_encounter": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_encounter", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_encounter.sql", "original_file_path": "models/core/staging/core__stg_claims_encounter.sql", "unique_id": "model.the_tuva_project.core__stg_claims_encounter", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_encounter"], "alias": "_stg_claims_encounter", "checksum": {"name": "sha256", "checksum": "6b456d0042528c7fd5a822cd48dac1386771fc763bb555dfee64d2cbbfd57509"}, "config": {"enabled": true, "alias": "_stg_claims_encounter", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core claims encounters", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_encounter", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8526778, "relation_name": "tuva_project_demo.core._stg_claims_encounter", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\n\n{{ config(\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n-- *************************************************\n-- This dbt model creates the encounter table in core.\n-- *************************************************\n\nselect\n    cast(encounter_id as {{ dbt.type_string() }} ) as encounter_id\n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast('acute inpatient' as {{ dbt.type_string() }} ) as encounter_type\n    , {{ try_to_cast_date('encounter_start_date', 'YYYY-MM-DD') }} as encounter_start_date\n    , {{ try_to_cast_date('encounter_end_date', 'YYYY-MM-DD') }} as encounter_end_date\n    , cast(length_of_stay as {{ dbt.type_int() }} ) as length_of_stay\n    , cast(admit_source_code as {{ dbt.type_string() }} ) as admit_source_code\n    , cast(admit_source_description as {{ dbt.type_string() }} ) as admit_source_description\n    , cast(admit_type_code as {{ dbt.type_string() }} ) as admit_type_code\n    , cast(admit_type_description as {{ dbt.type_string() }} ) as admit_type_description\n    , cast(discharge_disposition_code as {{ dbt.type_string() }} ) as discharge_disposition_code\n    , cast(discharge_disposition_description as {{ dbt.type_string() }} ) as discharge_disposition_description\n    , cast(null as {{ dbt.type_string() }} ) as attending_provider_id\n    , cast(facility_npi as {{ dbt.type_string() }} ) as facility_npi\n    , cast(primary_diagnosis_code_type as {{ dbt.type_string() }} ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as {{ dbt.type_string() }} ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as {{ dbt.type_string() }} ) as primary_diagnosis_description\n    , cast(ms_drg_code as {{ dbt.type_string() }} ) as ms_drg_code\n    , cast(ms_drg_description as {{ dbt.type_string() }} ) as ms_drg_description\n    , cast(apr_drg_code as {{ dbt.type_string() }} ) as apr_drg_code\n    , cast(apr_drg_description as {{ dbt.type_string() }} ) as apr_drg_description\n    , cast(total_paid_amount as {{ dbt.type_numeric() }} ) as  paid_amount\n    , cast(total_allowed_amount as {{ dbt.type_numeric() }} ) as allowed_amount\n    , cast(total_charge_amount as {{ dbt.type_numeric() }} ) as charge_amount\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as  tuva_last_run\nfrom {{ ref('acute_inpatient__summary') }} \n\nunion all \n\nselect\n    cast(encounter_id as {{ dbt.type_string() }} ) as encounter_id\n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast('emergency department' as {{ dbt.type_string() }} ) as encounter_type\n    , {{ try_to_cast_date('encounter_start_date', 'YYYY-MM-DD') }} as encounter_start_date\n    , {{ try_to_cast_date('encounter_end_date', 'YYYY-MM-DD') }} as encounter_end_date\n    , cast(length_of_stay as {{ dbt.type_int() }} ) as length_of_stay\n    , cast(admit_source_code as {{ dbt.type_string() }} ) as admit_source_code\n    , cast(admit_source_description as {{ dbt.type_string() }} ) as admit_source_description\n    , cast(admit_type_code as {{ dbt.type_string() }} ) as admit_type_code\n    , cast(admit_type_description as {{ dbt.type_string() }} ) as admit_type_description\n    , cast(discharge_disposition_code as {{ dbt.type_string() }} ) as discharge_disposition_code\n    , cast(discharge_disposition_description as {{ dbt.type_string() }} ) as discharge_disposition_description\n    , cast(null as {{ dbt.type_string() }} ) as attending_provider_id\n    , cast(facility_npi as {{ dbt.type_string() }} ) as facility_npi\n    , cast(primary_diagnosis_code_type as {{ dbt.type_string() }} ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as {{ dbt.type_string() }} ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as {{ dbt.type_string() }} ) as primary_diagnosis_description\n    , cast(ms_drg_code as {{ dbt.type_string() }} ) as ms_drg_code\n    , cast(ms_drg_description as {{ dbt.type_string() }} ) as ms_drg_description\n    , cast(apr_drg_code as {{ dbt.type_string() }} ) as apr_drg_code\n    , cast(apr_drg_description as {{ dbt.type_string() }} ) as apr_drg_description\n    , cast(total_paid_amount as {{ dbt.type_numeric() }} ) as  paid_amount\n    , cast(total_allowed_amount as {{ dbt.type_numeric() }} ) as allowed_amount\n    , cast(total_charge_amount as {{ dbt.type_numeric() }} ) as charge_amount\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as  tuva_last_run\nfrom {{ ref('emergency_department__summary') }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "acute_inpatient__summary", "package": null, "version": null}, {"name": "emergency_department__summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_int", "macro.dbt.type_numeric", "macro.dbt.type_timestamp"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.emergency_department__summary"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_encounter.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\n-- *************************************************\n-- This dbt model creates the encounter table in core.\n-- *************************************************\n\nselect\n    cast(encounter_id as TEXT ) as encounter_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast('acute inpatient' as TEXT ) as encounter_type\n    , try_cast( encounter_start_date as date ) as encounter_start_date\n    , try_cast( encounter_end_date as date ) as encounter_end_date\n    , cast(length_of_stay as integer ) as length_of_stay\n    , cast(admit_source_code as TEXT ) as admit_source_code\n    , cast(admit_source_description as TEXT ) as admit_source_description\n    , cast(admit_type_code as TEXT ) as admit_type_code\n    , cast(admit_type_description as TEXT ) as admit_type_description\n    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(null as TEXT ) as attending_provider_id\n    , cast(facility_npi as TEXT ) as facility_npi\n    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n    , cast(ms_drg_code as TEXT ) as ms_drg_code\n    , cast(ms_drg_description as TEXT ) as ms_drg_description\n    , cast(apr_drg_code as TEXT ) as apr_drg_code\n    , cast(apr_drg_description as TEXT ) as apr_drg_description\n    , cast(total_paid_amount as numeric(28,6) ) as  paid_amount\n    , cast(total_allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(total_charge_amount as numeric(28,6) ) as charge_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as timestamp ) as  tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.acute_inpatient_summary \n\nunion all \n\nselect\n    cast(encounter_id as TEXT ) as encounter_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast('emergency department' as TEXT ) as encounter_type\n    , try_cast( encounter_start_date as date ) as encounter_start_date\n    , try_cast( encounter_end_date as date ) as encounter_end_date\n    , cast(length_of_stay as integer ) as length_of_stay\n    , cast(admit_source_code as TEXT ) as admit_source_code\n    , cast(admit_source_description as TEXT ) as admit_source_description\n    , cast(admit_type_code as TEXT ) as admit_type_code\n    , cast(admit_type_description as TEXT ) as admit_type_description\n    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(null as TEXT ) as attending_provider_id\n    , cast(facility_npi as TEXT ) as facility_npi\n    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n    , cast(ms_drg_code as TEXT ) as ms_drg_code\n    , cast(ms_drg_description as TEXT ) as ms_drg_description\n    , cast(apr_drg_code as TEXT ) as apr_drg_code\n    , cast(apr_drg_description as TEXT ) as apr_drg_description\n    , cast(total_paid_amount as numeric(28,6) ) as  paid_amount\n    , cast(total_allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(total_charge_amount as numeric(28,6) ) as charge_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as timestamp ) as  tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.emergency_department_summary", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_location": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_location", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_location.sql", "original_file_path": "models/core/staging/core__stg_claims_location.sql", "unique_id": "model.the_tuva_project.core__stg_claims_location", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_location"], "alias": "_stg_claims_location", "checksum": {"name": "sha256", "checksum": "80a8f62f2dc605f4c8162227431692accab2daf6f617c40560afdc8987c89ef0"}, "config": {"enabled": true, "alias": "_stg_claims_location", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core claims locations", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_location", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.857166, "relation_name": "tuva_project_demo.core._stg_claims_location", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\r\n\r\n{{ config(\r\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\r\n   )\r\n}}\r\n\r\nwith all_providers_in_claims_dataset as (\r\nselect distinct facility_npi as npi, data_source\r\nfrom {{ ref('core__stg_claims_medical_claim') }}\r\n\r\nunion all\r\n\r\nselect distinct rendering_npi as npi, data_source\r\nfrom {{ ref('core__stg_claims_medical_claim') }}\r\n\r\nunion all\r\n\r\nselect distinct billing_npi as npi, data_source\r\nfrom {{ ref('core__stg_claims_medical_claim') }}\r\n),\r\n\r\n\r\nprovider as (\r\nselect aa.*, bb.data_source\r\nfrom {{ ref('terminology__provider') }} aa\r\ninner join all_providers_in_claims_dataset bb\r\non aa.npi = bb.npi\r\nwhere lower(aa.entity_type_description) = 'organization'\r\n)\r\n\r\n\r\n\r\nselect \r\n    cast(npi as {{ dbt.type_string() }} ) as location_id\r\n    , cast(npi as {{ dbt.type_string() }} ) as npi\r\n    , cast(provider_organization_name as {{ dbt.type_string() }} ) as name\r\n    , cast(null as {{ dbt.type_string() }} ) as facility_type\r\n    , cast(parent_organization_name as {{ dbt.type_string() }} ) as parent_organization\r\n    , cast(practice_address_line_1 as {{ dbt.type_string() }} ) as address\r\n    , cast(practice_city as {{ dbt.type_string() }} ) as city\r\n    , cast(practice_state as {{ dbt.type_string() }} ) as state\r\n    , cast(practice_zip_code as {{ dbt.type_string() }} ) as zip_code\r\n    , cast(null as {{ dbt.type_float() }} ) as latitude\r\n    , cast(null as {{ dbt.type_float() }} ) as longitude\r\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\r\n    , cast( '{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\r\nfrom provider", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "core__stg_claims_medical_claim", "package": null, "version": null}, {"name": "core__stg_claims_medical_claim", "package": null, "version": null}, {"name": "core__stg_claims_medical_claim", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_timestamp"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.core__stg_claims_medical_claim", "seed.the_tuva_project.terminology__provider"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_location.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\nwith all_providers_in_claims_dataset as (\nselect distinct facility_npi as npi, data_source\nfrom tuva_project_demo.core._stg_claims_medical_claim\n\nunion all\n\nselect distinct rendering_npi as npi, data_source\nfrom tuva_project_demo.core._stg_claims_medical_claim\n\nunion all\n\nselect distinct billing_npi as npi, data_source\nfrom tuva_project_demo.core._stg_claims_medical_claim\n),\n\n\nprovider as (\nselect aa.*, bb.data_source\nfrom tuva_project_demo.terminology.provider aa\ninner join all_providers_in_claims_dataset bb\non aa.npi = bb.npi\nwhere lower(aa.entity_type_description) = 'organization'\n)\n\n\n\nselect \n    cast(npi as TEXT ) as location_id\n    , cast(npi as TEXT ) as npi\n    , cast(provider_organization_name as TEXT ) as name\n    , cast(null as TEXT ) as facility_type\n    , cast(parent_organization_name as TEXT ) as parent_organization\n    , cast(practice_address_line_1 as TEXT ) as address\n    , cast(practice_city as TEXT ) as city\n    , cast(practice_state as TEXT ) as state\n    , cast(practice_zip_code as TEXT ) as zip_code\n    , cast(null as float ) as latitude\n    , cast(null as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast( '2024-01-17 14:47:17.546759+00:00' as timestamp ) as tuva_last_run\nfrom provider", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_medical_claim": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_medical_claim.sql", "original_file_path": "models/core/staging/core__stg_claims_medical_claim.sql", "unique_id": "model.the_tuva_project.core__stg_claims_medical_claim", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_medical_claim"], "alias": "_stg_claims_medical_claim", "checksum": {"name": "sha256", "checksum": "63a3710e40a80c23aa5f49ca10271c696f08ff49a8c0a56067cbcc1223c9d761"}, "config": {"enabled": true, "alias": "_stg_claims_medical_claim", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core medical claims", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_medical_claim", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8482926, "relation_name": "tuva_project_demo.core._stg_claims_medical_claim", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\n\n{{ config(\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n-- *************************************************\n-- This dbt model creates the medical_claim table\n-- in core. It adds these 4 fields to the input layer\n-- medical claim table:\n--      encounter_id\n--      service_category_1\n--      service_category_2\n-- *************************************************\n\n\nselect\n    cast(med.claim_id as {{ dbt.type_string() }} ) as claim_id\n    , cast(med.claim_line_number as {{ dbt.type_int() }} ) as claim_line_number\n    , cast(coalesce(ap.encounter_id,ed.encounter_id) as {{ dbt.type_string() }} ) as encounter_id \n    , cast(med.claim_type as {{ dbt.type_string() }} ) as claim_type\n    , cast(med.patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(med.member_id as {{ dbt.type_string() }} ) as member_id\n    , cast(med.payer as {{ dbt.type_string() }} ) as payer\n    , cast(med.plan as {{ dbt.type_string() }} ) as plan\n    , {{ try_to_cast_date('med.claim_start_date', 'YYYY-MM-DD') }} as claim_start_date\n    , {{ try_to_cast_date('med.claim_end_date', 'YYYY-MM-DD') }} as claim_end_date\n    , {{ try_to_cast_date('med.claim_line_start_date', 'YYYY-MM-DD') }} as claim_line_start_date\n    , {{ try_to_cast_date('med.claim_line_end_date', 'YYYY-MM-DD') }} as claim_line_end_date\n    , {{ try_to_cast_date('med.admission_date', 'YYYY-MM-DD') }} as admission_date\n    , {{ try_to_cast_date('med.discharge_date', 'YYYY-MM-DD') }} as discharge_date\n    , cast(srv_group.service_category_1 as {{ dbt.type_string() }} ) as service_category_1\n    , cast(srv_group.service_category_2 as {{ dbt.type_string() }} ) as service_category_2\n    , cast(med.admit_source_code as {{ dbt.type_string() }} ) as admit_source_code\n    , cast(med.admit_type_code as {{ dbt.type_string() }} ) as admit_type_code\n    , cast(med.discharge_disposition_code as {{ dbt.type_string() }} ) as discharge_disposition_code\n    , cast(med.place_of_service_code as {{ dbt.type_string() }} ) as place_of_service_code\n    , cast(med.bill_type_code as {{ dbt.type_string() }} ) as bill_type_code\n    , cast(med.ms_drg_code as {{ dbt.type_string() }} ) as ms_drg_code\n    , cast(med.apr_drg_code as {{ dbt.type_string() }} ) as apr_drg_code\n    , cast(med.revenue_center_code as {{ dbt.type_string() }} ) as revenue_center_code\n    , cast(med.service_unit_quantity as {{ dbt.type_int() }} ) as service_unit_quantity\n    , cast(med.hcpcs_code as {{ dbt.type_string() }} ) as hcpcs_code\n    , cast(med.hcpcs_modifier_1 as {{ dbt.type_string() }} ) as hcpcs_modifier_1\n    , cast(med.hcpcs_modifier_2 as {{ dbt.type_string() }} ) as hcpcs_modifier_2\n    , cast(med.hcpcs_modifier_3 as {{ dbt.type_string() }} ) as hcpcs_modifier_3\n    , cast(med.hcpcs_modifier_4 as {{ dbt.type_string() }} ) as hcpcs_modifier_4\n    , cast(med.hcpcs_modifier_5 as {{ dbt.type_string() }} ) as hcpcs_modifier_5\n    , cast(med.rendering_npi as {{ dbt.type_string() }} ) as rendering_npi\n    , cast(med.billing_npi as {{ dbt.type_string() }} ) as billing_npi\n    , cast(med.facility_npi as {{ dbt.type_string() }} ) as facility_npi\n    , {{ try_to_cast_date('med.paid_date', 'YYYY-MM-DD') }} as paid_date\n    , cast(med.paid_amount as {{ dbt.type_numeric() }} ) as paid_amount\n    , cast(med.allowed_amount as {{ dbt.type_numeric() }} ) as allowed_amount\n    , cast(med.charge_amount as {{ dbt.type_numeric() }} ) as charge_amount\n    , cast(med.coinsurance_amount as {{ dbt.type_numeric() }} ) as coinsurance_amount\n    , cast(med.copayment_amount as {{ dbt.type_numeric() }} ) as copayment_amount\n    , cast(med.deductible_amount as {{ dbt.type_numeric() }} ) as deductible_amount\n    , cast(med.total_cost_amount as {{ dbt.type_numeric() }} ) as total_cost_amount\n    , cast(med.data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom {{ ref('normalized_input__medical_claim') }} med\nleft join {{ ref('service_category__service_category_grouper') }} srv_group\n    on med.claim_id = srv_group.claim_id\n    and med.claim_line_number = srv_group.claim_line_number\nleft join {{ ref('acute_inpatient__encounter_id') }} ap\n    on med.claim_id = ap.claim_id\n    and med.claim_line_number = ap.claim_line_number\nleft join {{ ref('emergency_department__int_encounter_id') }} ed\n    on med.claim_id = ed.claim_id\n    and med.claim_line_number = ed.claim_line_number", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "service_category__service_category_grouper", "package": null, "version": null}, {"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "emergency_department__int_encounter_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_numeric", "macro.dbt.type_timestamp"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__medical_claim", "model.the_tuva_project.service_category__service_category_grouper", "model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.emergency_department__int_encounter_id"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_medical_claim.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\n-- *************************************************\n-- This dbt model creates the medical_claim table\n-- in core. It adds these 4 fields to the input layer\n-- medical claim table:\n--      encounter_id\n--      service_category_1\n--      service_category_2\n-- *************************************************\n\n\nselect\n    cast(med.claim_id as TEXT ) as claim_id\n    , cast(med.claim_line_number as integer ) as claim_line_number\n    , cast(coalesce(ap.encounter_id,ed.encounter_id) as TEXT ) as encounter_id \n    , cast(med.claim_type as TEXT ) as claim_type\n    , cast(med.patient_id as TEXT ) as patient_id\n    , cast(med.member_id as TEXT ) as member_id\n    , cast(med.payer as TEXT ) as payer\n    , cast(med.plan as TEXT ) as plan\n    , try_cast( med.claim_start_date as date ) as claim_start_date\n    , try_cast( med.claim_end_date as date ) as claim_end_date\n    , try_cast( med.claim_line_start_date as date ) as claim_line_start_date\n    , try_cast( med.claim_line_end_date as date ) as claim_line_end_date\n    , try_cast( med.admission_date as date ) as admission_date\n    , try_cast( med.discharge_date as date ) as discharge_date\n    , cast(srv_group.service_category_1 as TEXT ) as service_category_1\n    , cast(srv_group.service_category_2 as TEXT ) as service_category_2\n    , cast(med.admit_source_code as TEXT ) as admit_source_code\n    , cast(med.admit_type_code as TEXT ) as admit_type_code\n    , cast(med.discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(med.place_of_service_code as TEXT ) as place_of_service_code\n    , cast(med.bill_type_code as TEXT ) as bill_type_code\n    , cast(med.ms_drg_code as TEXT ) as ms_drg_code\n    , cast(med.apr_drg_code as TEXT ) as apr_drg_code\n    , cast(med.revenue_center_code as TEXT ) as revenue_center_code\n    , cast(med.service_unit_quantity as integer ) as service_unit_quantity\n    , cast(med.hcpcs_code as TEXT ) as hcpcs_code\n    , cast(med.hcpcs_modifier_1 as TEXT ) as hcpcs_modifier_1\n    , cast(med.hcpcs_modifier_2 as TEXT ) as hcpcs_modifier_2\n    , cast(med.hcpcs_modifier_3 as TEXT ) as hcpcs_modifier_3\n    , cast(med.hcpcs_modifier_4 as TEXT ) as hcpcs_modifier_4\n    , cast(med.hcpcs_modifier_5 as TEXT ) as hcpcs_modifier_5\n    , cast(med.rendering_npi as TEXT ) as rendering_npi\n    , cast(med.billing_npi as TEXT ) as billing_npi\n    , cast(med.facility_npi as TEXT ) as facility_npi\n    , try_cast( med.paid_date as date ) as paid_date\n    , cast(med.paid_amount as numeric(28,6) ) as paid_amount\n    , cast(med.allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(med.charge_amount as numeric(28,6) ) as charge_amount\n    , cast(med.coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n    , cast(med.copayment_amount as numeric(28,6) ) as copayment_amount\n    , cast(med.deductible_amount as numeric(28,6) ) as deductible_amount\n    , cast(med.total_cost_amount as numeric(28,6) ) as total_cost_amount\n    , cast(med.data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as timestamp ) as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim med\nleft join tuva_project_demo.claims_preprocessing.service_category_grouper srv_group\n    on med.claim_id = srv_group.claim_id\n    and med.claim_line_number = srv_group.claim_line_number\nleft join tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id ap\n    on med.claim_id = ap.claim_id\n    and med.claim_line_number = ap.claim_line_number\nleft join tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id ed\n    on med.claim_id = ed.claim_id\n    and med.claim_line_number = ed.claim_line_number", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_patient": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_patient", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_patient.sql", "original_file_path": "models/core/staging/core__stg_claims_patient.sql", "unique_id": "model.the_tuva_project.core__stg_claims_patient", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_patient"], "alias": "_stg_claims_patient", "checksum": {"name": "sha256", "checksum": "58641291a4486f06e047c98789ab4e49d52a68f0bc1ea93c17c61a15f8204009"}, "config": {"enabled": true, "alias": "_stg_claims_patient", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core claims patients", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_patient", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.862784, "relation_name": "tuva_project_demo.core._stg_claims_patient", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\n\n{{ config(\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n-- *************************************************\n-- This dbt model creates the patient table in core.\n-- *************************************************\n\n\n\n\nwith patient_stage as(\n    select\n        patient_id\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,first_name\n        ,last_name\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (\n\t        partition by patient_id\n\t        order by case when enrollment_end_date is null\n                then cast ('2050-01-01' as date)\n                else enrollment_end_date end DESC)\n            as row_sequence\n    from {{ ref('normalized_input__eligibility')}}\n)\n\nselect\n    cast(patient_id as {{ dbt.type_string() }}) as patient_id\n    , cast(first_name as {{ dbt.type_string() }}) as first_name\n    , cast(last_name as {{ dbt.type_string() }}) as last_name\n    , cast(gender as {{ dbt.type_string() }}) as sex\n    , cast(race as {{ dbt.type_string() }}) as race\n    , cast(birth_date as date) as birth_date\n    , cast(death_date as date) as death_date\n    , cast(death_flag as int) as death_flag\n    , cast(address as {{ dbt.type_string() }}) as address\n    , cast(city as {{ dbt.type_string() }}) as city\n    , cast(state as {{ dbt.type_string() }}) as state\n    , cast(zip_code as {{ dbt.type_string() }}) as zip_code\n    , cast(null as {{ dbt.type_string() }}) as county\n    , cast(null as {{ dbt.type_float() }}) as latitude \n    , cast(null as {{ dbt.type_float() }}) as longitude\n    , cast(data_source as {{ dbt.type_string() }}) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }}) as tuva_last_run\nfrom patient_stage\nwhere row_sequence = 1", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "normalized_input__eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_timestamp"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_patient.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\n-- *************************************************\n-- This dbt model creates the patient table in core.\n-- *************************************************\n\n\n\n\nwith patient_stage as(\n    select\n        patient_id\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,first_name\n        ,last_name\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (\n\t        partition by patient_id\n\t        order by case when enrollment_end_date is null\n                then cast ('2050-01-01' as date)\n                else enrollment_end_date end DESC)\n            as row_sequence\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n)\n\nselect\n    cast(patient_id as TEXT) as patient_id\n    , cast(first_name as TEXT) as first_name\n    , cast(last_name as TEXT) as last_name\n    , cast(gender as TEXT) as sex\n    , cast(race as TEXT) as race\n    , cast(birth_date as date) as birth_date\n    , cast(death_date as date) as death_date\n    , cast(death_flag as int) as death_flag\n    , cast(address as TEXT) as address\n    , cast(city as TEXT) as city\n    , cast(state as TEXT) as state\n    , cast(zip_code as TEXT) as zip_code\n    , cast(null as TEXT) as county\n    , cast(null as float) as latitude \n    , cast(null as float) as longitude\n    , cast(data_source as TEXT) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as timestamp) as tuva_last_run\nfrom patient_stage\nwhere row_sequence = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_pharmacy_claim": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_pharmacy_claim.sql", "original_file_path": "models/core/staging/core__stg_claims_pharmacy_claim.sql", "unique_id": "model.the_tuva_project.core__stg_claims_pharmacy_claim", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_pharmacy_claim"], "alias": "_stg_claims_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "4eb5bf8a16d0bf0c494854c355642cb48db25b455f4579873a8eee277dcebf76"}, "config": {"enabled": true, "alias": "_stg_claims_pharmacy_claim", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core pharmacy claims", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_pharmacy_claim", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8761032, "relation_name": "tuva_project_demo.core._stg_claims_pharmacy_claim", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\n\n{{ config(\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n-- *************************************************\n-- This dbt model creates the pharmacy_claim\n-- table in core.\n-- *************************************************\n\n\n\n\nselect\n         cast(claim_id as {{ dbt.type_string() }} ) as claim_id\n       , cast(claim_line_number as integer ) as claim_line_number\n       , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n       , cast(member_id as {{ dbt.type_string() }} ) as member_id\n       , cast(payer as {{ dbt.type_string() }} ) as payer\n       , cast(plan as {{ dbt.type_string() }} ) as plan\n       , cast(prescribing_provider_npi as {{ dbt.type_string() }} ) as prescribing_provider_npi\n       , cast(dispensing_provider_npi as {{ dbt.type_string() }} ) as dispensing_provider_npi\n       , cast(dispensing_date as date ) as dispensing_date\n       , cast(ndc_code as {{ dbt.type_string() }} ) as ndc_code\n       , cast(quantity as integer ) as quantity\n       , cast(days_supply as integer ) as days_supply\n       , cast(refills as integer ) as refills\n       , cast(paid_date as date ) as paid_date\n       , cast(paid_amount as {{ dbt.type_numeric() }}) as paid_amount\n       , cast(allowed_amount as {{ dbt.type_numeric() }} ) as allowed_amount\n       , cast(coinsurance_amount as {{ dbt.type_numeric() }} ) as coinsurance_amount\n       , cast(copayment_amount as {{ dbt.type_numeric() }} ) as copayment_amount\n       , cast(deductible_amount as {{ dbt.type_numeric() }} ) as deductible_amount\n       , cast(data_source as {{ dbt.type_string() }} ) as data_source\n       , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('normalized_input__pharmacy_claim') }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "normalized_input__pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_numeric"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_pharmacy_claim.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\n-- *************************************************\n-- This dbt model creates the pharmacy_claim\n-- table in core.\n-- *************************************************\n\n\n\n\nselect\n         cast(claim_id as TEXT ) as claim_id\n       , cast(claim_line_number as integer ) as claim_line_number\n       , cast(patient_id as TEXT ) as patient_id\n       , cast(member_id as TEXT ) as member_id\n       , cast(payer as TEXT ) as payer\n       , cast(plan as TEXT ) as plan\n       , cast(prescribing_provider_npi as TEXT ) as prescribing_provider_npi\n       , cast(dispensing_provider_npi as TEXT ) as dispensing_provider_npi\n       , cast(dispensing_date as date ) as dispensing_date\n       , cast(ndc_code as TEXT ) as ndc_code\n       , cast(quantity as integer ) as quantity\n       , cast(days_supply as integer ) as days_supply\n       , cast(refills as integer ) as refills\n       , cast(paid_date as date ) as paid_date\n       , cast(paid_amount as numeric(28,6)) as paid_amount\n       , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n       , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n       , cast(copayment_amount as numeric(28,6) ) as copayment_amount\n       , cast(deductible_amount as numeric(28,6) ) as deductible_amount\n       , cast(data_source as TEXT ) as data_source\n       , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_practitioner": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_practitioner", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_practitioner.sql", "original_file_path": "models/core/staging/core__stg_claims_practitioner.sql", "unique_id": "model.the_tuva_project.core__stg_claims_practitioner", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_practitioner"], "alias": "_stg_claims_practitioner", "checksum": {"name": "sha256", "checksum": "98f89acd71abd7f9cb7bd970ea5c25346781c7f96979c983923b2e65ca087c26"}, "config": {"enabled": true, "alias": "_stg_claims_practitioner", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core providers in the claims dataset", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_practitioner", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.8917654, "relation_name": "tuva_project_demo.core._stg_claims_practitioner", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\n\n{{ config(\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n-- *************************************************\n-- This dbt model creates the provider table \n-- in core. It includes data about all providers\n-- present in the raw claims dataset.\n-- *************************************************\n\n\nwith all_providers_in_claims_dataset as (\nselect distinct facility_npi as npi, data_source\nfrom {{ ref('core__stg_claims_medical_claim') }}\n\nunion all\n\nselect distinct rendering_npi as npi, data_source\nfrom {{ ref('core__stg_claims_medical_claim') }}\n\nunion all\n\nselect distinct billing_npi as npi, data_source\nfrom {{ ref('core__stg_claims_medical_claim') }}\n),\n\n\nprovider as (\nselect aa.*, bb.data_source\nfrom {{ ref('terminology__provider') }} aa\ninner join all_providers_in_claims_dataset bb\non aa.npi = bb.npi\nwhere lower(aa.entity_type_description) = 'individual'\n)\n\n\n\nselect \n    cast(npi as {{ dbt.type_string() }} ) as practitioner_id\n    , cast(npi as {{ dbt.type_string() }} ) as npi\n    , cast(provider_first_name as {{ dbt.type_string() }} ) as provider_first_name\n    , cast(provider_last_name as {{ dbt.type_string() }} ) as provider_last_name\n    , cast(parent_organization_name as {{ dbt.type_string() }} ) as practice_affiliation\n    , cast(primary_specialty_description as {{ dbt.type_string() }} ) as specialty\n    , cast(null as {{ dbt.type_string() }} ) as sub_specialty\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom provider", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "core__stg_claims_medical_claim", "package": null, "version": null}, {"name": "core__stg_claims_medical_claim", "package": null, "version": null}, {"name": "core__stg_claims_medical_claim", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.core__stg_claims_medical_claim", "seed.the_tuva_project.terminology__provider"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_practitioner.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\n-- *************************************************\n-- This dbt model creates the provider table \n-- in core. It includes data about all providers\n-- present in the raw claims dataset.\n-- *************************************************\n\n\nwith all_providers_in_claims_dataset as (\nselect distinct facility_npi as npi, data_source\nfrom tuva_project_demo.core._stg_claims_medical_claim\n\nunion all\n\nselect distinct rendering_npi as npi, data_source\nfrom tuva_project_demo.core._stg_claims_medical_claim\n\nunion all\n\nselect distinct billing_npi as npi, data_source\nfrom tuva_project_demo.core._stg_claims_medical_claim\n),\n\n\nprovider as (\nselect aa.*, bb.data_source\nfrom tuva_project_demo.terminology.provider aa\ninner join all_providers_in_claims_dataset bb\non aa.npi = bb.npi\nwhere lower(aa.entity_type_description) = 'individual'\n)\n\n\n\nselect \n    cast(npi as TEXT ) as practitioner_id\n    , cast(npi as TEXT ) as npi\n    , cast(provider_first_name as TEXT ) as provider_first_name\n    , cast(provider_last_name as TEXT ) as provider_last_name\n    , cast(parent_organization_name as TEXT ) as practice_affiliation\n    , cast(primary_specialty_description as TEXT ) as specialty\n    , cast(null as TEXT ) as sub_specialty\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as timestamp ) as tuva_last_run\nfrom provider", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.core__stg_claims_procedure": {"database": "tuva_project_demo", "schema": "core", "name": "core__stg_claims_procedure", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_claims_procedure.sql", "original_file_path": "models/core/staging/core__stg_claims_procedure.sql", "unique_id": "model.the_tuva_project.core__stg_claims_procedure", "fqn": ["the_tuva_project", "core", "staging", "core__stg_claims_procedure"], "alias": "_stg_claims_procedure", "checksum": {"name": "sha256", "checksum": "82fba6f1447e4f9ca0c6b23685fa4b2efdf973eafc7238cf0189513de113f474"}, "config": {"enabled": true, "alias": "_stg_claims_procedure", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_claims"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_claims"], "description": "Staging core claims procedures", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_claims_procedure", "tags": "core_stage_claims", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.871645, "relation_name": "tuva_project_demo.core._stg_claims_procedure", "raw_code": "-- depends_on: {{ ref('data_quality__claims_preprocessing_summary') }}\n\n{{ config(\n     enabled = var('claims_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n-- *************************************************\n-- This dbt model creates the procedure table in core.\n-- *************************************************\n\nwith unpivot_cte as (\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_1 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_1 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_1 is not null\n    \nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_2 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_2 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_2 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_3 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_3 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_3 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_4 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_4 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_4 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_5 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_5 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_5 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_6 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_6 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_6 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_7 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_7 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_7 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_8 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_8 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_8 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_9 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_9 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_9 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_10 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_10 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_10 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_11 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_11 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_11 is not null\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_12 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_12 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_12 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_13 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_13 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_13 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_14 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_14 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_14 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_15 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_15 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_15 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_16 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_16 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_16 is not null\n    \nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_17 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_17 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_17 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_18 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_18 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_18 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_19 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_19 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_19 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_20 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_20 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_20 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_21 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_21 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_21 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_22 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_22 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_22 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_23 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_23 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_23 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_24 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_24 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_24 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_25 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_25 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom {{ ref('normalized_input__medical_claim') }} \nwhere procedure_code_25 is not null\n\n)\n\nselect distinct\n      cast(unpivot_cte.data_source||'_'||unpivot_cte.claim_id||'_'||unpivot_cte.source_code as {{ dbt.type_string() }} ) as procedure_id\n    , cast(unpivot_cte.patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(coalesce(ap.encounter_id, ed.encounter_id) as {{ dbt.type_string() }} ) as encounter_id\n    , cast(unpivot_cte.claim_id as {{ dbt.type_string() }} ) as claim_id\n    , {{ try_to_cast_date('unpivot_cte.procedure_date', 'YYYY-MM-DD') }} as procedure_date\n    , cast(unpivot_cte.source_code_type as {{ dbt.type_string() }} ) as source_code_type\n    , cast(unpivot_cte.source_code as {{ dbt.type_string() }} ) as source_code\n    , cast(null as {{ dbt.type_string() }} ) as source_description\n    , cast(\n        case\n        when icd.icd_10_pcs is not null then 'icd-10-pcs'\n        end as {{ dbt.type_string() }}\n      ) as normalized_code_type\n    , cast(icd.icd_10_pcs as {{ dbt.type_string() }} ) as normalized_code\n    , cast(icd.description as {{ dbt.type_string() }} ) as normalized_description\n    , cast(unpivot_cte.modifier_1 as {{ dbt.type_string() }} ) as modifier_1\n    , cast(unpivot_cte.modifier_2 as {{ dbt.type_string() }} ) as modifier_2\n    , cast(unpivot_cte.modifier_3 as {{ dbt.type_string() }} ) as modifier_3\n    , cast(unpivot_cte.modifier_4 as {{ dbt.type_string() }} ) as modifier_4\n    , cast(unpivot_cte.modifier_5 as {{ dbt.type_string() }} ) as modifier_5\n    , cast(unpivot_cte.practitioner_npi as {{ dbt.type_string() }} ) as practitioner_id\n    , cast(unpivot_cte.data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom unpivot_cte\nleft join {{ ref('terminology__icd_10_pcs') }} as icd\n    on unpivot_cte.source_code = icd.icd_10_pcs\nleft join {{ ref('acute_inpatient__encounter_id')}} as ap\n    on unpivot_cte.claim_id = ap.claim_id\nleft join {{ ref('emergency_department__int_encounter_id')}} as ed\n    on unpivot_cte.claim_id = ed.claim_id", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "terminology__icd_10_pcs", "package": null, "version": null}, {"name": "acute_inpatient__encounter_id", "package": null, "version": null}, {"name": "emergency_department__int_encounter_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_timestamp"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.terminology__icd_10_pcs", "model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.emergency_department__int_encounter_id"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/staging/core__stg_claims_procedure.sql", "compiled": true, "compiled_code": "-- depends_on: tuva_project_demo.data_quality.claims_preprocessing_summary\n\n\n\n-- *************************************************\n-- This dbt model creates the procedure table in core.\n-- *************************************************\n\nwith unpivot_cte as (\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_1 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_1 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_1 is not null\n    \nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_2 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_2 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_2 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_3 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_3 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_3 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_4 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_4 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_4 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_5 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_5 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_5 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_6 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_6 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_6 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_7 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_7 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_7 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_8 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_8 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_8 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_9 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_9 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_9 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_10 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_10 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_10 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_11 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_11 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_11 is not null\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_12 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_12 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_12 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_13 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_13 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_13 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_14 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_14 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_14 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_15 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_15 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_15 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_16 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_16 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_16 is not null\n    \nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_17 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_17 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_17 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_18 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_18 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_18 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_19 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_19 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_19 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_20 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_20 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_20 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_21 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_21 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_21 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_22 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_22 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_22 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_23 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_23 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_23 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_24 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_24 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_24 is not null\n\nunion distinct\n\nselect\n    claim_id as claim_id\n  , patient_id as patient_id\n  , procedure_date_25 as procedure_date\n  , procedure_code_type as source_code_type\n  , procedure_code_25 as source_code\n  , rendering_npi as practitioner_npi\n  , hcpcs_modifier_1 as modifier_1\n  , hcpcs_modifier_2 as modifier_2\n  , hcpcs_modifier_3 as modifier_3\n  , hcpcs_modifier_4 as modifier_4\n  , hcpcs_modifier_5 as modifier_5\n  , data_source as data_source\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim \nwhere procedure_code_25 is not null\n\n)\n\nselect distinct\n      cast(unpivot_cte.data_source||'_'||unpivot_cte.claim_id||'_'||unpivot_cte.source_code as TEXT ) as procedure_id\n    , cast(unpivot_cte.patient_id as TEXT ) as patient_id\n    , cast(coalesce(ap.encounter_id, ed.encounter_id) as TEXT ) as encounter_id\n    , cast(unpivot_cte.claim_id as TEXT ) as claim_id\n    , try_cast( unpivot_cte.procedure_date as date ) as procedure_date\n    , cast(unpivot_cte.source_code_type as TEXT ) as source_code_type\n    , cast(unpivot_cte.source_code as TEXT ) as source_code\n    , cast(null as TEXT ) as source_description\n    , cast(\n        case\n        when icd.icd_10_pcs is not null then 'icd-10-pcs'\n        end as TEXT\n      ) as normalized_code_type\n    , cast(icd.icd_10_pcs as TEXT ) as normalized_code\n    , cast(icd.description as TEXT ) as normalized_description\n    , cast(unpivot_cte.modifier_1 as TEXT ) as modifier_1\n    , cast(unpivot_cte.modifier_2 as TEXT ) as modifier_2\n    , cast(unpivot_cte.modifier_3 as TEXT ) as modifier_3\n    , cast(unpivot_cte.modifier_4 as TEXT ) as modifier_4\n    , cast(unpivot_cte.modifier_5 as TEXT ) as modifier_5\n    , cast(unpivot_cte.practitioner_npi as TEXT ) as practitioner_id\n    , cast(unpivot_cte.data_source as TEXT ) as data_source\n    , cast('2024-01-17 14:47:17.546759+00:00' as timestamp ) as tuva_last_run\nfrom unpivot_cte\nleft join tuva_project_demo.terminology.icd_10_pcs as icd\n    on unpivot_cte.source_code = icd.icd_10_pcs\nleft join tuva_project_demo.claims_preprocessing._int_acute_inpatient_encounter_id as ap\n    on unpivot_cte.claim_id = ap.claim_id\nleft join tuva_project_demo.claims_preprocessing._int_emergency_department_encounter_id as ed\n    on unpivot_cte.claim_id = ed.claim_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_summary": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_summary", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_summary.sql", "original_file_path": "models/data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_summary.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_summary", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "final", "data_quality__claims_preprocessing_summary"], "alias": "claims_preprocessing_summary", "checksum": {"name": "sha256", "checksum": "507eea2f065d4c9d52e5f49ece43e2996ceed1d5dcd2726b7a0b7b2a8f92e6a8"}, "config": {"enabled": true, "alias": "claims_preprocessing_summary", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {"source_table": {"name": "source_table", "description": "Table this test category is in reference to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_category": {"name": "test_category", "description": "Category of test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "counts": {"name": "counts", "description": "Aggregated counts of all tests in this category and table that failed\n", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "claims_preprocessing_summary", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.9540613, "relation_name": "tuva_project_demo.data_quality.claims_preprocessing_summary", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith test_failure_summary as (\n  select\n      cast(source_table as {{ dbt.type_string() }} ) as source_table\n      , cast(grain as {{ dbt.type_string() }} ) as grain\n      , cast(test_category as {{ dbt.type_string() }} ) as test_category\n      , cast(count(distinct foreign_key||data_source) as int) as counts\n  from {{ ref('data_quality__claims_preprocessing_test_detail' )}}\n  group by\n      source_table\n      ,grain\n      ,test_category\n)\n\n, summary_union as(\n    select\n      cast(source_table as {{ dbt.type_string() }} ) as source_table\n      , cast(grain as {{ dbt.type_string() }} ) as grain\n      , cast(test_category as {{ dbt.type_string() }} ) as test_category\n      , cast(counts as int) as counts\n    from test_failure_summary\n\n    /******* The tables below populate the test when no failures are present  ******/\n    union all\n\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as {{ dbt.type_string() }} ) as source_table\n            , cast('claim_id' as {{ dbt.type_string() }} ) as grain\n            , cast('duplicate_claims' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_medical_claim_duplicates' )}} )\n    union all\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as {{ dbt.type_string() }} ) as source_table\n            , cast('claim_id' as {{ dbt.type_string() }} ) as grain\n            , cast('claim_type' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts \n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_claim_type_mapping_failures' )}} )\n    and not exists (select 1 from {{ ref('data_quality__claims_preprocessing_claim_type_unmapped' )}} )\n    and not exists (select 1 from {{ ref('data_quality__claims_preprocessing_medical_claim_inst_missing_values' )}} where test_category = 'claim_type')\n    and not exists (select 1 from {{ ref('data_quality__claims_preprocessing_medical_claim_prof_missing_values' )}} where test_category = 'claim_type')\n    union all\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as {{ dbt.type_string() }} ) as source_table\n            , cast('claim_id' as {{ dbt.type_string() }} ) as grain\n            , cast('header' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_institutional_header_fail_details' )}} )\n    and not exists (select 1 from {{ ref('data_quality__claims_preprocessing_professional_header_fail_details' )}} )\n    union all\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as {{ dbt.type_string() }} ) as source_table\n            , cast('claim_id' as {{ dbt.type_string() }} ) as grain\n            , cast('invalid_values' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_medical_claim_invalid_values' )}} )\n    union all\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as {{ dbt.type_string() }} ) as source_table\n            , cast('claim_id' as {{ dbt.type_string() }} ) as grain\n            , cast('missing_values' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_medical_claim_inst_missing_values' )}} )\n    and not exists (select 1 from {{ ref('data_quality__claims_preprocessing_medical_claim_prof_missing_values' )}} )\n\n    /****  eligibility  ****/\n    union all\n    select * from (\n        select\n            cast('normalized_input__eligibility' as {{ dbt.type_string() }} ) as source_table\n            , cast('patient_id' as {{ dbt.type_string() }} ) as grain\n            , cast('duplicate_eligibility' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_eligibility_duplicates' )}} )\n    union all\n    select * from (\n        select\n            cast('normalized_input__eligibility' as {{ dbt.type_string() }} ) as source_table\n            , cast('patient_id' as {{ dbt.type_string() }} ) as grain\n            , cast('invalid_values' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_eligibility_invalid_values' )}} )\n    union all\n    select * from (\n        select\n            cast('normalized_input__eligibility' as {{ dbt.type_string() }} ) as source_table\n            , cast('patient_id' as {{ dbt.type_string() }} ) as grain\n            , cast('missing_values' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_eligibility_missing_values' )}} )\n\n    /****  pharmacy_claim  ****/\n    union all\n    select * from (\n        select\n            cast('normalized_input__pharmacy_claim' as {{ dbt.type_string() }} ) as source_table\n            , cast('claim_id' as {{ dbt.type_string() }} ) as grain\n            , cast('duplicate_claims' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_pharmacy_claim_duplicates' )}} )\n    union all\n    select * from (\n        select\n            cast('normalized_input__pharmacy_claim' as {{ dbt.type_string() }} ) as source_table\n            , cast('claim_id' as {{ dbt.type_string() }} ) as grain\n            , cast('missing_values' as {{ dbt.type_string() }} ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from {{ ref('data_quality__claims_preprocessing_pharmacy_claim_missing_values' )}} )\n)\n\nselect \n    cast(source_table as {{ dbt.type_string() }} ) as source_table\n    , cast(case \n        when source_table = 'normalized_input__medical_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'claim_type'\n            then '2_claim_type'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'header'\n            then '3_header'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'invalid_values'\n            then '4_invalid_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'missing_values'\n            then '5_missing_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'plausibility'\n            then '6_plausibility'   \n        when source_table = 'normalized_input__medical_claim' and test_category = 'good'\n            then '7_good'            \n        when source_table = 'normalized_input__eligibility' and test_category = 'duplicate_eligibility'\n            then '1_duplicate_eligibility'\n        when source_table = 'normalized_input__eligibility' and test_category = 'invalid_values'\n            then '2_invalid_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'missing_values'\n            then '3_missing_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'plausibility'\n            then '4_plausibility'   \n        when source_table = 'normalized_input__eligibility' and test_category = 'good'\n            then '5_good'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'missing_values'\n            then '2_missing_values'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'plausibility'\n            then '3_plausibility'   \n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'good'\n            then '4_good'\n        else test_category \n    end as {{ dbt.type_string() }} ) as test_category\n    , cast(counts as int) as counts\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom summary_union", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_duplicates", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_claim_type_mapping_failures", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_claim_type_unmapped", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_inst_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_prof_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_institutional_header_fail_details", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_professional_header_fail_details", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_invalid_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_inst_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_prof_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_eligibility_duplicates", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_eligibility_invalid_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_eligibility_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_pharmacy_claim_duplicates", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_pharmacy_claim_missing_values", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_summary.sql", "compiled": true, "compiled_code": "\n\nwith test_failure_summary as (\n  select\n      cast(source_table as TEXT ) as source_table\n      , cast(grain as TEXT ) as grain\n      , cast(test_category as TEXT ) as test_category\n      , cast(count(distinct foreign_key||data_source) as int) as counts\n  from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n  group by\n      source_table\n      ,grain\n      ,test_category\n)\n\n, summary_union as(\n    select\n      cast(source_table as TEXT ) as source_table\n      , cast(grain as TEXT ) as grain\n      , cast(test_category as TEXT ) as test_category\n      , cast(counts as int) as counts\n    from test_failure_summary\n\n    /******* The tables below populate the test when no failures are present  ******/\n    union all\n\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as TEXT ) as source_table\n            , cast('claim_id' as TEXT ) as grain\n            , cast('duplicate_claims' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_duplicates )\n    union all\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as TEXT ) as source_table\n            , cast('claim_id' as TEXT ) as grain\n            , cast('claim_type' as TEXT ) as test_category\n            , cast(0 as int) as counts \n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_claim_type_mapping_failures )\n    and not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_claim_type_unmapped )\n    and not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_inst_missing_values where test_category = 'claim_type')\n    and not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_prof_missing_values where test_category = 'claim_type')\n    union all\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as TEXT ) as source_table\n            , cast('claim_id' as TEXT ) as grain\n            , cast('header' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_institutional_header_fail_details )\n    and not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_professional_header_fail_details )\n    union all\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as TEXT ) as source_table\n            , cast('claim_id' as TEXT ) as grain\n            , cast('invalid_values' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_invalid_values )\n    union all\n    select * from (\n        select\n            cast('normalized_input__medical_claim' as TEXT ) as source_table\n            , cast('claim_id' as TEXT ) as grain\n            , cast('missing_values' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_inst_missing_values )\n    and not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_prof_missing_values )\n\n    /****  eligibility  ****/\n    union all\n    select * from (\n        select\n            cast('normalized_input__eligibility' as TEXT ) as source_table\n            , cast('patient_id' as TEXT ) as grain\n            , cast('duplicate_eligibility' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_duplicates )\n    union all\n    select * from (\n        select\n            cast('normalized_input__eligibility' as TEXT ) as source_table\n            , cast('patient_id' as TEXT ) as grain\n            , cast('invalid_values' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_invalid_values )\n    union all\n    select * from (\n        select\n            cast('normalized_input__eligibility' as TEXT ) as source_table\n            , cast('patient_id' as TEXT ) as grain\n            , cast('missing_values' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_missing_values )\n\n    /****  pharmacy_claim  ****/\n    union all\n    select * from (\n        select\n            cast('normalized_input__pharmacy_claim' as TEXT ) as source_table\n            , cast('claim_id' as TEXT ) as grain\n            , cast('duplicate_claims' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_claim_duplicates )\n    union all\n    select * from (\n        select\n            cast('normalized_input__pharmacy_claim' as TEXT ) as source_table\n            , cast('claim_id' as TEXT ) as grain\n            , cast('missing_values' as TEXT ) as test_category\n            , cast(0 as int) as counts\n    ) failure_stub\n    where not exists (select 1 from tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_claim_missing_values )\n)\n\nselect \n    cast(source_table as TEXT ) as source_table\n    , cast(case \n        when source_table = 'normalized_input__medical_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'claim_type'\n            then '2_claim_type'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'header'\n            then '3_header'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'invalid_values'\n            then '4_invalid_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'missing_values'\n            then '5_missing_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'plausibility'\n            then '6_plausibility'   \n        when source_table = 'normalized_input__medical_claim' and test_category = 'good'\n            then '7_good'            \n        when source_table = 'normalized_input__eligibility' and test_category = 'duplicate_eligibility'\n            then '1_duplicate_eligibility'\n        when source_table = 'normalized_input__eligibility' and test_category = 'invalid_values'\n            then '2_invalid_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'missing_values'\n            then '3_missing_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'plausibility'\n            then '4_plausibility'   \n        when source_table = 'normalized_input__eligibility' and test_category = 'good'\n            then '5_good'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'missing_values'\n            then '2_missing_values'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'plausibility'\n            then '3_plausibility'   \n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'good'\n            then '4_good'\n        else test_category \n    end as TEXT ) as test_category\n    , cast(counts as int) as counts\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom summary_union", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_test_detail": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_test_detail", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_test_detail.sql", "original_file_path": "models/data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_test_detail.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "final", "data_quality__claims_preprocessing_test_detail"], "alias": "claims_preprocessing_test_detail", "checksum": {"name": "sha256", "checksum": "e6a08ca903b518c67318cb0cc79714ee9901d90f796de8b8ce59a760e7e30d09"}, "config": {"enabled": true, "alias": "claims_preprocessing_test_detail", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {"source_table": {"name": "source_table", "description": "Table this test is in reference to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_category": {"name": "test_category", "description": "Category of test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_name": {"name": "test_name", "description": "Name of the test being performed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grain": {"name": "grain", "description": "Grain of the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Specific claim type, if any, that this test is specific to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_test": {"name": "pipeline_test", "description": "Flag to indicate a pipeline stopping test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "foreign_key": {"name": "foreign_key", "description": "The column this table can be used to join back to the source table\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "claims_preprocessing_test_detail", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.967683, "relation_name": "tuva_project_demo.data_quality.claims_preprocessing_test_detail", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith test_detail_union as(\n\nselect * from {{ ref('data_quality__claims_preprocessing_test_detail_stage_medical_claim') }}\nunion all\nselect * from {{ ref('data_quality__claims_preprocessing_test_detail_stage_eligibility') }}\nunion all\nselect * from {{ ref('data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim') }}\n\n\n)\n\nselect \n    source_table\n    , case \n        when source_table = 'normalized_input__medical_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'claim_type'\n            then '2_claim_type'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'header'\n            then '3_header'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'invalid_values'\n            then '4_invalid_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'missing_values'\n            then '5_missing_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'plausibility'\n            then '6_plausibility'            \n        when source_table = 'normalized_input__eligibility' and test_category = 'duplicate_eligibility'\n            then '1_duplicate_eligibility'\n        when source_table = 'normalized_input__eligibility' and test_category = 'invalid_values'\n            then '2_invalid_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'missing_values'\n            then '3_missing_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'plausibility'\n            then '4_plausibility'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'missing_values'\n            then '2_missing_values'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'plausibility'\n            then '3_plausibility'\n        else test_category \n      end as test_category\n    , test_name \n    , grain\n    , claim_type\n    , pipeline_test\n    , foreign_key\n    , data_source\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom test_detail_union", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_detail_stage_medical_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail_stage_eligibility", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_test_detail.sql", "compiled": true, "compiled_code": "\n\nwith test_detail_union as(\n\nselect * from tuva_project_demo.data_quality._int_claims_preprocessing_test_detail_stage_medical_claim\nunion all\nselect * from tuva_project_demo.data_quality._int_claims_preprocessing_test_detail_stage_eligibility\nunion all\nselect * from tuva_project_demo.data_quality._int_claims_preprocessing_test_detail_stage_pharmacy_claim\n\n\n)\n\nselect \n    source_table\n    , case \n        when source_table = 'normalized_input__medical_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'claim_type'\n            then '2_claim_type'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'header'\n            then '3_header'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'invalid_values'\n            then '4_invalid_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'missing_values'\n            then '5_missing_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'plausibility'\n            then '6_plausibility'            \n        when source_table = 'normalized_input__eligibility' and test_category = 'duplicate_eligibility'\n            then '1_duplicate_eligibility'\n        when source_table = 'normalized_input__eligibility' and test_category = 'invalid_values'\n            then '2_invalid_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'missing_values'\n            then '3_missing_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'plausibility'\n            then '4_plausibility'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'missing_values'\n            then '2_missing_values'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'plausibility'\n            then '3_plausibility'\n        else test_category \n      end as test_category\n    , test_name \n    , grain\n    , claim_type\n    , pipeline_test\n    , foreign_key\n    , data_source\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom test_detail_union", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_test_result": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_test_result", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_test_result.sql", "original_file_path": "models/data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_test_result.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "final", "data_quality__claims_preprocessing_test_result"], "alias": "claims_preprocessing_test_result", "checksum": {"name": "sha256", "checksum": "65630b4a70b2b25ccd0d81b6643c26021c0dcbad572e678e4c41be7e6349b217"}, "config": {"enabled": true, "alias": "claims_preprocessing_test_result", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {"source_table": {"name": "source_table", "description": "Table this test is in reference to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grain": {"name": "grain", "description": "Grain of the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_category": {"name": "test_category", "description": "Category of test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_name": {"name": "test_name", "description": "Name of the test being performed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Specific claim type, if any, that this test is specific to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pipeline_test": {"name": "pipeline_test", "description": "Flag to indicate a pipeline stopping test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Number of failures of this test", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "denominator": {"name": "denominator", "description": "Total number of records analyzed for this test", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "claims_preprocessing_test_result", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.9751778, "relation_name": "tuva_project_demo.data_quality.claims_preprocessing_test_result", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect * from {{ ref('data_quality__claims_preprocessing_test_result_stage_medical_claim') }}\n\nunion all\n\nselect * from {{ ref('data_quality__claims_preprocessing_test_result_stage_eligibility') }}\n\nunion all\n\nselect * from {{ ref('data_quality__claims_preprocessing_test_result_stage_pharmacy_claim') }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_result_stage_medical_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_result_stage_eligibility", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_result_stage_pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim", "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility", "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_test_result.sql", "compiled": true, "compiled_code": "\n\nselect * from tuva_project_demo.data_quality._int_claims_preprocessing_test_result_stage_medical_claim\n\nunion all\n\nselect * from tuva_project_demo.data_quality._int_claims_preprocessing_test_result_stage_eligibility\n\nunion all\n\nselect * from tuva_project_demo.data_quality._int_claims_preprocessing_test_result_stage_pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_use_case": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_use_case", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_use_case.sql", "original_file_path": "models/data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_use_case.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_use_case", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "final", "data_quality__claims_preprocessing_use_case"], "alias": "claims_preprocessing_use_case", "checksum": {"name": "sha256", "checksum": "48696a2c60c3f6cdd20585fae8aa2a8731937164cfa95438fea455f7a54af1d4"}, "config": {"enabled": true, "alias": "claims_preprocessing_use_case", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {"use_case": {"name": "use_case", "description": "The mart or logic that would be affected by test failures", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_table": {"name": "source_table", "description": "Table this use case is in reference to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_name": {"name": "test_name", "description": "Name of the test being performed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Number of failures of this test", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "denominator": {"name": "denominator", "description": "Total number of records analyzed for this test", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "claims_preprocessing_use_case", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.9859498, "relation_name": "tuva_project_demo.data_quality.claims_preprocessing_use_case", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\nwith use_case_stage as(\n    select\n        'encounters' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from {{ ref('normalized_input__medical_claim') }} ) as denominator\n    from {{ ref('data_quality__claims_preprocessing_test_detail')}}\n    where 1=1\n    and test_name in ('revenue_center_code missing'\n                    ,'revenue_center_code invalid'\n                    ,'discharge_disposition_code missing'\n                    ,'discharge_disposition_code invalid'\n                    ,'ms_drg_code missing'\n                    ,'ms_drg_code invalid'\n                    ,'bill_type_code missing'\n                    ,'bill_type_code invalid'\n                    ,'place_of_service_code missing'\n                    ,'place_of_service_code invalid'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'claim_id missing'\n                    ,'patient_id missing'\n                    ,'claim_start_date missing'\n                    ,'claim_end_date missing'\n                    ,'facility_npi missing'\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all\n\n    select \n        'service_grouper' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from {{ ref('normalized_input__medical_claim') }} ) as denominator\n    from {{ ref('data_quality__claims_preprocessing_test_detail')}}\n    where 1=1\n    and test_name in ('revenue_center_code missing'\n                    ,'revenue_center_code invalid'\n                    ,'bill_type_code missing'\n                    ,'bill_type_code invalid'\n                    ,'place_of_service_code missing'\n                    ,'place_of_service_code invalid'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'claim_id missing'\n                    ,'patient_id missing'\n                    ,'hcpcs_code missing'\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'readmissions' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from {{ ref('normalized_input__medical_claim') }} ) as denominator\n    from {{ ref('data_quality__claims_preprocessing_test_detail')}}\n    where 1=1\n    and test_name in ('diagnosis_code_1 missing'\n                    ,'diagnosis_code_1 invalid'\n                    ,'revenue_center_code missing'\n                    ,'revenue_center_code invalid'\n                    ,'discharge_disposition_code missing'\n                    ,'discharge_disposition_code invalid'\n                    ,'ms_drg_code missing'\n                    ,'ms_drg_code invalid'\n                    ,'bill_type_code missing'\n                    ,'bill_type_code invalid'\n                    ,'place_of_service_code missing'\n                    ,'place_of_service_code invalid'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'claim_id missing'\n                    ,'patient_id missing'\n                    ,'claim_start_date missing'\n                    ,'claim_end_date missing'\n                    ,'facility_npi missing'\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'pmpm' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from {{ ref('normalized_input__medical_claim') }} ) as denominator\n    from {{ ref('data_quality__claims_preprocessing_test_detail')}}\n    where 1=1\n    and test_name in ('patient_id missing'\n                    ,'claim_start_date missing'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'readmissions' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from {{ ref('normalized_input__pharmacy_claim') }} ) as denominator\n    from {{ ref('data_quality__claims_preprocessing_test_detail')}}\n    where 1=1\n    and test_name in ('patient_id missing'\n                    ,'dispensing_date missing'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'paid_amount missing'\n                    )\n    and source_table = 'normalized_input__pharmacy_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'member_months' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct patient_id||data_source) from {{ ref('normalized_input__eligibility') }} ) as denominator\n    from {{ ref('data_quality__claims_preprocessing_test_detail')}}\n    where 1=1\n    and test_name in ('patient_id missing'\n                    ,'enrollment_start_date missing'\n                    ,'enrollment_end_date invalid'\n                    ,'payer missing'\n                    ,'payer missing'\n                    ,'payer_type invalid'\n                    )\n    and source_table = 'normalized_input__eligibility'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'chronic_conditions' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from {{ ref('normalized_input__medical_claim') }} ) as denominator\n    from {{ ref('data_quality__claims_preprocessing_test_detail')}}\n    where 1=1\n    and test_name in ('diagnosis_code_1 missing'\n                    ,'diagnosis_code_1 invalid'\n                    ,'claim_start_date missing'\n                    ,'claim_start_date invalid'\n                    ,'patient_id missing'\n                    ,'patient_id invalid'\n                    ,'diagnosis_code_type missing'\n                    ,'diagnosis_code_type invalid'\n                    ,'procedure_code_1 missing'\n                    ,'procedure_code_1 invalid'\n                    ,'procedure_code_type invalid'\n                    ,'procedure_code_type missing'\n                    /**  encounter fields  **/\n                    ,'diagnosis_code_1 missing'\n                    ,'diagnosis_code_1 invalid'\n                    ,'revenue_center_code missing'\n                    ,'revenue_center_code invalid'\n                    ,'discharge_disposition_code missing'\n                    ,'discharge_disposition_code invalid'\n                    ,'ms_drg_code missing'\n                    ,'ms_drg_code invalid'\n                    ,'bill_type_code missing'\n                    ,'bill_type_code invalid'\n                    ,'place_of_service_code missing'\n                    ,'place_of_service_code invalid'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'claim_id missing'\n                    ,'patient_id missing'\n                    ,'claim_start_date missing'\n                    ,'claim_end_date missing'\n                    ,'facility_npi missing'\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'chronic_conditions' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from {{ ref('normalized_input__pharmacy_claim') }} ) as denominator\n    from {{ ref('data_quality__claims_preprocessing_test_detail')}}\n    where 1=1\n    and test_name in ('ndc_code missing'\n                    ,'patient_id missing'\n                    ,'paid_date missing'\n                    )\n    and source_table = 'normalized_input__pharmacy_claim'\n    group by\n        source_table\n        , test_name\n)\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run from use_case_stage", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "normalized_input__pharmacy_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "normalized_input__eligibility", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "normalized_input__pharmacy_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "model.the_tuva_project.normalized_input__pharmacy_claim", "model.the_tuva_project.normalized_input__eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/final/data_quality__claims_preprocessing_use_case.sql", "compiled": true, "compiled_code": "\nwith use_case_stage as(\n    select\n        'encounters' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim ) as denominator\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where 1=1\n    and test_name in ('revenue_center_code missing'\n                    ,'revenue_center_code invalid'\n                    ,'discharge_disposition_code missing'\n                    ,'discharge_disposition_code invalid'\n                    ,'ms_drg_code missing'\n                    ,'ms_drg_code invalid'\n                    ,'bill_type_code missing'\n                    ,'bill_type_code invalid'\n                    ,'place_of_service_code missing'\n                    ,'place_of_service_code invalid'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'claim_id missing'\n                    ,'patient_id missing'\n                    ,'claim_start_date missing'\n                    ,'claim_end_date missing'\n                    ,'facility_npi missing'\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all\n\n    select \n        'service_grouper' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim ) as denominator\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where 1=1\n    and test_name in ('revenue_center_code missing'\n                    ,'revenue_center_code invalid'\n                    ,'bill_type_code missing'\n                    ,'bill_type_code invalid'\n                    ,'place_of_service_code missing'\n                    ,'place_of_service_code invalid'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'claim_id missing'\n                    ,'patient_id missing'\n                    ,'hcpcs_code missing'\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'readmissions' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim ) as denominator\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where 1=1\n    and test_name in ('diagnosis_code_1 missing'\n                    ,'diagnosis_code_1 invalid'\n                    ,'revenue_center_code missing'\n                    ,'revenue_center_code invalid'\n                    ,'discharge_disposition_code missing'\n                    ,'discharge_disposition_code invalid'\n                    ,'ms_drg_code missing'\n                    ,'ms_drg_code invalid'\n                    ,'bill_type_code missing'\n                    ,'bill_type_code invalid'\n                    ,'place_of_service_code missing'\n                    ,'place_of_service_code invalid'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'claim_id missing'\n                    ,'patient_id missing'\n                    ,'claim_start_date missing'\n                    ,'claim_end_date missing'\n                    ,'facility_npi missing'\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'pmpm' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim ) as denominator\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where 1=1\n    and test_name in ('patient_id missing'\n                    ,'claim_start_date missing'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'readmissions' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim ) as denominator\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where 1=1\n    and test_name in ('patient_id missing'\n                    ,'dispensing_date missing'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'paid_amount missing'\n                    )\n    and source_table = 'normalized_input__pharmacy_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'member_months' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct patient_id||data_source) from tuva_project_demo.claims_preprocessing.normalized_input_eligibility ) as denominator\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where 1=1\n    and test_name in ('patient_id missing'\n                    ,'enrollment_start_date missing'\n                    ,'enrollment_end_date invalid'\n                    ,'payer missing'\n                    ,'payer missing'\n                    ,'payer_type invalid'\n                    )\n    and source_table = 'normalized_input__eligibility'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'chronic_conditions' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim ) as denominator\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where 1=1\n    and test_name in ('diagnosis_code_1 missing'\n                    ,'diagnosis_code_1 invalid'\n                    ,'claim_start_date missing'\n                    ,'claim_start_date invalid'\n                    ,'patient_id missing'\n                    ,'patient_id invalid'\n                    ,'diagnosis_code_type missing'\n                    ,'diagnosis_code_type invalid'\n                    ,'procedure_code_1 missing'\n                    ,'procedure_code_1 invalid'\n                    ,'procedure_code_type invalid'\n                    ,'procedure_code_type missing'\n                    /**  encounter fields  **/\n                    ,'diagnosis_code_1 missing'\n                    ,'diagnosis_code_1 invalid'\n                    ,'revenue_center_code missing'\n                    ,'revenue_center_code invalid'\n                    ,'discharge_disposition_code missing'\n                    ,'discharge_disposition_code invalid'\n                    ,'ms_drg_code missing'\n                    ,'ms_drg_code invalid'\n                    ,'bill_type_code missing'\n                    ,'bill_type_code invalid'\n                    ,'place_of_service_code missing'\n                    ,'place_of_service_code invalid'\n                    ,'claim_type invalid'\n                    ,'claim_type missing'\n                    ,'claim_id missing'\n                    ,'patient_id missing'\n                    ,'claim_start_date missing'\n                    ,'claim_end_date missing'\n                    ,'facility_npi missing'\n                    )\n    and source_table = 'normalized_input__medical_claim'\n    group by\n        source_table\n        , test_name\n\n    union all \n\n    select \n        'chronic_conditions' as use_case\n        , source_table\n        , test_name\n        , count(distinct foreign_key||data_source) as failures\n        , (select count(distinct claim_id||data_source) from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim ) as denominator\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where 1=1\n    and test_name in ('ndc_code missing'\n                    ,'patient_id missing'\n                    ,'paid_date missing'\n                    )\n    and source_table = 'normalized_input__pharmacy_claim'\n    group by\n        source_table\n        , test_name\n)\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run from use_case_stage", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_claim_type_mapping_failures", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_claim_type_mapping_failures.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_claim_type_mapping_failures.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_claim_type_mapping_failures"], "alias": "_int_claims_preprocessing_claim_type_mapping_failures", "checksum": {"name": "sha256", "checksum": "c7f9f6ece097d661fdd2ebaaae833e508a840e267a9743c4157db3a6806ef18f"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_claim_type_mapping_failures", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_claim_type_mapping_failures", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1285, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_claim_type_mapping_failures", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith claim_type_mapping as (\n\n    select \n          claim_id\n        , claim_line_number\n        , data_source\n        , claim_type as source_claim_type\n        , case\n            when bill_type_code is not null or revenue_center_code is not null \n                then 'institutional'\n            when place_of_service_code is not null\n                then 'professional'\n            else null\n          end as data_profiling_claim_type\n    from {{ ref('normalized_input__medical_claim') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_type_mapping.claim_id\n    , claim_type_mapping.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom claim_type_mapping\n     left join test_catalog\n       on test_catalog.test_name = 'claim_type mapping incorrect'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\nwhere claim_type_mapping.source_claim_type <> claim_type_mapping.data_profiling_claim_type\ngroup by\n      claim_type_mapping.claim_id\n    , claim_type_mapping.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_claim_type_mapping_failures.sql", "compiled": true, "compiled_code": "\n\nwith claim_type_mapping as (\n\n    select \n          claim_id\n        , claim_line_number\n        , data_source\n        , claim_type as source_claim_type\n        , case\n            when bill_type_code is not null or revenue_center_code is not null \n                then 'institutional'\n            when place_of_service_code is not null\n                then 'professional'\n            else null\n          end as data_profiling_claim_type\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_type_mapping.claim_id\n    , claim_type_mapping.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom claim_type_mapping\n     left join test_catalog\n       on test_catalog.test_name = 'claim_type mapping incorrect'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\nwhere claim_type_mapping.source_claim_type <> claim_type_mapping.data_profiling_claim_type\ngroup by\n      claim_type_mapping.claim_id\n    , claim_type_mapping.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_claim_type_unmapped", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_claim_type_unmapped.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_claim_type_unmapped.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_claim_type_unmapped"], "alias": "_int_claims_preprocessing_claim_type_unmapped", "checksum": {"name": "sha256", "checksum": "48e0b867c4bfac43b1ad76d39a4c844372f60bf5dc1a8bbdabc6f71987e056ae"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_claim_type_unmapped", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_claim_type_unmapped", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0707135, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_claim_type_unmapped", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith medical_claim as (\n\n    select\n          claim_id\n        , data_source\n        , claim_type\n    from {{ ref('normalized_input__medical_claim') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , medical_claim.claim_id\n    , medical_claim.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom medical_claim\n     left join test_catalog\n       on test_catalog.test_name = 'claim_type missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\nwhere medical_claim.claim_type is null\ngroup by\n      medical_claim.claim_id\n    , medical_claim.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_claim_type_unmapped.sql", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select\n          claim_id\n        , data_source\n        , claim_type\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , medical_claim.claim_id\n    , medical_claim.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom medical_claim\n     left join test_catalog\n       on test_catalog.test_name = 'claim_type missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\nwhere medical_claim.claim_type is null\ngroup by\n      medical_claim.claim_id\n    , medical_claim.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_eligibility_denominators", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_denominators.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_denominators.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_eligibility_denominators"], "alias": "_int_claims_preprocessing_eligibility_denominators", "checksum": {"name": "sha256", "checksum": "56012ed85540b96749b6aa611bf2946b4712d502a1025505a6fab8fba8591912"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_eligibility_denominators", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_eligibility_denominators", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0346122, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_denominators", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\n    Denominator logic for invalid value tests is dependent on whether that\n    specific field is populated or not. We created a macro to automatically\n    generate the CTE. All invalid value tests must have a\n    test_category = 'invalid_values' in the catalog seed.\n*/\nwith all_denominator as (\n\n    select\n        cast('all' as {{ dbt.type_string() }} ) as test_denominator_name\n        , count(distinct patient_id) as denominator\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from {{ ref('normalized_input__eligibility') }}\n\n)\n\n, invalid_value_denominators as (\n\n    {{ eligibility_denominator_invalid_values(builtins.ref('normalized_input__eligibility')) }}\n\n)\n\nselect * from all_denominator\nunion all\nselect * from invalid_value_denominators", "language": "sql", "refs": [{"name": "normalized_input__eligibility", "package": null, "version": null}, {"name": "normalized_input__eligibility", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.eligibility_denominator_invalid_values"], "nodes": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_denominators.sql", "compiled": true, "compiled_code": "\n/*\n    Denominator logic for invalid value tests is dependent on whether that\n    specific field is populated or not. We created a macro to automatically\n    generate the CTE. All invalid value tests must have a\n    test_category = 'invalid_values' in the catalog seed.\n*/\nwith all_denominator as (\n\n    select\n        cast('all' as TEXT ) as test_denominator_name\n        , count(distinct patient_id) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n\n)\n\n, invalid_value_denominators as (\n\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'dual_status_code'\n    where rel.dual_status_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'gender'\n    where rel.gender is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'medicare_status_code'\n    where rel.medicare_status_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'original_reason_entitlement_code'\n    where rel.original_reason_entitlement_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'payer_type'\n    where rel.payer_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'race'\n    where rel.race is not null\n    group by cat.test_name\n    \n\n)\n\nselect * from all_denominator\nunion all\nselect * from invalid_value_denominators", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_eligibility_duplicates", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_duplicates.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_duplicates.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_eligibility_duplicates"], "alias": "_int_claims_preprocessing_eligibility_duplicates", "checksum": {"name": "sha256", "checksum": "6d5abb7f253bb640bfeee840b0232e14dff93e474286afa1fd6a61c8020eea12"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_eligibility_duplicates", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_eligibility_duplicates", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501481.9929368, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_duplicates", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith eligibility as (\n\n    select\n          patient_id\n        , member_id\n        , payer\n        , plan\n        , enrollment_start_date\n        , enrollment_end_date\n        , data_source\n    from {{ ref('normalized_input__eligibility') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'patient_id' as grain\n    , patient_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom eligibility\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate eligibility'\n       and test_catalog.source_table = 'normalized_input__eligibility'\ngroup by\n      eligibility.patient_id\n    , eligibility.member_id\n    , eligibility.payer\n    , eligibility.plan\n    , eligibility.enrollment_start_date\n    , eligibility.enrollment_end_date\n    , eligibility.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "language": "sql", "refs": [{"name": "normalized_input__eligibility", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_duplicates.sql", "compiled": true, "compiled_code": "\n\nwith eligibility as (\n\n    select\n          patient_id\n        , member_id\n        , payer\n        , plan\n        , enrollment_start_date\n        , enrollment_end_date\n        , data_source\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'patient_id' as grain\n    , patient_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom eligibility\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate eligibility'\n       and test_catalog.source_table = 'normalized_input__eligibility'\ngroup by\n      eligibility.patient_id\n    , eligibility.member_id\n    , eligibility.payer\n    , eligibility.plan\n    , eligibility.enrollment_start_date\n    , eligibility.enrollment_end_date\n    , eligibility.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_eligibility_invalid_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_invalid_values.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_invalid_values.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_eligibility_invalid_values"], "alias": "_int_claims_preprocessing_eligibility_invalid_values", "checksum": {"name": "sha256", "checksum": "9439c228ea9e3e4d6899e36323d5ffd13bc9245eb6aedf2dafa9a6880ccdaa86"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_eligibility_invalid_values", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_eligibility_invalid_values", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0020702, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_invalid_values", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith eligiblity as (\n\n    select *\n    from {{ ref('normalized_input__eligibility') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\n, valid_gender as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.gender\n        , count(eligiblity.gender) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join {{ ref('terminology__gender') }} gender\n           on eligiblity.gender = gender.gender\n         left join test_catalog\n           on test_catalog.test_name = 'gender invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where gender.gender is null\n    and eligiblity.gender is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.gender\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_race as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.race\n        , count(eligiblity.race) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join {{ ref('terminology__race') }} race\n           on eligiblity.race = race.description\n         left join test_catalog\n           on test_catalog.test_name = 'race invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where race.description is null\n    and eligiblity.race is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.race\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_payer_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.payer_type\n        , count(eligiblity.payer_type) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join {{ ref('terminology__payer_type') }} payer\n           on eligiblity.payer_type = payer.payer_type\n         left join test_catalog\n           on test_catalog.test_name = 'payer_type invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where payer.payer_type is null\n    and eligiblity.payer_type is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.payer_type\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_orec as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.original_reason_entitlement_code\n        , count(eligiblity.original_reason_entitlement_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join {{ ref('terminology__medicare_orec') }} orec\n           on eligiblity.original_reason_entitlement_code = orec.original_reason_entitlement_code\n         left join test_catalog\n           on test_catalog.test_name = 'original_reason_entitlement_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where orec.original_reason_entitlement_code is null\n    and eligiblity.original_reason_entitlement_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.original_reason_entitlement_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_dual_status_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.dual_status_code\n        , count(eligiblity.dual_status_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join {{ ref('terminology__medicare_dual_eligibility') }} dual\n           on eligiblity.dual_status_code = dual.dual_status_code\n         left join test_catalog\n           on test_catalog.test_name = 'dual_status_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where dual.dual_status_code is null\n    and eligiblity.dual_status_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.dual_status_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_medicare_status_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.medicare_status_code\n        , count(eligiblity.medicare_status_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join {{ ref('terminology__medicare_status') }} status\n           on eligiblity.medicare_status_code = status.medicare_status_code\n         left join test_catalog\n           on test_catalog.test_name = 'medicare_status_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where status.medicare_status_code is null\n    and eligiblity.medicare_status_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.medicare_status_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_gender\nunion all\nselect * from valid_race\nunion all\nselect * from valid_payer_type\nunion all\nselect * from valid_orec\nunion all\nselect * from valid_dual_status_code\nunion all\nselect * from valid_medicare_status_code", "language": "sql", "refs": [{"name": "normalized_input__eligibility", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}, {"name": "terminology__gender", "package": null, "version": null}, {"name": "terminology__race", "package": null, "version": null}, {"name": "terminology__payer_type", "package": null, "version": null}, {"name": "terminology__medicare_orec", "package": null, "version": null}, {"name": "terminology__medicare_dual_eligibility", "package": null, "version": null}, {"name": "terminology__medicare_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog", "seed.the_tuva_project.terminology__gender", "seed.the_tuva_project.terminology__race", "seed.the_tuva_project.terminology__payer_type", "seed.the_tuva_project.terminology__medicare_orec", "seed.the_tuva_project.terminology__medicare_dual_eligibility", "seed.the_tuva_project.terminology__medicare_status"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_invalid_values.sql", "compiled": true, "compiled_code": "\n\nwith eligiblity as (\n\n    select *\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\n, valid_gender as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.gender\n        , count(eligiblity.gender) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join tuva_project_demo.terminology.gender gender\n           on eligiblity.gender = gender.gender\n         left join test_catalog\n           on test_catalog.test_name = 'gender invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where gender.gender is null\n    and eligiblity.gender is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.gender\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_race as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.race\n        , count(eligiblity.race) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join tuva_project_demo.terminology.race race\n           on eligiblity.race = race.description\n         left join test_catalog\n           on test_catalog.test_name = 'race invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where race.description is null\n    and eligiblity.race is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.race\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_payer_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.payer_type\n        , count(eligiblity.payer_type) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join tuva_project_demo.terminology.payer_type payer\n           on eligiblity.payer_type = payer.payer_type\n         left join test_catalog\n           on test_catalog.test_name = 'payer_type invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where payer.payer_type is null\n    and eligiblity.payer_type is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.payer_type\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_orec as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.original_reason_entitlement_code\n        , count(eligiblity.original_reason_entitlement_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join tuva_project_demo.terminology.medicare_orec orec\n           on eligiblity.original_reason_entitlement_code = orec.original_reason_entitlement_code\n         left join test_catalog\n           on test_catalog.test_name = 'original_reason_entitlement_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where orec.original_reason_entitlement_code is null\n    and eligiblity.original_reason_entitlement_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.original_reason_entitlement_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_dual_status_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.dual_status_code\n        , count(eligiblity.dual_status_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join tuva_project_demo.terminology.medicare_dual_eligibility dual\n           on eligiblity.dual_status_code = dual.dual_status_code\n         left join test_catalog\n           on test_catalog.test_name = 'dual_status_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where dual.dual_status_code is null\n    and eligiblity.dual_status_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.dual_status_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_medicare_status_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.medicare_status_code\n        , count(eligiblity.medicare_status_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join tuva_project_demo.terminology.medicare_status status\n           on eligiblity.medicare_status_code = status.medicare_status_code\n         left join test_catalog\n           on test_catalog.test_name = 'medicare_status_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where status.medicare_status_code is null\n    and eligiblity.medicare_status_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.medicare_status_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_gender\nunion all\nselect * from valid_race\nunion all\nselect * from valid_payer_type\nunion all\nselect * from valid_orec\nunion all\nselect * from valid_dual_status_code\nunion all\nselect * from valid_medicare_status_code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_eligibility_missing_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_missing_values.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_missing_values.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_eligibility_missing_values"], "alias": "_int_claims_preprocessing_eligibility_missing_values", "checksum": {"name": "sha256", "checksum": "d2e6e2bfbd26ec32ccb9262ed739f2a429b7d0b74776853b2406dfc3bec60424"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_eligibility_missing_values", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_eligibility_missing_values", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0109866, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_missing_values", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set eligibility_missing_column_list = [\n      'patient_id'\n    , 'member_id'\n    , 'gender'\n    , 'race'\n    , 'birth_date'\n    , 'death_date'\n    , 'death_flag'\n    , 'enrollment_start_date'\n    , 'enrollment_end_date'\n    , 'payer'\n    , 'payer_type'\n    , 'dual_status_code'\n    , 'medicare_status_code'\n    , 'first_name'\n    , 'last_name'\n    , 'address'\n    , 'city'\n    , 'state'\n    , 'zip_code'\n    , 'phone'\n    , 'data_source'\n] -%}\n\nwith eligibility_missing as (\n\n {{ eligibility_missing_column_check(builtins.ref('normalized_input__eligibility'), eligibility_missing_column_list) }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'patient_id' as grain\n    , eligibility_missing.patient_id\n    , eligibility_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom eligibility_missing\n     left join test_catalog\n       on test_catalog.test_name = eligibility_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__eligibility'\ngroup by\n      eligibility_missing.patient_id\n    , eligibility_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__eligibility", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.eligibility_missing_column_check"], "nodes": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_missing_values.sql", "compiled": true, "compiled_code": "\n\nwith eligibility_missing as (\n\n \n        select\n              patient_id\n            , data_source\n            , 'patient_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where patient_id is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'member_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where member_id is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'gender' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where gender is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'race' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where race is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'birth_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where birth_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'death_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where death_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'death_flag' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where death_flag is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'enrollment_start_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where enrollment_start_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'enrollment_end_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where enrollment_end_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'payer' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where payer is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'payer_type' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where payer_type is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'dual_status_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where dual_status_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'medicare_status_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where medicare_status_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'first_name' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where first_name is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'last_name' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where last_name is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'address' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where address is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'city' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where city is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'state' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where state is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'zip_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where zip_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'phone' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where phone is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'data_source' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n        where data_source is null\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'patient_id' as grain\n    , eligibility_missing.patient_id\n    , eligibility_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom eligibility_missing\n     left join test_catalog\n       on test_catalog.test_name = eligibility_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__eligibility'\ngroup by\n      eligibility_missing.patient_id\n    , eligibility_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_eligibility_plausibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_plausibility.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_plausibility.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_eligibility_plausibility"], "alias": "_int_claims_preprocessing_eligibility_plausibility", "checksum": {"name": "sha256", "checksum": "5c0a56afedaf7f81a45427652011c15bc5aa77266f0987de893c5881c5b38522"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_eligibility_plausibility", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_eligibility_plausibility", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0451374, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_plausibility", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith eligiblity as (\n\n    select *\n    from {{ ref('normalized_input__eligibility') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\n, multiple_genders_test as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple genders'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.gender) > 1\n\n)\n\n, multiple_races_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple races'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.race) > 1\n\n)\n\n, multiple_birth_dates_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple birth dates'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.birth_date) > 1\n\n)\n\n, multiple_death_dates_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple death dates'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.death_date) > 1\n\n)\n\n, birth_date_after_death_date as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'birth date after death date'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where eligiblity.birth_date > eligiblity.death_date\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from multiple_genders_test\nunion all\nselect * from multiple_races_test\nunion all\nselect * from multiple_birth_dates_test\nunion all\nselect * from multiple_death_dates_test\nunion all\nselect * from birth_date_after_death_date", "language": "sql", "refs": [{"name": "normalized_input__eligibility", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_eligibility_plausibility.sql", "compiled": true, "compiled_code": "\n\nwith eligiblity as (\n\n    select *\n    from tuva_project_demo.claims_preprocessing.normalized_input_eligibility\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\n, multiple_genders_test as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple genders'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.gender) > 1\n\n)\n\n, multiple_races_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple races'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.race) > 1\n\n)\n\n, multiple_birth_dates_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple birth dates'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.birth_date) > 1\n\n)\n\n, multiple_death_dates_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple death dates'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.death_date) > 1\n\n)\n\n, birth_date_after_death_date as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'birth date after death date'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where eligiblity.birth_date > eligiblity.death_date\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from multiple_genders_test\nunion all\nselect * from multiple_races_test\nunion all\nselect * from multiple_birth_dates_test\nunion all\nselect * from multiple_death_dates_test\nunion all\nselect * from birth_date_after_death_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_institutional_header_fail_details", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_institutional_header_fail_details.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_institutional_header_fail_details.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_institutional_header_fail_details"], "alias": "_int_claims_preprocessing_institutional_header_fail_details", "checksum": {"name": "sha256", "checksum": "75f3a4e11c345a50688ca8c027aa7d06520d0455bd39c2bee57cde06a7bbcb14"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_institutional_header_fail_details", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_institutional_header_fail_details", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.077789, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_institutional_header_fail_details", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set institutional_header_column_list = [\n      'claim_id'\n    , 'claim_type'\n    , 'patient_id'\n    , 'member_id'\n    , 'payer'\n    , 'plan'\n    , 'claim_start_date'\n    , 'claim_end_date'\n    , 'admission_date'\n    , 'discharge_date'\n    , 'admit_source_code'\n    , 'admit_type_code'\n    , 'discharge_disposition_code'\n    , 'bill_type_code'\n    , 'ms_drg_code'\n    , 'facility_npi'\n    , 'billing_npi'\n    , 'rendering_npi'\n    , 'diagnosis_code_type'\n    , 'diagnosis_code_1'\n    , 'diagnosis_code_2'\n    , 'diagnosis_code_3'\n    , 'diagnosis_code_4'\n    , 'diagnosis_code_5'\n    , 'diagnosis_code_6'\n    , 'diagnosis_code_7'\n    , 'diagnosis_code_8'\n    , 'diagnosis_code_9'\n    , 'diagnosis_code_10'\n    , 'diagnosis_code_11'\n    , 'diagnosis_code_12'\n    , 'diagnosis_code_13'\n    , 'diagnosis_code_14'\n    , 'diagnosis_code_15'\n    , 'diagnosis_code_16'\n    , 'diagnosis_code_17'\n    , 'diagnosis_code_18'\n    , 'diagnosis_code_19'\n    , 'diagnosis_code_20'\n    , 'diagnosis_code_21'\n    , 'diagnosis_code_22'\n    , 'diagnosis_code_23'\n    , 'diagnosis_code_24'\n    , 'diagnosis_code_25'\n    , 'diagnosis_poa_1'\n    , 'diagnosis_poa_2'\n    , 'diagnosis_poa_3'\n    , 'diagnosis_poa_4'\n    , 'diagnosis_poa_5'\n    , 'diagnosis_poa_6'\n    , 'diagnosis_poa_7'\n    , 'diagnosis_poa_8'\n    , 'diagnosis_poa_9'\n    , 'diagnosis_poa_10'\n    , 'diagnosis_poa_11'\n    , 'diagnosis_poa_12'\n    , 'diagnosis_poa_13'\n    , 'diagnosis_poa_14'\n    , 'diagnosis_poa_15'\n    , 'diagnosis_poa_16'\n    , 'diagnosis_poa_17'\n    , 'diagnosis_poa_18'\n    , 'diagnosis_poa_19'\n    , 'diagnosis_poa_20'\n    , 'diagnosis_poa_21'\n    , 'diagnosis_poa_22'\n    , 'diagnosis_poa_23'\n    , 'diagnosis_poa_24'\n    , 'diagnosis_poa_25'\n    , 'procedure_code_type'\n    , 'procedure_code_1'\n    , 'procedure_code_2'\n    , 'procedure_code_3'\n    , 'procedure_code_4'\n    , 'procedure_code_5'\n    , 'procedure_code_6'\n    , 'procedure_code_7'\n    , 'procedure_code_8'\n    , 'procedure_code_9'\n    , 'procedure_code_10'\n    , 'procedure_code_11'\n    , 'procedure_code_12'\n    , 'procedure_code_13'\n    , 'procedure_code_14'\n    , 'procedure_code_15'\n    , 'procedure_code_16'\n    , 'procedure_code_17'\n    , 'procedure_code_18'\n    , 'procedure_code_19'\n    , 'procedure_code_20'\n    , 'procedure_code_21'\n    , 'procedure_code_22'\n    , 'procedure_code_23'\n    , 'procedure_code_24'\n    , 'procedure_code_25'\n    , 'procedure_date_1'\n    , 'procedure_date_2'\n    , 'procedure_date_3'\n    , 'procedure_date_4'\n    , 'procedure_date_5'\n    , 'procedure_date_6'\n    , 'procedure_date_7'\n    , 'procedure_date_8'\n    , 'procedure_date_9'\n    , 'procedure_date_10'\n    , 'procedure_date_11'\n    , 'procedure_date_12'\n    , 'procedure_date_13'\n    , 'procedure_date_14'\n    , 'procedure_date_15'\n    , 'procedure_date_16'\n    , 'procedure_date_17'\n    , 'procedure_date_18'\n    , 'procedure_date_19'\n    , 'procedure_date_20'\n    , 'procedure_date_21'\n    , 'procedure_date_22'\n    , 'procedure_date_23'\n    , 'procedure_date_24'\n    , 'procedure_date_25'\n    , 'data_source'\n] -%}\n\n\nwith institutional_header_duplicates as (\n\n {{ medical_claim_header_duplicate_check(builtins.ref('normalized_input__medical_claim'), institutional_header_column_list, 'institutional') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , institutional_header_duplicates.claim_id\n    , institutional_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom institutional_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = institutional_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\n       and test_catalog.claim_type = 'institutional'\ngroup by \n      institutional_header_duplicates.claim_id\n    , institutional_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.medical_claim_header_duplicate_check"], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_institutional_header_fail_details.sql", "compiled": true, "compiled_code": "\n\nwith institutional_header_duplicates as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n            , count(distinct claim_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_type' as column_checked\n            , count(distinct claim_type) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n            , count(distinct patient_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct patient_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n            , count(distinct member_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct member_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n            , count(distinct payer) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct payer) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n            , count(distinct plan) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct plan) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_start_date' as column_checked\n            , count(distinct claim_start_date) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_start_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_end_date' as column_checked\n            , count(distinct claim_end_date) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_end_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'admission_date' as column_checked\n            , count(distinct admission_date) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct admission_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'discharge_date' as column_checked\n            , count(distinct discharge_date) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct discharge_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'admit_source_code' as column_checked\n            , count(distinct admit_source_code) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct admit_source_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'admit_type_code' as column_checked\n            , count(distinct admit_type_code) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct admit_type_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'discharge_disposition_code' as column_checked\n            , count(distinct discharge_disposition_code) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct discharge_disposition_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'bill_type_code' as column_checked\n            , count(distinct bill_type_code) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct bill_type_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'ms_drg_code' as column_checked\n            , count(distinct ms_drg_code) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct ms_drg_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'facility_npi' as column_checked\n            , count(distinct facility_npi) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct facility_npi) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'billing_npi' as column_checked\n            , count(distinct billing_npi) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct billing_npi) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'rendering_npi' as column_checked\n            , count(distinct rendering_npi) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct rendering_npi) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_type' as column_checked\n            , count(distinct diagnosis_code_type) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_1' as column_checked\n            , count(distinct diagnosis_code_1) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_2' as column_checked\n            , count(distinct diagnosis_code_2) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_3' as column_checked\n            , count(distinct diagnosis_code_3) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_4' as column_checked\n            , count(distinct diagnosis_code_4) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_5' as column_checked\n            , count(distinct diagnosis_code_5) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_6' as column_checked\n            , count(distinct diagnosis_code_6) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_7' as column_checked\n            , count(distinct diagnosis_code_7) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_8' as column_checked\n            , count(distinct diagnosis_code_8) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_9' as column_checked\n            , count(distinct diagnosis_code_9) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_10' as column_checked\n            , count(distinct diagnosis_code_10) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_11' as column_checked\n            , count(distinct diagnosis_code_11) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_12' as column_checked\n            , count(distinct diagnosis_code_12) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_13' as column_checked\n            , count(distinct diagnosis_code_13) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_14' as column_checked\n            , count(distinct diagnosis_code_14) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_15' as column_checked\n            , count(distinct diagnosis_code_15) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_16' as column_checked\n            , count(distinct diagnosis_code_16) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_17' as column_checked\n            , count(distinct diagnosis_code_17) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_18' as column_checked\n            , count(distinct diagnosis_code_18) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_19' as column_checked\n            , count(distinct diagnosis_code_19) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_20' as column_checked\n            , count(distinct diagnosis_code_20) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_21' as column_checked\n            , count(distinct diagnosis_code_21) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_22' as column_checked\n            , count(distinct diagnosis_code_22) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_23' as column_checked\n            , count(distinct diagnosis_code_23) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_24' as column_checked\n            , count(distinct diagnosis_code_24) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_25' as column_checked\n            , count(distinct diagnosis_code_25) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_1' as column_checked\n            , count(distinct diagnosis_poa_1) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_2' as column_checked\n            , count(distinct diagnosis_poa_2) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_3' as column_checked\n            , count(distinct diagnosis_poa_3) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_4' as column_checked\n            , count(distinct diagnosis_poa_4) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_5' as column_checked\n            , count(distinct diagnosis_poa_5) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_6' as column_checked\n            , count(distinct diagnosis_poa_6) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_7' as column_checked\n            , count(distinct diagnosis_poa_7) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_8' as column_checked\n            , count(distinct diagnosis_poa_8) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_9' as column_checked\n            , count(distinct diagnosis_poa_9) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_10' as column_checked\n            , count(distinct diagnosis_poa_10) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_11' as column_checked\n            , count(distinct diagnosis_poa_11) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_12' as column_checked\n            , count(distinct diagnosis_poa_12) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_13' as column_checked\n            , count(distinct diagnosis_poa_13) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_14' as column_checked\n            , count(distinct diagnosis_poa_14) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_15' as column_checked\n            , count(distinct diagnosis_poa_15) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_16' as column_checked\n            , count(distinct diagnosis_poa_16) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_17' as column_checked\n            , count(distinct diagnosis_poa_17) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_18' as column_checked\n            , count(distinct diagnosis_poa_18) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_19' as column_checked\n            , count(distinct diagnosis_poa_19) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_20' as column_checked\n            , count(distinct diagnosis_poa_20) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_21' as column_checked\n            , count(distinct diagnosis_poa_21) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_22' as column_checked\n            , count(distinct diagnosis_poa_22) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_23' as column_checked\n            , count(distinct diagnosis_poa_23) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_24' as column_checked\n            , count(distinct diagnosis_poa_24) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_25' as column_checked\n            , count(distinct diagnosis_poa_25) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_type' as column_checked\n            , count(distinct procedure_code_type) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_1' as column_checked\n            , count(distinct procedure_code_1) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_2' as column_checked\n            , count(distinct procedure_code_2) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_3' as column_checked\n            , count(distinct procedure_code_3) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_4' as column_checked\n            , count(distinct procedure_code_4) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_5' as column_checked\n            , count(distinct procedure_code_5) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_6' as column_checked\n            , count(distinct procedure_code_6) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_7' as column_checked\n            , count(distinct procedure_code_7) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_8' as column_checked\n            , count(distinct procedure_code_8) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_9' as column_checked\n            , count(distinct procedure_code_9) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_10' as column_checked\n            , count(distinct procedure_code_10) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_11' as column_checked\n            , count(distinct procedure_code_11) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_12' as column_checked\n            , count(distinct procedure_code_12) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_13' as column_checked\n            , count(distinct procedure_code_13) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_14' as column_checked\n            , count(distinct procedure_code_14) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_15' as column_checked\n            , count(distinct procedure_code_15) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_16' as column_checked\n            , count(distinct procedure_code_16) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_17' as column_checked\n            , count(distinct procedure_code_17) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_18' as column_checked\n            , count(distinct procedure_code_18) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_19' as column_checked\n            , count(distinct procedure_code_19) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_20' as column_checked\n            , count(distinct procedure_code_20) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_21' as column_checked\n            , count(distinct procedure_code_21) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_22' as column_checked\n            , count(distinct procedure_code_22) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_23' as column_checked\n            , count(distinct procedure_code_23) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_24' as column_checked\n            , count(distinct procedure_code_24) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_25' as column_checked\n            , count(distinct procedure_code_25) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_1' as column_checked\n            , count(distinct procedure_date_1) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_2' as column_checked\n            , count(distinct procedure_date_2) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_3' as column_checked\n            , count(distinct procedure_date_3) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_4' as column_checked\n            , count(distinct procedure_date_4) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_5' as column_checked\n            , count(distinct procedure_date_5) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_6' as column_checked\n            , count(distinct procedure_date_6) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_7' as column_checked\n            , count(distinct procedure_date_7) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_8' as column_checked\n            , count(distinct procedure_date_8) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_9' as column_checked\n            , count(distinct procedure_date_9) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_10' as column_checked\n            , count(distinct procedure_date_10) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_11' as column_checked\n            , count(distinct procedure_date_11) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_12' as column_checked\n            , count(distinct procedure_date_12) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_13' as column_checked\n            , count(distinct procedure_date_13) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_14' as column_checked\n            , count(distinct procedure_date_14) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_15' as column_checked\n            , count(distinct procedure_date_15) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_16' as column_checked\n            , count(distinct procedure_date_16) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_17' as column_checked\n            , count(distinct procedure_date_17) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_18' as column_checked\n            , count(distinct procedure_date_18) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_19' as column_checked\n            , count(distinct procedure_date_19) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_20' as column_checked\n            , count(distinct procedure_date_20) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_21' as column_checked\n            , count(distinct procedure_date_21) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_22' as column_checked\n            , count(distinct procedure_date_22) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_23' as column_checked\n            , count(distinct procedure_date_23) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_24' as column_checked\n            , count(distinct procedure_date_24) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_25' as column_checked\n            , count(distinct procedure_date_25) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n            , count(distinct data_source) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct data_source) > 1\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , institutional_header_duplicates.claim_id\n    , institutional_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom institutional_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = institutional_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\n       and test_catalog.claim_type = 'institutional'\ngroup by \n      institutional_header_duplicates.claim_id\n    , institutional_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_dates", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_dates.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_dates.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_dates"], "alias": "_int_claims_preprocessing_medical_claim_dates", "checksum": {"name": "sha256", "checksum": "3fb80a26a99074269c5d81b49d39e18c36c8c3a4cf9b6696d0a68a9e9dd32dea"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_dates", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_dates", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1554973, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_dates", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set claim_date_column_list = [\n      'claim_start_date'\n    , 'claim_end_date'\n    , 'claim_line_start_date'\n    , 'claim_line_end_date'\n    , 'paid_date'\n    , 'procedure_date_1'\n    , 'procedure_date_2'\n    , 'procedure_date_3'\n    , 'procedure_date_4'\n    , 'procedure_date_5'\n    , 'procedure_date_6'\n    , 'procedure_date_7'\n    , 'procedure_date_8'\n    , 'procedure_date_9'\n    , 'procedure_date_10'\n    , 'procedure_date_11'\n    , 'procedure_date_12'\n    , 'procedure_date_13'\n    , 'procedure_date_14'\n    , 'procedure_date_15'\n    , 'procedure_date_16'\n    , 'procedure_date_17'\n    , 'procedure_date_18'\n    , 'procedure_date_19'\n    , 'procedure_date_20'\n    , 'procedure_date_21'\n    , 'procedure_date_22'\n    , 'procedure_date_23'\n    , 'procedure_date_24'\n    , 'procedure_date_25'\n] -%}\n\nwith claim_dates as (\n\n {{ medical_claim_date_check(builtins.ref('normalized_input__medical_claim'), claim_date_column_list) }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom claim_dates\n     left join test_catalog\n       on test_catalog.test_name = claim_dates.column_checked||' invalid'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.medical_claim_date_check"], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.terminology__calendar", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_dates.sql", "compiled": true, "compiled_code": "\n\nwith claim_dates as (\n\n select\n          claim_id\n        , data_source\n        , 'claim_start_date' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.claim_start_date = cal.full_date\n    where cal.full_date is null\n    and rel.claim_start_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'claim_end_date' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.claim_end_date = cal.full_date\n    where cal.full_date is null\n    and rel.claim_end_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'claim_line_start_date' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.claim_line_start_date = cal.full_date\n    where cal.full_date is null\n    and rel.claim_line_start_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'claim_line_end_date' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.claim_line_end_date = cal.full_date\n    where cal.full_date is null\n    and rel.claim_line_end_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'paid_date' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.paid_date = cal.full_date\n    where cal.full_date is null\n    and rel.paid_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_1' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_1 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_1 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_2' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_2 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_2 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_3' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_3 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_3 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_4' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_4 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_4 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_5' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_5 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_5 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_6' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_6 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_6 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_7' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_7 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_7 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_8' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_8 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_8 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_9' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_9 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_9 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_10' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_10 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_10 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_11' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_11 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_11 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_12' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_12 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_12 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_13' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_13 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_13 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_14' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_14 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_14 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_15' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_15 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_15 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_16' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_16 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_16 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_17' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_17 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_17 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_18' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_18 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_18 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_19' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_19 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_19 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_20' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_20 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_20 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_21' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_21 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_21 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_22' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_22 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_22 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_23' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_23 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_23 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_24' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_24 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_24 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_25' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.procedure_date_25 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_25 is not null\n    \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom claim_dates\n     left join test_catalog\n       on test_catalog.test_name = claim_dates.column_checked||' invalid'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_dates_inst", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_dates_inst.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_dates_inst.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_dates_inst"], "alias": "_int_claims_preprocessing_medical_claim_dates_inst", "checksum": {"name": "sha256", "checksum": "6be9a7b6f055b101d3e9c22b9456b0f6cbbc6160ab81b685ad0a18a94789cce3"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_dates_inst", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_dates_inst", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1596365, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_dates_inst", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set claim_date_column_list = [\n      'admission_date'\n    , 'discharge_date'\n] -%}\n\nwith claim_dates as (\n\n {{ medical_claim_date_check(builtins.ref('normalized_input__medical_claim'), claim_date_column_list, 'institutional') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom claim_dates\n     left join test_catalog\n       on test_catalog.test_name = claim_dates.column_checked||' invalid'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.medical_claim_date_check"], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.terminology__calendar", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_dates_inst.sql", "compiled": true, "compiled_code": "\n\nwith claim_dates as (\n\n select\n          claim_id\n        , data_source\n        , 'admission_date' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.admission_date = cal.full_date\n    where cal.full_date is null\n    and rel.admission_date is not null\n    and rel.claim_type = 'institutional'\n    union all\n    select\n          claim_id\n        , data_source\n        , 'discharge_date' as column_checked\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.terminology.calendar as cal\n           on rel.discharge_date = cal.full_date\n    where cal.full_date is null\n    and rel.discharge_date is not null\n    and rel.claim_type = 'institutional'\n    \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom claim_dates\n     left join test_catalog\n       on test_catalog.test_name = claim_dates.column_checked||' invalid'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_denominators", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_denominators.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_denominators.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_denominators"], "alias": "_int_claims_preprocessing_medical_claim_denominators", "checksum": {"name": "sha256", "checksum": "dc9cb9b97fd99d9c96893688dbd1ad350f0d4464a40edda3cb9b7e67a31f0305"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_denominators", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_denominators", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1430306, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_denominators", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\n    Denominator logic for invalid value tests is dependent on whether that\n    specific field is populated or not. We created a macro to automatically\n    generate the CTE. All invalid value tests must have a\n    test_category = 'invalid_values' in the catalog seed.\n*/\nwith professional_denominator as (\n\n    select\n          cast('professional' as {{ dbt.type_string() }} ) as test_denominator_name\n        , cast(count(distinct claim_id||data_source) as int) as denominator\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from {{ ref('normalized_input__medical_claim') }}\n    where claim_type = 'professional'\n\n)\n\n, institutional_denominator as (\n\n    select\n          cast('institutional' as {{ dbt.type_string() }} ) as test_denominator_name\n        , count(distinct claim_id||data_source) as denominator\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from {{ ref('normalized_input__medical_claim') }}\n    where claim_type = 'institutional'\n\n)\n\n, all_claim_denominator as (\n\n    select\n          cast('all' as {{ dbt.type_string() }} ) as test_denominator_name\n        , count(distinct claim_id||data_source) as denominator\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from {{ ref('normalized_input__medical_claim') }}\n    where claim_type is not null\n\n)\n\n, invalid_value_denominators as (\n\n    {{ medical_claim_denominator_invalid_values(builtins.ref('normalized_input__medical_claim')) }}\n\n)\n\nselect * from institutional_denominator\nunion all \nselect * from professional_denominator\nunion all\nselect * from all_claim_denominator\nunion all\nselect * from invalid_value_denominators", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.medical_claim_denominator_invalid_values"], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_denominators.sql", "compiled": true, "compiled_code": "\n/*\n    Denominator logic for invalid value tests is dependent on whether that\n    specific field is populated or not. We created a macro to automatically\n    generate the CTE. All invalid value tests must have a\n    test_category = 'invalid_values' in the catalog seed.\n*/\nwith professional_denominator as (\n\n    select\n          cast('professional' as TEXT ) as test_denominator_name\n        , cast(count(distinct claim_id||data_source) as int) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n    where claim_type = 'professional'\n\n)\n\n, institutional_denominator as (\n\n    select\n          cast('institutional' as TEXT ) as test_denominator_name\n        , count(distinct claim_id||data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n    where claim_type = 'institutional'\n\n)\n\n, all_claim_denominator as (\n\n    select\n          cast('all' as TEXT ) as test_denominator_name\n        , count(distinct claim_id||data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n    where claim_type is not null\n\n)\n\n, invalid_value_denominators as (\n\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'admit_source_code'\n    where rel.admit_source_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'admit_type_code'\n    where rel.admit_type_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'apr_drg_code'\n    where rel.apr_drg_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'bill_type_code'\n    where rel.bill_type_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'billing_npi'\n    where rel.billing_npi is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'claim_type'\n    where rel.claim_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'diagnosis_code_1'\n    where rel.diagnosis_code_1 is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'diagnosis_code_type'\n    where rel.diagnosis_code_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'diagnosis_poa_1'\n    where rel.diagnosis_poa_1 is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'discharge_disposition_code'\n    where rel.discharge_disposition_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'facility_npi'\n    where rel.facility_npi is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'ms_drg_code'\n    where rel.ms_drg_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'place_of_service_code'\n    where rel.place_of_service_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'procedure_code_type'\n    where rel.procedure_code_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'rendering_npi'\n    where rel.rendering_npi is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim as rel\n         left join tuva_project_demo.data_quality._value_set_test_catalog as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'revenue_center_code'\n    where rel.revenue_center_code is not null\n    group by cat.test_name\n    \n\n)\n\nselect * from institutional_denominator\nunion all \nselect * from professional_denominator\nunion all\nselect * from all_claim_denominator\nunion all\nselect * from invalid_value_denominators", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_duplicates", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_duplicates.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_duplicates.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_duplicates"], "alias": "_int_claims_preprocessing_medical_claim_duplicates", "checksum": {"name": "sha256", "checksum": "2fbf09a6f1e10336741cd2b4ed5c173232e22a3add41a4d91e6050f597300429"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_duplicates", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_duplicates", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1331015, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_duplicates", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('normalized_input__medical_claim') }}\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate medical claims'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_id\n    , claim_line_number\n    , data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "language": "sql", "refs": [{"name": "data_quality__test_catalog", "package": null, "version": null}, {"name": "normalized_input__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project.data_quality__test_catalog", "model.the_tuva_project.normalized_input__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_duplicates.sql", "compiled": true, "compiled_code": "\n\nwith test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate medical claims'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_id\n    , claim_line_number\n    , data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_inst_missing_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_inst_missing_values.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_inst_missing_values.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_inst_missing_values"], "alias": "_int_claims_preprocessing_medical_claim_inst_missing_values", "checksum": {"name": "sha256", "checksum": "5feee9116be1eb359dd57e13e1f6b25926d2ea1c7bdc5993702f608354105159"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_inst_missing_values", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_inst_missing_values", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1160057, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_inst_missing_values", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set institutional_missing_column_list = [\n      'claim_id'\n    , 'claim_line_number'\n    , 'patient_id'\n    , 'member_id'\n    , 'payer'\n    , 'plan'\n    , 'claim_start_date'\n    , 'claim_end_date'\n    , 'bill_type_code'\n    , 'revenue_center_code'\n    , 'hcpcs_code'\n    , 'rendering_npi'\n    , 'billing_npi'\n    , 'facility_npi'\n    , 'paid_date'\n    , 'paid_amount'\n    , 'diagnosis_code_type'\n    , 'diagnosis_code_1'\n    , 'data_source'\n] -%}\n\nwith institutional_missing as (\n\n {{ medical_claim_missing_column_check(builtins.ref('normalized_input__medical_claim'), institutional_missing_column_list, 'institutional') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , institutional_missing.claim_id\n    , institutional_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom institutional_missing\n     left join test_catalog\n       on test_catalog.test_name = institutional_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      institutional_missing.claim_id\n    , institutional_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.medical_claim_missing_column_check"], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_inst_missing_values.sql", "compiled": true, "compiled_code": "\n\nwith institutional_missing as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  claim_id is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_line_number' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  claim_line_number is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  patient_id is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  member_id is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  payer is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  plan is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_start_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  claim_start_date is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_end_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  claim_end_date is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'bill_type_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  bill_type_code is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'revenue_center_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  revenue_center_code is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'hcpcs_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  hcpcs_code is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'rendering_npi' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  rendering_npi is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'billing_npi' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  billing_npi is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'facility_npi' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  facility_npi is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  paid_date is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_amount' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  paid_amount is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_type' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  diagnosis_code_type is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_1' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  diagnosis_code_1 is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  data_source is null\n        and claim_type = 'institutional'\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , institutional_missing.claim_id\n    , institutional_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom institutional_missing\n     left join test_catalog\n       on test_catalog.test_name = institutional_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      institutional_missing.claim_id\n    , institutional_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_invalid_npi", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_invalid_npi.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_invalid_npi.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_invalid_npi"], "alias": "_int_claims_preprocessing_medical_claim_invalid_npi", "checksum": {"name": "sha256", "checksum": "a597aa1d75f2240878b8134e9f03bbe4b31f7632add407ebfd6b77075c70625d"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_invalid_npi", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_invalid_npi", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1207647, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_invalid_npi", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith medical_claim as (\n\n    select *\n    from {{ ref('normalized_input__medical_claim') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\n, valid_billing_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.billing_npi) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__provider')}} pro\n           on medical_claim.billing_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'billing_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.billing_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_facility_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.facility_npi) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__provider')}} pro\n           on medical_claim.facility_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'facility_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.facility_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_rendering_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.rendering_npi) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__provider')}} pro\n           on medical_claim.rendering_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'rendering_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.rendering_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_billing_npi\nunion all\nselect * from valid_facility_npi\nunion all\nselect * from valid_rendering_npi", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog", "seed.the_tuva_project.terminology__provider"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_invalid_npi.sql", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select *\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\n, valid_billing_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.billing_npi) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.provider pro\n           on medical_claim.billing_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'billing_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.billing_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_facility_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.facility_npi) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.provider pro\n           on medical_claim.facility_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'facility_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.facility_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_rendering_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.rendering_npi) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.provider pro\n           on medical_claim.rendering_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'rendering_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.rendering_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_billing_npi\nunion all\nselect * from valid_facility_npi\nunion all\nselect * from valid_rendering_npi", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_invalid_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_invalid_values.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_invalid_values.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_invalid_values"], "alias": "_int_claims_preprocessing_medical_claim_invalid_values", "checksum": {"name": "sha256", "checksum": "00fc1edabd9d8489e3a56535cf5e1027e073187f1c5d734624110fd73904ac30"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_invalid_values", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_invalid_values", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1006448, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_invalid_values", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith medical_claim as (\n\n    select *\n    from {{ ref('normalized_input__medical_claim') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\n, valid_bill_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.bill_type_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__bill_type')}} tob\n           on medical_claim.bill_type_code = tob.bill_type_code\n         left join test_catalog\n           on test_catalog.test_name = 'bill_type_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and tob.bill_type_code is null\n    and medical_claim.bill_type_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_revenue_center as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.revenue_center_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__revenue_center') }} rev\n           on medical_claim.revenue_center_code = rev.revenue_center_code\n         left join test_catalog\n           on test_catalog.test_name = 'revenue_center_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and rev.revenue_center_code is null\n    and medical_claim.revenue_center_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_discharge_disposition as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.discharge_disposition_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__discharge_disposition') }} discharge\n           on medical_claim.discharge_disposition_code = discharge.discharge_disposition_code\n         left join test_catalog\n           on test_catalog.test_name = 'discharge_disposition_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and discharge.discharge_disposition_code is null\n    and medical_claim.discharge_disposition_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_admit_source as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.admit_source_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__admit_source') }} adsource\n           on medical_claim.admit_source_code = adsource.admit_source_code\n         left join test_catalog\n           on test_catalog.test_name = 'admit_source_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and adsource.admit_source_code is null\n    and medical_claim.admit_source_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_admit_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.admit_type_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__admit_type') }} adtype\n           on medical_claim.admit_type_code = adtype.admit_type_code\n         left join test_catalog\n           on test_catalog.test_name = 'admit_type_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and adtype.admit_type_code is null\n    and medical_claim.admit_type_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_ms_drg as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.ms_drg_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__ms_drg') }} msdrg\n           on medical_claim.ms_drg_code = msdrg.ms_drg_code\n         left join test_catalog\n           on test_catalog.test_name = 'ms_drg_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and msdrg.ms_drg_code is null\n    and medical_claim.ms_drg_code is not null\n    group by\n           medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_apr_drg as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.apr_drg_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__apr_drg') }} aprdrg\n           on medical_claim.apr_drg_code = aprdrg.apr_drg_code\n         left join test_catalog\n           on test_catalog.test_name = 'apr_drg_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and aprdrg.apr_drg_code is null\n    and medical_claim.apr_drg_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_present_on_admission as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_poa_1) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__present_on_admission') }} poa\n           on medical_claim.diagnosis_poa_1 = poa.present_on_admit_code\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_poa_1 invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and poa.present_on_admit_code is null\n    and medical_claim.diagnosis_poa_1 is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_procedure_code_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.procedure_code_type) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__code_type') }} codetype\n           on medical_claim.procedure_code_type = codetype.code_type\n         left join test_catalog\n           on test_catalog.test_name = 'procedure_code_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claim_type = 'institutional'\n    and codetype.code_type is null\n    and medical_claim.procedure_code_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_place_of_service as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.place_of_service_code) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__place_of_service') }} pos\n           on medical_claim.place_of_service_code = pos.place_of_service_code\n         left join test_catalog\n           on test_catalog.test_name = 'place_of_service_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claim_type = 'professional'\n    and pos.place_of_service_code is null\n    and medical_claim.place_of_service_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_diagnosis_code_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_code_type) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__code_type') }} codetype\n           on medical_claim.diagnosis_code_type = codetype.code_type\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_code_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where codetype.code_type is null\n    and medical_claim.diagnosis_code_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_diagnosis_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_code_1) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__icd_10_cm') }} icd\n           on medical_claim.diagnosis_code_1 = icd.icd_10_cm\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_code_1 invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where diagnosis_code_type = 'icd-10-cm'\n    and icd.icd_10_cm is null\n    and medical_claim.diagnosis_code_1 is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_claim_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.claim_type) as filled_row_count\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join {{ ref('terminology__claim_type') }} claimtype\n           on medical_claim.claim_type = claimtype.claim_type\n         left join test_catalog\n           on test_catalog.test_name = 'claim_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claimtype.claim_type is null\n    and medical_claim.claim_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_bill_type\nunion all \nselect * from valid_revenue_center\nunion all \nselect * from valid_discharge_disposition\nunion all \nselect * from valid_admit_source\nunion all \nselect * from valid_admit_type\nunion all \nselect * from valid_ms_drg\nunion all \nselect * from valid_apr_drg\nunion all \nselect * from valid_present_on_admission\nunion all \nselect * from valid_diagnosis_code_type\nunion all \nselect * from valid_procedure_code_type\nunion all \nselect * from valid_diagnosis_code\nunion all \nselect * from valid_claim_type\nunion all \nselect * from valid_place_of_service", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}, {"name": "terminology__bill_type", "package": null, "version": null}, {"name": "terminology__revenue_center", "package": null, "version": null}, {"name": "terminology__discharge_disposition", "package": null, "version": null}, {"name": "terminology__admit_source", "package": null, "version": null}, {"name": "terminology__admit_type", "package": null, "version": null}, {"name": "terminology__ms_drg", "package": null, "version": null}, {"name": "terminology__apr_drg", "package": null, "version": null}, {"name": "terminology__present_on_admission", "package": null, "version": null}, {"name": "terminology__code_type", "package": null, "version": null}, {"name": "terminology__place_of_service", "package": null, "version": null}, {"name": "terminology__code_type", "package": null, "version": null}, {"name": "terminology__icd_10_cm", "package": null, "version": null}, {"name": "terminology__claim_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog", "seed.the_tuva_project.terminology__bill_type", "seed.the_tuva_project.terminology__revenue_center", "seed.the_tuva_project.terminology__discharge_disposition", "seed.the_tuva_project.terminology__admit_source", "seed.the_tuva_project.terminology__admit_type", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__apr_drg", "seed.the_tuva_project.terminology__present_on_admission", "seed.the_tuva_project.terminology__code_type", "seed.the_tuva_project.terminology__place_of_service", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__claim_type"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_invalid_values.sql", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select *\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\n, valid_bill_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.bill_type_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.bill_type tob\n           on medical_claim.bill_type_code = tob.bill_type_code\n         left join test_catalog\n           on test_catalog.test_name = 'bill_type_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and tob.bill_type_code is null\n    and medical_claim.bill_type_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_revenue_center as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.revenue_center_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.revenue_center rev\n           on medical_claim.revenue_center_code = rev.revenue_center_code\n         left join test_catalog\n           on test_catalog.test_name = 'revenue_center_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and rev.revenue_center_code is null\n    and medical_claim.revenue_center_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_discharge_disposition as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.discharge_disposition_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.discharge_disposition discharge\n           on medical_claim.discharge_disposition_code = discharge.discharge_disposition_code\n         left join test_catalog\n           on test_catalog.test_name = 'discharge_disposition_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and discharge.discharge_disposition_code is null\n    and medical_claim.discharge_disposition_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_admit_source as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.admit_source_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.admit_source adsource\n           on medical_claim.admit_source_code = adsource.admit_source_code\n         left join test_catalog\n           on test_catalog.test_name = 'admit_source_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and adsource.admit_source_code is null\n    and medical_claim.admit_source_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_admit_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.admit_type_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.admit_type adtype\n           on medical_claim.admit_type_code = adtype.admit_type_code\n         left join test_catalog\n           on test_catalog.test_name = 'admit_type_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and adtype.admit_type_code is null\n    and medical_claim.admit_type_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_ms_drg as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.ms_drg_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.ms_drg msdrg\n           on medical_claim.ms_drg_code = msdrg.ms_drg_code\n         left join test_catalog\n           on test_catalog.test_name = 'ms_drg_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and msdrg.ms_drg_code is null\n    and medical_claim.ms_drg_code is not null\n    group by\n           medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_apr_drg as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.apr_drg_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.apr_drg aprdrg\n           on medical_claim.apr_drg_code = aprdrg.apr_drg_code\n         left join test_catalog\n           on test_catalog.test_name = 'apr_drg_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and aprdrg.apr_drg_code is null\n    and medical_claim.apr_drg_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_present_on_admission as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_poa_1) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.present_on_admission poa\n           on medical_claim.diagnosis_poa_1 = poa.present_on_admit_code\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_poa_1 invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and poa.present_on_admit_code is null\n    and medical_claim.diagnosis_poa_1 is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_procedure_code_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.procedure_code_type) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.code_type codetype\n           on medical_claim.procedure_code_type = codetype.code_type\n         left join test_catalog\n           on test_catalog.test_name = 'procedure_code_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claim_type = 'institutional'\n    and codetype.code_type is null\n    and medical_claim.procedure_code_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_place_of_service as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.place_of_service_code) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.place_of_service pos\n           on medical_claim.place_of_service_code = pos.place_of_service_code\n         left join test_catalog\n           on test_catalog.test_name = 'place_of_service_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claim_type = 'professional'\n    and pos.place_of_service_code is null\n    and medical_claim.place_of_service_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_diagnosis_code_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_code_type) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.code_type codetype\n           on medical_claim.diagnosis_code_type = codetype.code_type\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_code_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where codetype.code_type is null\n    and medical_claim.diagnosis_code_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_diagnosis_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_code_1) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.icd_10_cm icd\n           on medical_claim.diagnosis_code_1 = icd.icd_10_cm\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_code_1 invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where diagnosis_code_type = 'icd-10-cm'\n    and icd.icd_10_cm is null\n    and medical_claim.diagnosis_code_1 is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_claim_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.claim_type) as filled_row_count\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join tuva_project_demo.terminology.claim_type claimtype\n           on medical_claim.claim_type = claimtype.claim_type\n         left join test_catalog\n           on test_catalog.test_name = 'claim_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claimtype.claim_type is null\n    and medical_claim.claim_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_bill_type\nunion all \nselect * from valid_revenue_center\nunion all \nselect * from valid_discharge_disposition\nunion all \nselect * from valid_admit_source\nunion all \nselect * from valid_admit_type\nunion all \nselect * from valid_ms_drg\nunion all \nselect * from valid_apr_drg\nunion all \nselect * from valid_present_on_admission\nunion all \nselect * from valid_diagnosis_code_type\nunion all \nselect * from valid_procedure_code_type\nunion all \nselect * from valid_diagnosis_code\nunion all \nselect * from valid_claim_type\nunion all \nselect * from valid_place_of_service", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_line_numbers", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_line_numbers.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_line_numbers.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_line_numbers"], "alias": "_int_claims_preprocessing_medical_claim_line_numbers", "checksum": {"name": "sha256", "checksum": "deef4d1bde66ded6dd64f62752f9897f3468af41277dde6023a1db235a7dbee0"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_line_numbers", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_line_numbers", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.110246, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_line_numbers", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith medical_claim as (\n\n    select\n          claim_id\n        , claim_line_number\n        , data_source\n    from {{ ref('normalized_input__medical_claim') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\n, add_row_num as (\n\n    select\n          claim_id\n        , data_source\n        , claim_line_number\n        , row_number() over (\n            partition by claim_id, data_source\n            order by claim_line_number\n          ) as expected_line_number\n    from medical_claim\n\n)\n\n, line_num_check as (\n\n    select\n          add_row_num.claim_id\n        , add_row_num.data_source\n        , add_row_num.claim_line_number\n        , add_row_num.expected_line_number\n    from add_row_num\n         left join medical_claim\n           on add_row_num.claim_id = medical_claim.claim_id\n           and add_row_num.data_source = medical_claim.data_source\n           and add_row_num.expected_line_number = medical_claim.claim_line_number\n    where medical_claim.claim_line_number is null\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom line_num_check\n     left join test_catalog\n       on test_catalog.test_name = 'claim_line_number non-sequential'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_line_numbers.sql", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select\n          claim_id\n        , claim_line_number\n        , data_source\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\n, add_row_num as (\n\n    select\n          claim_id\n        , data_source\n        , claim_line_number\n        , row_number() over (\n            partition by claim_id, data_source\n            order by claim_line_number\n          ) as expected_line_number\n    from medical_claim\n\n)\n\n, line_num_check as (\n\n    select\n          add_row_num.claim_id\n        , add_row_num.data_source\n        , add_row_num.claim_line_number\n        , add_row_num.expected_line_number\n    from add_row_num\n         left join medical_claim\n           on add_row_num.claim_id = medical_claim.claim_id\n           and add_row_num.data_source = medical_claim.data_source\n           and add_row_num.expected_line_number = medical_claim.claim_line_number\n    where medical_claim.claim_line_number is null\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom line_num_check\n     left join test_catalog\n       on test_catalog.test_name = 'claim_line_number non-sequential'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_plausibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_plausibility.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_plausibility.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_plausibility"], "alias": "_int_claims_preprocessing_medical_claim_plausibility", "checksum": {"name": "sha256", "checksum": "10f44a5f456acec65c5efd13c52edb1cc815fd756a2449b6fe1058bfaabd1efd"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_plausibility", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_plausibility", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1465223, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_plausibility", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith medical_claim as (\n\n    select *\n    from {{ ref('normalized_input__medical_claim') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\n, claim_start_date_after_claim_end_date as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'claim_start_date after claim_end_date'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_start_date > medical_claim.claim_end_date\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, admission_date_after_discharge_date as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'admission_date after discharge_date'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and medical_claim.admission_date > medical_claim.discharge_date\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, admission_date_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'admission_date incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.admission_date is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, discharge_date_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'discharge_date incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.discharge_date is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, revenue_center_code_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'revenue_center_code incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.revenue_center_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, institutional_header_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'institutional header-level fields incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and (\n        medical_claim.admit_type_code is not null\n        or medical_claim.admit_type_code is not null\n        or medical_claim.admit_source_code is not null\n        or medical_claim.discharge_disposition_code is not null\n        or medical_claim.bill_type_code is not null\n        or medical_claim.ms_drg_code is not null\n        or medical_claim.apr_drg_code is not null\n    )\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, place_of_service_code_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'place_of_service_code incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and medical_claim.place_of_service_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from claim_start_date_after_claim_end_date\nunion all\nselect * from admission_date_after_discharge_date\nunion all\nselect * from admission_date_incorrect\nunion all\nselect * from discharge_date_incorrect\nunion all\nselect * from revenue_center_code_incorrect\nunion all\nselect * from institutional_header_incorrect\nunion all\nselect * from place_of_service_code_incorrect", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_plausibility.sql", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select *\n    from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\n, claim_start_date_after_claim_end_date as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'claim_start_date after claim_end_date'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_start_date > medical_claim.claim_end_date\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, admission_date_after_discharge_date as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'admission_date after discharge_date'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and medical_claim.admission_date > medical_claim.discharge_date\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, admission_date_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'admission_date incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.admission_date is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, discharge_date_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'discharge_date incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.discharge_date is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, revenue_center_code_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'revenue_center_code incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.revenue_center_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, institutional_header_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'institutional header-level fields incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and (\n        medical_claim.admit_type_code is not null\n        or medical_claim.admit_type_code is not null\n        or medical_claim.admit_source_code is not null\n        or medical_claim.discharge_disposition_code is not null\n        or medical_claim.bill_type_code is not null\n        or medical_claim.ms_drg_code is not null\n        or medical_claim.apr_drg_code is not null\n    )\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, place_of_service_code_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'place_of_service_code incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and medical_claim.place_of_service_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from claim_start_date_after_claim_end_date\nunion all\nselect * from admission_date_after_discharge_date\nunion all\nselect * from admission_date_incorrect\nunion all\nselect * from discharge_date_incorrect\nunion all\nselect * from revenue_center_code_incorrect\nunion all\nselect * from institutional_header_incorrect\nunion all\nselect * from place_of_service_code_incorrect", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_medical_claim_prof_missing_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_prof_missing_values.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_prof_missing_values.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_medical_claim_prof_missing_values"], "alias": "_int_claims_preprocessing_medical_claim_prof_missing_values", "checksum": {"name": "sha256", "checksum": "8b0cea71d418a60bb765be2656c3f410adee4e57ea7cef3e1206a13d7b61a551"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_medical_claim_prof_missing_values", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_medical_claim_prof_missing_values", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1247673, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_prof_missing_values", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set professional_missing_column_list = [\n      'claim_id'\n    , 'claim_line_number'\n    , 'patient_id'\n    , 'member_id'\n    , 'payer'\n    , 'plan'\n    , 'claim_start_date'\n    , 'claim_end_date'\n    , 'place_of_service_code'\n    , 'hcpcs_code'\n    , 'rendering_npi'\n    , 'billing_npi'\n    , 'paid_date'\n    , 'paid_amount'\n    , 'diagnosis_code_type'\n    , 'diagnosis_code_1'\n    , 'data_source'\n] -%}\n\nwith professional_missing as (\n\n {{ medical_claim_missing_column_check(builtins.ref('normalized_input__medical_claim'), professional_missing_column_list, 'professional') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'professional' as claim_type\n    , 'claim_id' as grain\n    , professional_missing.claim_id\n    , professional_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom professional_missing\n     left join test_catalog\n       on test_catalog.test_name = professional_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      professional_missing.claim_id\n    , professional_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.medical_claim_missing_column_check"], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_medical_claim_prof_missing_values.sql", "compiled": true, "compiled_code": "\n\nwith professional_missing as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  claim_id is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_line_number' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  claim_line_number is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  patient_id is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  member_id is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  payer is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  plan is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_start_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  claim_start_date is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_end_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  claim_end_date is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'place_of_service_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  place_of_service_code is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'hcpcs_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  hcpcs_code is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'rendering_npi' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  rendering_npi is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'billing_npi' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  billing_npi is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  paid_date is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_amount' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  paid_amount is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_type' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  diagnosis_code_type is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_1' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  diagnosis_code_1 is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where  data_source is null\n        and claim_type = 'professional'\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'professional' as claim_type\n    , 'claim_id' as grain\n    , professional_missing.claim_id\n    , professional_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom professional_missing\n     left join test_catalog\n       on test_catalog.test_name = professional_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      professional_missing.claim_id\n    , professional_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_pharmacy_claim_duplicates", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_duplicates.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_duplicates.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_pharmacy_claim_duplicates"], "alias": "_int_claims_preprocessing_pharmacy_claim_duplicates", "checksum": {"name": "sha256", "checksum": "b95ed8a0bc634462973a923f9e3dfeb32d9b17e41ec66d72fb86f356f4f6b2df"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_pharmacy_claim_duplicates", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_pharmacy_claim_duplicates", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1684554, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_claim_duplicates", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('normalized_input__pharmacy_claim') }}\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate pharmacy claims'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      claim_id\n    , claim_line_number\n    , data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "language": "sql", "refs": [{"name": "data_quality__test_catalog", "package": null, "version": null}, {"name": "normalized_input__pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project.data_quality__test_catalog", "model.the_tuva_project.normalized_input__pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_duplicates.sql", "compiled": true, "compiled_code": "\n\nwith test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate pharmacy claims'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      claim_id\n    , claim_line_number\n    , data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_pharmacy_claim_line_numbers", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_line_numbers.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_line_numbers.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_pharmacy_claim_line_numbers"], "alias": "_int_claims_preprocessing_pharmacy_claim_line_numbers", "checksum": {"name": "sha256", "checksum": "1c91805299434e6ad218c8c6152f060e7c0d39beb06b79043036893c8664f15d"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_pharmacy_claim_line_numbers", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_pharmacy_claim_line_numbers", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1728542, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_claim_line_numbers", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith pharmacy_claim as (\n\n    select\n          claim_id\n        , claim_line_number\n        , data_source\n    from {{ ref('normalized_input__pharmacy_claim') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\n, add_row_num as (\n\n    select\n          claim_id\n        , data_source\n        , claim_line_number\n        , row_number() over (\n            partition by claim_id, data_source\n            order by claim_line_number\n          ) as expected_line_number\n    from pharmacy_claim\n\n)\n\n, line_num_check as (\n\n    select\n          add_row_num.claim_id\n        , add_row_num.data_source\n        , add_row_num.claim_line_number\n        , add_row_num.expected_line_number\n    from add_row_num\n         left join pharmacy_claim\n           on add_row_num.claim_id = pharmacy_claim.claim_id\n           and add_row_num.data_source = pharmacy_claim.data_source\n           and add_row_num.expected_line_number = pharmacy_claim.claim_line_number\n    where pharmacy_claim.claim_line_number is null\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom line_num_check\n     left join test_catalog\n       on test_catalog.test_name = 'claim_line_number non-sequential'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__pharmacy_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.normalized_input__pharmacy_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_line_numbers.sql", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim as (\n\n    select\n          claim_id\n        , claim_line_number\n        , data_source\n    from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\n, add_row_num as (\n\n    select\n          claim_id\n        , data_source\n        , claim_line_number\n        , row_number() over (\n            partition by claim_id, data_source\n            order by claim_line_number\n          ) as expected_line_number\n    from pharmacy_claim\n\n)\n\n, line_num_check as (\n\n    select\n          add_row_num.claim_id\n        , add_row_num.data_source\n        , add_row_num.claim_line_number\n        , add_row_num.expected_line_number\n    from add_row_num\n         left join pharmacy_claim\n           on add_row_num.claim_id = pharmacy_claim.claim_id\n           and add_row_num.data_source = pharmacy_claim.data_source\n           and add_row_num.expected_line_number = pharmacy_claim.claim_line_number\n    where pharmacy_claim.claim_line_number is null\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom line_num_check\n     left join test_catalog\n       on test_catalog.test_name = 'claim_line_number non-sequential'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_pharmacy_claim_missing_values", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_missing_values.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_missing_values.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_pharmacy_claim_missing_values"], "alias": "_int_claims_preprocessing_pharmacy_claim_missing_values", "checksum": {"name": "sha256", "checksum": "0d9d6bdf7d07d356c3e5d413309250d0390bcebf13191d438073ec4bbd15caab"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_pharmacy_claim_missing_values", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_pharmacy_claim_missing_values", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1763582, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_claim_missing_values", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set pharmacy_claim_missing_column_list = [\n      'claim_id'\n    , 'claim_line_number'\n    , 'patient_id'\n    , 'member_id'\n    , 'payer'\n    , 'plan'\n    , 'prescribing_provider_npi'\n    , 'dispensing_provider_npi'\n    , 'dispensing_date'\n    , 'ndc_code'\n    , 'quantity'\n    , 'days_supply'\n    , 'refills'\n    , 'paid_date'\n    , 'paid_amount'\n    , 'allowed_amount'\n    , 'data_source'\n] -%}\n\nwith pharmacy_claim_missing as (\n\n {{ pharmacy_claim_missing_column_check(builtins.ref('normalized_input__pharmacy_claim'), pharmacy_claim_missing_column_list) }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , pharmacy_claim_missing.claim_id\n    , pharmacy_claim_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom pharmacy_claim_missing\n     left join test_catalog\n       on test_catalog.test_name = pharmacy_claim_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      pharmacy_claim_missing.claim_id\n    , pharmacy_claim_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__pharmacy_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.pharmacy_claim_missing_column_check"], "nodes": ["model.the_tuva_project.normalized_input__pharmacy_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_claim_missing_values.sql", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim_missing as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where claim_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_line_number' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where claim_line_number is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where patient_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where member_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where payer is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where plan is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'prescribing_provider_npi' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where prescribing_provider_npi is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'dispensing_provider_npi' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where dispensing_provider_npi is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'dispensing_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where dispensing_date is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'ndc_code' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where ndc_code is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'quantity' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where quantity is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'days_supply' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where days_supply is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'refills' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where refills is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where paid_date is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_amount' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where paid_amount is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'allowed_amount' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where allowed_amount is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        where data_source is null\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , pharmacy_claim_missing.claim_id\n    , pharmacy_claim_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom pharmacy_claim_missing\n     left join test_catalog\n       on test_catalog.test_name = pharmacy_claim_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      pharmacy_claim_missing.claim_id\n    , pharmacy_claim_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_pharmacy_header_fail_details", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_header_fail_details.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_header_fail_details.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_pharmacy_header_fail_details"], "alias": "_int_claims_preprocessing_pharmacy_header_fail_details", "checksum": {"name": "sha256", "checksum": "37a628cc32db63424c1759946a5db79ca68ab304cc0f5c7a31c100addc2d7e10"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_pharmacy_header_fail_details", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_pharmacy_header_fail_details", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0944977, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_header_fail_details", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set pharmacy_header_column_list = [\n      'claim_id'\n    , 'patient_id'\n    , 'member_id'\n    , 'payer'\n    , 'plan'\n    , 'data_source'\n] -%}\n\nwith pharmacy_header_duplicates as (\n\n {{ pharmacy_claim_header_duplicate_check(builtins.ref('normalized_input__pharmacy_claim'), pharmacy_header_column_list) }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , pharmacy_header_duplicates.claim_id\n    , pharmacy_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom pharmacy_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = pharmacy_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by \n      pharmacy_header_duplicates.claim_id\n    , pharmacy_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__pharmacy_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.pharmacy_claim_header_duplicate_check"], "nodes": ["model.the_tuva_project.normalized_input__pharmacy_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_pharmacy_header_fail_details.sql", "compiled": true, "compiled_code": "\n\nwith pharmacy_header_duplicates as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n            , count(distinct claim_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        group by claim_id, data_source\n        having count(distinct claim_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n            , count(distinct patient_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        group by claim_id, data_source\n        having count(distinct patient_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n            , count(distinct member_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        group by claim_id, data_source\n        having count(distinct member_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n            , count(distinct payer) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        group by claim_id, data_source\n        having count(distinct payer) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n            , count(distinct plan) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        group by claim_id, data_source\n        having count(distinct plan) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n            , count(distinct data_source) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n        group by claim_id, data_source\n        having count(distinct data_source) > 1\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , pharmacy_header_duplicates.claim_id\n    , pharmacy_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom pharmacy_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = pharmacy_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by \n      pharmacy_header_duplicates.claim_id\n    , pharmacy_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_professional_header_fail_details", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_professional_header_fail_details.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_professional_header_fail_details.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_professional_header_fail_details"], "alias": "_int_claims_preprocessing_professional_header_fail_details", "checksum": {"name": "sha256", "checksum": "5b05422d8e84979c2e858816d8ea00f89bc0cbccee2b6e7cdbc4eb362afa7a3a"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_professional_header_fail_details", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_professional_header_fail_details", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0853176, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_professional_header_fail_details", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n{% set professional_header_column_list = [\n      'claim_id'\n    , 'claim_type'\n    , 'patient_id'\n    , 'member_id'\n    , 'payer'\n    , 'plan'\n    , 'claim_start_date'\n    , 'claim_end_date'\n    , 'place_of_service_code'\n    , 'billing_npi'\n    , 'paid_date'\n    , 'diagnosis_code_type'\n    , 'diagnosis_code_1'\n    , 'diagnosis_code_2'\n    , 'diagnosis_code_3'\n    , 'diagnosis_code_4'\n    , 'diagnosis_code_5'\n    , 'diagnosis_code_6'\n    , 'diagnosis_code_7'\n    , 'diagnosis_code_8'\n    , 'diagnosis_code_9'\n    , 'diagnosis_code_10'\n    , 'diagnosis_code_11'\n    , 'diagnosis_code_12'\n    , 'diagnosis_code_13'\n    , 'diagnosis_code_14'\n    , 'diagnosis_code_15'\n    , 'diagnosis_code_16'\n    , 'diagnosis_code_17'\n    , 'diagnosis_code_18'\n    , 'diagnosis_code_19'\n    , 'diagnosis_code_20'\n    , 'diagnosis_code_21'\n    , 'diagnosis_code_22'\n    , 'diagnosis_code_23'\n    , 'diagnosis_code_24'\n    , 'diagnosis_code_25'\n    , 'data_source'\n] -%}\n\nwith professional_header_duplicates as (\n\n {{ medical_claim_header_duplicate_check(builtins.ref('normalized_input__medical_claim'), professional_header_column_list, 'professional') }}\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from {{ ref('data_quality__test_catalog') }}\n\n)\n\nselect\n      test_catalog.source_table\n    , 'professional' as claim_type\n    , 'claim_id' as grain\n    , professional_header_duplicates.claim_id\n    , professional_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom professional_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = professional_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\n       and test_catalog.claim_type = 'professional'\ngroup by \n      professional_header_duplicates.claim_id\n    , professional_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}, {"name": "data_quality__test_catalog", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.medical_claim_header_duplicate_check"], "nodes": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_professional_header_fail_details.sql", "compiled": true, "compiled_code": "\n\nwith professional_header_duplicates as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n            , count(distinct claim_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_type' as column_checked\n            , count(distinct claim_type) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n            , count(distinct patient_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct patient_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n            , count(distinct member_id) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct member_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n            , count(distinct payer) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct payer) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n            , count(distinct plan) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct plan) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_start_date' as column_checked\n            , count(distinct claim_start_date) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_start_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_end_date' as column_checked\n            , count(distinct claim_end_date) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_end_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'place_of_service_code' as column_checked\n            , count(distinct place_of_service_code) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct place_of_service_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'billing_npi' as column_checked\n            , count(distinct billing_npi) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct billing_npi) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n            , count(distinct paid_date) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct paid_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_type' as column_checked\n            , count(distinct diagnosis_code_type) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_1' as column_checked\n            , count(distinct diagnosis_code_1) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_2' as column_checked\n            , count(distinct diagnosis_code_2) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_3' as column_checked\n            , count(distinct diagnosis_code_3) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_4' as column_checked\n            , count(distinct diagnosis_code_4) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_5' as column_checked\n            , count(distinct diagnosis_code_5) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_6' as column_checked\n            , count(distinct diagnosis_code_6) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_7' as column_checked\n            , count(distinct diagnosis_code_7) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_8' as column_checked\n            , count(distinct diagnosis_code_8) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_9' as column_checked\n            , count(distinct diagnosis_code_9) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_10' as column_checked\n            , count(distinct diagnosis_code_10) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_11' as column_checked\n            , count(distinct diagnosis_code_11) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_12' as column_checked\n            , count(distinct diagnosis_code_12) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_13' as column_checked\n            , count(distinct diagnosis_code_13) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_14' as column_checked\n            , count(distinct diagnosis_code_14) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_15' as column_checked\n            , count(distinct diagnosis_code_15) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_16' as column_checked\n            , count(distinct diagnosis_code_16) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_17' as column_checked\n            , count(distinct diagnosis_code_17) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_18' as column_checked\n            , count(distinct diagnosis_code_18) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_19' as column_checked\n            , count(distinct diagnosis_code_19) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_20' as column_checked\n            , count(distinct diagnosis_code_20) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_21' as column_checked\n            , count(distinct diagnosis_code_21) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_22' as column_checked\n            , count(distinct diagnosis_code_22) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_23' as column_checked\n            , count(distinct diagnosis_code_23) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_24' as column_checked\n            , count(distinct diagnosis_code_24) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_25' as column_checked\n            , count(distinct diagnosis_code_25) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n            , count(distinct data_source) as duplicate_count\n        from tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct data_source) > 1\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from tuva_project_demo.data_quality._value_set_test_catalog\n\n)\n\nselect\n      test_catalog.source_table\n    , 'professional' as claim_type\n    , 'claim_id' as grain\n    , professional_header_duplicates.claim_id\n    , professional_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom professional_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = professional_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\n       and test_catalog.claim_type = 'professional'\ngroup by \n      professional_header_duplicates.claim_id\n    , professional_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_test_detail_stage_eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_eligibility.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_eligibility.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_test_detail_stage_eligibility"], "alias": "_int_claims_preprocessing_test_detail_stage_eligibility", "checksum": {"name": "sha256", "checksum": "b04f520f2584760c3df5fc6247855112df25a989876ae4fd16e9bb38f218ba72"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_test_detail_stage_eligibility", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_test_detail_stage_eligibility", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0566778, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_test_detail_stage_eligibility", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_eligibility_duplicates') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_eligibility_missing_values') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_eligibility_invalid_values') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_eligibility_plausibility') }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_eligibility_duplicates", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_eligibility_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_eligibility_invalid_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_eligibility_plausibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_eligibility.sql", "compiled": true, "compiled_code": "\n\n\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_duplicates\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_missing_values\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_invalid_values\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_plausibility", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_test_detail_stage_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_medical_claim.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_medical_claim.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "alias": "_int_claims_preprocessing_test_detail_stage_medical_claim", "checksum": {"name": "sha256", "checksum": "90c49436b2aea8df587eed018fcbf165ec55bed9f7c131471c5080eb850140fe"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_test_detail_stage_medical_claim", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_test_detail_stage_medical_claim", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1643133, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_test_detail_stage_medical_claim", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n    \nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_institutional_header_fail_details') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_professional_header_fail_details') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_inst_missing_values') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_prof_missing_values') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_invalid_values') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_claim_type_unmapped') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_claim_type_mapping_failures') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_duplicates') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_plausibility') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_dates') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_dates_inst') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_line_numbers') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_medical_claim_invalid_npi') }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_institutional_header_fail_details", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_professional_header_fail_details", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_inst_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_prof_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_invalid_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_claim_type_unmapped", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_claim_type_mapping_failures", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_duplicates", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_plausibility", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_dates", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_dates_inst", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_line_numbers", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_invalid_npi", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_medical_claim.sql", "compiled": true, "compiled_code": "\n    \nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_institutional_header_fail_details\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_professional_header_fail_details\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_inst_missing_values\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_prof_missing_values\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_invalid_values\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_claim_type_unmapped\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_claim_type_mapping_failures\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_duplicates\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_plausibility\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_dates\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_dates_inst\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_line_numbers\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_invalid_npi", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"], "alias": "_int_claims_preprocessing_test_detail_stage_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "15aa4ab74653536059fe3a74860ddba1dda096a19e3b91c99cc5dfd8dfa9a52a"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_test_detail_stage_pharmacy_claim", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_test_detail_stage_pharmacy_claim", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1857777, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_test_detail_stage_pharmacy_claim", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_pharmacy_claim_duplicates') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_pharmacy_claim_missing_values') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_pharmacy_header_fail_details') }}\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom {{ ref('data_quality__claims_preprocessing_pharmacy_claim_line_numbers') }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_pharmacy_claim_duplicates", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_pharmacy_claim_missing_values", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_pharmacy_header_fail_details", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_pharmacy_claim_line_numbers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim.sql", "compiled": true, "compiled_code": "\n\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_claim_duplicates\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_claim_missing_values\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_header_fail_details\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom tuva_project_demo.data_quality._int_claims_preprocessing_pharmacy_claim_line_numbers", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_test_result_stage_eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_eligibility.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_eligibility.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_test_result_stage_eligibility"], "alias": "_int_claims_preprocessing_test_result_stage_eligibility", "checksum": {"name": "sha256", "checksum": "753569040691376d857bdd73fb8791e45075deb95919342a7ee81013f9e6fda1"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_test_result_stage_eligibility", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_test_result_stage_eligibility", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.0226176, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_test_result_stage_eligibility", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\n    Tests with the category 'invalid_values' are joined to the denominator model\n    on test_name since that denominator logic is dependent on whether that\n    specific field is populated or not.\n\n    All other tests are joined to the denominator model on claim_type.\n*/\n\nselect\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , count(distinct foreign_key||data_source) as failures\n    , denom.denominator\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('data_quality__claims_preprocessing_test_detail') }} det\ninner join {{ ref('data_quality__claims_preprocessing_eligibility_denominators') }} denom\n    on det.claim_type = denom.test_denominator_name\nwhere source_table = 'normalized_input__eligibility'\nand test_category <> 'invalid_values'\ngroup by\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , denom.denominator\n\nunion all\n\nselect\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , count(distinct foreign_key||data_source) as failures\n    , denom.denominator\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('data_quality__claims_preprocessing_test_detail') }} det\ninner join {{ ref('data_quality__claims_preprocessing_eligibility_denominators') }} denom\n    on det.test_name = denom.test_denominator_name\nwhere source_table = 'normalized_input__eligibility'\nand test_category = 'invalid_values'\ngroup by\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , denom.denominator", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_eligibility_denominators", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_eligibility_denominators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_eligibility.sql", "compiled": true, "compiled_code": "\n/*\n    Tests with the category 'invalid_values' are joined to the denominator model\n    on test_name since that denominator logic is dependent on whether that\n    specific field is populated or not.\n\n    All other tests are joined to the denominator model on claim_type.\n*/\n\nselect\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , count(distinct foreign_key||data_source) as failures\n    , denom.denominator\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_detail det\ninner join tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_denominators denom\n    on det.claim_type = denom.test_denominator_name\nwhere source_table = 'normalized_input__eligibility'\nand test_category <> 'invalid_values'\ngroup by\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , denom.denominator\n\nunion all\n\nselect\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , count(distinct foreign_key||data_source) as failures\n    , denom.denominator\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_detail det\ninner join tuva_project_demo.data_quality._int_claims_preprocessing_eligibility_denominators denom\n    on det.test_name = denom.test_denominator_name\nwhere source_table = 'normalized_input__eligibility'\nand test_category = 'invalid_values'\ngroup by\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , denom.denominator", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_test_result_stage_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_medical_claim.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_medical_claim.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_test_result_stage_medical_claim"], "alias": "_int_claims_preprocessing_test_result_stage_medical_claim", "checksum": {"name": "sha256", "checksum": "b82452396dfd23506edfaf91e86b508fc39c9816457fa20ca576fd56e9fd2694"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_test_result_stage_medical_claim", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_test_result_stage_medical_claim", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1384354, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_test_result_stage_medical_claim", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n/*\n    Tests with the category 'invalid_values' are joined to the denominator model\n    on test_name since that denominator logic is dependent on whether that\n    specific field is populated or not.\n\n    All other tests are joined to the denominator model on claim_type.\n*/\n\nselect\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , count(distinct foreign_key||data_source) as failures\n    , denom.denominator\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('data_quality__claims_preprocessing_test_detail') }} det\ninner join {{ ref('data_quality__claims_preprocessing_medical_claim_denominators') }} denom\n    on det.claim_type = denom.test_denominator_name\nwhere source_table = 'normalized_input__medical_claim'\nand test_category <> 'invalid_values'\ngroup by\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , denom.denominator\n\nunion all\n\nselect\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , count(distinct foreign_key||data_source) as failures\n    , denom.denominator\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('data_quality__claims_preprocessing_test_detail') }} det\ninner join {{ ref('data_quality__claims_preprocessing_medical_claim_denominators') }} denom\n    on det.test_name = denom.test_denominator_name\nwhere source_table = 'normalized_input__medical_claim'\nand test_category = 'invalid_values'\ngroup by\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , denom.denominator", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_denominators", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_medical_claim_denominators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_medical_claim.sql", "compiled": true, "compiled_code": "\n/*\n    Tests with the category 'invalid_values' are joined to the denominator model\n    on test_name since that denominator logic is dependent on whether that\n    specific field is populated or not.\n\n    All other tests are joined to the denominator model on claim_type.\n*/\n\nselect\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , count(distinct foreign_key||data_source) as failures\n    , denom.denominator\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_detail det\ninner join tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_denominators denom\n    on det.claim_type = denom.test_denominator_name\nwhere source_table = 'normalized_input__medical_claim'\nand test_category <> 'invalid_values'\ngroup by\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , denom.denominator\n\nunion all\n\nselect\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , count(distinct foreign_key||data_source) as failures\n    , denom.denominator\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_detail det\ninner join tuva_project_demo.data_quality._int_claims_preprocessing_medical_claim_denominators denom\n    on det.test_name = denom.test_denominator_name\nwhere source_table = 'normalized_input__medical_claim'\nand test_category = 'invalid_values'\ngroup by\n    source_table\n    , grain\n    , test_category\n    , test_name\n    , claim_type\n    , pipeline_test\n    , denom.denominator", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__claims_preprocessing_test_result_stage_pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_pharmacy_claim.sql", "original_file_path": "models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_pharmacy_claim.sql", "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing", "intermediate", "data_quality__claims_preprocessing_test_result_stage_pharmacy_claim"], "alias": "_int_claims_preprocessing_test_result_stage_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "11c74f62639a1b7393e37d300b38cf87f5980119ccd8e5e7c142d81fb673ca3d"}, "config": {"enabled": true, "alias": "_int_claims_preprocessing_test_result_stage_pharmacy_claim", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/data_quality/data_quality_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_int_claims_preprocessing_test_result_stage_pharmacy_claim", "tags": ["data_quality", "claims_preprocessing"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.1797352, "relation_name": "tuva_project_demo.data_quality._int_claims_preprocessing_test_result_stage_pharmacy_claim", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith pharmacy_claim_denominator as(\n  select \n    cast('all' as {{ dbt.type_string() }} ) as claim_type\n    , cast(count(distinct claim_id||data_source) as int) as count\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_string() }} ) as tuva_last_run\n  from {{ ref('normalized_input__pharmacy_claim') }}\n)\n\n, distinct_patient_per_category as(\n    select\n        source_table\n        , grain\n        , test_category\n        , test_name\n        , claim_type\n        , pipeline_test\n        , count(distinct foreign_key||data_source) as failures\n    from {{ ref('data_quality__claims_preprocessing_test_detail') }}\n    where source_table = 'normalized_input__pharmacy_claim'\n    group by\n        source_table\n        , grain\n        , test_category\n        , test_name\n        , claim_type\n        , pipeline_test\n    )\n\n  select\n    source_table\n    , grain\n    , claim.test_category\n    , claim.test_name\n    , claim.claim_type\n    , pipeline_test\n    , claim.failures\n    , denom.count as denominator\n    , tuva_last_run\n  from distinct_patient_per_category claim\n  left join pharmacy_claim_denominator denom\n      on claim.claim_type = denom.claim_type\n  group by\n    source_table\n    , grain\n    , claim.test_category\n    , claim.test_name\n    , claim.claim_type\n    , pipeline_test\n    , claim.failures\n    , denom.count\n    , tuva_last_run", "language": "sql", "refs": [{"name": "normalized_input__pharmacy_claim", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.normalized_input__pharmacy_claim", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/claims_preprocessing/intermediate/data_quality__claims_preprocessing_test_result_stage_pharmacy_claim.sql", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim_denominator as(\n  select \n    cast('all' as TEXT ) as claim_type\n    , cast(count(distinct claim_id||data_source) as int) as count\n    , cast('2024-01-17 14:47:17.546759+00:00' as TEXT ) as tuva_last_run\n  from tuva_project_demo.claims_preprocessing.normalized_input_pharmacy_claim\n)\n\n, distinct_patient_per_category as(\n    select\n        source_table\n        , grain\n        , test_category\n        , test_name\n        , claim_type\n        , pipeline_test\n        , count(distinct foreign_key||data_source) as failures\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where source_table = 'normalized_input__pharmacy_claim'\n    group by\n        source_table\n        , grain\n        , test_category\n        , test_name\n        , claim_type\n        , pipeline_test\n    )\n\n  select\n    source_table\n    , grain\n    , claim.test_category\n    , claim.test_name\n    , claim.claim_type\n    , pipeline_test\n    , claim.failures\n    , denom.count as denominator\n    , tuva_last_run\n  from distinct_patient_per_category claim\n  left join pharmacy_claim_denominator denom\n      on claim.claim_type = denom.claim_type\n  group by\n    source_table\n    , grain\n    , claim.test_category\n    , claim.test_name\n    , claim.claim_type\n    , pipeline_test\n    , claim.failures\n    , denom.count\n    , tuva_last_run", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ed_classification__summary": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__summary", "resource_type": "model", "package_name": "the_tuva_project", "path": "ed_classification/final/ed_classification__summary.sql", "original_file_path": "models/ed_classification/final/ed_classification__summary.sql", "unique_id": "model.the_tuva_project.ed_classification__summary", "fqn": ["the_tuva_project", "ed_classification", "final", "ed_classification__summary"], "alias": "summary", "checksum": {"name": "sha256", "checksum": "aea95d899770ce28128dc7c441f257bc9e65ea173050f4b009ed4b9d5a9257ca"}, "config": {"enabled": true, "alias": "summary", "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ed_classification"], "description": "ED Classification as a cube that can be summarized\n", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier for the emergency_department encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ed_classification_description": {"name": "ed_classification_description", "description": "ED classification category.", "meta": {"terminology": "https://github.com/tuva-health/tuva/blob/main/seeds/value_sets/ed_classification/ed_classification__categories.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ed_classification_order": {"name": "ed_classification_order", "description": "The order of the classification.", "meta": {"terminology": "https://github.com/tuva-health/tuva/blob/main/seeds/value_sets/ed_classification/ed_classification__categories.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "Date when the patient was discharged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year_month": {"name": "year_month", "description": "Year and month of the encounter end date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_diagnosis_code": {"name": "primary_diagnosis_code", "description": "Primary diagnosis code for the encounter. If from claims the primary  diagnosis code comes from the institutional claim.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__icd_10_cm.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_diagnosis_description": {"name": "primary_diagnosis_description", "description": "Description of the primary diagnosis code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "The total paid amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "The total allowed amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The total charge amount across all claims for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "The NPI for the facility where the encounter occurred.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_name": {"name": "facility_name", "description": "The name of the facility.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_state": {"name": "facility_state", "description": "The state of the facility.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_city": {"name": "facility_city", "description": "The city of the facility.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_zip_code": {"name": "facility_zip_code", "description": "The zip code of the facility.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_sex": {"name": "patient_sex", "description": "The sex of the patient.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__gender.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_age": {"name": "patient_age", "description": "The age of the patient at the time of the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_zip_code": {"name": "patient_zip_code", "description": "The zip code for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_latitude": {"name": "patient_latitude", "description": "The latitude for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_longitude": {"name": "patient_longitude", "description": "The longitude for the patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_race": {"name": "patient_race", "description": "The race of the patient.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__race.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ed_classification/ed_classification_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ed_classification", "alias": "summary", "tags": "ed_classification", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.2259572, "relation_name": "tuva_project_demo.ed_classification.summary", "raw_code": "{{ config(\n     enabled = var('ed_classification_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n\nselect\n    class.encounter_id\n    , cat.classification_name as ed_classification_description\n    , cat.classification_order as ed_classification_order\n    , class.patient_id\n    , class.encounter_end_date\n    , cast({{ date_part(\"year\", \"class.encounter_end_date\") }} as {{ dbt.type_string() }}) \n        || right('0'||cast({{ date_part(\"month\", \"class.encounter_end_date\") }} as {{ dbt.type_string() }}),2) \n    as year_month\n    , class.primary_diagnosis_code\n    , class.primary_diagnosis_description\n    , class.paid_amount\n    , class.allowed_amount\n    , class.charge_amount\n    , class.facility_npi\n    , fac_prov.provider_organization_name as facility_name\n    , practice_state as facility_state\n    , practice_city as facility_city\n    , practice_zip_code as facility_zip_code\n--     , null as facility_latitude\n--     , null as facility_longitude\n    , pat.sex as patient_sex\n    , floor({{ datediff('pat.birth_date', 'class.encounter_end_date', 'hour') }} / 8766.0) as patient_age\n    , zip_code as patient_zip_code\n    , latitude as patient_latitude\n    , longitude as patient_longitude\n    , race as patient_race\nfrom {{ ref('ed_classification__int_filter_encounter_with_classification') }} class\ninner join {{ ref('ed_classification__categories') }} cat\n    using(classification)\nleft join {{ ref('terminology__provider') }} fac_prov \n    on class.facility_npi = fac_prov.npi\nleft join {{ ref('ed_classification__stg_patient') }} pat\n    on class.patient_id = pat.patient_id", "language": "sql", "refs": [{"name": "ed_classification__int_filter_encounter_with_classification", "package": null, "version": null}, {"name": "ed_classification__categories", "package": null, "version": null}, {"name": "terminology__provider", "package": null, "version": null}, {"name": "ed_classification__stg_patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.date_part", "macro.dbt.type_string", "macro.dbt.datediff"], "nodes": ["model.the_tuva_project.ed_classification__int_filter_encounter_with_classification", "seed.the_tuva_project.ed_classification__categories", "seed.the_tuva_project.terminology__provider", "model.the_tuva_project.ed_classification__stg_patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/ed_classification/final/ed_classification__summary.sql", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__ed_classification__stg_patient as (\n\n\nselect\n    patient_id\n    , sex\n    , birth_date\n    , race\n    , state\n    , zip_code\n    , latitude\n    , longitude\nfrom tuva_project_demo.core.patient\n) select\n    class.encounter_id\n    , cat.classification_name as ed_classification_description\n    , cat.classification_order as ed_classification_order\n    , class.patient_id\n    , class.encounter_end_date\n    , cast(date_part('year', class.encounter_end_date) as TEXT) \n        || right('0'||cast(date_part('month', class.encounter_end_date) as TEXT),2) \n    as year_month\n    , class.primary_diagnosis_code\n    , class.primary_diagnosis_description\n    , class.paid_amount\n    , class.allowed_amount\n    , class.charge_amount\n    , class.facility_npi\n    , fac_prov.provider_organization_name as facility_name\n    , practice_state as facility_state\n    , practice_city as facility_city\n    , practice_zip_code as facility_zip_code\n--     , null as facility_latitude\n--     , null as facility_longitude\n    , pat.sex as patient_sex\n    , floor(datediff(\n        hour,\n        pat.birth_date,\n        class.encounter_end_date\n        ) / 8766.0) as patient_age\n    , zip_code as patient_zip_code\n    , latitude as patient_latitude\n    , longitude as patient_longitude\n    , race as patient_race\nfrom tuva_project_demo.ed_classification._int_filter_encounter_with_classification class\ninner join tuva_project_demo.ed_classification._value_set_categories cat\n    using(classification)\nleft join tuva_project_demo.terminology.provider fac_prov \n    on class.facility_npi = fac_prov.npi\nleft join __dbt__cte__ed_classification__stg_patient pat\n    on class.patient_id = pat.patient_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.ed_classification__stg_patient", "sql": " __dbt__cte__ed_classification__stg_patient as (\n\n\nselect\n    patient_id\n    , sex\n    , birth_date\n    , race\n    , state\n    , zip_code\n    , latitude\n    , longitude\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ed_classification__int_filter_encounter_with_classification": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__int_filter_encounter_with_classification", "resource_type": "model", "package_name": "the_tuva_project", "path": "ed_classification/intermediate/ed_classification__int_filter_encounter_with_classification.sql", "original_file_path": "models/ed_classification/intermediate/ed_classification__int_filter_encounter_with_classification.sql", "unique_id": "model.the_tuva_project.ed_classification__int_filter_encounter_with_classification", "fqn": ["the_tuva_project", "ed_classification", "intermediate", "ed_classification__int_filter_encounter_with_classification"], "alias": "_int_filter_encounter_with_classification", "checksum": {"name": "sha256", "checksum": "80676310168b37cbf053c00ae3c076e0ac2e0721c36fef1ca88fccda0b3059fc"}, "config": {"enabled": true, "alias": "_int_filter_encounter_with_classification", "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ed_classification"], "description": "Filter out ED visits that were not classified", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ed_classification/ed_classification_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ed_classification", "alias": "_int_filter_encounter_with_classification", "tags": "ed_classification", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.229732, "relation_name": "tuva_project_demo.ed_classification._int_filter_encounter_with_classification", "raw_code": "/*\nFilter conditions to those that were classified and pick the classification\nwith the greatest probability (that's the greatest logic). This logic removes\nany rows that were not classified.\n*/\n{{ config(\n     enabled = var('ed_classification_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n   a.*\n   , case greatest(edcnnpa, edcnpa, epct, noner, injury, psych, alcohol, drug)\n          when edcnnpa then 'edcnnpa'\n          when edcnpa then 'edcnpa'\n          when epct then 'epct'\n          when noner then 'noner'\n          when injury then 'injury'\n          when psych then 'psych'\n          when alcohol then 'alcohol'\n          when drug then 'drug'\n          else 'unclassified'\n   end as classification\nfrom {{ ref('ed_classification__int_map_primary_dx') }} a\nwhere ed_classification_capture = 1", "language": "sql", "refs": [{"name": "ed_classification__int_map_primary_dx", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.ed_classification__int_map_primary_dx"]}, "compiled_path": "target/compiled/the_tuva_project/models/ed_classification/intermediate/ed_classification__int_filter_encounter_with_classification.sql", "compiled": true, "compiled_code": "/*\nFilter conditions to those that were classified and pick the classification\nwith the greatest probability (that's the greatest logic). This logic removes\nany rows that were not classified.\n*/\n\n\nselect\n   a.*\n   , case greatest(edcnnpa, edcnpa, epct, noner, injury, psych, alcohol, drug)\n          when edcnnpa then 'edcnnpa'\n          when edcnpa then 'edcnpa'\n          when epct then 'epct'\n          when noner then 'noner'\n          when injury then 'injury'\n          when psych then 'psych'\n          when alcohol then 'alcohol'\n          when drug then 'drug'\n          else 'unclassified'\n   end as classification\nfrom tuva_project_demo.ed_classification._int_by_provider_parent_organization a\nwhere ed_classification_capture = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ed_classification__int_map_primary_dx": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__int_map_primary_dx", "resource_type": "model", "package_name": "the_tuva_project", "path": "ed_classification/intermediate/ed_classification__int_map_primary_dx.sql", "original_file_path": "models/ed_classification/intermediate/ed_classification__int_map_primary_dx.sql", "unique_id": "model.the_tuva_project.ed_classification__int_map_primary_dx", "fqn": ["the_tuva_project", "ed_classification", "intermediate", "ed_classification__int_map_primary_dx"], "alias": "_int_by_provider_parent_organization", "checksum": {"name": "sha256", "checksum": "e3cd9b0cdfc21a60c13cf98b333e67a500f9aa93c5f44d243ee1e8e8c844d33f"}, "config": {"enabled": true, "alias": "_int_by_provider_parent_organization", "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ed_classification"], "description": "Map ED encounter primary dx to classification", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ed_classification/ed_classification_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ed_classification", "alias": "_int_by_provider_parent_organization", "tags": "ed_classification", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.2333405, "relation_name": "tuva_project_demo.ed_classification._int_by_provider_parent_organization", "raw_code": "/*\nAll condition discharge diagnosis left join with probabilistic\nindicators of ED classification terminology\n*/\n\n{{ config(\n     enabled = var('ed_classification_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n{% set colnames = [\"edcnnpa\", \"edcnpa\", \"epct\", \"noner\", \"injury\", \"psych\", \"alcohol\", \"drug\"] %}\n\nwith condition as (\n    select * \n    from {{ ref('ed_classification__stg_encounter') }}\n    where encounter_type = 'emergency department'\n)\n, icd9 as (\n  select\n     icd9 as code\n     {% for colname in colnames %}\n     , {{colname}}\n     {% endfor %}\n     , 1 as ed_classification_capture\n  from {{ ref('ed_classification__johnston_icd9') }}\n)\n, icd10 as (\n  select\n     icd10 as code\n     {% for colname in colnames %}\n     , {{colname}}\n     {% endfor %}\n     , 1 as ed_classification_capture\n  from {{ ref('ed_classification__johnston_icd10') }}\n)\n\nselect\n   a.*\n   {% for colname in colnames %}\n   , icd10.{{colname}}\n   {% endfor %}\n   , coalesce(icd10.ed_classification_capture, 0) as ed_classification_capture\nfrom condition a\nleft join icd10\n    on a.primary_diagnosis_code = icd10.code \n    and a.primary_diagnosis_code_type = 'icd-10-cm'\n\nunion all\n\nselect\n   a.*\n   {% for colname in colnames %}\n   , icd9.{{colname}}\n   {% endfor %}\n   , coalesce(icd9.ed_classification_capture, 0) ed_classification_capture\nfrom condition a\ninner join icd9\n    on a.primary_diagnosis_code = icd9.code \n    and a.primary_diagnosis_code_type = 'icd-9-cm'", "language": "sql", "refs": [{"name": "ed_classification__stg_encounter", "package": null, "version": null}, {"name": "ed_classification__johnston_icd9", "package": null, "version": null}, {"name": "ed_classification__johnston_icd10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.ed_classification__stg_encounter", "seed.the_tuva_project.ed_classification__johnston_icd9", "seed.the_tuva_project.ed_classification__johnston_icd10"]}, "compiled_path": "target/compiled/the_tuva_project/models/ed_classification/intermediate/ed_classification__int_map_primary_dx.sql", "compiled": true, "compiled_code": "/*\nAll condition discharge diagnosis left join with probabilistic\nindicators of ED classification terminology\n*/\n\n\n\n\nwith  __dbt__cte__ed_classification__stg_encounter as (\n\n\nselect\n    encounter_id\n    , encounter_type\n    , patient_id\n    , encounter_end_date\n    , facility_npi\n    , primary_diagnosis_code_type\n    , primary_diagnosis_code\n    , primary_diagnosis_description\n    , paid_amount\n    , allowed_amount\n    , charge_amount\nfrom tuva_project_demo.core.encounter\n), condition as (\n    select * \n    from __dbt__cte__ed_classification__stg_encounter\n    where encounter_type = 'emergency department'\n)\n, icd9 as (\n  select\n     icd9 as code\n     \n     , edcnnpa\n     \n     , edcnpa\n     \n     , epct\n     \n     , noner\n     \n     , injury\n     \n     , psych\n     \n     , alcohol\n     \n     , drug\n     \n     , 1 as ed_classification_capture\n  from tuva_project_demo.ed_classification._value_set_johnston_icd9\n)\n, icd10 as (\n  select\n     icd10 as code\n     \n     , edcnnpa\n     \n     , edcnpa\n     \n     , epct\n     \n     , noner\n     \n     , injury\n     \n     , psych\n     \n     , alcohol\n     \n     , drug\n     \n     , 1 as ed_classification_capture\n  from tuva_project_demo.ed_classification._value_set_johnston_icd10\n)\n\nselect\n   a.*\n   \n   , icd10.edcnnpa\n   \n   , icd10.edcnpa\n   \n   , icd10.epct\n   \n   , icd10.noner\n   \n   , icd10.injury\n   \n   , icd10.psych\n   \n   , icd10.alcohol\n   \n   , icd10.drug\n   \n   , coalesce(icd10.ed_classification_capture, 0) as ed_classification_capture\nfrom condition a\nleft join icd10\n    on a.primary_diagnosis_code = icd10.code \n    and a.primary_diagnosis_code_type = 'icd-10-cm'\n\nunion all\n\nselect\n   a.*\n   \n   , icd9.edcnnpa\n   \n   , icd9.edcnpa\n   \n   , icd9.epct\n   \n   , icd9.noner\n   \n   , icd9.injury\n   \n   , icd9.psych\n   \n   , icd9.alcohol\n   \n   , icd9.drug\n   \n   , coalesce(icd9.ed_classification_capture, 0) ed_classification_capture\nfrom condition a\ninner join icd9\n    on a.primary_diagnosis_code = icd9.code \n    and a.primary_diagnosis_code_type = 'icd-9-cm'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.ed_classification__stg_encounter", "sql": " __dbt__cte__ed_classification__stg_encounter as (\n\n\nselect\n    encounter_id\n    , encounter_type\n    , patient_id\n    , encounter_end_date\n    , facility_npi\n    , primary_diagnosis_code_type\n    , primary_diagnosis_code\n    , primary_diagnosis_description\n    , paid_amount\n    , allowed_amount\n    , charge_amount\nfrom tuva_project_demo.core.encounter\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ed_classification__stg_encounter": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__stg_encounter", "resource_type": "model", "package_name": "the_tuva_project", "path": "ed_classification/staging/ed_classification__stg_encounter.sql", "original_file_path": "models/ed_classification/staging/ed_classification__stg_encounter.sql", "unique_id": "model.the_tuva_project.ed_classification__stg_encounter", "fqn": ["the_tuva_project", "ed_classification", "staging", "ed_classification__stg_encounter"], "alias": "ed_classification__stg_encounter", "checksum": {"name": "sha256", "checksum": "1fe06aa48203595e38fc761b7637348e5538505e33cf0d53cd02badfbaffed19"}, "config": {"enabled": true, "alias": null, "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ed_classification"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ed_classification/ed_classification_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ed_classification", "tags": "ed_classification", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.2364035, "relation_name": null, "raw_code": "{{ config(\r\n     enabled = var('ed_classification_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect\r\n    encounter_id\r\n    , encounter_type\r\n    , patient_id\r\n    , encounter_end_date\r\n    , facility_npi\r\n    , primary_diagnosis_code_type\r\n    , primary_diagnosis_code\r\n    , primary_diagnosis_description\r\n    , paid_amount\r\n    , allowed_amount\r\n    , charge_amount\r\nfrom {{ ref('core__encounter') }}", "language": "sql", "refs": [{"name": "core__encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/ed_classification/staging/ed_classification__stg_encounter.sql", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id\n    , encounter_type\n    , patient_id\n    , encounter_end_date\n    , facility_npi\n    , primary_diagnosis_code_type\n    , primary_diagnosis_code\n    , primary_diagnosis_description\n    , paid_amount\n    , allowed_amount\n    , charge_amount\nfrom tuva_project_demo.core.encounter", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.ed_classification__stg_patient": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__stg_patient", "resource_type": "model", "package_name": "the_tuva_project", "path": "ed_classification/staging/ed_classification__stg_patient.sql", "original_file_path": "models/ed_classification/staging/ed_classification__stg_patient.sql", "unique_id": "model.the_tuva_project.ed_classification__stg_patient", "fqn": ["the_tuva_project", "ed_classification", "staging", "ed_classification__stg_patient"], "alias": "ed_classification__stg_patient", "checksum": {"name": "sha256", "checksum": "30b001c3fe63f86b5238b8a4e5fce8c14208440e4b7c1946ac88cab63d6ecf34"}, "config": {"enabled": true, "alias": null, "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["ed_classification"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/ed_classification/ed_classification_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ed_classification", "tags": "ed_classification", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.2394037, "relation_name": null, "raw_code": "{{ config(\r\n     enabled = var('ed_classification_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect\r\n    patient_id\r\n    , sex\r\n    , birth_date\r\n    , race\r\n    , state\r\n    , zip_code\r\n    , latitude\r\n    , longitude\r\nfrom {{ ref('core__patient') }}", "language": "sql", "refs": [{"name": "core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/ed_classification/staging/ed_classification__stg_patient.sql", "compiled": true, "compiled_code": "\n\nselect\n    patient_id\n    , sex\n    , birth_date\n    , race\n    , state\n    , zip_code\n    , latitude\n    , longitude\nfrom tuva_project_demo.core.patient", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__member_months": {"database": "tuva_project_demo", "schema": "financial_pmpm", "name": "financial_pmpm__member_months", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/final/financial_pmpm__member_months.sql", "original_file_path": "models/financial_pmpm/final/financial_pmpm__member_months.sql", "unique_id": "model.the_tuva_project.financial_pmpm__member_months", "fqn": ["the_tuva_project", "financial_pmpm", "final", "financial_pmpm__member_months"], "alias": "member_months", "checksum": {"name": "sha256", "checksum": "e409c34c2e7d8e2ff15dbd47f410284e1d762adfec344abd354a4d497afe27b7"}, "config": {"enabled": true, "alias": "member_months", "schema": "financial_pmpm", "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "Creates member months from eligibility data", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year_month": {"name": "year_month", "description": "Unique year-month of in the dataset computed from eligibility.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer (i.e. health insurer) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan (i.e. sub contract) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "financial_pmpm", "alias": "member_months", "tags": ["financial_pmpm"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.244054, "relation_name": "tuva_project_demo.financial_pmpm.member_months", "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith month_start_and_end_dates as (\nselect \n  concat(cast(year as {{ dbt.type_string() }} ),lpad(cast(month as {{ dbt.type_string() }}),2,'0')) as year_month\n, min(full_date) as month_start_date\n, max(full_date) as month_end_date\nfrom {{ ref('terminology__calendar')}}\ngroup by 1\n)\n\nselect distinct\n  a.patient_id\n, year_month\n, a.payer\n, a.plan\n, data_source\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('financial_pmpm__stg_eligibility') }} a\ninner join month_start_and_end_dates b\n  on a.enrollment_start_date <= b.month_end_date\n  and a.enrollment_end_date >= b.month_start_date", "language": "sql", "refs": [{"name": "terminology__calendar", "package": null, "version": null}, {"name": "financial_pmpm__stg_eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["seed.the_tuva_project.terminology__calendar", "model.the_tuva_project.financial_pmpm__stg_eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/final/financial_pmpm__member_months.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__financial_pmpm__stg_eligibility as (\n\n\nselect\n  patient_id\n, enrollment_start_date\n, enrollment_end_date\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.eligibility\n), month_start_and_end_dates as (\nselect \n  concat(cast(year as TEXT ),lpad(cast(month as TEXT),2,'0')) as year_month\n, min(full_date) as month_start_date\n, max(full_date) as month_end_date\nfrom tuva_project_demo.terminology.calendar\ngroup by 1\n)\n\nselect distinct\n  a.patient_id\n, year_month\n, a.payer\n, a.plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__financial_pmpm__stg_eligibility a\ninner join month_start_and_end_dates b\n  on a.enrollment_start_date <= b.month_end_date\n  and a.enrollment_end_date >= b.month_start_date", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.financial_pmpm__stg_eligibility", "sql": " __dbt__cte__financial_pmpm__stg_eligibility as (\n\n\nselect\n  patient_id\n, enrollment_start_date\n, enrollment_end_date\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.eligibility\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__pmpm": {"database": "tuva_project_demo", "schema": "financial_pmpm", "name": "financial_pmpm__pmpm", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/final/financial_pmpm__pmpm.sql", "original_file_path": "models/financial_pmpm/final/financial_pmpm__pmpm.sql", "unique_id": "model.the_tuva_project.financial_pmpm__pmpm", "fqn": ["the_tuva_project", "financial_pmpm", "final", "financial_pmpm__pmpm"], "alias": "pmpm", "checksum": {"name": "sha256", "checksum": "e456c62e3b8953eb085ab347d7d540717b0e067f9bc004998c1e5e29f05a998d"}, "config": {"enabled": true, "alias": "pmpm", "schema": "financial_pmpm", "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "Computes per member per month statistics for every service category by aggregating across patients from pmpm_prep.\n", "columns": {"year_month": {"name": "year_month", "description": "Unique year-month of in the dataset computed from eligibility.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer (i.e. health insurer) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan (i.e. sub contract) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "member_months": {"name": "member_months", "description": "The sum of member months.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_paid": {"name": "total_paid", "description": "Total paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medical_paid": {"name": "medical_paid", "description": "Total medical paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_paid": {"name": "inpatient_paid", "description": "Total inpatient paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_paid": {"name": "outpatient_paid", "description": "Total outpatient paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "office_visit_paid": {"name": "office_visit_paid", "description": "Total office visit paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ancillary_paid": {"name": "ancillary_paid", "description": "Total ancillary paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pharmacy_paid": {"name": "pharmacy_paid", "description": "Total pharmacy paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "other_paid": {"name": "other_paid", "description": "Total other paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "acute_inpatient_paid": {"name": "acute_inpatient_paid", "description": "Total acute inpatient paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ambulance_paid": {"name": "ambulance_paid", "description": "Total ambulance paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ambulatory_surgery_paid": {"name": "ambulatory_surgery_paid", "description": "Total ambulatory surgery paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dialysis_paid": {"name": "dialysis_paid", "description": "Total dialysis paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "durable_medical_equipment_paid": {"name": "durable_medical_equipment_paid", "description": "Total durable medical equipment paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "emergency_department_paid": {"name": "emergency_department_paid", "description": "Total emergency department paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_health_paid": {"name": "home_health_paid", "description": "Total home health paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hospice_paid": {"name": "hospice_paid", "description": "Total hospice paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_psychiatric_paid": {"name": "inpatient_psychiatric_paid", "description": "Total inpatient psychiatric paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_rehabilitation_paid": {"name": "inpatient_rehabilitation_paid", "description": "Total inpatient rehabilitation paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lab_paid": {"name": "lab_paid", "description": "Total lab paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "office_visit_paid_2": {"name": "office_visit_paid_2", "description": "Total office visit paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_hospital_or_clinic_paid": {"name": "outpatient_hospital_or_clinic_paid", "description": "Total outpatient hospital or clinic paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_psychiatric_paid": {"name": "outpatient_psychiatric_paid", "description": "Total outpatient psychiatric paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_rehabilitation_paid": {"name": "outpatient_rehabilitation_paid", "description": "Total outpatient rehabilitation paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "skilled_nursing_paid": {"name": "skilled_nursing_paid", "description": "Total skilled nursing paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "urgent_care_paid": {"name": "urgent_care_paid", "description": "Total urgent care paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_allowed": {"name": "total_allowed", "description": "Total allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medical_allowed": {"name": "medical_allowed", "description": "Total medical allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_allowed": {"name": "inpatient_allowed", "description": "Total inpatient allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_allowed": {"name": "outpatient_allowed", "description": "Total outpatient allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "office_visit_allowed": {"name": "office_visit_allowed", "description": "Total office visit allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ancillary_allowed": {"name": "ancillary_allowed", "description": "Total ancillary allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pharmacy_allowed": {"name": "pharmacy_allowed", "description": "Total pharmacy allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "other_allowed": {"name": "other_allowed", "description": "Total other allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "acute_inpatient_allowed": {"name": "acute_inpatient_allowed", "description": "Total acute inpatient allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ambulance_allowed": {"name": "ambulance_allowed", "description": "Total ambulance allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ambulatory_surgery_allowed": {"name": "ambulatory_surgery_allowed", "description": "Total ambulatory surgery allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dialysis_allowed": {"name": "dialysis_allowed", "description": "Total dialysis allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "durable_medical_equipment_allowed": {"name": "durable_medical_equipment_allowed", "description": "Total durable medical equipment allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "emergency_department_allowed": {"name": "emergency_department_allowed", "description": "Total emergency department allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_health_allowed": {"name": "home_health_allowed", "description": "Total home health allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hospice_allowed": {"name": "hospice_allowed", "description": "Total hospice allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_psychiatric_allowed": {"name": "inpatient_psychiatric_allowed", "description": "Total inpatient psychiatric allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_rehabilitation_allowed": {"name": "inpatient_rehabilitation_allowed", "description": "Total inpatient rehabilitation allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lab_allowed": {"name": "lab_allowed", "description": "Total lab allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "office_visit_allowed_2": {"name": "office_visit_allowed_2", "description": "Total office visit allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_hospital_or_clinic_allowed": {"name": "outpatient_hospital_or_clinic_allowed", "description": "Total outpatient hospital or clinic allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_psychiatric_allowed": {"name": "outpatient_psychiatric_allowed", "description": "Total outpatient psychiatric allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_rehabilitation_allowed": {"name": "outpatient_rehabilitation_allowed", "description": "Total outpatient rehabilitation allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "skilled_nursing_allowed": {"name": "skilled_nursing_allowed", "description": "Total skilled nursing allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "urgent_care_allowed": {"name": "urgent_care_allowed", "description": "Total urgent care allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "financial_pmpm", "alias": "pmpm", "tags": ["financial_pmpm"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.280369, "relation_name": "tuva_project_demo.financial_pmpm.pmpm", "raw_code": "{{ config(\n   enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n)}}\n\nSELECT \n  year_month,\n  payer,\n  plan,\n  data_source,\n  count(1) as member_months,\n  SUM(total_paid) / COUNT(1) AS total_paid,\n  SUM(medical_paid) / COUNT(1) AS medical_paid,\n  SUM(inpatient_paid) / COUNT(1) AS inpatient_paid,\n  SUM(outpatient_paid) / COUNT(1) AS outpatient_paid,\n  SUM(office_visit_paid) / COUNT(1) AS office_visit_paid,\n  SUM(ancillary_paid) / COUNT(1) AS ancillary_paid,\n  SUM(pharmacy_paid) / COUNT(1) AS pharmacy_paid,\n  SUM(other_paid) / COUNT(1) AS other_paid,\n  SUM(acute_inpatient_paid) / COUNT(1) AS acute_inpatient_paid,\n  SUM(ambulance_paid) / COUNT(1) AS ambulance_paid,\n  SUM(ambulatory_surgery_paid) / COUNT(1) AS ambulatory_surgery_paid,\n  SUM(dialysis_paid) / COUNT(1) AS dialysis_paid,\n  SUM(durable_medical_equipment_paid) / COUNT(1) AS durable_medical_equipment_paid,\n  SUM(emergency_department_paid) / COUNT(1) AS emergency_department_paid,\n  SUM(home_health_paid) / COUNT(1) AS home_health_paid,\n  SUM(hospice_paid) / COUNT(1) AS hospice_paid,\n  SUM(inpatient_psychiatric_paid) / COUNT(1) AS inpatient_psychiatric_paid,\n  SUM(inpatient_rehabilitation_paid) / COUNT(1) AS inpatient_rehabilitation_paid,\n  SUM(lab_paid) / COUNT(1) AS lab_paid,\n  SUM(office_visit_paid_2) / COUNT(1) AS office_visit_paid_2,\n  SUM(outpatient_hospital_or_clinic_paid) / COUNT(1) AS outpatient_hospital_or_clinic_paid,\n  SUM(outpatient_psychiatric_paid) / COUNT(1) AS outpatient_psychiatric_paid,\n  SUM(outpatient_rehabilitation_paid) / COUNT(1) AS outpatient_rehabilitation_paid,\n  SUM(skilled_nursing_paid) / COUNT(1) AS skilled_nursing_paid,\n  SUM(urgent_care_paid) / COUNT(1) AS urgent_care_paid,\n  SUM(total_allowed) / COUNT(1) AS total_allowed,\n  SUM(medical_allowed) / COUNT(1) AS medical_allowed,\n  SUM(inpatient_allowed) / COUNT(1) AS inpatient_allowed,\n  SUM(outpatient_allowed) / COUNT(1) AS outpatient_allowed,\n  SUM(office_visit_allowed) / COUNT(1) AS office_visit_allowed,\n  SUM(ancillary_allowed) / COUNT(1) AS ancillary_allowed,\n  SUM(pharmacy_allowed) / COUNT(1) AS pharmacy_allowed,\n  SUM(other_allowed) / COUNT(1) AS other_allowed,\n  SUM(acute_inpatient_allowed) / COUNT(1) AS acute_inpatient_allowed,\n  SUM(ambulance_allowed) / COUNT(1) AS ambulance_allowed,\n  SUM(ambulatory_surgery_allowed) / COUNT(1) AS ambulatory_surgery_allowed,\n  SUM(dialysis_allowed) / COUNT(1) AS dialysis_allowed,\n  SUM(durable_medical_equipment_allowed) / COUNT(1) AS durable_medical_equipment_allowed,\n  SUM(emergency_department_allowed) / COUNT(1) AS emergency_department_allowed,\n  SUM(home_health_allowed) / COUNT(1) AS home_health_allowed,\n  SUM(hospice_allowed) / COUNT(1) AS hospice_allowed,\n  SUM(inpatient_psychiatric_allowed) / COUNT(1) AS inpatient_psychiatric_allowed,\n  SUM(inpatient_rehabilitation_allowed) / COUNT(1) AS inpatient_rehabilitation_allowed,\n  SUM(lab_allowed) / COUNT(1) AS lab_allowed,\n  SUM(office_visit_allowed_2) / COUNT(1) AS office_visit_allowed_2,\n  SUM(outpatient_hospital_or_clinic_allowed) / COUNT(1) AS outpatient_hospital_or_clinic_allowed,\n  SUM(outpatient_psychiatric_allowed) / COUNT(1) AS outpatient_psychiatric_allowed,\n  SUM(outpatient_rehabilitation_allowed) / COUNT(1) AS outpatient_rehabilitation_allowed,\n  SUM(skilled_nursing_allowed) / COUNT(1) AS skilled_nursing_allowed,\n  SUM(urgent_care_allowed) / COUNT(1) AS urgent_care_allowed,\n  '{{ var('tuva_last_run')}}' as tuva_last_run\nFROM {{ ref('financial_pmpm__pmpm_prep') }} a\nGROUP BY 1,2,3,4", "language": "sql", "refs": [{"name": "financial_pmpm__pmpm_prep", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.financial_pmpm__pmpm_prep"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/final/financial_pmpm__pmpm.sql", "compiled": true, "compiled_code": "\n\nSELECT \n  year_month,\n  payer,\n  plan,\n  data_source,\n  count(1) as member_months,\n  SUM(total_paid) / COUNT(1) AS total_paid,\n  SUM(medical_paid) / COUNT(1) AS medical_paid,\n  SUM(inpatient_paid) / COUNT(1) AS inpatient_paid,\n  SUM(outpatient_paid) / COUNT(1) AS outpatient_paid,\n  SUM(office_visit_paid) / COUNT(1) AS office_visit_paid,\n  SUM(ancillary_paid) / COUNT(1) AS ancillary_paid,\n  SUM(pharmacy_paid) / COUNT(1) AS pharmacy_paid,\n  SUM(other_paid) / COUNT(1) AS other_paid,\n  SUM(acute_inpatient_paid) / COUNT(1) AS acute_inpatient_paid,\n  SUM(ambulance_paid) / COUNT(1) AS ambulance_paid,\n  SUM(ambulatory_surgery_paid) / COUNT(1) AS ambulatory_surgery_paid,\n  SUM(dialysis_paid) / COUNT(1) AS dialysis_paid,\n  SUM(durable_medical_equipment_paid) / COUNT(1) AS durable_medical_equipment_paid,\n  SUM(emergency_department_paid) / COUNT(1) AS emergency_department_paid,\n  SUM(home_health_paid) / COUNT(1) AS home_health_paid,\n  SUM(hospice_paid) / COUNT(1) AS hospice_paid,\n  SUM(inpatient_psychiatric_paid) / COUNT(1) AS inpatient_psychiatric_paid,\n  SUM(inpatient_rehabilitation_paid) / COUNT(1) AS inpatient_rehabilitation_paid,\n  SUM(lab_paid) / COUNT(1) AS lab_paid,\n  SUM(office_visit_paid_2) / COUNT(1) AS office_visit_paid_2,\n  SUM(outpatient_hospital_or_clinic_paid) / COUNT(1) AS outpatient_hospital_or_clinic_paid,\n  SUM(outpatient_psychiatric_paid) / COUNT(1) AS outpatient_psychiatric_paid,\n  SUM(outpatient_rehabilitation_paid) / COUNT(1) AS outpatient_rehabilitation_paid,\n  SUM(skilled_nursing_paid) / COUNT(1) AS skilled_nursing_paid,\n  SUM(urgent_care_paid) / COUNT(1) AS urgent_care_paid,\n  SUM(total_allowed) / COUNT(1) AS total_allowed,\n  SUM(medical_allowed) / COUNT(1) AS medical_allowed,\n  SUM(inpatient_allowed) / COUNT(1) AS inpatient_allowed,\n  SUM(outpatient_allowed) / COUNT(1) AS outpatient_allowed,\n  SUM(office_visit_allowed) / COUNT(1) AS office_visit_allowed,\n  SUM(ancillary_allowed) / COUNT(1) AS ancillary_allowed,\n  SUM(pharmacy_allowed) / COUNT(1) AS pharmacy_allowed,\n  SUM(other_allowed) / COUNT(1) AS other_allowed,\n  SUM(acute_inpatient_allowed) / COUNT(1) AS acute_inpatient_allowed,\n  SUM(ambulance_allowed) / COUNT(1) AS ambulance_allowed,\n  SUM(ambulatory_surgery_allowed) / COUNT(1) AS ambulatory_surgery_allowed,\n  SUM(dialysis_allowed) / COUNT(1) AS dialysis_allowed,\n  SUM(durable_medical_equipment_allowed) / COUNT(1) AS durable_medical_equipment_allowed,\n  SUM(emergency_department_allowed) / COUNT(1) AS emergency_department_allowed,\n  SUM(home_health_allowed) / COUNT(1) AS home_health_allowed,\n  SUM(hospice_allowed) / COUNT(1) AS hospice_allowed,\n  SUM(inpatient_psychiatric_allowed) / COUNT(1) AS inpatient_psychiatric_allowed,\n  SUM(inpatient_rehabilitation_allowed) / COUNT(1) AS inpatient_rehabilitation_allowed,\n  SUM(lab_allowed) / COUNT(1) AS lab_allowed,\n  SUM(office_visit_allowed_2) / COUNT(1) AS office_visit_allowed_2,\n  SUM(outpatient_hospital_or_clinic_allowed) / COUNT(1) AS outpatient_hospital_or_clinic_allowed,\n  SUM(outpatient_psychiatric_allowed) / COUNT(1) AS outpatient_psychiatric_allowed,\n  SUM(outpatient_rehabilitation_allowed) / COUNT(1) AS outpatient_rehabilitation_allowed,\n  SUM(skilled_nursing_allowed) / COUNT(1) AS skilled_nursing_allowed,\n  SUM(urgent_care_allowed) / COUNT(1) AS urgent_care_allowed,\n  '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nFROM tuva_project_demo.financial_pmpm.pmpm_prep a\nGROUP BY 1,2,3,4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__pmpm_prep": {"database": "tuva_project_demo", "schema": "financial_pmpm", "name": "financial_pmpm__pmpm_prep", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/final/financial_pmpm__pmpm_prep.sql", "original_file_path": "models/financial_pmpm/final/financial_pmpm__pmpm_prep.sql", "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_prep", "fqn": ["the_tuva_project", "financial_pmpm", "final", "financial_pmpm__pmpm_prep"], "alias": "pmpm_prep", "checksum": {"name": "sha256", "checksum": "04f4a81f4ccd3261af1b60263f314ecb6ef920c7ce85e9ec5a12e969410967b4"}, "config": {"enabled": true, "alias": "pmpm_prep", "schema": "financial_pmpm", "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "Computes all the paid and allowed statistics for every patient_id and year_month combination.  \n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year_month": {"name": "year_month", "description": "Unique year-month of in the dataset computed from eligibility.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer (i.e. health insurer) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Name of the plan (i.e. sub contract) providing coverage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically  named after the payer and state \"BCBS Tennessee\").\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_paid": {"name": "inpatient_paid", "description": "Total inpatient paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_paid": {"name": "outpatient_paid", "description": "Total outpatient paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "office_visit_paid": {"name": "office_visit_paid", "description": "Total office visit paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ancillary_paid": {"name": "ancillary_paid", "description": "Total ancillary paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pharmacy_paid": {"name": "pharmacy_paid", "description": "Total pharmacy paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "other_paid": {"name": "other_paid", "description": "Total other paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "acute_inpatient_paid": {"name": "acute_inpatient_paid", "description": "Total acute inpatient paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ambulance_paid": {"name": "ambulance_paid", "description": "Total ambulance paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ambulatory_surgery_paid": {"name": "ambulatory_surgery_paid", "description": "Total ambulatory surgery paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dialysis_paid": {"name": "dialysis_paid", "description": "Total dialysis paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "durable_medical_equipment_paid": {"name": "durable_medical_equipment_paid", "description": "Total durable medical equipment paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "emergency_department_paid": {"name": "emergency_department_paid", "description": "Total emergency department paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_health_paid": {"name": "home_health_paid", "description": "Total home health paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hospice_paid": {"name": "hospice_paid", "description": "Total hospice paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_psychiatric_paid": {"name": "inpatient_psychiatric_paid", "description": "Total inpatient psychiatric paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_rehabilitation_paid": {"name": "inpatient_rehabilitation_paid", "description": "Total inpatient rehabilitation paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lab_paid": {"name": "lab_paid", "description": "Total lab paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "office_visit_paid_2": {"name": "office_visit_paid_2", "description": "Total office visit paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_hospital_or_clinic_paid": {"name": "outpatient_hospital_or_clinic_paid", "description": "Total outpatient hospital or clinic paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_psychiatric_paid": {"name": "outpatient_psychiatric_paid", "description": "Total outpatient psychiatric paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_rehabilitation_paid": {"name": "outpatient_rehabilitation_paid", "description": "Total outpatient rehabilitation paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "skilled_nursing_paid": {"name": "skilled_nursing_paid", "description": "Total skilled nursing paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "urgent_care_paid": {"name": "urgent_care_paid", "description": "Total urgent care paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_allowed": {"name": "inpatient_allowed", "description": "Total inpatient allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_allowed": {"name": "outpatient_allowed", "description": "Total outpatient allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "office_visit_allowed": {"name": "office_visit_allowed", "description": "Total office visit allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ancillary_allowed": {"name": "ancillary_allowed", "description": "Total ancillary allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pharmacy_allowed": {"name": "pharmacy_allowed", "description": "Total pharmacy allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "other_allowed": {"name": "other_allowed", "description": "Total other allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "acute_inpatient_allowed": {"name": "acute_inpatient_allowed", "description": "Total acute inpatient allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ambulance_allowed": {"name": "ambulance_allowed", "description": "Total ambulance allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ambulatory_surgery_allowed": {"name": "ambulatory_surgery_allowed", "description": "Total ambulatory surgery allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dialysis_allowed": {"name": "dialysis_allowed", "description": "Total dialysis allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "durable_medical_equipment_allowed": {"name": "durable_medical_equipment_allowed", "description": "Total durable medical equipment allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "emergency_department_allowed": {"name": "emergency_department_allowed", "description": "Total emergency department allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_health_allowed": {"name": "home_health_allowed", "description": "Total home health allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hospice_allowed": {"name": "hospice_allowed", "description": "Total hospice allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_psychiatric_allowed": {"name": "inpatient_psychiatric_allowed", "description": "Total inpatient psychiatric allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inpatient_rehabilitation_allowed": {"name": "inpatient_rehabilitation_allowed", "description": "Total inpatient rehabilitation allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lab_allowed": {"name": "lab_allowed", "description": "Total lab allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "office_visit_allowed_2": {"name": "office_visit_allowed_2", "description": "Total office visit allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_hospital_or_clinic_allowed": {"name": "outpatient_hospital_or_clinic_allowed", "description": "Total outpatient hospital or clinic allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_psychiatric_allowed": {"name": "outpatient_psychiatric_allowed", "description": "Total outpatient psychiatric allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "outpatient_rehabilitation_allowed": {"name": "outpatient_rehabilitation_allowed", "description": "Total outpatient rehabilitation allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "skilled_nursing_allowed": {"name": "skilled_nursing_allowed", "description": "Total skilled nursing allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "urgent_care_allowed": {"name": "urgent_care_allowed", "description": "Total urgent care allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_paid": {"name": "total_paid", "description": "Total paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medical_paid": {"name": "medical_paid", "description": "Total medical paid amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_allowed": {"name": "total_allowed", "description": "Total allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "medical_allowed": {"name": "medical_allowed", "description": "Total medical allowed amount per member per month (PMPM).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "financial_pmpm", "alias": "pmpm_prep", "tags": ["financial_pmpm"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.2732646, "relation_name": "tuva_project_demo.financial_pmpm.pmpm_prep", "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith combine as (\nSELECT\n  a.patient_id,\n  a.year_month,\n  a.payer,\n  a.plan, \n  a.data_source,\n  \n  -- service cat 1 paid\n  COALESCE(b.inpatient_paid, 0) AS inpatient_paid,\n  COALESCE(b.outpatient_paid, 0) AS outpatient_paid,\n  COALESCE(b.office_visit_paid, 0) AS office_visit_paid,\n  COALESCE(b.ancillary_paid, 0) AS ancillary_paid,\n  COALESCE(b.pharmacy_paid, 0) AS pharmacy_paid,\n  COALESCE(b.other_paid, 0) AS other_paid,\n  \n  -- service cat 2 paid\n  COALESCE(c.acute_inpatient_paid, 0) AS acute_inpatient_paid,\n  COALESCE(c.ambulance_paid, 0) AS ambulance_paid,\n  COALESCE(c.ambulatory_surgery_paid, 0) AS ambulatory_surgery_paid,\n  COALESCE(c.dialysis_paid, 0) AS dialysis_paid,\n  COALESCE(c.durable_medical_equipment_paid, 0) AS durable_medical_equipment_paid,\n  COALESCE(c.emergency_department_paid, 0) AS emergency_department_paid,\n  COALESCE(c.home_health_paid, 0) AS home_health_paid,\n  COALESCE(c.hospice_paid, 0) AS hospice_paid,\n  COALESCE(c.inpatient_psychiatric_paid, 0) AS inpatient_psychiatric_paid,\n  COALESCE(c.inpatient_rehabilitation_paid, 0) AS inpatient_rehabilitation_paid,\n  COALESCE(c.lab_paid, 0) AS lab_paid,\n  COALESCE(c.office_visit_paid, 0) AS office_visit_paid_2,\n  COALESCE(c.outpatient_hospital_or_clinic_paid, 0) AS outpatient_hospital_or_clinic_paid,\n  COALESCE(c.outpatient_psychiatric_paid, 0) AS outpatient_psychiatric_paid,\n  COALESCE(c.outpatient_rehabilitation_paid, 0) AS outpatient_rehabilitation_paid,\n  COALESCE(c.skilled_nursing_paid, 0) AS skilled_nursing_paid,\n  COALESCE(c.urgent_care_paid, 0) AS urgent_care_paid,\n  \n  -- service cat 1 allowed\n  COALESCE(d.inpatient_allowed, 0) AS inpatient_allowed,\n  COALESCE(d.outpatient_allowed, 0) AS outpatient_allowed,\n  COALESCE(d.office_visit_allowed, 0) AS office_visit_allowed,\n  COALESCE(d.ancillary_allowed, 0) AS ancillary_allowed,\n  COALESCE(d.pharmacy_allowed, 0) AS pharmacy_allowed,\n  COALESCE(d.other_allowed, 0) AS other_allowed,\n  \n  -- service cat 2 allowed\n  COALESCE(e.acute_inpatient_allowed, 0) AS acute_inpatient_allowed,\n  COALESCE(e.ambulance_allowed, 0) AS ambulance_allowed,\n  COALESCE(e.ambulatory_surgery_allowed, 0) AS ambulatory_surgery_allowed,\n  COALESCE(e.dialysis_allowed, 0) AS dialysis_allowed,\n  COALESCE(e.durable_medical_equipment_allowed, 0) AS durable_medical_equipment_allowed,\n  COALESCE(e.emergency_department_allowed, 0) AS emergency_department_allowed,\n  COALESCE(e.home_health_allowed, 0) AS home_health_allowed,\n  COALESCE(e.hospice_allowed, 0) AS hospice_allowed,\n  COALESCE(e.inpatient_psychiatric_allowed, 0) AS inpatient_psychiatric_allowed,\n  COALESCE(e.inpatient_rehabilitation_allowed, 0) AS inpatient_rehabilitation_allowed,\n  COALESCE(e.lab_allowed, 0) AS lab_allowed,\n  COALESCE(e.office_visit_allowed, 0) AS office_visit_allowed_2,\n  COALESCE(e.outpatient_hospital_or_clinic_allowed, 0) AS outpatient_hospital_or_clinic_allowed,\n  COALESCE(e.outpatient_psychiatric_allowed, 0) AS outpatient_psychiatric_allowed,\n  COALESCE(e.outpatient_rehabilitation_allowed, 0) AS outpatient_rehabilitation_allowed,\n  COALESCE(e.skilled_nursing_allowed, 0) AS skilled_nursing_allowed,\n  COALESCE(e.urgent_care_allowed, 0) AS urgent_care_allowed\nFROM {{ ref('financial_pmpm__member_months') }} a\nleft join {{ ref('financial_pmpm__service_category_1_paid_pivot') }} b\n  on a.patient_id = b.patient_id\n  and a.year_month = b.year_month\n  and a.payer = b.payer\n  and a.plan = b.plan\nleft join {{ ref('financial_pmpm__service_category_2_paid_pivot') }} c\n  on a.patient_id = c.patient_id\n  and a.year_month = c.year_month\n  and a.payer = c.payer\n  and a.plan = c.plan\nleft join {{ ref('financial_pmpm__service_category_1_allowed_pivot') }} d\n  on a.patient_id = d.patient_id\n  and a.year_month = d.year_month\n  and a.payer = d.payer\n  and a.plan = d.plan\nleft join {{ ref('financial_pmpm__service_category_2_allowed_pivot') }} e\n  on a.patient_id = e.patient_id\n  and a.year_month = e.year_month\n  and a.payer = e.payer\n  and a.plan = e.plan   \n)\n\nselect *\n, inpatient_paid + outpatient_paid + office_visit_paid + ancillary_paid + other_paid + pharmacy_paid as total_paid\n, inpatient_paid + outpatient_paid + office_visit_paid + ancillary_paid + other_paid as medical_paid\n, inpatient_allowed + outpatient_allowed + office_visit_allowed + ancillary_allowed + other_allowed + pharmacy_allowed as total_allowed\n, inpatient_allowed + outpatient_allowed + office_visit_allowed + ancillary_allowed + other_allowed as medical_allowed\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom combine", "language": "sql", "refs": [{"name": "financial_pmpm__member_months", "package": null, "version": null}, {"name": "financial_pmpm__service_category_1_paid_pivot", "package": null, "version": null}, {"name": "financial_pmpm__service_category_2_paid_pivot", "package": null, "version": null}, {"name": "financial_pmpm__service_category_1_allowed_pivot", "package": null, "version": null}, {"name": "financial_pmpm__service_category_2_allowed_pivot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.financial_pmpm__member_months", "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot", "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot", "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot", "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/final/financial_pmpm__pmpm_prep.sql", "compiled": true, "compiled_code": "\n\nwith combine as (\nSELECT\n  a.patient_id,\n  a.year_month,\n  a.payer,\n  a.plan, \n  a.data_source,\n  \n  -- service cat 1 paid\n  COALESCE(b.inpatient_paid, 0) AS inpatient_paid,\n  COALESCE(b.outpatient_paid, 0) AS outpatient_paid,\n  COALESCE(b.office_visit_paid, 0) AS office_visit_paid,\n  COALESCE(b.ancillary_paid, 0) AS ancillary_paid,\n  COALESCE(b.pharmacy_paid, 0) AS pharmacy_paid,\n  COALESCE(b.other_paid, 0) AS other_paid,\n  \n  -- service cat 2 paid\n  COALESCE(c.acute_inpatient_paid, 0) AS acute_inpatient_paid,\n  COALESCE(c.ambulance_paid, 0) AS ambulance_paid,\n  COALESCE(c.ambulatory_surgery_paid, 0) AS ambulatory_surgery_paid,\n  COALESCE(c.dialysis_paid, 0) AS dialysis_paid,\n  COALESCE(c.durable_medical_equipment_paid, 0) AS durable_medical_equipment_paid,\n  COALESCE(c.emergency_department_paid, 0) AS emergency_department_paid,\n  COALESCE(c.home_health_paid, 0) AS home_health_paid,\n  COALESCE(c.hospice_paid, 0) AS hospice_paid,\n  COALESCE(c.inpatient_psychiatric_paid, 0) AS inpatient_psychiatric_paid,\n  COALESCE(c.inpatient_rehabilitation_paid, 0) AS inpatient_rehabilitation_paid,\n  COALESCE(c.lab_paid, 0) AS lab_paid,\n  COALESCE(c.office_visit_paid, 0) AS office_visit_paid_2,\n  COALESCE(c.outpatient_hospital_or_clinic_paid, 0) AS outpatient_hospital_or_clinic_paid,\n  COALESCE(c.outpatient_psychiatric_paid, 0) AS outpatient_psychiatric_paid,\n  COALESCE(c.outpatient_rehabilitation_paid, 0) AS outpatient_rehabilitation_paid,\n  COALESCE(c.skilled_nursing_paid, 0) AS skilled_nursing_paid,\n  COALESCE(c.urgent_care_paid, 0) AS urgent_care_paid,\n  \n  -- service cat 1 allowed\n  COALESCE(d.inpatient_allowed, 0) AS inpatient_allowed,\n  COALESCE(d.outpatient_allowed, 0) AS outpatient_allowed,\n  COALESCE(d.office_visit_allowed, 0) AS office_visit_allowed,\n  COALESCE(d.ancillary_allowed, 0) AS ancillary_allowed,\n  COALESCE(d.pharmacy_allowed, 0) AS pharmacy_allowed,\n  COALESCE(d.other_allowed, 0) AS other_allowed,\n  \n  -- service cat 2 allowed\n  COALESCE(e.acute_inpatient_allowed, 0) AS acute_inpatient_allowed,\n  COALESCE(e.ambulance_allowed, 0) AS ambulance_allowed,\n  COALESCE(e.ambulatory_surgery_allowed, 0) AS ambulatory_surgery_allowed,\n  COALESCE(e.dialysis_allowed, 0) AS dialysis_allowed,\n  COALESCE(e.durable_medical_equipment_allowed, 0) AS durable_medical_equipment_allowed,\n  COALESCE(e.emergency_department_allowed, 0) AS emergency_department_allowed,\n  COALESCE(e.home_health_allowed, 0) AS home_health_allowed,\n  COALESCE(e.hospice_allowed, 0) AS hospice_allowed,\n  COALESCE(e.inpatient_psychiatric_allowed, 0) AS inpatient_psychiatric_allowed,\n  COALESCE(e.inpatient_rehabilitation_allowed, 0) AS inpatient_rehabilitation_allowed,\n  COALESCE(e.lab_allowed, 0) AS lab_allowed,\n  COALESCE(e.office_visit_allowed, 0) AS office_visit_allowed_2,\n  COALESCE(e.outpatient_hospital_or_clinic_allowed, 0) AS outpatient_hospital_or_clinic_allowed,\n  COALESCE(e.outpatient_psychiatric_allowed, 0) AS outpatient_psychiatric_allowed,\n  COALESCE(e.outpatient_rehabilitation_allowed, 0) AS outpatient_rehabilitation_allowed,\n  COALESCE(e.skilled_nursing_allowed, 0) AS skilled_nursing_allowed,\n  COALESCE(e.urgent_care_allowed, 0) AS urgent_care_allowed\nFROM tuva_project_demo.financial_pmpm.member_months a\nleft join tuva_project_demo.financial_pmpm._int_service_category_1_paid_pivot b\n  on a.patient_id = b.patient_id\n  and a.year_month = b.year_month\n  and a.payer = b.payer\n  and a.plan = b.plan\nleft join tuva_project_demo.financial_pmpm._int_service_category_2_paid_pivot c\n  on a.patient_id = c.patient_id\n  and a.year_month = c.year_month\n  and a.payer = c.payer\n  and a.plan = c.plan\nleft join tuva_project_demo.financial_pmpm._int_service_category_1_allowed_pivot d\n  on a.patient_id = d.patient_id\n  and a.year_month = d.year_month\n  and a.payer = d.payer\n  and a.plan = d.plan\nleft join tuva_project_demo.financial_pmpm._int_service_category_2_allowed_pivot e\n  on a.patient_id = e.patient_id\n  and a.year_month = e.year_month\n  and a.payer = e.payer\n  and a.plan = e.plan   \n)\n\nselect *\n, inpatient_paid + outpatient_paid + office_visit_paid + ancillary_paid + other_paid + pharmacy_paid as total_paid\n, inpatient_paid + outpatient_paid + office_visit_paid + ancillary_paid + other_paid as medical_paid\n, inpatient_allowed + outpatient_allowed + office_visit_allowed + ancillary_allowed + other_allowed + pharmacy_allowed as total_allowed\n, inpatient_allowed + outpatient_allowed + office_visit_allowed + ancillary_allowed + other_allowed as medical_allowed\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom combine", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories": {"database": "tuva_project_demo", "schema": "financial_pmpm", "name": "financial_pmpm__patient_spend_with_service_categories", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/intermediate/financial_pmpm__patient_spend_with_service_categories.sql", "original_file_path": "models/financial_pmpm/intermediate/financial_pmpm__patient_spend_with_service_categories.sql", "unique_id": "model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories", "fqn": ["the_tuva_project", "financial_pmpm", "intermediate", "financial_pmpm__patient_spend_with_service_categories"], "alias": "_int_patient_spend_with_service_categories", "checksum": {"name": "sha256", "checksum": "9edc612350f50178fffa597eaf30f96d41df1a22f2d9ec577b83d63f77c8c72a"}, "config": {"enabled": true, "alias": "_int_patient_spend_with_service_categories", "schema": "financial_pmpm", "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "Adds service categories to claims and sums paid and allowed amounts to the year-month level.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "financial_pmpm", "alias": "_int_patient_spend_with_service_categories", "tags": ["financial_pmpm"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.28435, "relation_name": "tuva_project_demo.financial_pmpm._int_patient_spend_with_service_categories", "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith claims_with_service_categories as (\n  select\n      a.patient_id\n    , a.payer\n    , a.plan\n    , a.service_category_1\n    , a.service_category_2\n    , coalesce(a.claim_start_date,a.claim_end_date) as claim_date\n    , a.paid_amount\n    , a.allowed_amount\n    , data_source\n  from {{ ref('financial_pmpm__stg_medical_claim') }} a\n)\n\n, medical_claims_year_month as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , cast({{ date_part(\"year\", \"claim_date\" ) }} as {{ dbt.type_string() }} ) || lpad(cast({{ date_part(\"month\", \"claim_date\" ) }} as {{ dbt.type_string() }} ),2,'0') AS year_month\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from claims_with_service_categories\n)\n\n, rx_claims as (\n  select\n      patient_id\n    , payer\n    , plan\n    , 'Pharmacy' as service_category_1\n    , cast(null as {{ dbt.type_string() }}) as service_category_2\n    , {{try_to_cast_date('dispensing_date','YYYMMDD') }}  as claim_date\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from {{ ref('financial_pmpm__stg_pharmacy_claim') }}\n)\n\n, rx_claims_year_month as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , cast({{ date_part(\"year\", \"claim_date\" ) }} as {{ dbt.type_string() }} ) || lpad(cast({{ date_part(\"month\", \"claim_date\" ) }} as {{ dbt.type_string() }} ),2,'0') AS year_month\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from rx_claims\n)\n\n, combine_medical_and_rx as (\nselect *\nfrom medical_claims_year_month\n\nunion all\n\nselect *\nfrom rx_claims_year_month\n)\n\nselect\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , service_category_2\n  , sum(paid_amount) as total_paid\n  , sum(allowed_amount) as total_allowed\n  , data_source\n  , '{{ var('tuva_last_run')}}' as tuva_last_run\n  from combine_medical_and_rx\ngroup by 1,2,3,4,5,6,9", "language": "sql", "refs": [{"name": "financial_pmpm__stg_medical_claim", "package": null, "version": null}, {"name": "financial_pmpm__stg_pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.date_part", "macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date"], "nodes": ["model.the_tuva_project.financial_pmpm__stg_medical_claim", "model.the_tuva_project.financial_pmpm__stg_pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/intermediate/financial_pmpm__patient_spend_with_service_categories.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__financial_pmpm__stg_medical_claim as (\n\n\n\nSELECT\n  patient_id\n, claim_id\n, claim_line_number\n, claim_start_date\n, claim_end_date\n, service_category_1\n, service_category_2\n, paid_amount\n, allowed_amount\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n),  __dbt__cte__financial_pmpm__stg_pharmacy_claim as (\n\n\n\nSELECT\n  patient_id\n, dispensing_date\n, paid_amount\n, allowed_amount\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.pharmacy_claim\n), claims_with_service_categories as (\n  select\n      a.patient_id\n    , a.payer\n    , a.plan\n    , a.service_category_1\n    , a.service_category_2\n    , coalesce(a.claim_start_date,a.claim_end_date) as claim_date\n    , a.paid_amount\n    , a.allowed_amount\n    , data_source\n  from __dbt__cte__financial_pmpm__stg_medical_claim a\n)\n\n, medical_claims_year_month as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , cast(date_part('year', claim_date) as TEXT ) || lpad(cast(date_part('month', claim_date) as TEXT ),2,'0') AS year_month\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from claims_with_service_categories\n)\n\n, rx_claims as (\n  select\n      patient_id\n    , payer\n    , plan\n    , 'Pharmacy' as service_category_1\n    , cast(null as TEXT) as service_category_2\n    , try_cast( dispensing_date as date )  as claim_date\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from __dbt__cte__financial_pmpm__stg_pharmacy_claim\n)\n\n, rx_claims_year_month as (\n  select\n      patient_id\n    , payer\n    , plan\n    , service_category_1\n    , service_category_2\n    , cast(date_part('year', claim_date) as TEXT ) || lpad(cast(date_part('month', claim_date) as TEXT ),2,'0') AS year_month\n    , paid_amount\n    , allowed_amount\n    , data_source\n  from rx_claims\n)\n\n, combine_medical_and_rx as (\nselect *\nfrom medical_claims_year_month\n\nunion all\n\nselect *\nfrom rx_claims_year_month\n)\n\nselect\n    patient_id\n  , year_month\n  , payer\n  , plan\n  , service_category_1\n  , service_category_2\n  , sum(paid_amount) as total_paid\n  , sum(allowed_amount) as total_allowed\n  , data_source\n  , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n  from combine_medical_and_rx\ngroup by 1,2,3,4,5,6,9", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.financial_pmpm__stg_medical_claim", "sql": " __dbt__cte__financial_pmpm__stg_medical_claim as (\n\n\n\nSELECT\n  patient_id\n, claim_id\n, claim_line_number\n, claim_start_date\n, claim_end_date\n, service_category_1\n, service_category_2\n, paid_amount\n, allowed_amount\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n)"}, {"id": "model.the_tuva_project.financial_pmpm__stg_pharmacy_claim", "sql": " __dbt__cte__financial_pmpm__stg_pharmacy_claim as (\n\n\n\nSELECT\n  patient_id\n, dispensing_date\n, paid_amount\n, allowed_amount\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.pharmacy_claim\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot": {"database": "tuva_project_demo", "schema": "financial_pmpm", "name": "financial_pmpm__service_category_1_allowed_pivot", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/intermediate/financial_pmpm__service_category_1_allowed_pivot.sql", "original_file_path": "models/financial_pmpm/intermediate/financial_pmpm__service_category_1_allowed_pivot.sql", "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot", "fqn": ["the_tuva_project", "financial_pmpm", "intermediate", "financial_pmpm__service_category_1_allowed_pivot"], "alias": "_int_service_category_1_allowed_pivot", "checksum": {"name": "sha256", "checksum": "403c8dd6e6f3407364b10a4f0a21b0bf80c6ae3379ba780bfe6ee3e578e8932c"}, "config": {"enabled": true, "alias": "_int_service_category_1_allowed_pivot", "schema": "financial_pmpm", "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "Pivots out allowed amounts into columns by service category level 1.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "financial_pmpm", "alias": "_int_service_category_1_allowed_pivot", "tags": ["financial_pmpm"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.288872, "relation_name": "tuva_project_demo.financial_pmpm._int_service_category_1_allowed_pivot", "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith service_cat_1 as (\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, service_category_1\n, data_source\n, sum(total_allowed) as total_allowed\nfrom {{ ref('financial_pmpm__patient_spend_with_service_categories') }}\ngroup by 1,2,3,4,5,6\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, {{ dbt_utils.pivot(\n      column='service_category_1'\n    , values=('Inpatient','Outpatient','Office Visit','Ancillary','Other','Pharmacy')\n    , agg='sum'\n    , then_value='total_allowed'\n    , else_value= 0\n    , quote_identifiers = False\n    , suffix='_allowed'\n  ) }}\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom service_cat_1\ngroup by 1,2,3,4,5", "language": "sql", "refs": [{"name": "financial_pmpm__patient_spend_with_service_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.pivot"], "nodes": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/intermediate/financial_pmpm__service_category_1_allowed_pivot.sql", "compiled": true, "compiled_code": "\n\nwith service_cat_1 as (\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, service_category_1\n, data_source\n, sum(total_allowed) as total_allowed\nfrom tuva_project_demo.financial_pmpm._int_patient_spend_with_service_categories\ngroup by 1,2,3,4,5,6\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_1 = 'Inpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Outpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Office Visit'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_visit_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Ancillary'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ancillary_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Other'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as other_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Pharmacy'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as pharmacy_allowed\n      \n    \n    \n  \n\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom service_cat_1\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot": {"database": "tuva_project_demo", "schema": "financial_pmpm", "name": "financial_pmpm__service_category_1_paid_pivot", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/intermediate/financial_pmpm__service_category_1_paid_pivot.sql", "original_file_path": "models/financial_pmpm/intermediate/financial_pmpm__service_category_1_paid_pivot.sql", "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot", "fqn": ["the_tuva_project", "financial_pmpm", "intermediate", "financial_pmpm__service_category_1_paid_pivot"], "alias": "_int_service_category_1_paid_pivot", "checksum": {"name": "sha256", "checksum": "dd106400e6a3b1cf5922a95c8550bc839b100af6d91583eb1306b6deb146dde9"}, "config": {"enabled": true, "alias": "_int_service_category_1_paid_pivot", "schema": "financial_pmpm", "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "Pivots out paid amounts into columns by service category level 1.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "financial_pmpm", "alias": "_int_service_category_1_paid_pivot", "tags": ["financial_pmpm"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.2972937, "relation_name": "tuva_project_demo.financial_pmpm._int_service_category_1_paid_pivot", "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith service_cat_1 as (\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, service_category_1\n, data_source\n, sum(total_paid) as total_paid\nfrom {{ ref('financial_pmpm__patient_spend_with_service_categories') }}\ngroup by 1,2,3,4,5,6\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, {{ dbt_utils.pivot(\n      column='service_category_1'\n    , values=('Inpatient','Outpatient','Office Visit','Ancillary','Other','Pharmacy')\n    , agg='sum'\n    , then_value='total_paid'\n    , else_value= 0\n    , quote_identifiers = False\n    , suffix='_paid'\n  ) }}\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom service_cat_1\ngroup by 1,2,3,4,5", "language": "sql", "refs": [{"name": "financial_pmpm__patient_spend_with_service_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.pivot"], "nodes": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/intermediate/financial_pmpm__service_category_1_paid_pivot.sql", "compiled": true, "compiled_code": "\n\nwith service_cat_1 as (\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, service_category_1\n, data_source\n, sum(total_paid) as total_paid\nfrom tuva_project_demo.financial_pmpm._int_patient_spend_with_service_categories\ngroup by 1,2,3,4,5,6\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_1 = 'Inpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Outpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Office Visit'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_visit_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Ancillary'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ancillary_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Other'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as other_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_1 = 'Pharmacy'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as pharmacy_paid\n      \n    \n    \n  \n\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom service_cat_1\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot": {"database": "tuva_project_demo", "schema": "financial_pmpm", "name": "financial_pmpm__service_category_2_allowed_pivot", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/intermediate/financial_pmpm__service_category_2_allowed_pivot.sql", "original_file_path": "models/financial_pmpm/intermediate/financial_pmpm__service_category_2_allowed_pivot.sql", "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot", "fqn": ["the_tuva_project", "financial_pmpm", "intermediate", "financial_pmpm__service_category_2_allowed_pivot"], "alias": "_int_service_category_2_allowed_pivot", "checksum": {"name": "sha256", "checksum": "ad30c2f5dedc08e138b411667752bb70744c4445a2713c81b1341cc65dfdc18a"}, "config": {"enabled": true, "alias": "_int_service_category_2_allowed_pivot", "schema": "financial_pmpm", "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "Pivots out allowed amounts into columns by service category level 2.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "financial_pmpm", "alias": "_int_service_category_2_allowed_pivot", "tags": ["financial_pmpm"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.2933486, "relation_name": "tuva_project_demo.financial_pmpm._int_service_category_2_allowed_pivot", "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n    )\n}}\n\nwith service_cat_2 as (\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, service_category_2\n, data_source\n, sum(total_allowed) as total_allowed\nfrom {{ ref('financial_pmpm__patient_spend_with_service_categories') }}\ngroup by 1,2,3,4,5,6\n)\n\nselect\n  patient_id \n, year_month \n, payer\n, plan\n, data_source\n, {{ dbt_utils.pivot(\n    column='service_category_2'\n  , values=('Acute Inpatient',\n            'Ambulance',\n            'Ambulatory Surgery',\n            'Dialysis',\n            'Durable Medical Equipment',\n            'Emergency Department',\n            'Home Health',\n            'Hospice',\n            'Inpatient Psychiatric',\n            'Inpatient Rehabilitation',\n            'Lab',\n            'Office Visit',\n            'Outpatient Hospital or Clinic',\n            'Outpatient Psychiatric',\n            'Outpatient Rehabilitation',\n            'Skilled Nursing',\n            'Urgent Care'                                                 \n            )\n  , agg='sum'\n  , then_value='total_allowed'\n  , else_value= 0\n  , quote_identifiers = False\n  , suffix='_allowed'\n) }}\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom service_cat_2\ngroup by 1,2,3,4,5", "language": "sql", "refs": [{"name": "financial_pmpm__patient_spend_with_service_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.pivot"], "nodes": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/intermediate/financial_pmpm__service_category_2_allowed_pivot.sql", "compiled": true, "compiled_code": "\n\nwith service_cat_2 as (\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, service_category_2\n, data_source\n, sum(total_allowed) as total_allowed\nfrom tuva_project_demo.financial_pmpm._int_patient_spend_with_service_categories\ngroup by 1,2,3,4,5,6\n)\n\nselect\n  patient_id \n, year_month \n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_2 = 'Acute Inpatient'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as acute_inpatient_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Ambulance'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ambulance_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Ambulatory Surgery'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as ambulatory_surgery_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Dialysis'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as dialysis_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Durable Medical Equipment'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as durable_medical_equipment_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Emergency Department'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as emergency_department_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Home Health'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as home_health_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Hospice'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as hospice_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Inpatient Psychiatric'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_psychiatric_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Inpatient Rehabilitation'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as inpatient_rehabilitation_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Lab'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as lab_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Office Visit'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as office_visit_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Hospital or Clinic'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_hospital_or_clinic_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Psychiatric'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_psychiatric_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Rehabilitation'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as outpatient_rehabilitation_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Skilled Nursing'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as skilled_nursing_allowed\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Urgent Care'\n        then total_allowed\n      else 0\n      end\n    )\n    \n      \n        as urgent_care_allowed\n      \n    \n    \n  \n\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom service_cat_2\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot": {"database": "tuva_project_demo", "schema": "financial_pmpm", "name": "financial_pmpm__service_category_2_paid_pivot", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/intermediate/financial_pmpm__service_category_2_paid_pivot.sql", "original_file_path": "models/financial_pmpm/intermediate/financial_pmpm__service_category_2_paid_pivot.sql", "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot", "fqn": ["the_tuva_project", "financial_pmpm", "intermediate", "financial_pmpm__service_category_2_paid_pivot"], "alias": "_int_service_category_2_paid_pivot", "checksum": {"name": "sha256", "checksum": "0f3b24231c00e77f69ad45cc88394eb6e5f7de10dc760507883630d4541dae30"}, "config": {"enabled": true, "alias": "_int_service_category_2_paid_pivot", "schema": "financial_pmpm", "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "Pivots out paid amounts into columns by service category level 2.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "financial_pmpm", "alias": "_int_service_category_2_paid_pivot", "tags": ["financial_pmpm"], "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3012679, "relation_name": "tuva_project_demo.financial_pmpm._int_service_category_2_paid_pivot", "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nwith service_cat_2 as (\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, service_category_2\n, data_source\n, sum(total_paid) as total_paid\nfrom {{ ref('financial_pmpm__patient_spend_with_service_categories') }}\ngroup by 1,2,3,4,5,6\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, {{ dbt_utils.pivot(\n      column='service_category_2'\n    , values=('Acute Inpatient',\n              'Ambulance',\n              'Ambulatory Surgery',\n              'Dialysis',\n              'Durable Medical Equipment',\n              'Emergency Department',\n              'Home Health',\n              'Hospice',\n              'Inpatient Psychiatric',\n              'Inpatient Rehabilitation',\n              'Lab',\n              'Office Visit',\n              'Outpatient Hospital or Clinic',\n              'Outpatient Psychiatric',\n              'Outpatient Rehabilitation',\n              'Skilled Nursing',\n              'Urgent Care'                                                 \n              )\n    , agg='sum'\n    , then_value='total_paid'\n    , else_value= 0\n    , quote_identifiers = False\n    , suffix='_paid'\n  ) }}\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom service_cat_2\ngroup by 1,2,3,4,5", "language": "sql", "refs": [{"name": "financial_pmpm__patient_spend_with_service_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.pivot"], "nodes": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/intermediate/financial_pmpm__service_category_2_paid_pivot.sql", "compiled": true, "compiled_code": "\n\nwith service_cat_2 as (\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, service_category_2\n, data_source\n, sum(total_paid) as total_paid\nfrom tuva_project_demo.financial_pmpm._int_patient_spend_with_service_categories\ngroup by 1,2,3,4,5,6\n)\n\nselect\n  patient_id\n, year_month\n, payer\n, plan\n, data_source\n, \n  \n    sum(\n      \n      case\n      when service_category_2 = 'Acute Inpatient'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as acute_inpatient_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Ambulance'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ambulance_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Ambulatory Surgery'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as ambulatory_surgery_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Dialysis'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as dialysis_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Durable Medical Equipment'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as durable_medical_equipment_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Emergency Department'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as emergency_department_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Home Health'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as home_health_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Hospice'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as hospice_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Inpatient Psychiatric'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_psychiatric_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Inpatient Rehabilitation'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as inpatient_rehabilitation_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Lab'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as lab_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Office Visit'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as office_visit_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Hospital or Clinic'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_hospital_or_clinic_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Psychiatric'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_psychiatric_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Outpatient Rehabilitation'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as outpatient_rehabilitation_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Skilled Nursing'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as skilled_nursing_paid\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when service_category_2 = 'Urgent Care'\n        then total_paid\n      else 0\n      end\n    )\n    \n      \n        as urgent_care_paid\n      \n    \n    \n  \n\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom service_cat_2\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__stg_eligibility": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "financial_pmpm__stg_eligibility", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/staging/financial_pmpm__stg_eligibility.sql", "original_file_path": "models/financial_pmpm/staging/financial_pmpm__stg_eligibility.sql", "unique_id": "model.the_tuva_project.financial_pmpm__stg_eligibility", "fqn": ["the_tuva_project", "financial_pmpm", "staging", "financial_pmpm__stg_eligibility"], "alias": "financial_pmpm__stg_eligibility", "checksum": {"name": "sha256", "checksum": "ae85cc14e5b92eed2bebd1d7e8e9c213e75ff0410762d274a4cacb013a1882ce"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["financial_pmpm"], "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3037622, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n  patient_id\n, enrollment_start_date\n, enrollment_end_date\n, payer\n, plan\n, data_source\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__eligibility') }}", "language": "sql", "refs": [{"name": "core__eligibility", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__eligibility"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/staging/financial_pmpm__stg_eligibility.sql", "compiled": true, "compiled_code": "\n\nselect\n  patient_id\n, enrollment_start_date\n, enrollment_end_date\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.eligibility", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__stg_medical_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "financial_pmpm__stg_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/staging/financial_pmpm__stg_medical_claim.sql", "original_file_path": "models/financial_pmpm/staging/financial_pmpm__stg_medical_claim.sql", "unique_id": "model.the_tuva_project.financial_pmpm__stg_medical_claim", "fqn": ["the_tuva_project", "financial_pmpm", "staging", "financial_pmpm__stg_medical_claim"], "alias": "financial_pmpm__stg_medical_claim", "checksum": {"name": "sha256", "checksum": "f1dce1c43ad38cefb74a3ecfe96f3f74d2715bcb29c6bb1a6dbe3dd8fa318793"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": "financial_pmpm", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3058248, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n\nSELECT\n  patient_id\n, claim_id\n, claim_line_number\n, claim_start_date\n, claim_end_date\n, service_category_1\n, service_category_2\n, paid_amount\n, allowed_amount\n, payer\n, plan\n, data_source\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__medical_claim') }}", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/staging/financial_pmpm__stg_medical_claim.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n  patient_id\n, claim_id\n, claim_line_number\n, claim_start_date\n, claim_end_date\n, service_category_1\n, service_category_2\n, paid_amount\n, allowed_amount\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.financial_pmpm__stg_pharmacy_claim": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "financial_pmpm__stg_pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "financial_pmpm/staging/financial_pmpm__stg_pharmacy_claim.sql", "original_file_path": "models/financial_pmpm/staging/financial_pmpm__stg_pharmacy_claim.sql", "unique_id": "model.the_tuva_project.financial_pmpm__stg_pharmacy_claim", "fqn": ["the_tuva_project", "financial_pmpm", "staging", "financial_pmpm__stg_pharmacy_claim"], "alias": "financial_pmpm__stg_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "cffd881a875dd7c499c0498fdf37b17a0fc623018b0b73fb175b2d9c3e3edd36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["financial_pmpm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["financial_pmpm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/financial_pmpm/financial_pmpm_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": "financial_pmpm", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3077824, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('financial_pmpm_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n\nSELECT\n  patient_id\n, dispensing_date\n, paid_amount\n, allowed_amount\n, payer\n, plan\n, data_source\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__pharmacy_claim') }}", "language": "sql", "refs": [{"name": "core__pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/staging/financial_pmpm__stg_pharmacy_claim.sql", "compiled": true, "compiled_code": "\n\n\nSELECT\n  patient_id\n, dispensing_date\n, paid_amount\n, allowed_amount\n, payer\n, plan\n, data_source\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__count_claim_by_claim_type": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__count_claim_by_claim_type", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__count_claim_by_claim_type.sql", "original_file_path": "models/insights/final/insights__count_claim_by_claim_type.sql", "unique_id": "model.the_tuva_project.insights__count_claim_by_claim_type", "fqn": ["the_tuva_project", "insights", "final", "insights__count_claim_by_claim_type"], "alias": "count_claim_by_claim_type", "checksum": {"name": "sha256", "checksum": "aac53ff2bb99be715d6cad672ed44d502f2bf6ff0c6db695caa45600408b1b1f"}, "config": {"enabled": true, "alias": "count_claim_by_claim_type", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, vision, or pharmacy."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}]}, "tags": ["insights"], "description": "Count of distinct claims by claim type.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "count_claim_by_claim_type", "tags": ["insights"], "materialized": "table", "columns": [{"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, vision, or pharmacy."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3168352, "relation_name": "tuva_project_demo.insights.count_claim_by_claim_type", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nselect \r\n    claim_type\r\n    , count(distinct claim_id) as distinct_claim_count\r\nfrom {{ ref('core__medical_claim') }}\r\ngroup by claim_type\r\nunion all\r\nselect \r\n    'pharmacy'\r\n    , count(distinct claim_id) as distinct_claim_count\r\nfrom {{ ref('core__pharmacy_claim') }}", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__count_claim_by_claim_type.sql", "compiled": true, "compiled_code": "\n\n\nselect \n    claim_type\n    , count(distinct claim_id) as distinct_claim_count\nfrom tuva_project_demo.core.medical_claim\ngroup by claim_type\nunion all\nselect \n    'pharmacy'\n    , count(distinct claim_id) as distinct_claim_count\nfrom tuva_project_demo.core.pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__count_claim_by_date_column": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__count_claim_by_date_column", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__count_claim_by_date_column.sql", "original_file_path": "models/insights/final/insights__count_claim_by_date_column.sql", "unique_id": "model.the_tuva_project.insights__count_claim_by_date_column", "fqn": ["the_tuva_project", "insights", "final", "insights__count_claim_by_date_column"], "alias": "count_claim_by_date_column", "checksum": {"name": "sha256", "checksum": "2298b6ef62d6b803dfcd7a0ce609b04298c4ca07b1330076876862075febff90"}, "config": {"enabled": true, "alias": "count_claim_by_date_column", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "year_month", "description": "Year and month of the claim end date or the member enrollment."}, {"name": "member_months", "description": "Count of unique member months."}, {"name": "claim_start_date", "description": "Count of unique medical claims."}, {"name": "claim_end_date", "description": "Count of unique medical claims."}, {"name": "admission_date", "description": "Count of unique medical claims."}, {"name": "discharge_date", "description": "Count of unique medical claims."}, {"name": "medical_paid_date", "description": "Count of unique medical claims."}, {"name": "dispensing_date", "description": "Count of unique pharmacy claims."}, {"name": "pharmacy_paid_date", "description": "Count of unique pharmacy claims."}]}, "tags": ["insights"], "description": "Count of distinct claims by multiple dates.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "count_claim_by_date_column", "tags": ["insights"], "materialized": "table", "columns": [{"name": "year_month", "description": "Year and month of the claim end date or the member enrollment."}, {"name": "member_months", "description": "Count of unique member months."}, {"name": "claim_start_date", "description": "Count of unique medical claims."}, {"name": "claim_end_date", "description": "Count of unique medical claims."}, {"name": "admission_date", "description": "Count of unique medical claims."}, {"name": "discharge_date", "description": "Count of unique medical claims."}, {"name": "medical_paid_date", "description": "Count of unique medical claims."}, {"name": "dispensing_date", "description": "Count of unique pharmacy claims."}, {"name": "pharmacy_paid_date", "description": "Count of unique pharmacy claims."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.32317, "relation_name": "tuva_project_demo.insights.count_claim_by_date_column", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith date_stage as(\r\n\r\n    select\r\n        'claim_start_date' as date_field\r\n        , cast({{ date_part(\"year\", \"claim_start_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_start_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , count(distinct claim_id) as distinct_count\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n\r\n    union all\r\n\r\n    select\r\n        'claim_end_date' as date_field\r\n        , cast({{ date_part(\"year\", \"claim_end_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_end_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , count(distinct claim_id) as distinct_count\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n    union all\r\n\r\n    select\r\n        'admission_date' as date_field\r\n        , cast({{ date_part(\"year\", \"admission_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"admission_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , count(distinct claim_id) as distinct_count\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n\r\n    union all\r\n\r\n    select\r\n        'discharge_date' as date_field\r\n        , cast({{ date_part(\"year\", \"discharge_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"discharge_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , count(distinct claim_id) as distinct_count\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n\r\n    union all\r\n\r\n    select\r\n        'medical paid_date' as date_field\r\n        , cast({{ date_part(\"year\", \"paid_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"paid_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , count(distinct claim_id) as distinct_count\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n\r\n    union all\r\n\r\n    select\r\n        'dispensing_date' as date_field\r\n        , cast({{ date_part(\"year\", \"dispensing_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"dispensing_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , count(distinct claim_id) as distinct_count\r\n    from {{ ref('core__pharmacy_claim') }}\r\n    group by \r\n        year_month\r\n\r\n    union all\r\n\r\n    select\r\n        'pharmacy paid_date' as date_field\r\n        , cast({{ date_part(\"year\", \"paid_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"paid_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , count(distinct claim_id) as distinct_count\r\n    from {{ ref('core__pharmacy_claim') }}\r\n    group by \r\n        year_month\r\n\r\n    union all \r\n\r\n    select\r\n        'member_months' as date_field\r\n        , year_month\r\n        , count(*) as distinct_count\r\n    from {{ ref('financial_pmpm__member_months') }}\r\n    group by\r\n        year_month\r\n)\r\n\r\n\r\n, all_date_range as (\r\n    select distinct \r\n        replace(cal.year_month,'-','') as year_month\r\n    from {{ ref('terminology__calendar') }} cal\r\n    where (cal.year_month >= (select min(year_month) from date_stage)\r\n    and cal.year_month <= (select max(year_month) from date_stage))\r\n    \r\n)\r\n\r\nselect\r\n    cast(all_date.year_month as {{ dbt.type_int() }} ) as year_month\r\n    , member_months.distinct_count as member_months\r\n    , claim_start.distinct_count as claim_start_date\r\n    , claim_end.distinct_count as claim_end_date\r\n    , admission_date.distinct_count as admission_date\r\n    , discharge_date.distinct_count as discharge_date\r\n    , med_paid_date.distinct_count as medical_paid_date\r\n    , dispensing_date.distinct_count as dispensing_date\r\n    , pharm_paid_date.distinct_count as pharmacy_paid_date\r\nfrom all_date_range all_date\r\nleft join date_stage member_months\r\n    on all_date.year_month = member_months.year_month\r\n    and member_months.date_field = 'member_months'\r\nleft join date_stage claim_start\r\n    on all_date.year_month = claim_start.year_month\r\n    and claim_start.date_field = 'claim_start_date'\r\nleft join date_stage claim_end\r\n    on all_date.year_month = claim_end.year_month\r\n    and claim_end.date_field = 'claim_end_date'\r\nleft join date_stage admission_date\r\n    on all_date.year_month = admission_date.year_month\r\n    and admission_date.date_field = 'admission_date'\r\nleft join date_stage discharge_date\r\n    on all_date.year_month = discharge_date.year_month\r\n    and discharge_date.date_field = 'discharge_date'\r\nleft join date_stage med_paid_date\r\n    on all_date.year_month = med_paid_date.year_month\r\n    and med_paid_date.date_field = 'medical paid_date'\r\nleft join date_stage dispensing_date\r\n    on all_date.year_month = dispensing_date.year_month\r\n    and dispensing_date.date_field = 'dispensing_date'\r\nleft join date_stage pharm_paid_date\r\n    on all_date.year_month = pharm_paid_date.year_month\r\n    and pharm_paid_date.date_field = 'pharmacy paid_date'", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__pharmacy_claim", "package": null, "version": null}, {"name": "core__pharmacy_claim", "package": null, "version": null}, {"name": "financial_pmpm__member_months", "package": null, "version": null}, {"name": "terminology__calendar", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.date_part", "macro.dbt.type_string", "macro.dbt.type_int"], "nodes": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim", "model.the_tuva_project.financial_pmpm__member_months", "seed.the_tuva_project.terminology__calendar"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__count_claim_by_date_column.sql", "compiled": true, "compiled_code": "\n\nwith date_stage as(\n\n    select\n        'claim_start_date' as date_field\n        , cast(date_part('year', claim_start_date) as TEXT) || right('0'||cast(date_part('month', claim_start_date) as TEXT),2) as year_month\n        , count(distinct claim_id) as distinct_count\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n\n    union all\n\n    select\n        'claim_end_date' as date_field\n        , cast(date_part('year', claim_end_date) as TEXT) || right('0'||cast(date_part('month', claim_end_date) as TEXT),2) as year_month\n        , count(distinct claim_id) as distinct_count\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n    union all\n\n    select\n        'admission_date' as date_field\n        , cast(date_part('year', admission_date) as TEXT) || right('0'||cast(date_part('month', admission_date) as TEXT),2) as year_month\n        , count(distinct claim_id) as distinct_count\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n\n    union all\n\n    select\n        'discharge_date' as date_field\n        , cast(date_part('year', discharge_date) as TEXT) || right('0'||cast(date_part('month', discharge_date) as TEXT),2) as year_month\n        , count(distinct claim_id) as distinct_count\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n\n    union all\n\n    select\n        'medical paid_date' as date_field\n        , cast(date_part('year', paid_date) as TEXT) || right('0'||cast(date_part('month', paid_date) as TEXT),2) as year_month\n        , count(distinct claim_id) as distinct_count\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n\n    union all\n\n    select\n        'dispensing_date' as date_field\n        , cast(date_part('year', dispensing_date) as TEXT) || right('0'||cast(date_part('month', dispensing_date) as TEXT),2) as year_month\n        , count(distinct claim_id) as distinct_count\n    from tuva_project_demo.core.pharmacy_claim\n    group by \n        year_month\n\n    union all\n\n    select\n        'pharmacy paid_date' as date_field\n        , cast(date_part('year', paid_date) as TEXT) || right('0'||cast(date_part('month', paid_date) as TEXT),2) as year_month\n        , count(distinct claim_id) as distinct_count\n    from tuva_project_demo.core.pharmacy_claim\n    group by \n        year_month\n\n    union all \n\n    select\n        'member_months' as date_field\n        , year_month\n        , count(*) as distinct_count\n    from tuva_project_demo.financial_pmpm.member_months\n    group by\n        year_month\n)\n\n\n, all_date_range as (\n    select distinct \n        replace(cal.year_month,'-','') as year_month\n    from tuva_project_demo.terminology.calendar cal\n    where (cal.year_month >= (select min(year_month) from date_stage)\n    and cal.year_month <= (select max(year_month) from date_stage))\n    \n)\n\nselect\n    cast(all_date.year_month as integer ) as year_month\n    , member_months.distinct_count as member_months\n    , claim_start.distinct_count as claim_start_date\n    , claim_end.distinct_count as claim_end_date\n    , admission_date.distinct_count as admission_date\n    , discharge_date.distinct_count as discharge_date\n    , med_paid_date.distinct_count as medical_paid_date\n    , dispensing_date.distinct_count as dispensing_date\n    , pharm_paid_date.distinct_count as pharmacy_paid_date\nfrom all_date_range all_date\nleft join date_stage member_months\n    on all_date.year_month = member_months.year_month\n    and member_months.date_field = 'member_months'\nleft join date_stage claim_start\n    on all_date.year_month = claim_start.year_month\n    and claim_start.date_field = 'claim_start_date'\nleft join date_stage claim_end\n    on all_date.year_month = claim_end.year_month\n    and claim_end.date_field = 'claim_end_date'\nleft join date_stage admission_date\n    on all_date.year_month = admission_date.year_month\n    and admission_date.date_field = 'admission_date'\nleft join date_stage discharge_date\n    on all_date.year_month = discharge_date.year_month\n    and discharge_date.date_field = 'discharge_date'\nleft join date_stage med_paid_date\n    on all_date.year_month = med_paid_date.year_month\n    and med_paid_date.date_field = 'medical paid_date'\nleft join date_stage dispensing_date\n    on all_date.year_month = dispensing_date.year_month\n    and dispensing_date.date_field = 'dispensing_date'\nleft join date_stage pharm_paid_date\n    on all_date.year_month = pharm_paid_date.year_month\n    and pharm_paid_date.date_field = 'pharmacy paid_date'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__count_claim_by_service_category": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__count_claim_by_service_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__count_claim_by_service_category.sql", "original_file_path": "models/insights/final/insights__count_claim_by_service_category.sql", "unique_id": "model.the_tuva_project.insights__count_claim_by_service_category", "fqn": ["the_tuva_project", "insights", "final", "insights__count_claim_by_service_category"], "alias": "count_claim_by_service_category", "checksum": {"name": "sha256", "checksum": "bca04574d291a5ed9ef59871be58a9a0e1edd3fd413f42391be51a9cd89f04a6"}, "config": {"enabled": true, "alias": "count_claim_by_service_category", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "service_category_type", "description": "The broader service category a claim belongs to."}, {"name": "service_category", "description": "The more specific service category a claim belongs to."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}]}, "tags": ["insights"], "description": "Count of distinct claims by service category.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "count_claim_by_service_category", "tags": ["insights"], "materialized": "table", "columns": [{"name": "service_category_type", "description": "The broader service category a claim belongs to."}, {"name": "service_category", "description": "The more specific service category a claim belongs to."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.327663, "relation_name": "tuva_project_demo.insights.count_claim_by_service_category", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect \r\n    'service_category_1' as service_category_type\r\n    , service_category_1 as service_category\r\n    , count(distinct claim_id) as distinct_claim_count\r\nfrom {{ ref('core__medical_claim') }}\r\ngroup by service_category_1\r\n\r\nunion all\r\n\r\nselect \r\n    'service_category_2' as service_category_type\r\n    , service_category_2 as service_category\r\n    , count(distinct claim_id) as distinct_claim_count\r\nfrom {{ ref('core__medical_claim') }}\r\ngroup by service_category_2", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__count_claim_by_service_category.sql", "compiled": true, "compiled_code": "\n\nselect \n    'service_category_1' as service_category_type\n    , service_category_1 as service_category\n    , count(distinct claim_id) as distinct_claim_count\nfrom tuva_project_demo.core.medical_claim\ngroup by service_category_1\n\nunion all\n\nselect \n    'service_category_2' as service_category_type\n    , service_category_2 as service_category\n    , count(distinct claim_id) as distinct_claim_count\nfrom tuva_project_demo.core.medical_claim\ngroup by service_category_2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__orphan_claim_by_claim_type": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__orphan_claim_by_claim_type", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__orphan_claim_by_claim_type.sql", "original_file_path": "models/insights/final/insights__orphan_claim_by_claim_type.sql", "unique_id": "model.the_tuva_project.insights__orphan_claim_by_claim_type", "fqn": ["the_tuva_project", "insights", "final", "insights__orphan_claim_by_claim_type"], "alias": "orphan_claim_by_claim_type", "checksum": {"name": "sha256", "checksum": "fc94f0c9fcdd42adfdb72bc8a8d971a77a148619d31beb093850f9c46d9f5f6c"}, "config": {"enabled": true, "alias": "orphan_claim_by_claim_type", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "claim_category", "description": "The broader claim type a claim belongs to e.g. medical or pharmacy."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}]}, "tags": ["insights"], "description": "Count of medical and pharmacy claims without a corresponding eligibilty record.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "orphan_claim_by_claim_type", "tags": ["insights"], "materialized": "table", "columns": [{"name": "claim_category", "description": "The broader claim type a claim belongs to e.g. medical or pharmacy."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3333576, "relation_name": "tuva_project_demo.insights.orphan_claim_by_claim_type", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith medical_claim_orphan as(\r\nselect\r\n    'medical_claim' as claim_category\r\n    , claim_id\r\n    , patient_id\r\n    , cast({{ date_part(\"year\", \"claim_end_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_end_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\nfrom {{ ref('core__medical_claim') }}\r\n)\r\n\r\n, pharmacy_claim_orphan as(\r\nselect\r\n    'pharmacy_claim' as claim_category\r\n    , claim_id\r\n    , patient_id\r\n    , cast({{ date_part(\"year\", \"dispensing_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"dispensing_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\nfrom {{ ref('core__pharmacy_claim') }}\r\n)\r\n, union_orphans as(\r\n  select \r\n    med.* \r\n  from medical_claim_orphan med\r\n  left join {{ ref('financial_pmpm__member_months') }} months\r\n      on med.patient_id = months.patient_id\r\n      and med.year_month = months.year_month\r\n  where months.patient_id is null\r\n\r\n  union all\r\n\r\n  select \r\n    med.* \r\n  from pharmacy_claim_orphan med\r\n  left join {{ ref('financial_pmpm__member_months') }} months\r\n      on med.patient_id = months.patient_id\r\n      and med.year_month = months.year_month\r\n  where months.patient_id is null\r\n)\r\n\r\nselect\r\n    claim_category\r\n    , count(distinct claim_id) as distinct_claim_count\r\nfrom union_orphans\r\ngroup by claim_category", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__pharmacy_claim", "package": null, "version": null}, {"name": "financial_pmpm__member_months", "package": null, "version": null}, {"name": "financial_pmpm__member_months", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.date_part", "macro.dbt.type_string"], "nodes": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim", "model.the_tuva_project.financial_pmpm__member_months"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__orphan_claim_by_claim_type.sql", "compiled": true, "compiled_code": "\n\nwith medical_claim_orphan as(\nselect\n    'medical_claim' as claim_category\n    , claim_id\n    , patient_id\n    , cast(date_part('year', claim_end_date) as TEXT) || right('0'||cast(date_part('month', claim_end_date) as TEXT),2) as year_month\nfrom tuva_project_demo.core.medical_claim\n)\n\n, pharmacy_claim_orphan as(\nselect\n    'pharmacy_claim' as claim_category\n    , claim_id\n    , patient_id\n    , cast(date_part('year', dispensing_date) as TEXT) || right('0'||cast(date_part('month', dispensing_date) as TEXT),2) as year_month\nfrom tuva_project_demo.core.pharmacy_claim\n)\n, union_orphans as(\n  select \n    med.* \n  from medical_claim_orphan med\n  left join tuva_project_demo.financial_pmpm.member_months months\n      on med.patient_id = months.patient_id\n      and med.year_month = months.year_month\n  where months.patient_id is null\n\n  union all\n\n  select \n    med.* \n  from pharmacy_claim_orphan med\n  left join tuva_project_demo.financial_pmpm.member_months months\n      on med.patient_id = months.patient_id\n      and med.year_month = months.year_month\n  where months.patient_id is null\n)\n\nselect\n    claim_category\n    , count(distinct claim_id) as distinct_claim_count\nfrom union_orphans\ngroup by claim_category", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__sum_amount_by_claim_type": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__sum_amount_by_claim_type", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__sum_amount_by_claim_type.sql", "original_file_path": "models/insights/final/insights__sum_amount_by_claim_type.sql", "unique_id": "model.the_tuva_project.insights__sum_amount_by_claim_type", "fqn": ["the_tuva_project", "insights", "final", "insights__sum_amount_by_claim_type"], "alias": "sum_amount_by_claim_type", "checksum": {"name": "sha256", "checksum": "1850231cfaf383fe60720e0636c24cd3a351e593aa2956e28565c008303a171d"}, "config": {"enabled": true, "alias": "sum_amount_by_claim_type", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, vision, or pharmacy."}, {"name": "total_paid_amount", "description": "Sum of paid_amount."}, {"name": "total_allowed_amount", "description": "Sum of allowed_amount."}, {"name": "total_charge_amount", "description": "Sum of charge_amount."}]}, "tags": ["insights"], "description": "Sum of paid_amount, allowed_amount, and charge_amount by claim type", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "sum_amount_by_claim_type", "tags": ["insights"], "materialized": "table", "columns": [{"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, vision, or pharmacy."}, {"name": "total_paid_amount", "description": "Sum of paid_amount."}, {"name": "total_allowed_amount", "description": "Sum of allowed_amount."}, {"name": "total_charge_amount", "description": "Sum of charge_amount."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3378422, "relation_name": "tuva_project_demo.insights.sum_amount_by_claim_type", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect \r\n    claim_type\r\n    , sum(paid_amount) as total_paid_amount\r\n    , sum(allowed_amount) as total_allowed_amount\r\n    , sum(charge_amount) as total_charge_amount\r\nfrom {{ ref('core__medical_claim') }}\r\ngroup by claim_type\r\n\r\nunion all\r\n\r\nselect \r\n    'pharmacy'\r\n    , sum(paid_amount) as total_paid_amount\r\n    , sum(allowed_amount) as total_allowed_amount\r\n    , null as total_charge_amount\r\nfrom {{ ref('core__pharmacy_claim') }}", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__sum_amount_by_claim_type.sql", "compiled": true, "compiled_code": "\n\nselect \n    claim_type\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\nfrom tuva_project_demo.core.medical_claim\ngroup by claim_type\n\nunion all\n\nselect \n    'pharmacy'\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , null as total_charge_amount\nfrom tuva_project_demo.core.pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__sum_amount_by_service_category": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__sum_amount_by_service_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__sum_amount_by_service_category.sql", "original_file_path": "models/insights/final/insights__sum_amount_by_service_category.sql", "unique_id": "model.the_tuva_project.insights__sum_amount_by_service_category", "fqn": ["the_tuva_project", "insights", "final", "insights__sum_amount_by_service_category"], "alias": "sum_amount_by_service_category", "checksum": {"name": "sha256", "checksum": "d6b11197aed8609cfdb1117b04d8c31dabdd622025616b92b2d82264f9436cf8"}, "config": {"enabled": true, "alias": "sum_amount_by_service_category", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "service_category_type", "description": "The broader service category a claim belongs to."}, {"name": "service_category", "description": "The more specific service category a claim belongs to."}, {"name": "total_paid_amount", "description": "Sum of paid_amount."}, {"name": "total_allowed_amount", "description": "Sum of allowed_amount."}, {"name": "total_charge_amount", "description": "Sum of charge_amount."}]}, "tags": ["insights"], "description": "Sum of paid_amount, allowed_amount, and charge_amount by service category", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "sum_amount_by_service_category", "tags": ["insights"], "materialized": "table", "columns": [{"name": "service_category_type", "description": "The broader service category a claim belongs to."}, {"name": "service_category", "description": "The more specific service category a claim belongs to."}, {"name": "total_paid_amount", "description": "Sum of paid_amount."}, {"name": "total_allowed_amount", "description": "Sum of allowed_amount."}, {"name": "total_charge_amount", "description": "Sum of charge_amount."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3418489, "relation_name": "tuva_project_demo.insights.sum_amount_by_service_category", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nselect\r\n    'service_category_1' as service_category_type\r\n    , service_category_1\r\n    , sum(paid_amount) as total_paid_amount\r\n    , sum(allowed_amount) as total_allowed_amount\r\n    , sum(charge_amount) as total_charge_amount\r\nfrom {{ ref('core__medical_claim') }}\r\ngroup by service_category_1\r\n\r\nunion all\r\n\r\nselect\r\n    'service_category_2' as service_category_type\r\n    , service_category_2\r\n    , sum(paid_amount) as total_paid_amount\r\n    , sum(allowed_amount) as total_allowed_amount\r\n    , sum(charge_amount) as total_charge_amount\r\nfrom {{ ref('core__medical_claim') }}\r\ngroup by service_category_2", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__sum_amount_by_service_category.sql", "compiled": true, "compiled_code": "\n\nselect\n    'service_category_1' as service_category_type\n    , service_category_1\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\nfrom tuva_project_demo.core.medical_claim\ngroup by service_category_1\n\nunion all\n\nselect\n    'service_category_2' as service_category_type\n    , service_category_2\n    , sum(paid_amount) as total_paid_amount\n    , sum(allowed_amount) as total_allowed_amount\n    , sum(charge_amount) as total_charge_amount\nfrom tuva_project_demo.core.medical_claim\ngroup by service_category_2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__trend_count_claim_by_claim_type": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__trend_count_claim_by_claim_type", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__trend_count_claim_by_claim_type.sql", "original_file_path": "models/insights/final/insights__trend_count_claim_by_claim_type.sql", "unique_id": "model.the_tuva_project.insights__trend_count_claim_by_claim_type", "fqn": ["the_tuva_project", "insights", "final", "insights__trend_count_claim_by_claim_type"], "alias": "trend_count_claim_by_claim_type", "checksum": {"name": "sha256", "checksum": "840c120c80c7edd82f4b970067c62781f8f517a7fde240f3dbfe0ed69f4b7ab4"}, "config": {"enabled": true, "alias": "trend_count_claim_by_claim_type", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "year_month", "description": "Year and month of the claim end date."}, {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, or vision."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}, {"name": "distinct_claim_count_change", "description": "Change in distinct claim count from the previous year month."}, {"name": "distinct_claim_percentage_change", "description": "Percent in distinct claim count change from the previous year month."}]}, "tags": ["insights"], "description": "Monthly trend of distinct claims by claim type", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "trend_count_claim_by_claim_type", "tags": ["insights"], "materialized": "table", "columns": [{"name": "year_month", "description": "Year and month of the claim end date."}, {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, or vision."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}, {"name": "distinct_claim_count_change", "description": "Change in distinct claim count from the previous year month."}, {"name": "distinct_claim_percentage_change", "description": "Percent in distinct claim count change from the previous year month."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3471127, "relation_name": "tuva_project_demo.insights.trend_count_claim_by_claim_type", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith trend_by_claim_type as(\r\n    select\r\n        cast({{ date_part(\"year\", \"claim_end_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_end_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , claim_type\r\n        , count(distinct claim_id) as distinct_claim_count\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n        , claim_type\r\n)\r\n, trend_with_previous_count as(\r\n select \r\n    year_month\r\n    , claim_type\r\n    , distinct_claim_count\r\n    , lag(distinct_claim_count) over (partition by claim_type order by year_month) as previous_distinct_claim_count\r\n from trend_by_claim_type\r\n)\r\n\r\nselect\r\n    year_month\r\n    , claim_type\r\n    , distinct_claim_count\r\n    , distinct_claim_count - previous_distinct_claim_count as distinct_claim_count_change\r\n    , case\r\n        when distinct_claim_count <> 0 then ((distinct_claim_count-previous_distinct_claim_count) / distinct_claim_count) * 100 \r\n            else distinct_claim_count\r\n    end as distinct_claim_percentage_change\r\nfrom trend_with_previous_count", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.date_part", "macro.dbt.type_string"], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__trend_count_claim_by_claim_type.sql", "compiled": true, "compiled_code": "\n\nwith trend_by_claim_type as(\n    select\n        cast(date_part('year', claim_end_date) as TEXT) || right('0'||cast(date_part('month', claim_end_date) as TEXT),2) as year_month\n        , claim_type\n        , count(distinct claim_id) as distinct_claim_count\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n        , claim_type\n)\n, trend_with_previous_count as(\n select \n    year_month\n    , claim_type\n    , distinct_claim_count\n    , lag(distinct_claim_count) over (partition by claim_type order by year_month) as previous_distinct_claim_count\n from trend_by_claim_type\n)\n\nselect\n    year_month\n    , claim_type\n    , distinct_claim_count\n    , distinct_claim_count - previous_distinct_claim_count as distinct_claim_count_change\n    , case\n        when distinct_claim_count <> 0 then ((distinct_claim_count-previous_distinct_claim_count) / distinct_claim_count) * 100 \n            else distinct_claim_count\n    end as distinct_claim_percentage_change\nfrom trend_with_previous_count", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__trend_count_claim_by_service_category": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__trend_count_claim_by_service_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__trend_count_claim_by_service_category.sql", "original_file_path": "models/insights/final/insights__trend_count_claim_by_service_category.sql", "unique_id": "model.the_tuva_project.insights__trend_count_claim_by_service_category", "fqn": ["the_tuva_project", "insights", "final", "insights__trend_count_claim_by_service_category"], "alias": "trend_count_claim_by_service_category", "checksum": {"name": "sha256", "checksum": "f3ca33dfdd8f451c8c44b16b2b2037d08430e93eb153e92965b8593be400562e"}, "config": {"enabled": true, "alias": "trend_count_claim_by_service_category", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "year_month", "description": "Year and month of the claim end date"}, {"name": "service_category", "description": "The more specific service category a claim belongs to."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}, {"name": "distinct_claim_count_change", "description": "Change in distinct claim count from the previous year month."}, {"name": "distinct_claim_percentage_change", "description": "Percent in distinct claim count change from the previous year month."}]}, "tags": ["insights"], "description": "Monthly trend of distinct claims by service category", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "trend_count_claim_by_service_category", "tags": ["insights"], "materialized": "table", "columns": [{"name": "year_month", "description": "Year and month of the claim end date"}, {"name": "service_category", "description": "The more specific service category a claim belongs to."}, {"name": "distinct_claim_count", "description": "Count of distinct claims."}, {"name": "distinct_claim_count_change", "description": "Change in distinct claim count from the previous year month."}, {"name": "distinct_claim_percentage_change", "description": "Percent in distinct claim count change from the previous year month."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3528254, "relation_name": "tuva_project_demo.insights.trend_count_claim_by_service_category", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith trend_by_service_category_1 as (\r\n    select \r\n        cast({{ date_part(\"year\", \"claim_end_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_end_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , service_category_1\r\n        , count(distinct claim_id) as distinct_claim_count\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n        , service_category_1\r\n)\r\n, trend_by_service_category_2 as (\r\n    select \r\n        cast({{ date_part(\"year\", \"claim_end_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_end_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , service_category_2\r\n        , count(distinct claim_id) as distinct_claim_count\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n        , service_category_2\r\n)\r\n, previous_service_category_1_claim_count as(\r\n    select\r\n        year_month\r\n        , service_category_1\r\n        , distinct_claim_count\r\n        , lag(distinct_claim_count) over (partition by service_category_1 order by year_month) as previous_distinct_claim_count\r\n    from trend_by_service_category_1\r\n)\r\n, previous_service_category_2_claim_count as(\r\n    select\r\n        year_month\r\n        , service_category_2\r\n        , distinct_claim_count\r\n        , lag(distinct_claim_count) over (partition by service_category_2 order by year_month) as previous_distinct_claim_count\r\n    from trend_by_service_category_2\r\n)\r\nselect \r\n    year_month\r\n    , service_category_1 as service_category\r\n    , distinct_claim_count\r\n    , distinct_claim_count-previous_distinct_claim_count as distinct_claim_count_change\r\n    , case\r\n        when distinct_claim_count <> 0 then ((distinct_claim_count-previous_distinct_claim_count) / distinct_claim_count) * 100 \r\n            else distinct_claim_count\r\n    end as distinct_claim_percentage_change\r\nfrom previous_service_category_1_claim_count\r\n\r\n union all\r\n\r\n select \r\n    year_month\r\n    , service_category_2 as service_category\r\n    , distinct_claim_count\r\n    , distinct_claim_count-previous_distinct_claim_count as distinct_claim_count_change\r\n    , case\r\n        when distinct_claim_count <> 0 then ((distinct_claim_count-previous_distinct_claim_count) / distinct_claim_count) * 100 \r\n            else distinct_claim_count\r\n    end as distinct_claim_percentage_change\r\nfrom previous_service_category_2_claim_count", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.date_part", "macro.dbt.type_string"], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__trend_count_claim_by_service_category.sql", "compiled": true, "compiled_code": "\n\nwith trend_by_service_category_1 as (\n    select \n        cast(date_part('year', claim_end_date) as TEXT) || right('0'||cast(date_part('month', claim_end_date) as TEXT),2) as year_month\n        , service_category_1\n        , count(distinct claim_id) as distinct_claim_count\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n        , service_category_1\n)\n, trend_by_service_category_2 as (\n    select \n        cast(date_part('year', claim_end_date) as TEXT) || right('0'||cast(date_part('month', claim_end_date) as TEXT),2) as year_month\n        , service_category_2\n        , count(distinct claim_id) as distinct_claim_count\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n        , service_category_2\n)\n, previous_service_category_1_claim_count as(\n    select\n        year_month\n        , service_category_1\n        , distinct_claim_count\n        , lag(distinct_claim_count) over (partition by service_category_1 order by year_month) as previous_distinct_claim_count\n    from trend_by_service_category_1\n)\n, previous_service_category_2_claim_count as(\n    select\n        year_month\n        , service_category_2\n        , distinct_claim_count\n        , lag(distinct_claim_count) over (partition by service_category_2 order by year_month) as previous_distinct_claim_count\n    from trend_by_service_category_2\n)\nselect \n    year_month\n    , service_category_1 as service_category\n    , distinct_claim_count\n    , distinct_claim_count-previous_distinct_claim_count as distinct_claim_count_change\n    , case\n        when distinct_claim_count <> 0 then ((distinct_claim_count-previous_distinct_claim_count) / distinct_claim_count) * 100 \n            else distinct_claim_count\n    end as distinct_claim_percentage_change\nfrom previous_service_category_1_claim_count\n\n union all\n\n select \n    year_month\n    , service_category_2 as service_category\n    , distinct_claim_count\n    , distinct_claim_count-previous_distinct_claim_count as distinct_claim_count_change\n    , case\n        when distinct_claim_count <> 0 then ((distinct_claim_count-previous_distinct_claim_count) / distinct_claim_count) * 100 \n            else distinct_claim_count\n    end as distinct_claim_percentage_change\nfrom previous_service_category_2_claim_count", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__trend_sum_amount_by_claim_type": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__trend_sum_amount_by_claim_type", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__trend_sum_amount_by_claim_type.sql", "original_file_path": "models/insights/final/insights__trend_sum_amount_by_claim_type.sql", "unique_id": "model.the_tuva_project.insights__trend_sum_amount_by_claim_type", "fqn": ["the_tuva_project", "insights", "final", "insights__trend_sum_amount_by_claim_type"], "alias": "trend_sum_amount_by_claim_type", "checksum": {"name": "sha256", "checksum": "4e464a22d2d898b7d5fd096f3bd16bb3c57a887875544aef1e01c17ebd857ec6"}, "config": {"enabled": true, "alias": "trend_sum_amount_by_claim_type", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "year_month", "description": "Year and month of the claim end date"}, {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, vision, or pharmacy."}, {"name": "total_paid_amount", "description": "Sum of paid_amount."}, {"name": "total_paid_amount_change", "description": "Change in paid_amount from the previous month."}, {"name": "total_paid_amount_percent_change", "description": "Percent change in paid_amount from the previous month."}, {"name": "total_allowed_amount", "description": "Sum of allowed_amount."}, {"name": "total_allowed_amount_change", "description": "Change in allowed_amount from the previous month."}, {"name": "total_allowed_amount_percent_change", "description": "Percent change in allowed_amount from the previous month."}, {"name": "total_charge_amount", "description": "Sum of charge_amount."}, {"name": "total_charge_amount_change", "description": "Change in charge_amount from the previous month."}, {"name": "total_charge_amount_percent_change", "description": "Percent change in charge_amount from the previous month."}]}, "tags": ["insights"], "description": "Monthly trend of paid_amount, alllowed_amount, and charge_amount by claim type", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "trend_sum_amount_by_claim_type", "tags": ["insights"], "materialized": "table", "columns": [{"name": "year_month", "description": "Year and month of the claim end date"}, {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, vision, or pharmacy."}, {"name": "total_paid_amount", "description": "Sum of paid_amount."}, {"name": "total_paid_amount_change", "description": "Change in paid_amount from the previous month."}, {"name": "total_paid_amount_percent_change", "description": "Percent change in paid_amount from the previous month."}, {"name": "total_allowed_amount", "description": "Sum of allowed_amount."}, {"name": "total_allowed_amount_change", "description": "Change in allowed_amount from the previous month."}, {"name": "total_allowed_amount_percent_change", "description": "Percent change in allowed_amount from the previous month."}, {"name": "total_charge_amount", "description": "Sum of charge_amount."}, {"name": "total_charge_amount_change", "description": "Change in charge_amount from the previous month."}, {"name": "total_charge_amount_percent_change", "description": "Percent change in charge_amount from the previous month."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.362431, "relation_name": "tuva_project_demo.insights.trend_sum_amount_by_claim_type", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\nwith trend_by_medical_claim_type as(\r\n    select\r\n        cast({{ date_part(\"year\", \"claim_end_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_end_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , claim_type\r\n        , sum(paid_amount) as total_paid_amount\r\n        , sum(allowed_amount) as total_allowed_amount\r\n        , sum(charge_amount) as total_charge_amount\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n        , claim_type\r\n)\r\n, trend_by_pharmacy_claim_type as(\r\n    select\r\n        cast({{ date_part(\"year\", \"dispensing_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"dispensing_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , cast('pharmacy' as {{ dbt.type_string() }}) as claim_type\r\n        , sum(paid_amount) as total_paid_amount\r\n        , sum(allowed_amount) as total_allowed_amount\r\n        , 0 as total_charge_amount\r\n    from {{ ref('core__pharmacy_claim') }}\r\n    group by \r\n        year_month\r\n)\r\n, trend_with_previous_medical_sum as(\r\n    select \r\n        year_month\r\n        , claim_type\r\n        , total_paid_amount\r\n        , lag(total_paid_amount) over (partition by claim_type order by year_month) as previous_total_paid_amount\r\n        , total_allowed_amount\r\n        , lag(total_allowed_amount) over (partition by claim_type order by year_month) as previous_total_allowed_amount\r\n        , total_charge_amount\r\n        , lag(total_charge_amount) over (partition by claim_type order by year_month) as previous_total_charge_amount\r\n    from trend_by_medical_claim_type\r\n)\r\n, trend_with_previous_pharmacy_sum as(\r\n    select \r\n        year_month\r\n        , claim_type\r\n        , total_paid_amount\r\n        , lag(total_paid_amount) over (partition by claim_type order by year_month) as previous_total_paid_amount\r\n        , total_allowed_amount\r\n        , lag(total_allowed_amount) over (partition by claim_type order by year_month) as previous_total_allowed_amount\r\n        , total_charge_amount\r\n        , lag(total_charge_amount) over (partition by claim_type order by year_month) as previous_total_charge_amount\r\n    from trend_by_pharmacy_claim_type\r\n)\r\nselect\r\n    year_month\r\n    , claim_type\r\n    , total_paid_amount\r\n    , total_paid_amount - previous_total_paid_amount as total_paid_amount_change\r\n   , case \r\n        when total_paid_amount <> 0 then ((total_paid_amount - previous_total_paid_amount)/total_paid_amount)*100\r\n            else total_paid_amount\r\n     end as total_paid_amount_percent_change\r\n    , total_allowed_amount\r\n    , total_allowed_amount - previous_total_allowed_amount as total_allowed_amount_change\r\n   , case \r\n        when total_allowed_amount <> 0 then ((total_allowed_amount - previous_total_allowed_amount)/total_allowed_amount)*100\r\n            else total_allowed_amount\r\n     end as total_allowed_amount_percent_change\r\n    , total_charge_amount\r\n    , total_charge_amount - previous_total_charge_amount as total_charge_amount_change\r\n   , case \r\n        when total_charge_amount <> 0 then ((total_charge_amount - previous_total_charge_amount)/total_charge_amount)*100\r\n            else total_charge_amount\r\n     end as total_charge_amount_percent_change\r\nfrom trend_with_previous_medical_sum\r\n\r\nunion all \r\n\r\nselect\r\n    year_month\r\n    , claim_type\r\n    , total_paid_amount\r\n    , total_paid_amount - previous_total_paid_amount as total_paid_amount_change\r\n   , case \r\n        when total_paid_amount <> 0 then ((total_paid_amount - previous_total_paid_amount)/total_paid_amount)*100\r\n            else total_paid_amount\r\n     end as total_paid_amount_percent_change\r\n    , total_allowed_amount\r\n    , total_allowed_amount - previous_total_allowed_amount as total_allowed_amount_change\r\n   , case \r\n        when total_allowed_amount <> 0 then ((total_allowed_amount - previous_total_allowed_amount)/total_allowed_amount)*100\r\n            else total_allowed_amount\r\n     end as total_allowed_amount_percent_change\r\n    , total_charge_amount\r\n    , total_charge_amount - previous_total_charge_amount as total_charge_amount_change\r\n   , case \r\n        when total_charge_amount <> 0 then ((total_charge_amount - previous_total_charge_amount)/total_charge_amount)*100\r\n            else total_charge_amount\r\n     end as total_charge_amount_percent_change\r\nfrom trend_with_previous_pharmacy_sum", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.date_part", "macro.dbt.type_string"], "nodes": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__trend_sum_amount_by_claim_type.sql", "compiled": true, "compiled_code": "\n\nwith trend_by_medical_claim_type as(\n    select\n        cast(date_part('year', claim_end_date) as TEXT) || right('0'||cast(date_part('month', claim_end_date) as TEXT),2) as year_month\n        , claim_type\n        , sum(paid_amount) as total_paid_amount\n        , sum(allowed_amount) as total_allowed_amount\n        , sum(charge_amount) as total_charge_amount\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n        , claim_type\n)\n, trend_by_pharmacy_claim_type as(\n    select\n        cast(date_part('year', dispensing_date) as TEXT) || right('0'||cast(date_part('month', dispensing_date) as TEXT),2) as year_month\n        , cast('pharmacy' as TEXT) as claim_type\n        , sum(paid_amount) as total_paid_amount\n        , sum(allowed_amount) as total_allowed_amount\n        , 0 as total_charge_amount\n    from tuva_project_demo.core.pharmacy_claim\n    group by \n        year_month\n)\n, trend_with_previous_medical_sum as(\n    select \n        year_month\n        , claim_type\n        , total_paid_amount\n        , lag(total_paid_amount) over (partition by claim_type order by year_month) as previous_total_paid_amount\n        , total_allowed_amount\n        , lag(total_allowed_amount) over (partition by claim_type order by year_month) as previous_total_allowed_amount\n        , total_charge_amount\n        , lag(total_charge_amount) over (partition by claim_type order by year_month) as previous_total_charge_amount\n    from trend_by_medical_claim_type\n)\n, trend_with_previous_pharmacy_sum as(\n    select \n        year_month\n        , claim_type\n        , total_paid_amount\n        , lag(total_paid_amount) over (partition by claim_type order by year_month) as previous_total_paid_amount\n        , total_allowed_amount\n        , lag(total_allowed_amount) over (partition by claim_type order by year_month) as previous_total_allowed_amount\n        , total_charge_amount\n        , lag(total_charge_amount) over (partition by claim_type order by year_month) as previous_total_charge_amount\n    from trend_by_pharmacy_claim_type\n)\nselect\n    year_month\n    , claim_type\n    , total_paid_amount\n    , total_paid_amount - previous_total_paid_amount as total_paid_amount_change\n   , case \n        when total_paid_amount <> 0 then ((total_paid_amount - previous_total_paid_amount)/total_paid_amount)*100\n            else total_paid_amount\n     end as total_paid_amount_percent_change\n    , total_allowed_amount\n    , total_allowed_amount - previous_total_allowed_amount as total_allowed_amount_change\n   , case \n        when total_allowed_amount <> 0 then ((total_allowed_amount - previous_total_allowed_amount)/total_allowed_amount)*100\n            else total_allowed_amount\n     end as total_allowed_amount_percent_change\n    , total_charge_amount\n    , total_charge_amount - previous_total_charge_amount as total_charge_amount_change\n   , case \n        when total_charge_amount <> 0 then ((total_charge_amount - previous_total_charge_amount)/total_charge_amount)*100\n            else total_charge_amount\n     end as total_charge_amount_percent_change\nfrom trend_with_previous_medical_sum\n\nunion all \n\nselect\n    year_month\n    , claim_type\n    , total_paid_amount\n    , total_paid_amount - previous_total_paid_amount as total_paid_amount_change\n   , case \n        when total_paid_amount <> 0 then ((total_paid_amount - previous_total_paid_amount)/total_paid_amount)*100\n            else total_paid_amount\n     end as total_paid_amount_percent_change\n    , total_allowed_amount\n    , total_allowed_amount - previous_total_allowed_amount as total_allowed_amount_change\n   , case \n        when total_allowed_amount <> 0 then ((total_allowed_amount - previous_total_allowed_amount)/total_allowed_amount)*100\n            else total_allowed_amount\n     end as total_allowed_amount_percent_change\n    , total_charge_amount\n    , total_charge_amount - previous_total_charge_amount as total_charge_amount_change\n   , case \n        when total_charge_amount <> 0 then ((total_charge_amount - previous_total_charge_amount)/total_charge_amount)*100\n            else total_charge_amount\n     end as total_charge_amount_percent_change\nfrom trend_with_previous_pharmacy_sum", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.insights__trend_sum_amount_by_service_category": {"database": "tuva_project_demo", "schema": "insights", "name": "insights__trend_sum_amount_by_service_category", "resource_type": "model", "package_name": "the_tuva_project", "path": "insights/final/insights__trend_sum_amount_by_service_category.sql", "original_file_path": "models/insights/final/insights__trend_sum_amount_by_service_category.sql", "unique_id": "model.the_tuva_project.insights__trend_sum_amount_by_service_category", "fqn": ["the_tuva_project", "insights", "final", "insights__trend_sum_amount_by_service_category"], "alias": "trend_sum_amount_by_service_category", "checksum": {"name": "sha256", "checksum": "d1729b1b296fed0f471e170e1314fafbdbcacbab452faed47fb0731e2fc5f1e8"}, "config": {"enabled": true, "alias": "trend_sum_amount_by_service_category", "schema": "insights", "database": "tuva_project_demo", "tags": ["insights"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "columns": [{"name": "year_month", "description": "Year and month of the claim end date"}, {"name": "service_category_type", "description": "The broader service category a claim belongs to."}, {"name": "service_category", "description": "The more specific service category a claim belongs to."}, {"name": "total_paid_amount", "description": "Sum of paid_amount."}, {"name": "total_paid_amount_change", "description": "Change in paid_amount from the previous month."}, {"name": "total_paid_amount_percent_change", "description": "Percent change in paid_amount from the previous month."}, {"name": "total_allowed_amount", "description": "Sum of allowed_amount."}, {"name": "total_allowed_amount_change", "description": "Change in allowed_amount from the previous month."}, {"name": "total_allowed_amount_percent_change", "description": "Percent change in allowed_amount from the previous month."}, {"name": "total_charge_amount", "description": "Sum of charge_amount."}, {"name": "total_charge_amount_change", "description": "Change in charge_amount from the previous month."}, {"name": "total_charge_amount_percent_change", "description": "Percent change in charge_amount from the previous month."}]}, "tags": ["insights"], "description": "Monthly trend of paid_amount, alllowed_amount, and charge_amount by service category", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/insights/insights_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "insights", "alias": "trend_sum_amount_by_service_category", "tags": ["insights"], "materialized": "table", "columns": [{"name": "year_month", "description": "Year and month of the claim end date"}, {"name": "service_category_type", "description": "The broader service category a claim belongs to."}, {"name": "service_category", "description": "The more specific service category a claim belongs to."}, {"name": "total_paid_amount", "description": "Sum of paid_amount."}, {"name": "total_paid_amount_change", "description": "Change in paid_amount from the previous month."}, {"name": "total_paid_amount_percent_change", "description": "Percent change in paid_amount from the previous month."}, {"name": "total_allowed_amount", "description": "Sum of allowed_amount."}, {"name": "total_allowed_amount_change", "description": "Change in allowed_amount from the previous month."}, {"name": "total_allowed_amount_percent_change", "description": "Percent change in allowed_amount from the previous month."}, {"name": "total_charge_amount", "description": "Sum of charge_amount."}, {"name": "total_charge_amount_change", "description": "Change in charge_amount from the previous month."}, {"name": "total_charge_amount_percent_change", "description": "Percent change in charge_amount from the previous month."}], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3676176, "relation_name": "tuva_project_demo.insights.trend_sum_amount_by_service_category", "raw_code": "{{ config(\r\n     enabled = var('insights_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\r\n   )\r\n}}\r\n\r\n\r\nwith trend_by_service_category_1 as(\r\n    select\r\n        cast({{ date_part(\"year\", \"claim_end_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_end_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , 'service_category_1' as service_category_type\r\n        , service_category_1 as service_category\r\n        , sum(paid_amount) as total_paid_amount\r\n        , sum(allowed_amount) as total_allowed_amount\r\n        , sum(charge_amount) as total_charge_amount\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n        , service_category_1\r\n)\r\n, trend_by_service_category_2 as(\r\n    select\r\n        cast({{ date_part(\"year\", \"claim_end_date\") }} as {{ dbt.type_string() }}) || right('0'||cast({{ date_part(\"month\", \"claim_end_date\") }} as {{ dbt.type_string() }}),2) as year_month\r\n        , 'service_category_2' as service_category_type\r\n        , service_category_2 as service_category\r\n        , sum(paid_amount) as total_paid_amount\r\n        , sum(allowed_amount) as total_allowed_amount\r\n        , sum(charge_amount) as total_charge_amount\r\n    from {{ ref('core__medical_claim') }}\r\n    group by \r\n        year_month\r\n        , service_category_2\r\n)\r\n, trend_with_previous_service_category_1_sum as(\r\n    select \r\n        year_month\r\n        , service_category_type\r\n        , service_category\r\n        , total_paid_amount\r\n        , lag(total_paid_amount) over (partition by service_category order by year_month) as previous_total_paid_amount\r\n        , total_allowed_amount\r\n        , lag(total_allowed_amount) over (partition by service_category order by year_month) as previous_total_allowed_amount\r\n        , total_charge_amount\r\n        , lag(total_charge_amount) over (partition by service_category order by year_month) as previous_total_charge_amount\r\n    from trend_by_service_category_1\r\n)\r\n, trend_with_previous_service_category_2_sum as(\r\n    select \r\n        year_month\r\n        , service_category_type\r\n        , service_category\r\n        , total_paid_amount\r\n        , lag(total_paid_amount) over (partition by service_category order by year_month) as previous_total_paid_amount\r\n        , total_allowed_amount\r\n        , lag(total_allowed_amount) over (partition by service_category order by year_month) as previous_total_allowed_amount\r\n        , total_charge_amount\r\n        , lag(total_charge_amount) over (partition by service_category order by year_month) as previous_total_charge_amount\r\n    from trend_by_service_category_2\r\n)\r\nselect\r\n    year_month\r\n    , service_category_type\r\n    , service_category\r\n    , total_paid_amount\r\n    , total_paid_amount - previous_total_paid_amount as total_paid_amount_change\r\n    , case \r\n        when total_paid_amount <> 0 then ((total_paid_amount - previous_total_paid_amount)/total_paid_amount)*100\r\n            else total_paid_amount\r\n        end as total_paid_amount_percent_change\r\n    , total_allowed_amount\r\n    , total_allowed_amount - previous_total_allowed_amount as total_allowed_amount_change\r\n    , case \r\n        when total_allowed_amount <> 0 then ((total_allowed_amount - previous_total_allowed_amount)/total_allowed_amount)*100\r\n            else total_allowed_amount\r\n        end as total_allowed_amount_percent_change\r\n    , total_charge_amount\r\n    , total_charge_amount - previous_total_charge_amount as total_charge_amount_change\r\n    , case \r\n        when total_charge_amount <> 0 then ((total_charge_amount - previous_total_charge_amount)/total_charge_amount)*100\r\n            else total_charge_amount\r\n        end as total_charge_amount_percent_change\r\nfrom trend_with_previous_service_category_1_sum\r\n\r\nunion all \r\n\r\nselect\r\n    year_month\r\n    , service_category_type\r\n    , service_category\r\n    , total_paid_amount\r\n    , total_paid_amount - previous_total_paid_amount as total_paid_amount_change\r\n    , case \r\n        when total_paid_amount <> 0 then ((total_paid_amount - previous_total_paid_amount)/total_paid_amount)*100\r\n            else total_paid_amount\r\n        end as total_paid_amount_percent_change\r\n    , total_allowed_amount\r\n    , total_allowed_amount - previous_total_allowed_amount as total_allowed_amount_change\r\n    , case \r\n        when total_allowed_amount <> 0 then ((total_allowed_amount - previous_total_allowed_amount)/total_allowed_amount)*100\r\n            else total_allowed_amount\r\n        end as total_allowed_amount_percent_change\r\n    , total_charge_amount\r\n    , total_charge_amount - previous_total_charge_amount as total_charge_amount_change\r\n    , case \r\n        when total_charge_amount <> 0 then ((total_charge_amount - previous_total_charge_amount)/total_charge_amount)*100\r\n            else total_charge_amount\r\n        end as total_charge_amount_percent_change\r\nfrom trend_with_previous_service_category_2_sum", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}, {"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.date_part", "macro.dbt.type_string"], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/insights/final/insights__trend_sum_amount_by_service_category.sql", "compiled": true, "compiled_code": "\n\n\nwith trend_by_service_category_1 as(\n    select\n        cast(date_part('year', claim_end_date) as TEXT) || right('0'||cast(date_part('month', claim_end_date) as TEXT),2) as year_month\n        , 'service_category_1' as service_category_type\n        , service_category_1 as service_category\n        , sum(paid_amount) as total_paid_amount\n        , sum(allowed_amount) as total_allowed_amount\n        , sum(charge_amount) as total_charge_amount\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n        , service_category_1\n)\n, trend_by_service_category_2 as(\n    select\n        cast(date_part('year', claim_end_date) as TEXT) || right('0'||cast(date_part('month', claim_end_date) as TEXT),2) as year_month\n        , 'service_category_2' as service_category_type\n        , service_category_2 as service_category\n        , sum(paid_amount) as total_paid_amount\n        , sum(allowed_amount) as total_allowed_amount\n        , sum(charge_amount) as total_charge_amount\n    from tuva_project_demo.core.medical_claim\n    group by \n        year_month\n        , service_category_2\n)\n, trend_with_previous_service_category_1_sum as(\n    select \n        year_month\n        , service_category_type\n        , service_category\n        , total_paid_amount\n        , lag(total_paid_amount) over (partition by service_category order by year_month) as previous_total_paid_amount\n        , total_allowed_amount\n        , lag(total_allowed_amount) over (partition by service_category order by year_month) as previous_total_allowed_amount\n        , total_charge_amount\n        , lag(total_charge_amount) over (partition by service_category order by year_month) as previous_total_charge_amount\n    from trend_by_service_category_1\n)\n, trend_with_previous_service_category_2_sum as(\n    select \n        year_month\n        , service_category_type\n        , service_category\n        , total_paid_amount\n        , lag(total_paid_amount) over (partition by service_category order by year_month) as previous_total_paid_amount\n        , total_allowed_amount\n        , lag(total_allowed_amount) over (partition by service_category order by year_month) as previous_total_allowed_amount\n        , total_charge_amount\n        , lag(total_charge_amount) over (partition by service_category order by year_month) as previous_total_charge_amount\n    from trend_by_service_category_2\n)\nselect\n    year_month\n    , service_category_type\n    , service_category\n    , total_paid_amount\n    , total_paid_amount - previous_total_paid_amount as total_paid_amount_change\n    , case \n        when total_paid_amount <> 0 then ((total_paid_amount - previous_total_paid_amount)/total_paid_amount)*100\n            else total_paid_amount\n        end as total_paid_amount_percent_change\n    , total_allowed_amount\n    , total_allowed_amount - previous_total_allowed_amount as total_allowed_amount_change\n    , case \n        when total_allowed_amount <> 0 then ((total_allowed_amount - previous_total_allowed_amount)/total_allowed_amount)*100\n            else total_allowed_amount\n        end as total_allowed_amount_percent_change\n    , total_charge_amount\n    , total_charge_amount - previous_total_charge_amount as total_charge_amount_change\n    , case \n        when total_charge_amount <> 0 then ((total_charge_amount - previous_total_charge_amount)/total_charge_amount)*100\n            else total_charge_amount\n        end as total_charge_amount_percent_change\nfrom trend_with_previous_service_category_1_sum\n\nunion all \n\nselect\n    year_month\n    , service_category_type\n    , service_category\n    , total_paid_amount\n    , total_paid_amount - previous_total_paid_amount as total_paid_amount_change\n    , case \n        when total_paid_amount <> 0 then ((total_paid_amount - previous_total_paid_amount)/total_paid_amount)*100\n            else total_paid_amount\n        end as total_paid_amount_percent_change\n    , total_allowed_amount\n    , total_allowed_amount - previous_total_allowed_amount as total_allowed_amount_change\n    , case \n        when total_allowed_amount <> 0 then ((total_allowed_amount - previous_total_allowed_amount)/total_allowed_amount)*100\n            else total_allowed_amount\n        end as total_allowed_amount_percent_change\n    , total_charge_amount\n    , total_charge_amount - previous_total_charge_amount as total_charge_amount_change\n    , case \n        when total_charge_amount <> 0 then ((total_charge_amount - previous_total_charge_amount)/total_charge_amount)*100\n            else total_charge_amount\n        end as total_charge_amount_percent_change\nfrom trend_with_previous_service_category_2_sum", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__summary_counts": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__summary_counts", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/final/quality_measures__summary_counts.sql", "original_file_path": "models/quality_measures/final/quality_measures__summary_counts.sql", "unique_id": "model.the_tuva_project.quality_measures__summary_counts", "fqn": ["the_tuva_project", "quality_measures", "final", "quality_measures__summary_counts"], "alias": "summary_counts", "checksum": {"name": "sha256", "checksum": "91b49f8943ab78947a3b1020ff7871d3f224495c0690ee1bb7382afebf9fb203"}, "config": {"enabled": true, "alias": "summary_counts", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Reporting measure counts with performance rates.", "columns": {"measure_id": {"name": "measure_id", "description": "Unique measure identification number.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/quality_measures/quality_measures__measures.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_name": {"name": "measure_name", "description": "Name of the measure.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/quality_measures/quality_measures__measures.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_version": {"name": "measure_version", "description": "Version of the measure.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/quality_measures/quality_measures__measures.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_begin": {"name": "performance_period_begin", "description": "Beginning date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_end": {"name": "performance_period_end", "description": "Ending date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "denominator_sum": {"name": "denominator_sum", "description": "The denominator is associated with a given patient population that  may be counted as eligible to meet a measure\u2019s inclusion requirements.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numerator_sum": {"name": "numerator_sum", "description": "The numerator reflects the subset of patients in the denominator  for whom a particular service has been provided or for whom a  particular outcome has been achieved with exclusion logic applied.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_sum": {"name": "exclusion_sum", "description": "Specifications of those characteristics that would cause groups of  individuals to be removed from the numerator and/or denominator of  a measure although they experience the denominator index event.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_rate": {"name": "performance_rate", "description": "Calculated performance rate. The numerator sum divided by the  denominator sum after exclusion logic applied and multiplied by 100.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date and timestamp of the dbt run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "summary_counts", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3764286, "relation_name": "tuva_project_demo.quality_measures.summary_counts", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith summary_long as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n    from {{ ref('quality_measures__summary_long') }}\n    where measure_id is not null\n\n)\n\n, sum_flags as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , sum(denominator_flag) as denominator_sum\n        , sum(numerator_flag) as numerator_sum\n        , sum(exclusion_flag) as exclusion_sum\n    from summary_long\n    group by\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n\n)\n\n, calculate_performance_rate as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , denominator_sum\n        , numerator_sum\n        , exclusion_sum\n        , (\n            cast(numerator_sum as {{ dbt.type_numeric() }}) /\n                (cast(denominator_sum as {{ dbt.type_numeric() }}) - cast(exclusion_sum as {{ dbt.type_numeric() }}))\n          )*100 as performance_rate\n    from sum_flags\n\n)\n\n, add_data_types as (\n\n    select\n          cast(measure_id as {{ dbt.type_string() }}) as measure_id\n        , cast(measure_name as {{ dbt.type_string() }}) as measure_name\n        , cast(measure_version as {{ dbt.type_string() }}) as measure_version\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(denominator_sum as integer) as denominator_sum\n        , cast(numerator_sum as integer) as numerator_sum\n        , cast(exclusion_sum as integer) as exclusion_sum\n        , round(cast(performance_rate as {{ dbt.type_numeric() }}),3) as performance_rate\n    from calculate_performance_rate\n\n)\n\nselect\n      measure_id\n    , measure_name\n    , measure_version\n    , performance_period_begin\n    , performance_period_end\n    , denominator_sum\n    , numerator_sum\n    , exclusion_sum\n    , performance_rate\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "quality_measures__summary_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt.type_string"], "nodes": ["model.the_tuva_project.quality_measures__summary_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/final/quality_measures__summary_counts.sql", "compiled": true, "compiled_code": "\n\nwith summary_long as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n    from tuva_project_demo.quality_measures.summary_long\n    where measure_id is not null\n\n)\n\n, sum_flags as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , sum(denominator_flag) as denominator_sum\n        , sum(numerator_flag) as numerator_sum\n        , sum(exclusion_flag) as exclusion_sum\n    from summary_long\n    group by\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n\n)\n\n, calculate_performance_rate as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , denominator_sum\n        , numerator_sum\n        , exclusion_sum\n        , (\n            cast(numerator_sum as numeric(28,6)) /\n                (cast(denominator_sum as numeric(28,6)) - cast(exclusion_sum as numeric(28,6)))\n          )*100 as performance_rate\n    from sum_flags\n\n)\n\n, add_data_types as (\n\n    select\n          cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(denominator_sum as integer) as denominator_sum\n        , cast(numerator_sum as integer) as numerator_sum\n        , cast(exclusion_sum as integer) as exclusion_sum\n        , round(cast(performance_rate as numeric(28,6)),3) as performance_rate\n    from calculate_performance_rate\n\n)\n\nselect\n      measure_id\n    , measure_name\n    , measure_version\n    , performance_period_begin\n    , performance_period_end\n    , denominator_sum\n    , numerator_sum\n    , exclusion_sum\n    , performance_rate\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__summary_long": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__summary_long", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/final/quality_measures__summary_long.sql", "original_file_path": "models/quality_measures/final/quality_measures__summary_long.sql", "unique_id": "model.the_tuva_project.quality_measures__summary_long", "fqn": ["the_tuva_project", "quality_measures", "final", "quality_measures__summary_long"], "alias": "summary_long", "checksum": {"name": "sha256", "checksum": "9987cbdfb8baf943faf031ce20586f5288e80a00e9f694a448d1edc9f9f7a570"}, "config": {"enabled": true, "alias": "summary_long", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Long view of the results for the reporting version of all measures. Each row represents the results a measure per patient. A null for the  denominator indicates that the patient was not eligible for that measure.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "denominator_flag": {"name": "denominator_flag", "description": "The denominator is associated with a given patient population that  may be counted as eligible to meet a measure\u2019s inclusion requirements.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numerator_flag": {"name": "numerator_flag", "description": "The numerator reflects the subset of patients in the denominator  for whom a particular service has been provided or for whom a  particular outcome has been achieved.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_flag": {"name": "exclusion_flag", "description": "Specifications of those characteristics that would cause groups of  individuals to be removed from the numerator and/or denominator of  a measure although they experience the denominator index event.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_date": {"name": "evidence_date", "description": "Date of event or service that places patient in the numerator.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_begin": {"name": "performance_period_begin", "description": "Beginning date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_end": {"name": "performance_period_end", "description": "Ending date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_id": {"name": "measure_id", "description": "Unique measure identification number.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/quality_measures/quality_measures__measures.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_name": {"name": "measure_name", "description": "Name of the measure.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/quality_measures/quality_measures__measures.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_version": {"name": "measure_version", "description": "Version of the measure.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/quality_measures/quality_measures__measures.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date and timestamp of the dbt run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "summary_long", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3826785, "relation_name": "tuva_project_demo.quality_measures.summary_long", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/* measures should already be at the full eligibility population grain */\nwith measures_unioned as (\n\n    select * from {{ ref('quality_measures__int_nqf2372_long') }}\n    union all\n\n    select * from {{ ref('quality_measures__int_nqf0034_long') }}\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as {{ dbt.type_string() }}) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as {{ dbt.type_string() }}) as measure_id\n        , cast(measure_name as {{ dbt.type_string() }}) as measure_name\n        , cast(measure_version as {{ dbt.type_string() }}) as measure_version\n    from measures_unioned\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372_long", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372_long", "model.the_tuva_project.quality_measures__int_nqf0034_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/final/quality_measures__summary_long.sql", "compiled": true, "compiled_code": "\n\n/* measures should already be at the full eligibility population grain */\nwith measures_unioned as (\n\n    select * from tuva_project_demo.quality_measures._int_nqf2372_long\n    union all\n\n    select * from tuva_project_demo.quality_measures._int_nqf0034_long\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from measures_unioned\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__summary_wide": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__summary_wide", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/final/quality_measures__summary_wide.sql", "original_file_path": "models/quality_measures/final/quality_measures__summary_wide.sql", "unique_id": "model.the_tuva_project.quality_measures__summary_wide", "fqn": ["the_tuva_project", "quality_measures", "final", "quality_measures__summary_wide"], "alias": "summary_wide", "checksum": {"name": "sha256", "checksum": "61c333a891d6904be40f1f7f9a54199a70a442fe6a630820ee5801482e63e0e2"}, "config": {"enabled": true, "alias": "summary_wide", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Wide view of the results for the reporting version of all measures. This model pivots measures on the patient level (i.e. one row per patient with flags for each measure. The false flags can be treated as care gaps as exclusions have been included in the pivot logic.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nqf_2372": {"name": "nqf_2372", "description": "Each measure has a boolean flag which is the result of evaluating  the denominator, numerator, and exclusion indicators for the patient. A null indicates that the measure was not applicable for the patient.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date and timestamp of the dbt run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "summary_wide", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3866594, "relation_name": "tuva_project_demo.quality_measures.summary_wide", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Each measure is pivoted into a boolean column by evaluating the\n    denominator, numerator, and exclusion flags.\n*/\nwith measures_long as (\n\n        select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , measure_id\n    from {{ ref('quality_measures__summary_long') }}\n\n)\n\n, nqf_2372 as (\n\n    select\n          patient_id\n        , case\n            when denominator_flag = 1\n            then\n                case\n                    when exclusion_flag = 1 then null\n                    when exclusion_flag = 0  then numerator_flag\n            else null\n                end\n          end as flag\n    from measures_long\n    where measure_id = 'NQF2372'\n\n)\n, nqf_0034 as (\n\n    select\n          patient_id\n        , case\n            when denominator_flag = 1\n            then\n                case\n                    when exclusion_flag = 1 then null\n                    when exclusion_flag = 0  then numerator_flag\n            else null\n                end\n          end as flag\n    from measures_long\n    where measure_id = 'NQF0034'\n\n)\n, joined as (\n\n    select\n          measures_long.patient_id\n        , nqf_2372.flag as nqf_2372\n    from measures_long\n    left join nqf_2372\n         on measures_long.patient_id = nqf_2372.patient_id\n    left join nqf_0034\n         on measures_long.patient_id = nqf_0034.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(nqf_2372 as integer) as nqf_2372\n    from joined\n\n)\n\nselect\n      patient_id\n    , nqf_2372\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "quality_measures__summary_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.quality_measures__summary_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/final/quality_measures__summary_wide.sql", "compiled": true, "compiled_code": "\n\n/*\n    Each measure is pivoted into a boolean column by evaluating the\n    denominator, numerator, and exclusion flags.\n*/\nwith measures_long as (\n\n        select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , measure_id\n    from tuva_project_demo.quality_measures.summary_long\n\n)\n\n, nqf_2372 as (\n\n    select\n          patient_id\n        , case\n            when denominator_flag = 1\n            then\n                case\n                    when exclusion_flag = 1 then null\n                    when exclusion_flag = 0  then numerator_flag\n            else null\n                end\n          end as flag\n    from measures_long\n    where measure_id = 'NQF2372'\n\n)\n, nqf_0034 as (\n\n    select\n          patient_id\n        , case\n            when denominator_flag = 1\n            then\n                case\n                    when exclusion_flag = 1 then null\n                    when exclusion_flag = 0  then numerator_flag\n            else null\n                end\n          end as flag\n    from measures_long\n    where measure_id = 'NQF0034'\n\n)\n, joined as (\n\n    select\n          measures_long.patient_id\n        , nqf_2372.flag as nqf_2372\n    from measures_long\n    left join nqf_2372\n         on measures_long.patient_id = nqf_2372.patient_id\n    left join nqf_0034\n         on measures_long.patient_id = nqf_0034.patient_id\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(nqf_2372 as integer) as nqf_2372\n    from joined\n\n)\n\nselect\n      patient_id\n    , nqf_2372\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_denominator": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_denominator", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_denominator.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_denominator.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_denominator"], "alias": "_int_nqf0034_denominator", "checksum": {"name": "sha256", "checksum": "b4486f850648c72a9ab815fa10c71b5ecc8df95931bfce77674fcd68af5b7c9c"}, "config": {"enabled": true, "alias": "_int_nqf0034_denominator", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Denominator logic for the reporting version of NQF 0034, Colorectal Cancer  Screening.    \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_denominator", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4397717, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_denominator", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\nDENOMINATOR:\nPatients 45-75 years of age with a visit during the measurement period\nDENOMINATOR NOTE: To assess the age for exclusions, the patient\u2019s age on the date of the encounter\nshould be used\n*Signifies that this CPT Category I code is a non-covered service under the Medicare Part B Physician Fee\nSchedule (PFS). These non-covered services should be counted in the denominator population for MIPS\nCQMs.\nDenominator Criteria (Eligible Cases):\nPatients 45 to 75 years of age on date of encounter\nAND\nPatient encounter during the performance period (CPT or HCPCS): 99202, 99203, 99204, 99205,\n99212, 99213, 99214, 99215, 99341, 99342, 99344, 99345, 99347, 99348, 99349, 99350, 99386*, 99387*,\n99396*, 99397*, G0438, G0439\n*/\n\nwith  visit_codes as (\n\n    select\n          code\n        , code_system\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n          'Office Visit'\n        , 'Home Healthcare Services'\n        , 'Preventive Care Services Established Office Visit, 18 and Up'\n        , 'Preventive Care Services Initial Office Visit, 18 and Up'\n        , 'Annual Wellness Visit'\n        , 'Telephone Visits'\n        , 'Online Assessments'\n    )\n\n), visits_encounters as (\n    select PATIENT_ID\n         , coalesce(ENCOUNTER.ENCOUNTER_START_DATE,ENCOUNTER.ENCOUNTER_END_DATE) as min_date\n         , coalesce(ENCOUNTER.ENCOUNTER_END_DATE,ENCOUNTER.ENCOUNTER_START_DATE) as max_date\n    From {{ref('quality_measures__stg_core__encounter')}} encounter\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp\n        on coalesce(ENCOUNTER.ENCOUNTER_END_DATE,ENCOUNTER.ENCOUNTER_START_DATE) >= pp.performance_period_begin\n        and  coalesce(ENCOUNTER.ENCOUNTER_START_DATE,ENCOUNTER.ENCOUNTER_END_DATE) <= pp.performance_period_end\n    where ENCOUNTER_TYPE in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n        )\n\n\n      )\n\n,procedure_encounters as (\n    select patient_id, PROCEDURE_DATE as min_date, PROCEDURE_DATE as max_date\n    from {{ref('quality_measures__stg_core__procedure')}} proc\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}}  as pp\n        on PROCEDURE_DATE between pp.performance_period_begin and  pp.performance_period_end\n    inner join  visit_codes\n        on coalesce(proc.normalized_code,proc.source_code) = visit_codes.code\n\n\n)\n,\nclaims_encounters as (\n    select PATIENT_ID\n    , coalesce(CLAIM_START_DATE,CLAIM_END_DATE) as min_date\n    , coalesce(CLAIM_END_DATE,CLAIM_START_DATE) as max_date\n    from {{ref('quality_measures__stg_medical_claim')}} medical_claim\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}}  as pp on\n        coalesce(CLAIM_END_DATE,CLAIM_START_DATE)  >=  pp.performance_period_begin\n         and coalesce(CLAIM_START_DATE,CLAIM_END_DATE) <=  pp.performance_period_end\n    inner join  visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n\n)\n\n,all_encounters as (\n    select *, 'v' as visit_enc,cast(null as {{ dbt.type_string() }}) as proc_enc, cast(null as {{ dbt.type_string() }}) as claim_enc\n    from visits_encounters\n    union all\n    select *, cast(null as {{ dbt.type_string() }}) as visit_enc, 'p' as proc_enc, cast(null as {{ dbt.type_string() }}) as claim_enc\n    from procedure_encounters\n    union all\n    select *, cast(null as {{ dbt.type_string() }}) as visit_enc,cast(null as {{ dbt.type_string() }}) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n)\n\n, encounters_by_patient as (\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n)\n\n, patients_with_age as (\n    select\n          p.PATIENT_ID\n        , min_date\n        , floor({{ datediff('birth_date', 'e.min_date', 'hour') }} / 8766.0)  as min_age\n        , max_date\n        ,floor({{ datediff('birth_date', 'e.max_date', 'hour') }} / 8766.0) as max_age\n        , qualifying_types\n    from {{ref('quality_measures__stg_core__patient')}} p\n    inner join encounters_by_patient e\n        on p.PATIENT_ID = e.PATIENT_ID\n    where p.BIRTH_DATE is not null\n\n)\n\nselect PATIENT_ID,\n       min_age,\n       max_age,\n       qualifying_types\nFrom patients_with_age\nwhere max_age >= 45 and min_age <=  75", "language": "sql", "refs": [{"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__encounter", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__stg_core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.datediff"], "nodes": ["seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__encounter", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_denominator.sql", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR:\nPatients 45-75 years of age with a visit during the measurement period\nDENOMINATOR NOTE: To assess the age for exclusions, the patient\u2019s age on the date of the encounter\nshould be used\n*Signifies that this CPT Category I code is a non-covered service under the Medicare Part B Physician Fee\nSchedule (PFS). These non-covered services should be counted in the denominator population for MIPS\nCQMs.\nDenominator Criteria (Eligible Cases):\nPatients 45 to 75 years of age on date of encounter\nAND\nPatient encounter during the performance period (CPT or HCPCS): 99202, 99203, 99204, 99205,\n99212, 99213, 99214, 99215, 99341, 99342, 99344, 99345, 99347, 99348, 99349, 99350, 99386*, 99387*,\n99396*, 99397*, G0438, G0439\n*/\n\nwith   __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , try_cast( null as date ) as encounter_start_date\n    , try_cast( null as date ) as encounter_end_date\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n), visit_codes as (\n\n    select\n          code\n        , code_system\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n          'Office Visit'\n        , 'Home Healthcare Services'\n        , 'Preventive Care Services Established Office Visit, 18 and Up'\n        , 'Preventive Care Services Initial Office Visit, 18 and Up'\n        , 'Annual Wellness Visit'\n        , 'Telephone Visits'\n        , 'Online Assessments'\n    )\n\n), visits_encounters as (\n    select PATIENT_ID\n         , coalesce(ENCOUNTER.ENCOUNTER_START_DATE,ENCOUNTER.ENCOUNTER_END_DATE) as min_date\n         , coalesce(ENCOUNTER.ENCOUNTER_END_DATE,ENCOUNTER.ENCOUNTER_START_DATE) as max_date\n    From __dbt__cte__quality_measures__stg_core__encounter encounter\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp\n        on coalesce(ENCOUNTER.ENCOUNTER_END_DATE,ENCOUNTER.ENCOUNTER_START_DATE) >= pp.performance_period_begin\n        and  coalesce(ENCOUNTER.ENCOUNTER_START_DATE,ENCOUNTER.ENCOUNTER_END_DATE) <= pp.performance_period_end\n    where ENCOUNTER_TYPE in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n        )\n\n\n      )\n\n,procedure_encounters as (\n    select patient_id, PROCEDURE_DATE as min_date, PROCEDURE_DATE as max_date\n    from __dbt__cte__quality_measures__stg_core__procedure proc\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period  as pp\n        on PROCEDURE_DATE between pp.performance_period_begin and  pp.performance_period_end\n    inner join  visit_codes\n        on coalesce(proc.normalized_code,proc.source_code) = visit_codes.code\n\n\n)\n,\nclaims_encounters as (\n    select PATIENT_ID\n    , coalesce(CLAIM_START_DATE,CLAIM_END_DATE) as min_date\n    , coalesce(CLAIM_END_DATE,CLAIM_START_DATE) as max_date\n    from __dbt__cte__quality_measures__stg_medical_claim medical_claim\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period  as pp on\n        coalesce(CLAIM_END_DATE,CLAIM_START_DATE)  >=  pp.performance_period_begin\n         and coalesce(CLAIM_START_DATE,CLAIM_END_DATE) <=  pp.performance_period_end\n    inner join  visit_codes\n        on medical_claim.hcpcs_code= visit_codes.code\n\n\n)\n\n,all_encounters as (\n    select *, 'v' as visit_enc,cast(null as TEXT) as proc_enc, cast(null as TEXT) as claim_enc\n    from visits_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc, 'p' as proc_enc, cast(null as TEXT) as claim_enc\n    from procedure_encounters\n    union all\n    select *, cast(null as TEXT) as visit_enc,cast(null as TEXT) as proc_enc, 'c' as claim_enc\n    from claims_encounters\n)\n\n, encounters_by_patient as (\n    select patient_id,min(min_date) min_date, max(max_date) max_date,\n        concat(concat(\n            coalesce(min(visit_enc),'')\n            ,coalesce(min(proc_enc),''))\n            ,coalesce(min(claim_enc),'')\n            ) as qualifying_types\n    from all_encounters\n    group by patient_id\n)\n\n, patients_with_age as (\n    select\n          p.PATIENT_ID\n        , min_date\n        , floor(datediff(\n        hour,\n        birth_date,\n        e.min_date\n        ) / 8766.0)  as min_age\n        , max_date\n        ,floor(datediff(\n        hour,\n        birth_date,\n        e.max_date\n        ) / 8766.0) as max_age\n        , qualifying_types\n    from __dbt__cte__quality_measures__stg_core__patient p\n    inner join encounters_by_patient e\n        on p.PATIENT_ID = e.PATIENT_ID\n    where p.BIRTH_DATE is not null\n\n)\n\nselect PATIENT_ID,\n       min_age,\n       max_age,\n       qualifying_types\nFrom patients_with_age\nwhere max_age >= 45 and min_age <=  75", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__encounter", "sql": " __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , try_cast( null as date ) as encounter_start_date\n    , try_cast( null as date ) as encounter_end_date\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__patient", "sql": " __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_exclude_advanced_illness", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_advanced_illness.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_advanced_illness.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_exclude_advanced_illness"], "alias": "_int_nqf0034_exclude_advanced_illness", "checksum": {"name": "sha256", "checksum": "83ccd5cfcd949304c06dfbc0b91d44b3dc6949cc86cee7a0d1d759c027f2a2fb"}, "config": {"enabled": true, "alias": "_int_nqf0034_exclude_advanced_illness", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients with frailty and advanced illness for  the reporting version of NQF 0034, Colorectal Cancer Screening.     \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_exclude_advanced_illness", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.443465, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_exclude_advanced_illness", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND either one acute inpatient encounter with a diagnosis of advanced\n    illness\n\n    OR two outpatient, observation, ED or nonacute inpatient encounters on\n    different dates of service with an advanced illness diagnosis during\n    measurement period or the year prior to measurement period\n*/\n\nwith encounter_exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n        , case when concept_name = 'Acute Inpatient' then 'Acute Inpatient'\n            else 'Other Encounter' end as concept_category\n        , case when concept_name = 'Acute Inpatient' then 1\n            else 2 end as qualifying_count\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n         'Acute Inpatient'\n        , 'Encounter Inpatient'\n        , 'Outpatient'\n        , 'Observation'\n        , 'Emergency Department Visit'\n        , 'Nonacute Inpatient'\n    )\n\n)\n\n, condition_exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n         'Advanced Illness'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__condition') }}\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, condition_exclusions as (\n     select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , condition_exclusion_codes.concept_name\n    from conditions\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on conditions.recorded_date between pp.performance_period_begin_1yp and pp.performance_period_end\n    inner join condition_exclusion_codes\n        on conditions.code = condition_exclusion_codes.code\n        and conditions.code_type = condition_exclusion_codes.code_system\n\n    union all\n        select\n          observations.patient_id\n        , cast(null as {{ dbt.type_string() }}) as claim_id\n        , observations.observation_date\n        , condition_exclusion_codes.concept_name\n    from observations\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on observations.observation_date between pp.performance_period_begin_1yp and pp.performance_period_end\n\n    inner join condition_exclusion_codes\n        on observations.code = condition_exclusion_codes.code\n        and observations.code_type = condition_exclusion_codes.code_system\n\n\n\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , encounter_exclusion_codes.concept_name\n        , encounter_exclusion_codes.concept_category\n        , encounter_exclusion_codes.qualifying_count\n    from medical_claim\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on coalesce(medical_claim.claim_start_date,medical_claim.claim_end_date) between pp.performance_period_begin_1yp and pp.performance_period_end\n         inner join encounter_exclusion_codes\n            on medical_claim.hcpcs_code = encounter_exclusion_codes.code\n    where encounter_exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , encounter_exclusion_codes.concept_name\n        , encounter_exclusion_codes.concept_category\n        , encounter_exclusion_codes.qualifying_count\n    from observations\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on observations.observation_date between pp.performance_period_begin_1yp and pp.performance_period_end\n\n    inner join encounter_exclusion_codes\n        on observations.code = encounter_exclusion_codes.code\n        and observations.code_type = encounter_exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , encounter_exclusion_codes.concept_name\n        , encounter_exclusion_codes.concept_category\n        , encounter_exclusion_codes.qualifying_count\n    from procedures\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on procedures.procedure_date between pp.performance_period_begin_1yp and pp.performance_period_end\n\n         inner join encounter_exclusion_codes\n             on procedures.code = encounter_exclusion_codes.code\n             and procedures.code_type = encounter_exclusion_codes.code_system\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n*/\n, patients_with_frailty as (\n\n    select\n          patient_id\n        , exclusion_date\n        , concept_name\nfrom {{ref('quality_measures__int_nqf0034__frailty')}}\n\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND one acute inpatient encounter with a diagnosis of advanced illness\n    during measurement period or the year prior to measurement period\n*/\n, encounters_with_conditions as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name\n            || ' with '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n        , med_claim_exclusions.concept_category\n        , med_claim_exclusions.qualifying_count\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n        , observation_exclusions.concept_category\n        , observation_exclusions.qualifying_count\n    from patients_with_frailty\n         inner join observation_exclusions\n            on patients_with_frailty.patient_id = observation_exclusions.patient_id\n         inner join condition_exclusions\n             on observation_exclusions.patient_id = condition_exclusions.patient_id\n             and observation_exclusions.observation_date = condition_exclusions.recorded_date\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n        , procedure_exclusions.concept_category\n        , procedure_exclusions.qualifying_count\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND two outpatient, observation, ED or nonacute inpatient encounters\n    on different dates of service with an advanced illness diagnosis during\n    measurement period or the year prior to measurement period\n*/\n\n/*\n    Filter to patients who have had one acute inpatient encounter or\n    two nonacute outpatient encounters\n*/\n\n\n, qualifying_encounters as (\n\n    select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\nfrom encounters_with_conditions e\nqualify dense_rank() over(partition by patient_id,concept_category order by exclusion_date) >= qualifying_count\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom qualifying_encounters", "language": "sql", "refs": [{"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__condition", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__frailty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__int_nqf0034__frailty"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_advanced_illness.sql", "compiled": true, "compiled_code": "\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND either one acute inpatient encounter with a diagnosis of advanced\n    illness\n\n    OR two outpatient, observation, ED or nonacute inpatient encounters on\n    different dates of service with an advanced illness diagnosis during\n    measurement period or the year prior to measurement period\n*/\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), encounter_exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n        , case when concept_name = 'Acute Inpatient' then 'Acute Inpatient'\n            else 'Other Encounter' end as concept_category\n        , case when concept_name = 'Acute Inpatient' then 1\n            else 2 end as qualifying_count\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n         'Acute Inpatient'\n        , 'Encounter Inpatient'\n        , 'Outpatient'\n        , 'Observation'\n        , 'Emergency Department Visit'\n        , 'Nonacute Inpatient'\n    )\n\n)\n\n, condition_exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n         'Advanced Illness'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n     select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , condition_exclusion_codes.concept_name\n    from conditions\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on conditions.recorded_date between pp.performance_period_begin_1yp and pp.performance_period_end\n    inner join condition_exclusion_codes\n        on conditions.code = condition_exclusion_codes.code\n        and conditions.code_type = condition_exclusion_codes.code_system\n\n    union all\n        select\n          observations.patient_id\n        , cast(null as TEXT) as claim_id\n        , observations.observation_date\n        , condition_exclusion_codes.concept_name\n    from observations\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on observations.observation_date between pp.performance_period_begin_1yp and pp.performance_period_end\n\n    inner join condition_exclusion_codes\n        on observations.code = condition_exclusion_codes.code\n        and observations.code_type = condition_exclusion_codes.code_system\n\n\n\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , encounter_exclusion_codes.concept_name\n        , encounter_exclusion_codes.concept_category\n        , encounter_exclusion_codes.qualifying_count\n    from medical_claim\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on coalesce(medical_claim.claim_start_date,medical_claim.claim_end_date) between pp.performance_period_begin_1yp and pp.performance_period_end\n         inner join encounter_exclusion_codes\n            on medical_claim.hcpcs_code = encounter_exclusion_codes.code\n    where encounter_exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , encounter_exclusion_codes.concept_name\n        , encounter_exclusion_codes.concept_category\n        , encounter_exclusion_codes.qualifying_count\n    from observations\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on observations.observation_date between pp.performance_period_begin_1yp and pp.performance_period_end\n\n    inner join encounter_exclusion_codes\n        on observations.code = encounter_exclusion_codes.code\n        and observations.code_type = encounter_exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , encounter_exclusion_codes.concept_name\n        , encounter_exclusion_codes.concept_category\n        , encounter_exclusion_codes.qualifying_count\n    from procedures\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on procedures.procedure_date between pp.performance_period_begin_1yp and pp.performance_period_end\n\n         inner join encounter_exclusion_codes\n             on procedures.code = encounter_exclusion_codes.code\n             and procedures.code_type = encounter_exclusion_codes.code_system\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n*/\n, patients_with_frailty as (\n\n    select\n          patient_id\n        , exclusion_date\n        , concept_name\nfrom tuva_project_demo.quality_measures._int_nqf0034__frailty\n\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND one acute inpatient encounter with a diagnosis of advanced illness\n    during measurement period or the year prior to measurement period\n*/\n, encounters_with_conditions as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name\n            || ' with '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n        , med_claim_exclusions.concept_category\n        , med_claim_exclusions.qualifying_count\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n        , observation_exclusions.concept_category\n        , observation_exclusions.qualifying_count\n    from patients_with_frailty\n         inner join observation_exclusions\n            on patients_with_frailty.patient_id = observation_exclusions.patient_id\n         inner join condition_exclusions\n             on observation_exclusions.patient_id = condition_exclusions.patient_id\n             and observation_exclusions.observation_date = condition_exclusions.recorded_date\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n        , procedure_exclusions.concept_category\n        , procedure_exclusions.qualifying_count\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND two outpatient, observation, ED or nonacute inpatient encounters\n    on different dates of service with an advanced illness diagnosis during\n    measurement period or the year prior to measurement period\n*/\n\n/*\n    Filter to patients who have had one acute inpatient encounter or\n    two nonacute outpatient encounters\n*/\n\n\n, qualifying_encounters as (\n\n    select\n      patient_id\n    , exclusion_date\n    , exclusion_reason\nfrom encounters_with_conditions e\nqualify dense_rank() over(partition by patient_id,concept_category order by exclusion_date) >= qualifying_count\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom qualifying_encounters", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__condition", "sql": " __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_exclude_colectomy_cancer", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_colectomy_cancer.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_colectomy_cancer.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_exclude_colectomy_cancer"], "alias": "_int_nqf0034_exclude_colectomy_cancer", "checksum": {"name": "sha256", "checksum": "e229d8f1e7f4e6a18d48fa5cd4b6638f4f6d4b4eaec10333d5a51bebf970ec65"}, "config": {"enabled": true, "alias": "_int_nqf0034_exclude_colectomy_cancer", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients with frailty and advanced illness for  the reporting version of NQF 0034, Colorectal Cancer Screening.     \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_exclude_colectomy_cancer", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4469647, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_exclude_colectomy_cancer", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatients with a diagnosis or past history of total colectomy or colorectal cancer: G9711\n*/\n\n\nwith exclusion_codes as (\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    From {{ref('quality_measures__value_sets')}}\n    where concept_name in  (\n         'Malignant Neoplasm of Colon'\n        , 'Total Colectomy'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__condition') }}\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_exclusions as(\n    select patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\n\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom patients_with_exclusions", "language": "sql", "refs": [{"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__condition", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_colectomy_cancer.sql", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatients with a diagnosis or past history of total colectomy or colorectal cancer: G9711\n*/\n\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), exclusion_codes as (\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    From tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in  (\n         'Malignant Neoplasm of Colon'\n        , 'Total Colectomy'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_exclusions as(\n    select patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\n\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom patients_with_exclusions", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__condition", "sql": " __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_exclude_dementia", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_dementia.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_dementia.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_exclude_dementia"], "alias": "_int_nqf0034_exclude_dementia", "checksum": {"name": "sha256", "checksum": "aa1b7de04547b3118c4881f7978d7e79b67a5d205c8531e86c276f60ce63013b"}, "config": {"enabled": true, "alias": "_int_nqf0034_exclude_dementia", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients with frailty and taking dementia medications for the reporting version of NQF 0034, Colorectal Cancer Screening.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_exclude_dementia", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4507108, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_exclude_dementia", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for frailty\n    during the measurement period AND a dispensed medication for dementia during the measurement period\n    or year prior to measurement period\n*/\n\nwith\n    exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n        ( 'Dementia Medications')\n    )\n\n)\n\n, medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code_type\n        , source_code\n        , ndc_code\n        , rxnorm_code\n    from {{ ref('quality_measures__stg_core__medication') }}\n\n)\n\n, pharmacy_claim as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , paid_date\n    from {{ ref('quality_measures__stg_pharmacy_claim') }}\n\n)\n\n\n, medication_exclusions as (\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on medications.dispensing_date between pp.performance_period_begin_1yp and pp.performance_period_end\n         inner join exclusion_codes\n            on medications.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on medications.dispensing_date between pp.performance_period_begin_1yp and pp.performance_period_end\n         inner join exclusion_codes\n            on medications.rxnorm_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'rxnorm'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on medications.dispensing_date between pp.performance_period_begin_1yp and pp.performance_period_end\n         inner join exclusion_codes\n            on medications.source_code = exclusion_codes.code\n            and medications.source_code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_claim_exclusions as (\n\n    select\n          pharmacy_claim.patient_id\n        , pharmacy_claim.dispensing_date\n        , pharmacy_claim.ndc_code\n        , pharmacy_claim.paid_date\n        , exclusion_codes.concept_name\n    from pharmacy_claim\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on pharmacy_claim.dispensing_date between pp.performance_period_begin_1yp and pp.performance_period_end\n        or pharmacy_claim.paid_date between pp.performance_period_begin_1yp and pp.performance_period_end\n    inner join exclusion_codes\n        on pharmacy_claim.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n)\n\n\n\n, patients_with_frailty as (\n\n    select\n          patient_id\n        , exclusion_date\n        , concept_name\nfrom {{ref('quality_measures__int_nqf0034__frailty')}}\n\n)\n\n, frailty_with_dementia as (\n\n    select\n          patients_with_frailty.patient_id\n        , patients_with_frailty.exclusion_date\n        , patients_with_frailty.concept_name\n            || ' with '\n            || pharmacy_claim_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join pharmacy_claim_exclusions\n            on patients_with_frailty.patient_id = pharmacy_claim_exclusions.patient_id\n\n\n    union all\n\n    select\n          patients_with_frailty.patient_id\n        , medication_exclusions.dispensing_date as exclusion_date\n        , patients_with_frailty.concept_name\n            || ' with '\n            || medication_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join medication_exclusions\n         on patients_with_frailty.patient_id = medication_exclusions.patient_id\n\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom frailty_with_dementia d", "language": "sql", "refs": [{"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__medication", "package": null, "version": null}, {"name": "quality_measures__stg_pharmacy_claim", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__frailty", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__medication", "model.the_tuva_project.quality_measures__stg_pharmacy_claim", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__int_nqf0034__frailty"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_dementia.sql", "compiled": true, "compiled_code": "\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for frailty\n    during the measurement period AND a dispensed medication for dementia during the measurement period\n    or year prior to measurement period\n*/\n\nwith\n     __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as dispensing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.pharmacy_claim\n\n\n), exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n        ( 'Dementia Medications')\n    )\n\n)\n\n, medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code_type\n        , source_code\n        , ndc_code\n        , rxnorm_code\n    from __dbt__cte__quality_measures__stg_core__medication\n\n)\n\n, pharmacy_claim as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , paid_date\n    from __dbt__cte__quality_measures__stg_pharmacy_claim\n\n)\n\n\n, medication_exclusions as (\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on medications.dispensing_date between pp.performance_period_begin_1yp and pp.performance_period_end\n         inner join exclusion_codes\n            on medications.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on medications.dispensing_date between pp.performance_period_begin_1yp and pp.performance_period_end\n         inner join exclusion_codes\n            on medications.rxnorm_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'rxnorm'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on medications.dispensing_date between pp.performance_period_begin_1yp and pp.performance_period_end\n         inner join exclusion_codes\n            on medications.source_code = exclusion_codes.code\n            and medications.source_code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_claim_exclusions as (\n\n    select\n          pharmacy_claim.patient_id\n        , pharmacy_claim.dispensing_date\n        , pharmacy_claim.ndc_code\n        , pharmacy_claim.paid_date\n        , exclusion_codes.concept_name\n    from pharmacy_claim\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on pharmacy_claim.dispensing_date between pp.performance_period_begin_1yp and pp.performance_period_end\n        or pharmacy_claim.paid_date between pp.performance_period_begin_1yp and pp.performance_period_end\n    inner join exclusion_codes\n        on pharmacy_claim.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n)\n\n\n\n, patients_with_frailty as (\n\n    select\n          patient_id\n        , exclusion_date\n        , concept_name\nfrom tuva_project_demo.quality_measures._int_nqf0034__frailty\n\n)\n\n, frailty_with_dementia as (\n\n    select\n          patients_with_frailty.patient_id\n        , patients_with_frailty.exclusion_date\n        , patients_with_frailty.concept_name\n            || ' with '\n            || pharmacy_claim_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join pharmacy_claim_exclusions\n            on patients_with_frailty.patient_id = pharmacy_claim_exclusions.patient_id\n\n\n    union all\n\n    select\n          patients_with_frailty.patient_id\n        , medication_exclusions.dispensing_date as exclusion_date\n        , patients_with_frailty.concept_name\n            || ' with '\n            || medication_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join medication_exclusions\n         on patients_with_frailty.patient_id = medication_exclusions.patient_id\n\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom frailty_with_dementia d", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__medication", "sql": " __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as dispensing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_pharmacy_claim", "sql": " __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.pharmacy_claim\n\n\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_exclude_hospice_palliative", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_hospice_palliative.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_hospice_palliative.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_exclude_hospice_palliative"], "alias": "_int_nqf0034_exclude_hospice_palliative", "checksum": {"name": "sha256", "checksum": "3c6edbda4dde2dc317e096187c65b3e0e7c7a157154b2ca8e1a0b83f47f1dacc"}, "config": {"enabled": true, "alias": "_int_nqf0034_exclude_hospice_palliative", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients using hospice or palliative services for the reporting  version of NQF 0034, Colorectal Cancer Screening.     \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_exclude_hospice_palliative", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4543462, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_exclude_hospice_palliative", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatient was provided hospice services any time during the measurement period: G9710\n*/\n\n\nwith exclusion_codes as (\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    From {{ref('quality_measures__value_sets')}}\n    where concept_name in  (\n          'Hospice Care Ambulatory'\n        , 'Hospice Encounter'\n        , 'Palliative Care Encounter'\n        , 'Palliative Care Intervention'\n    )\n\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__condition') }} )\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp\n        on recorded_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp on 1=1\n    where exclusion_codes.code_system = 'hcpcs'\n    and claim_start_date between pp.performance_period_begin and pp.performance_period_end\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n    inner join exclusion_codes\n        on observations.code = exclusion_codes.code\n        and observations.code_type = exclusion_codes.code_system\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp on 1=1\n    where observation_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp on 1=1\n    where procedure_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, patients_with_exclusions as(\n    select patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\n\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom patients_with_exclusions", "language": "sql", "refs": [{"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__condition", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_hospice_palliative.sql", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatient was provided hospice services any time during the measurement period: G9710\n*/\n\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), exclusion_codes as (\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    From tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in  (\n          'Hospice Care Ambulatory'\n        , 'Hospice Encounter'\n        , 'Palliative Care Encounter'\n        , 'Palliative Care Intervention'\n    )\n\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition )\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name as concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp\n        on recorded_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name as concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp on 1=1\n    where exclusion_codes.code_system = 'hcpcs'\n    and claim_start_date between pp.performance_period_begin and pp.performance_period_end\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name as concept_name\n    from observations\n    inner join exclusion_codes\n        on observations.code = exclusion_codes.code\n        and observations.code_type = exclusion_codes.code_system\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp on 1=1\n    where observation_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name as concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp on 1=1\n    where procedure_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, patients_with_exclusions as(\n    select patient_id\n        , recorded_date as exclusion_date\n        , concept_name as exclusion_reason\n    from condition_exclusions\n\n    union all\n\n    select patient_id\n        , coalesce(claim_end_date, claim_start_date) as exclusion_date\n        , concept_name as exclusion_reason\n    from med_claim_exclusions\n\n    union all\n\n    select patient_id\n        , observation_date as exclusion_date\n        , concept_name as exclusion_reason\n    from observation_exclusions\n\n    union all\n\n    select patient_id\n        , procedure_date as exclusion_date\n        , concept_name as exclusion_reason\n    from procedure_exclusions\n\n)\n\n\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom patients_with_exclusions", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__condition", "sql": " __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_exclude_institutional_snp", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_institutional_snp.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_institutional_snp.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_exclude_institutional_snp"], "alias": "_int_nqf0034_exclude_institutional_snp", "checksum": {"name": "sha256", "checksum": "5cb4e700829a5c7fa8a9e31905679350f6910351b1087788ef84a9ce6bf47366"}, "config": {"enabled": true, "alias": "_int_nqf0034_exclude_institutional_snp", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients staying in an institution for the reporting  version of NQF 0034, Colorectal Cancer Screening.      \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_exclude_institutional_snp", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.459115, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_exclude_institutional_snp", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Patients greater than or equal to 66 in Institutional Special Needs Plans (SNP)\n    or residing in long term care\n\n    Future enhancement: group claims into encounters\n*/\n\nwith aged_patients as (\n    select distinct patient_id\n    from {{ref('quality_measures__int_nqf0034_denominator')}}\n    where max_age >=66\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, exclusions as (\n\n    select\n          aged_patients.patient_id\n        , coalesce(\n              medical_claim.claim_start_date\n            , medical_claim.claim_end_date\n          ) as exclusion_date\n        , 'Institutional or Long Term Care' as exclusion_reason\n    from aged_patients\n         inner join medical_claim\n         on aged_patients.patient_id = medical_claim.patient_id\n\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on coalesce(\n              medical_claim.claim_start_date\n            , medical_claim.claim_end_date\n          ) between pp.performance_period_begin and pp.performance_period_end\n\n    where place_of_service_code in ('32', '33', '34', '54', '56')\n    and {{ datediff('medical_claim.claim_start_date', 'medical_claim.claim_end_date', 'day') }} >= 90\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom exclusions", "language": "sql", "refs": [{"name": "quality_measures__int_nqf0034_denominator", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclude_institutional_snp.sql", "compiled": true, "compiled_code": "\n\n/*\n    Patients greater than or equal to 66 in Institutional Special Needs Plans (SNP)\n    or residing in long term care\n\n    Future enhancement: group claims into encounters\n*/\n\nwith  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n), aged_patients as (\n    select distinct patient_id\n    from tuva_project_demo.quality_measures._int_nqf0034_denominator\n    where max_age >=66\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, exclusions as (\n\n    select\n          aged_patients.patient_id\n        , coalesce(\n              medical_claim.claim_start_date\n            , medical_claim.claim_end_date\n          ) as exclusion_date\n        , 'Institutional or Long Term Care' as exclusion_reason\n    from aged_patients\n         inner join medical_claim\n         on aged_patients.patient_id = medical_claim.patient_id\n\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on coalesce(\n              medical_claim.claim_start_date\n            , medical_claim.claim_end_date\n          ) between pp.performance_period_begin and pp.performance_period_end\n\n    where place_of_service_code in ('32', '33', '34', '54', '56')\n    and datediff(\n        day,\n        medical_claim.claim_start_date,\n        medical_claim.claim_end_date\n        ) >= 90\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom exclusions", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_exclusions": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_exclusions", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclusions.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclusions.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclusions", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_exclusions"], "alias": "_int_nqf0034_exclusions", "checksum": {"name": "sha256", "checksum": "6298ca02233276966995fda43fa85da02fcd4130dbcf384e4e46cbfd75b4504f"}, "config": {"enabled": true, "alias": "_int_nqf0034_exclusions", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Combined exclusion logic for the reporting version of NQF 0034, Colorectal Cancer Screening.      \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_exclusions", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4628644, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_exclusions", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith exclusions as (\nselect *\nFrom {{ref('quality_measures__int_nqf0034_exclude_advanced_illness')}}\n\nunion all\n\nselect *\nFrom {{ref('quality_measures__int_nqf0034_exclude_colectomy_cancer')}}\n\nunion all\n\nselect *\nFrom {{ref('quality_measures__int_nqf0034_exclude_dementia')}}\n\nunion all\n\nselect *\nFrom {{ref('quality_measures__int_nqf0034_exclude_hospice_palliative')}}\n\nunion all\n\nselect *\nFrom {{ref('quality_measures__int_nqf0034_exclude_institutional_snp')}}\n)\n\nselect exclusions.*\nfrom exclusions\ninner join {{ref('quality_measures__int_nqf0034_denominator')}} p\n    on exclusions.patient_id = p.patient_id", "language": "sql", "refs": [{"name": "quality_measures__int_nqf0034_exclude_advanced_illness", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_exclude_colectomy_cancer", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_exclude_dementia", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_exclude_hospice_palliative", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_exclude_institutional_snp", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_denominator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp", "model.the_tuva_project.quality_measures__int_nqf0034_denominator"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_exclusions.sql", "compiled": true, "compiled_code": "\n\nwith exclusions as (\nselect *\nFrom tuva_project_demo.quality_measures._int_nqf0034_exclude_advanced_illness\n\nunion all\n\nselect *\nFrom tuva_project_demo.quality_measures._int_nqf0034_exclude_colectomy_cancer\n\nunion all\n\nselect *\nFrom tuva_project_demo.quality_measures._int_nqf0034_exclude_dementia\n\nunion all\n\nselect *\nFrom tuva_project_demo.quality_measures._int_nqf0034_exclude_hospice_palliative\n\nunion all\n\nselect *\nFrom tuva_project_demo.quality_measures._int_nqf0034_exclude_institutional_snp\n)\n\nselect exclusions.*\nfrom exclusions\ninner join tuva_project_demo.quality_measures._int_nqf0034_denominator p\n    on exclusions.patient_id = p.patient_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_long": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_long", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_long.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_long.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_long", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_long"], "alias": "_int_nqf0034_long", "checksum": {"name": "sha256", "checksum": "a3ab51077730e5b49bc36c4a59b9dbe807342cd820ca6ac3b23122681bbb9b54"}, "config": {"enabled": true, "alias": "_int_nqf0034_long", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Final preparation of the reporting version of NQF 0034, Colorectal Cancer Screening before combining with other measures.      \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_long", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.466221, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_long", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n\n{%- set measure_id -%}\n(\n    select id\nfrom {{ ref('quality_measures__measures') }}\nwhere id = 'NQF0034'\n    )\n{%- endset -%}\n\n{%- set measure_name -%}\n(\n\n    select name\nfrom {{ ref('quality_measures__measures') }}\nwhere id = 'NQF0034'\n\n    )\n{%- endset -%}\n\n{%- set measure_version -%}\n(\n    select version\nfrom {{ ref('quality_measures__measures') }}\nwhere id = 'NQF0034'\n\n    )\n{%- endset -%}\n\n\n\n/* selecting the full patient population as the grain of this table */\nwith patient as (\n\n    select distinct patient_id\n    from {{ ref('quality_measures__stg_core__patient') }}\n\n)\n\n, denominator as (\n\n    select\n          patient_id\n    from {{ ref('quality_measures__int_nqf0034_denominator') }}\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n    from {{ ref('quality_measures__int_nqf0034_numerator') }}\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf0034_exclusions') }}\n\n)\n\n, measure_flags as (\n\n    select\n          patient.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null\n            then 1\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null\n            then 1\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , {{ measure_id }}  as measure_id\n        , {{ measure_name }}  as measure_name\n        , {{ measure_version }}  as measure_version\n    from patient\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on 1 = 1\n        left join denominator\n            on patient.patient_id = denominator.patient_id\n        left join numerator\n            on patient.patient_id = numerator.patient_id\n        left join exclusions\n            on patient.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, add_rownum as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , row_number() over(\n            partition by\n                  patient_id\n                , performance_period_begin\n                , performance_period_end\n                , measure_id\n                , measure_name\n            order by\n                  evidence_date desc nulls last\n                , exclusion_date desc nulls last\n          ) as row_num\n    from measure_flags\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from add_rownum\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as {{ dbt.type_string() }}) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as {{ dbt.type_string() }}) as measure_id\n        , cast(measure_name as {{ dbt.type_string() }}) as measure_name\n        , cast(measure_version as {{ dbt.type_string() }}) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "quality_measures__measures", "package": null, "version": null}, {"name": "quality_measures__measures", "package": null, "version": null}, {"name": "quality_measures__measures", "package": null, "version": null}, {"name": "quality_measures__stg_core__patient", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_denominator", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_numerator", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034_exclusions", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["seed.the_tuva_project.quality_measures__measures", "model.the_tuva_project.quality_measures__stg_core__patient", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "model.the_tuva_project.quality_measures__int_nqf0034_exclusions", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_long.sql", "compiled": true, "compiled_code": "/* selecting the full patient population as the grain of this table */\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n), patient as (\n\n    select distinct patient_id\n    from __dbt__cte__quality_measures__stg_core__patient\n\n)\n\n, denominator as (\n\n    select\n          patient_id\n    from tuva_project_demo.quality_measures._int_nqf0034_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , evidence_date\n    from tuva_project_demo.quality_measures._int_nqf0034_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf0034_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          patient.patient_id\n        , case\n            when denominator.patient_id is not null\n            then 1\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null\n            then 1\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null\n            then 1\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , pp.performance_period_begin\n        , pp.performance_period_end\n        , (\n    select id\nfrom tuva_project_demo.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n    )  as measure_id\n        , (\n\n    select name\nfrom tuva_project_demo.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n\n    )  as measure_name\n        , (\n    select version\nfrom tuva_project_demo.quality_measures._value_set_measures\nwhere id = 'NQF0034'\n\n    )  as measure_version\n    from patient\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on 1 = 1\n        left join denominator\n            on patient.patient_id = denominator.patient_id\n        left join numerator\n            on patient.patient_id = numerator.patient_id\n        left join exclusions\n            on patient.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, add_rownum as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , row_number() over(\n            partition by\n                  patient_id\n                , performance_period_begin\n                , performance_period_end\n                , measure_id\n                , measure_name\n            order by\n                  evidence_date desc nulls last\n                , exclusion_date desc nulls last\n          ) as row_num\n    from measure_flags\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from add_rownum\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__patient", "sql": " __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034_numerator": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034_numerator", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_numerator.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_numerator.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034_numerator"], "alias": "_int_nqf0034_numerator", "checksum": {"name": "sha256", "checksum": "078c46c8f97bb936b8c770594dd84e0ceaed13fb9d0bdabc6bdf1140aaad1f6e"}, "config": {"enabled": true, "alias": "_int_nqf0034_numerator", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Numerator logic for the reporting version of NQF 0034, Colorectal Cancer Screening\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034_numerator", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4694278, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034_numerator", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n\n/*\nPatients with one or more screenings for colorectal cancer. Appropriate screenings are defined by any one of the\nfollowing criteria:\n- Fecal occult blood test (FOBT) during the measurement period\n- Flexible sigmoidoscopy during the measurement period or the four years prior to the measurement period\n- Colonoscopy during the measurement period or the nine years prior to the measurement period\n- Computed tomography (CT) colonography during the measurement period or the four years prior to the\nmeasurement period.\n- Fecal immunochemical DNA test (FIT-DNA) during the measurement period or the two years prior to the\nmeasurement period.\n\n*/\n\nwith denominator as (\n\n    select\n          patient_id\n\n    from {{ ref('quality_measures__int_nqf0034_denominator') }}\n\n)\n, screening_codes as\n(\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    From {{ref('quality_measures__value_sets')}}\n    where concept_name in  (\n        'Fecal Occult Blood Test (FOBT)' -- mp\n        ,'Flexible Sigmoidoscopy' --mp+4\n        ,'Colonoscopy' -- mp+9\n        ,'CT Colonography' -- mp+4\n        ,'sDNA FIT Test' -- mp+2\n    )\n)\n, screening_periods  as (\n    select *,\n        case concept_name\n            when 'Fecal Occult Blood Test (FOBT)' then pp.performance_period_begin --mp\n            when 'Flexible Sigmoidoscopy' then pp.performance_period_begin_4yp --mp+4\n            when 'Colonoscopy' then pp.performance_period_begin_9yp -- mp+9\n            when 'CT Colonography' then pp.performance_period_begin_4yp -- mp+4\n            when 'sDNA FIT Test' then pp.performance_period_begin_2yp -- mp+2\n        else pp.performance_period_begin end as effective_performance_period_begin\n\n    from screening_codes\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} pp\n        on 1 = 1\n    )\n\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce(\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, labs as (\n    select  patient_id\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    from {{ ref('quality_measures__stg_core__lab_result')}}\n    )\n\n\n, qualifying_claims as (\n\n    select\n          medical_claim.patient_id\n        , coalesce( medical_claim.claim_start_date, medical_claim.claim_end_date) as claim_date\n    , screening_codes.concept_name\n    from medical_claim\n    inner join screening_periods\n        on medical_claim.claim_start_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n        or medical_claim.claim_end_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n    inner join screening_codes\n            on medical_claim.hcpcs_code = screening_codes.code\n    where screening_codes.code_system in ('hcpcs', 'cpt' )\n\n)\n\n, qualifying_observations as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n    , screening_codes.concept_name\n    from observations\n    inner join screening_periods\n        on observations.observation_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n     inner join screening_codes\n         on observations.code = screening_codes.code\n         and observations.code_type = screening_codes.code_system\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    , screening_codes.concept_name\n    from procedures\n    inner join screening_periods\n        on procedures.procedure_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n     inner join screening_codes\n         on procedures.code = screening_codes.code\n         and procedures.code_type = screening_codes.code_system\n\n)\n\n,qualifying_labs as (\n    select\n      patient_id\n    , coalesce(collection_date,result_date) as lab_date\n    , screening_codes.concept_name\n    from labs\n    inner join screening_periods\n        on coalesce(labs.collection_date, labs.result_date) between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n    inner join  screening_codes\n      on ( labs.normalized_code = screening_codes.code\n       and labs.normalized_code_type = screening_codes.code_system )\n      or ( labs.source_code = screening_codes.code\n       and labs.source_code_type = screening_codes.code_system )\n    )\n\n,qualifying_events as (\n    select\n          patient_id\n        , claim_date as evidence_date\n        , concept_name as evidence\n    from qualifying_claims\n\n    union all\n\n    select\n          patient_id\n        , observation_date as evidence_date\n        , concept_name as evidence\n    from qualifying_observations\n\n    union all\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n        , concept_name as evidence\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , lab_date as evidence_date\n        , concept_name as evidence\n    from qualifying_labs\n\n    )\n\nselect\n    cast (qualifying_events.patient_id as {{ dbt.type_string() }}) patient_id\n    ,cast( evidence_date as date) as evidence_date\n    ,cast( evidence as {{ dbt.type_string() }}) as evidence\n\nfrom qualifying_events\ninner join denominator\n    on qualifying_events.patient_id = denominator.patient_id", "language": "sql", "refs": [{"name": "quality_measures__int_nqf0034_denominator", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}, {"name": "quality_measures__stg_core__lab_result", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf0034_denominator", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_core__lab_result"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034_numerator.sql", "compiled": true, "compiled_code": "\n\n\n/*\nPatients with one or more screenings for colorectal cancer. Appropriate screenings are defined by any one of the\nfollowing criteria:\n- Fecal occult blood test (FOBT) during the measurement period\n- Flexible sigmoidoscopy during the measurement period or the four years prior to the measurement period\n- Colonoscopy during the measurement period or the nine years prior to the measurement period\n- Computed tomography (CT) colonography during the measurement period or the four years prior to the\nmeasurement period.\n- Fecal immunochemical DNA test (FIT-DNA) during the measurement period or the two years prior to the\nmeasurement period.\n\n*/\n\nwith  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n),  __dbt__cte__quality_measures__stg_core__lab_result as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as result_date\n    ,  try_cast( null as date ) as collection_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n), denominator as (\n\n    select\n          patient_id\n\n    from tuva_project_demo.quality_measures._int_nqf0034_denominator\n\n)\n, screening_codes as\n(\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n    From tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in  (\n        'Fecal Occult Blood Test (FOBT)' -- mp\n        ,'Flexible Sigmoidoscopy' --mp+4\n        ,'Colonoscopy' -- mp+9\n        ,'CT Colonography' -- mp+4\n        ,'sDNA FIT Test' -- mp+2\n    )\n)\n, screening_periods  as (\n    select *,\n        case concept_name\n            when 'Fecal Occult Blood Test (FOBT)' then pp.performance_period_begin --mp\n            when 'Flexible Sigmoidoscopy' then pp.performance_period_begin_4yp --mp+4\n            when 'Colonoscopy' then pp.performance_period_begin_9yp -- mp+9\n            when 'CT Colonography' then pp.performance_period_begin_4yp -- mp+4\n            when 'sDNA FIT Test' then pp.performance_period_begin_2yp -- mp+2\n        else pp.performance_period_begin end as effective_performance_period_begin\n\n    from screening_codes\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period pp\n        on 1 = 1\n    )\n\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce(\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, labs as (\n    select  patient_id\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    from __dbt__cte__quality_measures__stg_core__lab_result\n    )\n\n\n, qualifying_claims as (\n\n    select\n          medical_claim.patient_id\n        , coalesce( medical_claim.claim_start_date, medical_claim.claim_end_date) as claim_date\n    , screening_codes.concept_name\n    from medical_claim\n    inner join screening_periods\n        on medical_claim.claim_start_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n        or medical_claim.claim_end_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n    inner join screening_codes\n            on medical_claim.hcpcs_code = screening_codes.code\n    where screening_codes.code_system in ('hcpcs', 'cpt' )\n\n)\n\n, qualifying_observations as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n    , screening_codes.concept_name\n    from observations\n    inner join screening_periods\n        on observations.observation_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n     inner join screening_codes\n         on observations.code = screening_codes.code\n         and observations.code_type = screening_codes.code_system\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    , screening_codes.concept_name\n    from procedures\n    inner join screening_periods\n        on procedures.procedure_date between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n     inner join screening_codes\n         on procedures.code = screening_codes.code\n         and procedures.code_type = screening_codes.code_system\n\n)\n\n,qualifying_labs as (\n    select\n      patient_id\n    , coalesce(collection_date,result_date) as lab_date\n    , screening_codes.concept_name\n    from labs\n    inner join screening_periods\n        on coalesce(labs.collection_date, labs.result_date) between screening_periods.effective_performance_period_begin and screening_periods.performance_period_end\n    inner join  screening_codes\n      on ( labs.normalized_code = screening_codes.code\n       and labs.normalized_code_type = screening_codes.code_system )\n      or ( labs.source_code = screening_codes.code\n       and labs.source_code_type = screening_codes.code_system )\n    )\n\n,qualifying_events as (\n    select\n          patient_id\n        , claim_date as evidence_date\n        , concept_name as evidence\n    from qualifying_claims\n\n    union all\n\n    select\n          patient_id\n        , observation_date as evidence_date\n        , concept_name as evidence\n    from qualifying_observations\n\n    union all\n\n    select\n          patient_id\n        , procedure_date as evidence_date\n        , concept_name as evidence\n    from qualifying_procedures\n\n    union all\n\n    select\n          patient_id\n        , lab_date as evidence_date\n        , concept_name as evidence\n    from qualifying_labs\n\n    )\n\nselect\n    cast (qualifying_events.patient_id as TEXT) patient_id\n    ,cast( evidence_date as date) as evidence_date\n    ,cast( evidence as TEXT) as evidence\n\nfrom qualifying_events\ninner join denominator\n    on qualifying_events.patient_id = denominator.patient_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__lab_result", "sql": " __dbt__cte__quality_measures__stg_core__lab_result as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as result_date\n    ,  try_cast( null as date ) as collection_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034__frailty": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034__frailty", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034__frailty.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034__frailty.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__frailty", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034__frailty"], "alias": "_int_nqf0034__frailty", "checksum": {"name": "sha256", "checksum": "64c3341f811ebbe1082f8146944799c29089899c8d4412fa6599817bafd65559"}, "config": {"enabled": true, "alias": "_int_nqf0034__frailty", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Frailty definition for nqf 0034 colorectal cancer screening used in multiple exclusions\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034__frailty", "tags": "quality_measures", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.47461, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034__frailty", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatients 66 years of age and older with at least one claim/encounter\nfor frailty during the measurement period (not full exclusion, used\nin conjunction with dementia medication or\n*/\n\n\nwith aged_patients as (\n    select distinct patient_id\n    from {{ref('quality_measures__int_nqf0034_denominator')}}\n    where max_age >=66\n\n)\n\n, exclusion_codes as (\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n        , case when code in ('G2100','G2101') then 1 else  0 end as meets_all_criteria\n    From {{ref('quality_measures__value_sets')}}\n    where concept_name in  (\n          'Frailty Device'\n        , 'Frailty Diagnosis'\n        , 'Frailty Encounter'\n        , 'Frailty Symptom'\n    )\n\n\n\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__condition') }} )\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n        inner join aged_patients\n            on conditions.patient_id = aged_patients.patient_id\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp on\n        recorded_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n        inner join aged_patients\n            on medical_claim.patient_id = aged_patients.patient_id\n        inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n        inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp\n            on claim_start_date between pp.performance_period_begin and pp.performance_period_end\n    where exclusion_codes.code_system = 'hcpcs'\n\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n    inner join aged_patients\n        on observations.patient_id = aged_patients.patient_id\n    inner join exclusion_codes\n        on observations.code = exclusion_codes.code\n        and observations.code_type = exclusion_codes.code_system\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp\n        on observation_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n    inner join aged_patients\n        on procedures.patient_id = aged_patients.patient_id\n    inner join exclusion_codes\n        on procedures.code = exclusion_codes.code\n        and procedures.code_type = exclusion_codes.code_system\n    inner join {{ref('quality_measures__int_nqf0034__performance_period')}} as pp on\n       procedure_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, patients_with_exclusions as(\n    select patient_id\n      , recorded_date as exclusion_date\n      , concept_name as concept_name\n    from condition_exclusions\n\n    union distinct\n\n    select patient_id\n      , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n      , concept_name as concept_name\n    from med_claim_exclusions\n\n    union distinct\n\n    select patient_id\n      , observation_date as exclusion_date\n      , concept_name as concept_name\n    from observation_exclusions\n\n    union distinct\n\n    select patient_id\n      , procedure_date as exclusion_date\n      , concept_name as concept_name\n    from procedure_exclusions\n\n)\n, ordered_exclusions as (\n    select patient_id\n        , exclusion_date\n        , concept_name\n        , row_number() over (partition by patient_id order by exclusion_date) as exclusion_row\n    from patients_with_exclusions\n    )\n\nselect  patient_id\n    , exclusion_date\n    , concept_name\nfrom ordered_exclusions", "language": "sql", "refs": [{"name": "quality_measures__int_nqf0034_denominator", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__condition", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}, {"name": "quality_measures__int_nqf0034__performance_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.quality_measures__int_nqf0034_denominator", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034__frailty.sql", "compiled": true, "compiled_code": "\n\n/*\nDENOMINATOR EXCLUSIONS:\nPatients 66 years of age and older with at least one claim/encounter\nfor frailty during the measurement period (not full exclusion, used\nin conjunction with dementia medication or\n*/\n\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), aged_patients as (\n    select distinct patient_id\n    from tuva_project_demo.quality_measures._int_nqf0034_denominator\n    where max_age >=66\n\n)\n\n, exclusion_codes as (\n    select\n          code\n        , case code_system\n            when 'SNOMEDCT' then 'snomed-ct'\n            when 'ICD9CM' then 'icd-9-cm'\n            when 'ICD10CM' then 'icd-10-cm'\n            when 'CPT' then 'hcpcs'\n            when 'ICD10PCS' then 'icd-10-pcs'\n          else lower(code_system) end as code_system\n        , concept_name\n        , case when code in ('G2100','G2101') then 1 else  0 end as meets_all_criteria\n    From tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in  (\n          'Frailty Device'\n        , 'Frailty Diagnosis'\n        , 'Frailty Encounter'\n        , 'Frailty Symptom'\n    )\n\n\n\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition )\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n        inner join aged_patients\n            on conditions.patient_id = aged_patients.patient_id\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp on\n        recorded_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n        inner join aged_patients\n            on medical_claim.patient_id = aged_patients.patient_id\n        inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n        inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp\n            on claim_start_date between pp.performance_period_begin and pp.performance_period_end\n    where exclusion_codes.code_system = 'hcpcs'\n\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n    inner join aged_patients\n        on observations.patient_id = aged_patients.patient_id\n    inner join exclusion_codes\n        on observations.code = exclusion_codes.code\n        and observations.code_type = exclusion_codes.code_system\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp\n        on observation_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n    inner join aged_patients\n        on procedures.patient_id = aged_patients.patient_id\n    inner join exclusion_codes\n        on procedures.code = exclusion_codes.code\n        and procedures.code_type = exclusion_codes.code_system\n    inner join tuva_project_demo.quality_measures._int_nqf0034__performance_period as pp on\n       procedure_date between pp.performance_period_begin and pp.performance_period_end\n\n)\n\n, patients_with_exclusions as(\n    select patient_id\n      , recorded_date as exclusion_date\n      , concept_name as concept_name\n    from condition_exclusions\n\n    union distinct\n\n    select patient_id\n      , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n      , concept_name as concept_name\n    from med_claim_exclusions\n\n    union distinct\n\n    select patient_id\n      , observation_date as exclusion_date\n      , concept_name as concept_name\n    from observation_exclusions\n\n    union distinct\n\n    select patient_id\n      , procedure_date as exclusion_date\n      , concept_name as concept_name\n    from procedure_exclusions\n\n)\n, ordered_exclusions as (\n    select patient_id\n        , exclusion_date\n        , concept_name\n        , row_number() over (partition by patient_id order by exclusion_date) as exclusion_row\n    from patients_with_exclusions\n    )\n\nselect  patient_id\n    , exclusion_date\n    , concept_name\nfrom ordered_exclusions", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__condition", "sql": " __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf0034__performance_period": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf0034__performance_period", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034__performance_period.sql", "original_file_path": "models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034__performance_period.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf0034_colorectal_cancer_screening", "quality_measures__int_nqf0034__performance_period"], "alias": "_int_nqf0034__performance_period", "checksum": {"name": "sha256", "checksum": "cca2e6986e8b7f77a62452621da6107ca7e54007c5d07495b7da112464495da7"}, "config": {"enabled": true, "alias": "_int_nqf0034__performance_period", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Performance Period definition for NQF 0034 Colorectal Cancer screening.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf0034__performance_period", "tags": "quality_measures", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4789608, "relation_name": "tuva_project_demo.quality_measures._int_nqf0034__performance_period", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        {% if var('quality_measures_period_end',False) == False -%}\n        {{ last_day(dbt.current_timestamp(), 'year') }}\n        {% else -%}\n        cast('{{ var('quality_measures_period_end') }}' as date)\n        {%- endif %}\n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , {{ dbt.dateadd (\n              datepart = \"day\"\n            , interval = +1\n            , from_date_or_timestamp =\n                dbt.dateadd (\n                      datepart = \"year\"\n                    , interval = -1\n                    , from_date_or_timestamp = \"performance_period_end\"\n            )\n          ) }} as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback periods for each type of test\n\n    during the measurement period:\n    - Fecal occult blood test (FOBT) during the measurement period\n\n    during the measurement period or the two years prior:\n    - Fecal immunochemical DNA test (FIT-DNA)\n\n    during the measurement period or the four years prior:\n    - Flexible sigmoidoscopy\n    - Computed tomography (CT) colonography\n\n    during the measurement period or the nine years prior:\n    - Colonoscopy\n\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , {{ dbt.dateadd(\n              datepart = \"year\"\n            , interval = -2\n            , from_date_or_timestamp = \"performance_period_end\"\n          ) }} as performance_period_begin_1yp\n        , {{ dbt.dateadd(\n              datepart = \"year\"\n            , interval = -3\n            , from_date_or_timestamp = \"performance_period_end\"\n          ) }} as performance_period_begin_2yp\n        , {{ dbt.dateadd(\n              datepart = \"year\"\n            , interval = -5\n            , from_date_or_timestamp = \"performance_period_end\"\n          ) }} as performance_period_begin_4yp\n        , {{ dbt.dateadd(\n              datepart = \"year\"\n            , interval = -10\n            , from_date_or_timestamp = \"performance_period_end\"\n          ) }} as performance_period_begin_9yp\n    from period_begin\n\n)\n\nselect\n      cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp\n    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp\n    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp\n    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp\nfrom period_lookback", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd"], "nodes": []}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf0034_colorectal_cancer_screening/quality_measures__int_nqf0034__performance_period.sql", "compiled": true, "compiled_code": "\n/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast('2018-12-31' as date)\n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback periods for each type of test\n\n    during the measurement period:\n    - Fecal occult blood test (FOBT) during the measurement period\n\n    during the measurement period or the two years prior:\n    - Fecal immunochemical DNA test (FIT-DNA)\n\n    during the measurement period or the four years prior:\n    - Flexible sigmoidoscopy\n    - Computed tomography (CT) colonography\n\n    during the measurement period or the nine years prior:\n    - Colonoscopy\n\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    dateadd(\n        year,\n        -2,\n        performance_period_end\n        )\n\n as performance_period_begin_1yp\n        , \n\n    dateadd(\n        year,\n        -3,\n        performance_period_end\n        )\n\n as performance_period_begin_2yp\n        , \n\n    dateadd(\n        year,\n        -5,\n        performance_period_end\n        )\n\n as performance_period_begin_4yp\n        , \n\n    dateadd(\n        year,\n        -10,\n        performance_period_end\n        )\n\n as performance_period_begin_9yp\n    from period_begin\n\n)\n\nselect\n      cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp\n    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp\n    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp\n    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp\nfrom period_lookback", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_denominator": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_denominator", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_denominator.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_denominator.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_denominator"], "alias": "_int_nqf2372_denominator", "checksum": {"name": "sha256", "checksum": "20d37b8969ab10d2558aaaacd61b8f468f2be15c0c811928d5392f7b0304e1e0"}, "config": {"enabled": true, "alias": "_int_nqf2372_denominator", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Denominator logic for the reporting version of NQF 2372, Breast Cancer  Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "age": {"name": "age", "description": "Patient's age as of the performance_period_begin date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_begin": {"name": "performance_period_begin", "description": "Beginning date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_end": {"name": "performance_period_end", "description": "Ending date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_id": {"name": "measure_id", "description": "Unique measure identification number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_name": {"name": "measure_name", "description": "Name of the measure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_version": {"name": "measure_version", "description": "Version of the measure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "denominator_flag": {"name": "denominator_flag", "description": "The denominator is associated with a given patient population that  may be counted as eligible to meet a measure\u2019s inclusion requirements.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date and timestamp of the dbt run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_denominator", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3987143, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_denominator", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\nwith performance_period as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_end\n        , performance_period_begin\n        , performance_period_lookback\n    from {{ ref('quality_measures__int_nqf2372__performance_period') }}\n\n)\n\n, patient as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        , death_date\n    from {{ ref('quality_measures__stg_core__patient') }}\n\n)\n\n, encounters as (\n\n    select\n          patient_id\n        , encounter_type\n        , encounter_start_date\n    from {{ ref('quality_measures__stg_core__encounter') }}\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, visit_codes as (\n\n    select\n          code\n        , code_system\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n          'Office Visit'\n        , 'Home Healthcare Services'\n        , 'Preventive Care Services Established Office Visit, 18 and Up'\n        , 'Preventive Care Services Initial Office Visit, 18 and Up'\n        , 'Annual Wellness Visit'\n        , 'Telephone Visits'\n        , 'Online Assessments'\n    )\n\n)\n\n, patient_with_age as (\n\n    select\n          patient.patient_id\n        , patient.sex\n        , patient.birth_date\n        , patient.death_date\n        , performance_period.measure_id\n        , performance_period.measure_name\n        , performance_period.measure_version\n        , performance_period.performance_period_begin\n        , performance_period.performance_period_end\n        , performance_period.performance_period_lookback\n        , floor({{ datediff('patient.birth_date', 'performance_period.performance_period_end', 'hour') }} / 8766.0) as age\n    from patient\n         cross join performance_period\n\n)\n\n/*\n    Filter patient to living women 51 - 74 years of age\n    at the beginning of the measurement period\n*/\n, patient_filtered as (\n\n    select\n          patient_id\n        , age\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , performance_period_lookback\n        , 1 as denominator_flag\n    from patient_with_age\n    where lower(sex) = 'female'\n        and age between 51 and 74\n        and death_date is null\n\n)\n\n/*\n    Filter to qualifying visit types by claim procedures\n*/\n, visit_claims as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n    from medical_claim\n         inner join visit_codes\n            on medical_claim.hcpcs_code = visit_codes.code\n    where visit_codes.code_system = 'hcpcs'\n\n)\n\n/*\n    Filter encounters to qualifying visit type\n*/\n, visit_encounters as (\n\n    select\n          patient_id\n        , encounter_start_date\n    from encounters\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n        )\n\n)\n\n/*\n    Filter to qualifying visit types by procedure\n*/\n, visit_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n         inner join visit_codes\n             on procedures.code = visit_codes.code\n             and procedures.code_type = visit_codes.code_system\n\n)\n\n/*\n    Filter to final eligible population/denominator before exclusions\n    with a qualifying visit during the measurement period\n*/\n, eligible_population as (\n\n    select\n          patient_filtered.patient_id\n        , patient_filtered.age\n        , patient_filtered.measure_id\n        , patient_filtered.measure_name\n        , patient_filtered.measure_version\n        , patient_filtered.performance_period_begin\n        , patient_filtered.performance_period_end\n        , performance_period_lookback\n        , patient_filtered.denominator_flag\n    from patient_filtered\n         left join visit_claims\n            on patient_filtered.patient_id = visit_claims.patient_id\n         left join visit_procedures\n            on patient_filtered.patient_id = visit_procedures.patient_id\n         left join visit_encounters\n            on patient_filtered.patient_id = visit_encounters.patient_id\n    where (\n        visit_claims.claim_start_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_claims.claim_end_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_procedures.procedure_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_encounters.encounter_start_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n    )\n\n)\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(performance_period_lookback as date) as performance_period_lookback\n        , cast(measure_id as {{ dbt.type_string() }}) as measure_id\n        , cast(measure_name as {{ dbt.type_string() }}) as measure_name\n        , cast(measure_version as {{ dbt.type_string() }}) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from eligible_population\n\n)\n\n select distinct\n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , performance_period_lookback\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372__performance_period", "package": null, "version": null}, {"name": "quality_measures__stg_core__patient", "package": null, "version": null}, {"name": "quality_measures__stg_core__encounter", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.type_string"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372__performance_period", "model.the_tuva_project.quality_measures__stg_core__patient", "model.the_tuva_project.quality_measures__stg_core__encounter", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__procedure", "seed.the_tuva_project.quality_measures__value_sets"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_denominator.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n),  __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , try_cast( null as date ) as encounter_start_date\n    , try_cast( null as date ) as encounter_end_date\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), performance_period as (\n\n    select\n          measure_id\n        , measure_name\n        , measure_version\n        , performance_period_end\n        , performance_period_begin\n        , performance_period_lookback\n    from tuva_project_demo.quality_measures._int_nqf2372__performance_period\n\n)\n\n, patient as (\n\n    select\n          patient_id\n        , sex\n        , birth_date\n        , death_date\n    from __dbt__cte__quality_measures__stg_core__patient\n\n)\n\n, encounters as (\n\n    select\n          patient_id\n        , encounter_type\n        , encounter_start_date\n    from __dbt__cte__quality_measures__stg_core__encounter\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, visit_codes as (\n\n    select\n          code\n        , code_system\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n          'Office Visit'\n        , 'Home Healthcare Services'\n        , 'Preventive Care Services Established Office Visit, 18 and Up'\n        , 'Preventive Care Services Initial Office Visit, 18 and Up'\n        , 'Annual Wellness Visit'\n        , 'Telephone Visits'\n        , 'Online Assessments'\n    )\n\n)\n\n, patient_with_age as (\n\n    select\n          patient.patient_id\n        , patient.sex\n        , patient.birth_date\n        , patient.death_date\n        , performance_period.measure_id\n        , performance_period.measure_name\n        , performance_period.measure_version\n        , performance_period.performance_period_begin\n        , performance_period.performance_period_end\n        , performance_period.performance_period_lookback\n        , floor(datediff(\n        hour,\n        patient.birth_date,\n        performance_period.performance_period_end\n        ) / 8766.0) as age\n    from patient\n         cross join performance_period\n\n)\n\n/*\n    Filter patient to living women 51 - 74 years of age\n    at the beginning of the measurement period\n*/\n, patient_filtered as (\n\n    select\n          patient_id\n        , age\n        , measure_id\n        , measure_name\n        , measure_version\n        , performance_period_begin\n        , performance_period_end\n        , performance_period_lookback\n        , 1 as denominator_flag\n    from patient_with_age\n    where lower(sex) = 'female'\n        and age between 51 and 74\n        and death_date is null\n\n)\n\n/*\n    Filter to qualifying visit types by claim procedures\n*/\n, visit_claims as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n    from medical_claim\n         inner join visit_codes\n            on medical_claim.hcpcs_code = visit_codes.code\n    where visit_codes.code_system = 'hcpcs'\n\n)\n\n/*\n    Filter encounters to qualifying visit type\n*/\n, visit_encounters as (\n\n    select\n          patient_id\n        , encounter_start_date\n    from encounters\n    where lower(encounter_type) in (\n          'home health'\n        , 'office visit'\n        , 'outpatient'\n        , 'outpatient rehabilitation'\n        , 'telehealth'\n        )\n\n)\n\n/*\n    Filter to qualifying visit types by procedure\n*/\n, visit_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n         inner join visit_codes\n             on procedures.code = visit_codes.code\n             and procedures.code_type = visit_codes.code_system\n\n)\n\n/*\n    Filter to final eligible population/denominator before exclusions\n    with a qualifying visit during the measurement period\n*/\n, eligible_population as (\n\n    select\n          patient_filtered.patient_id\n        , patient_filtered.age\n        , patient_filtered.measure_id\n        , patient_filtered.measure_name\n        , patient_filtered.measure_version\n        , patient_filtered.performance_period_begin\n        , patient_filtered.performance_period_end\n        , performance_period_lookback\n        , patient_filtered.denominator_flag\n    from patient_filtered\n         left join visit_claims\n            on patient_filtered.patient_id = visit_claims.patient_id\n         left join visit_procedures\n            on patient_filtered.patient_id = visit_procedures.patient_id\n         left join visit_encounters\n            on patient_filtered.patient_id = visit_encounters.patient_id\n    where (\n        visit_claims.claim_start_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_claims.claim_end_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_procedures.procedure_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n        or visit_encounters.encounter_start_date\n            between patient_filtered.performance_period_begin\n            and patient_filtered.performance_period_end\n    )\n\n)\n\n, add_data_types as (\n\n    select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(age as integer) as age\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(performance_period_lookback as date) as performance_period_lookback\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(denominator_flag as integer) as denominator_flag\n    from eligible_population\n\n)\n\n select distinct\n      patient_id\n    , age\n    , performance_period_begin\n    , performance_period_end\n    , performance_period_lookback\n    , measure_id\n    , measure_name\n    , measure_version\n    , denominator_flag\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__patient", "sql": " __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__encounter", "sql": " __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , try_cast( null as date ) as encounter_start_date\n    , try_cast( null as date ) as encounter_end_date\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_exclude_advanced_illness", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_advanced_illness.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_advanced_illness.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_exclude_advanced_illness"], "alias": "_int_nqf2372_exclude_advanced_illness", "checksum": {"name": "sha256", "checksum": "69f15f233f2b22bd757081acdbf4d64c06ae0f73f672873304396d22d2e01d41"}, "config": {"enabled": true, "alias": "_int_nqf2372_exclude_advanced_illness", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients with frailty and advanced illness for  the reporting version of NQF 2372, Breast Cancer Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_exclude_advanced_illness", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4029467, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_exclude_advanced_illness", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND either one acute inpatient encounter with a diagnosis of advanced\n    illness\n\n    OR two outpatient, observation, ED or nonacute inpatient encounters on\n    different dates of service with an advanced illness diagnosis during\n    measurement period or the year prior to measurement period\n*/\n\nwith patients_with_frailty as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf2372__frailty') }}\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n          'Advanced Illness'\n        , 'Acute Inpatient'\n        , 'Encounter Inpatient'\n        , 'Outpatient'\n        , 'Observation'\n        , 'Emergency Department Visit'\n        , 'Nonacute Inpatient'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__condition') }}\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND one acute inpatient encounter with a diagnosis of advanced illness\n    during measurement period or the year prior to measurement period\n*/\n, acute_inpatient as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || med_claim_exclusions.concept_name\n            || ' and '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n    where med_claim_exclusions.concept_name = 'Acute Inpatient'\n        and condition_exclusions.concept_name = 'Advanced Illness'\n        and (\n            med_claim_exclusions.claim_start_date\n                between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n                and patients_with_frailty.performance_period_end\n            or med_claim_exclusions.claim_end_date\n                between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n                and patients_with_frailty.performance_period_end\n        )\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || procedure_exclusions.concept_name\n            || ' and '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n    where procedure_exclusions.concept_name = 'Acute Inpatient'\n    and condition_exclusions.concept_name = 'Advanced Illness'\n    and (\n        procedure_exclusions.procedure_date\n            between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n            and patients_with_frailty.performance_period_end\n    )\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND two outpatient, observation, ED or nonacute inpatient encounters\n    on different dates of service with an advanced illness diagnosis during\n    measurement period or the year prior to measurement period\n*/\n, nonacute_outpatient as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || med_claim_exclusions.concept_name\n            || ' and '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n    where med_claim_exclusions.concept_name in (\n              'Encounter Inpatient'\n            , 'Outpatient'\n            , 'Observation'\n            , 'Emergency Department Visit'\n            , 'Nonacute Inpatient'\n        )\n        and condition_exclusions.concept_name = 'Advanced Illness'\n        and (\n            med_claim_exclusions.claim_start_date\n                between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n                and patients_with_frailty.performance_period_end\n            or med_claim_exclusions.claim_end_date\n                between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n                and patients_with_frailty.performance_period_end\n        )\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || procedure_exclusions.concept_name\n            || ' and '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n    where procedure_exclusions.concept_name in (\n          'Encounter Inpatient'\n        , 'Outpatient'\n        , 'Observation'\n        , 'Emergency Department Visit'\n        , 'Nonacute Inpatient'\n    )\n    and condition_exclusions.concept_name = 'Advanced Illness'\n    and (\n        procedure_exclusions.procedure_date\n            between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n            and patients_with_frailty.performance_period_end\n    )\n\n)\n\n/*\n    Filter to patients who have had one acute inpatient encounter or\n    two nonacute outpatient encounters\n*/\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , count(*) as encounter_count\n    from acute_inpatient\n    group by patient_id\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , count(*) as encounter_count\n    from nonacute_outpatient\n    group by patient_id\n\n)\n\n, eligible_acute_inpatient as (\n\n    select\n          acute_inpatient.patient_id\n        , acute_inpatient.exclusion_date\n        , acute_inpatient.exclusion_reason\n    from acute_inpatient\n         left join acute_inpatient_counts\n         on acute_inpatient.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n)\n\n, eligible_nonacute_outpatient as (\n\n    select\n          nonacute_outpatient.patient_id\n        , nonacute_outpatient.exclusion_date\n        , nonacute_outpatient.exclusion_reason\n    from nonacute_outpatient\n         left join nonacute_outpatient_counts\n         on nonacute_outpatient.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n)\n\n, exclusions_unioned as (\n\n    select\n          eligible_acute_inpatient.patient_id\n        , eligible_acute_inpatient.exclusion_date\n        , eligible_acute_inpatient.exclusion_reason\n    from eligible_acute_inpatient\n\n    union all\n\n    select\n          eligible_nonacute_outpatient.patient_id\n        , eligible_nonacute_outpatient.exclusion_date\n        , eligible_nonacute_outpatient.exclusion_reason\n    from eligible_nonacute_outpatient\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom exclusions_unioned", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372__frailty", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__condition", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372__frailty", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_advanced_illness.sql", "compiled": true, "compiled_code": "\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND either one acute inpatient encounter with a diagnosis of advanced\n    illness\n\n    OR two outpatient, observation, ED or nonacute inpatient encounters on\n    different dates of service with an advanced illness diagnosis during\n    measurement period or the year prior to measurement period\n*/\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), patients_with_frailty as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf2372__frailty\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n          'Advanced Illness'\n        , 'Acute Inpatient'\n        , 'Encounter Inpatient'\n        , 'Outpatient'\n        , 'Observation'\n        , 'Emergency Department Visit'\n        , 'Nonacute Inpatient'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , claim_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.claim_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n            on conditions.code = exclusion_codes.code\n            and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND one acute inpatient encounter with a diagnosis of advanced illness\n    during measurement period or the year prior to measurement period\n*/\n, acute_inpatient as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || med_claim_exclusions.concept_name\n            || ' and '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n    where med_claim_exclusions.concept_name = 'Acute Inpatient'\n        and condition_exclusions.concept_name = 'Advanced Illness'\n        and (\n            med_claim_exclusions.claim_start_date\n                between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n                and patients_with_frailty.performance_period_end\n            or med_claim_exclusions.claim_end_date\n                between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n                and patients_with_frailty.performance_period_end\n        )\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || procedure_exclusions.concept_name\n            || ' and '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n    where procedure_exclusions.concept_name = 'Acute Inpatient'\n    and condition_exclusions.concept_name = 'Advanced Illness'\n    and (\n        procedure_exclusions.procedure_date\n            between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n            and patients_with_frailty.performance_period_end\n    )\n\n)\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for\n    frailty during the measurement period\n\n    AND two outpatient, observation, ED or nonacute inpatient encounters\n    on different dates of service with an advanced illness diagnosis during\n    measurement period or the year prior to measurement period\n*/\n, nonacute_outpatient as (\n\n    select distinct\n          patients_with_frailty.patient_id\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || med_claim_exclusions.concept_name\n            || ' and '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join med_claim_exclusions\n            on patients_with_frailty.patient_id = med_claim_exclusions.patient_id\n         inner join condition_exclusions\n            on med_claim_exclusions.claim_id = condition_exclusions.claim_id\n    where med_claim_exclusions.concept_name in (\n              'Encounter Inpatient'\n            , 'Outpatient'\n            , 'Observation'\n            , 'Emergency Department Visit'\n            , 'Nonacute Inpatient'\n        )\n        and condition_exclusions.concept_name = 'Advanced Illness'\n        and (\n            med_claim_exclusions.claim_start_date\n                between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n                and patients_with_frailty.performance_period_end\n            or med_claim_exclusions.claim_end_date\n                between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n                and patients_with_frailty.performance_period_end\n        )\n\n    union all\n\n    select distinct\n          patients_with_frailty.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || procedure_exclusions.concept_name\n            || ' and '\n            || condition_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join procedure_exclusions\n         on patients_with_frailty.patient_id = procedure_exclusions.patient_id\n         inner join condition_exclusions\n         on procedure_exclusions.patient_id = condition_exclusions.patient_id\n         and procedure_exclusions.procedure_date = condition_exclusions.recorded_date\n    where procedure_exclusions.concept_name in (\n          'Encounter Inpatient'\n        , 'Outpatient'\n        , 'Observation'\n        , 'Emergency Department Visit'\n        , 'Nonacute Inpatient'\n    )\n    and condition_exclusions.concept_name = 'Advanced Illness'\n    and (\n        procedure_exclusions.procedure_date\n            between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n            and patients_with_frailty.performance_period_end\n    )\n\n)\n\n/*\n    Filter to patients who have had one acute inpatient encounter or\n    two nonacute outpatient encounters\n*/\n, acute_inpatient_counts as (\n\n    select\n          patient_id\n        , count(*) as encounter_count\n    from acute_inpatient\n    group by patient_id\n\n)\n\n, nonacute_outpatient_counts as (\n\n    select\n          patient_id\n        , count(*) as encounter_count\n    from nonacute_outpatient\n    group by patient_id\n\n)\n\n, eligible_acute_inpatient as (\n\n    select\n          acute_inpatient.patient_id\n        , acute_inpatient.exclusion_date\n        , acute_inpatient.exclusion_reason\n    from acute_inpatient\n         left join acute_inpatient_counts\n         on acute_inpatient.patient_id = acute_inpatient_counts.patient_id\n    where acute_inpatient_counts.encounter_count >= 1\n\n)\n\n, eligible_nonacute_outpatient as (\n\n    select\n          nonacute_outpatient.patient_id\n        , nonacute_outpatient.exclusion_date\n        , nonacute_outpatient.exclusion_reason\n    from nonacute_outpatient\n         left join nonacute_outpatient_counts\n         on nonacute_outpatient.patient_id = nonacute_outpatient_counts.patient_id\n    where nonacute_outpatient_counts.encounter_count >= 2\n\n)\n\n, exclusions_unioned as (\n\n    select\n          eligible_acute_inpatient.patient_id\n        , eligible_acute_inpatient.exclusion_date\n        , eligible_acute_inpatient.exclusion_reason\n    from eligible_acute_inpatient\n\n    union all\n\n    select\n          eligible_nonacute_outpatient.patient_id\n        , eligible_nonacute_outpatient.exclusion_date\n        , eligible_nonacute_outpatient.exclusion_reason\n    from eligible_nonacute_outpatient\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom exclusions_unioned", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__condition", "sql": " __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_exclude_dementia", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_dementia.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_dementia.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_exclude_dementia"], "alias": "_int_nqf2372_exclude_dementia", "checksum": {"name": "sha256", "checksum": "2961f61e7f5fd3fd5b44a73646dba576626654750cce2f3bb18c4e477a5c1e14"}, "config": {"enabled": true, "alias": "_int_nqf2372_exclude_dementia", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients with frailty and taking dementia medications for the reporting version of NQF 2372, Breast Cancer Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_exclude_dementia", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4076061, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_exclude_dementia", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for frailty\n    during the measurement period AND a dispensed medication for dementia during the measurement period\n    or year prior to measurement period\n*/\n\nwith patients_with_frailty as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf2372__frailty') }}\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n        'Dementia Medications'\n    )\n\n)\n\n, medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code_type\n        , source_code\n        , ndc_code\n        , rxnorm_code\n    from {{ ref('quality_measures__stg_core__medication') }}\n\n)\n\n, pharmacy_claim as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , paid_date\n    from {{ ref('quality_measures__stg_pharmacy_claim') }}\n\n)\n\n, medication_exclusions as (\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.rxnorm_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'rxnorm'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.source_code = exclusion_codes.code\n            and medications.source_code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_claim_exclusions as (\n\n    select\n          pharmacy_claim.patient_id\n        , pharmacy_claim.dispensing_date\n        , pharmacy_claim.ndc_code\n        , pharmacy_claim.paid_date\n        , exclusion_codes.concept_name\n    from pharmacy_claim\n         inner join exclusion_codes\n            on pharmacy_claim.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n)\n\n, frailty_with_dementia as (\n\n    select\n          patients_with_frailty.patient_id\n        , patients_with_frailty.exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || pharmacy_claim_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join pharmacy_claim_exclusions\n            on patients_with_frailty.patient_id = pharmacy_claim_exclusions.patient_id\n    where (\n        pharmacy_claim_exclusions.dispensing_date\n            between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n            and patients_with_frailty.performance_period_end\n        or pharmacy_claim_exclusions.paid_date\n            between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n            and patients_with_frailty.performance_period_end\n    )\n\n    union all\n\n    select\n          patients_with_frailty.patient_id\n        , medication_exclusions.dispensing_date as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || medication_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join medication_exclusions\n         on patients_with_frailty.patient_id = medication_exclusions.patient_id\n    where medication_exclusions.dispensing_date\n        between {{ dbt.dateadd(datepart=\"year\", interval=-1, from_date_or_timestamp=\"patients_with_frailty.performance_period_begin\") }}\n        and patients_with_frailty.performance_period_end\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom frailty_with_dementia", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372__frailty", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__medication", "package": null, "version": null}, {"name": "quality_measures__stg_pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372__frailty", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__medication", "model.the_tuva_project.quality_measures__stg_pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_dementia.sql", "compiled": true, "compiled_code": "\n\n/*\n    Patients greater than or equal to 66 with at least one claim/encounter for frailty\n    during the measurement period AND a dispensed medication for dementia during the measurement period\n    or year prior to measurement period\n*/\n\nwith  __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as dispensing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.pharmacy_claim\n\n\n), patients_with_frailty as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf2372__frailty\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n        'Dementia Medications'\n    )\n\n)\n\n, medications as (\n\n    select\n          patient_id\n        , dispensing_date\n        , source_code_type\n        , source_code\n        , ndc_code\n        , rxnorm_code\n    from __dbt__cte__quality_measures__stg_core__medication\n\n)\n\n, pharmacy_claim as (\n\n    select\n          patient_id\n        , dispensing_date\n        , ndc_code\n        , paid_date\n    from __dbt__cte__quality_measures__stg_pharmacy_claim\n\n)\n\n, medication_exclusions as (\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.rxnorm_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'rxnorm'\n\n    union all\n\n    select\n          medications.patient_id\n        , medications.dispensing_date\n        , exclusion_codes.concept_name\n    from medications\n         inner join exclusion_codes\n            on medications.source_code = exclusion_codes.code\n            and medications.source_code_type = exclusion_codes.code_system\n\n)\n\n, pharmacy_claim_exclusions as (\n\n    select\n          pharmacy_claim.patient_id\n        , pharmacy_claim.dispensing_date\n        , pharmacy_claim.ndc_code\n        , pharmacy_claim.paid_date\n        , exclusion_codes.concept_name\n    from pharmacy_claim\n         inner join exclusion_codes\n            on pharmacy_claim.ndc_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'ndc'\n\n)\n\n, frailty_with_dementia as (\n\n    select\n          patients_with_frailty.patient_id\n        , patients_with_frailty.exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || pharmacy_claim_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join pharmacy_claim_exclusions\n            on patients_with_frailty.patient_id = pharmacy_claim_exclusions.patient_id\n    where (\n        pharmacy_claim_exclusions.dispensing_date\n            between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n            and patients_with_frailty.performance_period_end\n        or pharmacy_claim_exclusions.paid_date\n            between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n            and patients_with_frailty.performance_period_end\n    )\n\n    union all\n\n    select\n          patients_with_frailty.patient_id\n        , medication_exclusions.dispensing_date as exclusion_date\n        , patients_with_frailty.exclusion_reason\n            || ' with '\n            || medication_exclusions.concept_name\n          as exclusion_reason\n    from patients_with_frailty\n         inner join medication_exclusions\n         on patients_with_frailty.patient_id = medication_exclusions.patient_id\n    where medication_exclusions.dispensing_date\n        between \n\n    dateadd(\n        year,\n        -1,\n        patients_with_frailty.performance_period_begin\n        )\n\n\n        and patients_with_frailty.performance_period_end\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom frailty_with_dementia", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__medication", "sql": " __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as dispensing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_pharmacy_claim", "sql": " __dbt__cte__quality_measures__stg_pharmacy_claim as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.pharmacy_claim\n\n\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_exclude_hospice", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_hospice.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_hospice.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_exclude_hospice"], "alias": "_int_nqf2372_exclude_hospice", "checksum": {"name": "sha256", "checksum": "cf39611efb8664f7c8a5873de910d5aa4642e4ab4a5e3774a868d6e40b444e8b"}, "config": {"enabled": true, "alias": "_int_nqf2372_exclude_hospice", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients using hospice services for the reporting  version of NQF 2372, Breast Cancer Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_exclude_hospice", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4112878, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_exclude_hospice", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Hospice services used by patient any time during the measurement period\n*/\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n    from {{ ref('quality_measures__int_nqf2372_denominator') }}\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n          'Hospice Care Ambulatory'\n        , 'Hospice Encounter'\n    )\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , normalized_code_type\n        , normalized_code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.normalized_code = exclusion_codes.code\n             and procedures.normalized_code_type = exclusion_codes.code_system\n\n)\n\n, hospice as (\n\n    select\n          denominator.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n            on denominator.patient_id = observation_exclusions.patient_id\n    where observation_exclusions.observation_date\n        between denominator.performance_period_begin\n        and denominator.performance_period_end\n\n    union all\n\n    select\n          denominator.patient_id\n        , coalesce (\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join med_claim_exclusions\n            on denominator.patient_id = med_claim_exclusions.patient_id\n    where (\n        med_claim_exclusions.claim_start_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n        or med_claim_exclusions.claim_end_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n    )\n\n    union all\n\n    select\n          denominator.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n    where procedure_exclusions.procedure_date\n        between denominator.performance_period_begin\n        and denominator.performance_period_end\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom hospice", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372_denominator", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_hospice.sql", "compiled": true, "compiled_code": "\n\n/*\n    Hospice services used by patient any time during the measurement period\n*/\n\nwith  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n    from tuva_project_demo.quality_measures._int_nqf2372_denominator\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n          'Hospice Care Ambulatory'\n        , 'Hospice Encounter'\n    )\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , normalized_code_type\n        , normalized_code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.normalized_code = exclusion_codes.code\n             and procedures.normalized_code_type = exclusion_codes.code_system\n\n)\n\n, hospice as (\n\n    select\n          denominator.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n            on denominator.patient_id = observation_exclusions.patient_id\n    where observation_exclusions.observation_date\n        between denominator.performance_period_begin\n        and denominator.performance_period_end\n\n    union all\n\n    select\n          denominator.patient_id\n        , coalesce (\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join med_claim_exclusions\n            on denominator.patient_id = med_claim_exclusions.patient_id\n    where (\n        med_claim_exclusions.claim_start_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n        or med_claim_exclusions.claim_end_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n    )\n\n    union all\n\n    select\n          denominator.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n    where procedure_exclusions.procedure_date\n        between denominator.performance_period_begin\n        and denominator.performance_period_end\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom hospice", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_exclude_institutional", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_institutional.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_institutional.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_exclude_institutional"], "alias": "_int_nqf2372_exclude_institutional", "checksum": {"name": "sha256", "checksum": "d24105c7382317fb5122acf989e144582f62e850baa7350016e230782aeae1d6"}, "config": {"enabled": true, "alias": "_int_nqf2372_exclude_institutional", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients staying in an institution for the reporting  version of NQF 2372, Breast Cancer Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_exclude_institutional", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4156337, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_exclude_institutional", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Patients greater than or equal to 66 in Institutional Special Needs Plans (SNP)\n    or residing in long term care\n\n    Future enhancement: group claims into encounters\n*/\n\nwith denominator as (\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n    from {{ ref('quality_measures__int_nqf2372_denominator') }}\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, exclusions as (\n\n    select\n          denominator.patient_id\n        , coalesce(\n              medical_claim.claim_start_date\n            , medical_claim.claim_end_date\n          ) as exclusion_date\n        , 'Institutional or Long Term Care' as exclusion_reason\n    from denominator\n         inner join medical_claim\n         on denominator.patient_id = medical_claim.patient_id\n    where denominator.age >= 66\n    and (\n        medical_claim.claim_start_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n        or medical_claim.claim_end_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n    )\n    and place_of_service_code in ('32', '33', '34', '54', '56')\n    and {{ datediff('medical_claim.claim_start_date', 'medical_claim.claim_end_date', 'day') }} >= 90\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom exclusions", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372_denominator", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__stg_medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_institutional.sql", "compiled": true, "compiled_code": "\n\n/*\n    Patients greater than or equal to 66 in Institutional Special Needs Plans (SNP)\n    or residing in long term care\n\n    Future enhancement: group claims into encounters\n*/\n\nwith  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n), denominator as (\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n    from tuva_project_demo.quality_measures._int_nqf2372_denominator\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, exclusions as (\n\n    select\n          denominator.patient_id\n        , coalesce(\n              medical_claim.claim_start_date\n            , medical_claim.claim_end_date\n          ) as exclusion_date\n        , 'Institutional or Long Term Care' as exclusion_reason\n    from denominator\n         inner join medical_claim\n         on denominator.patient_id = medical_claim.patient_id\n    where denominator.age >= 66\n    and (\n        medical_claim.claim_start_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n        or medical_claim.claim_end_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n    )\n    and place_of_service_code in ('32', '33', '34', '54', '56')\n    and datediff(\n        day,\n        medical_claim.claim_start_date,\n        medical_claim.claim_end_date\n        ) >= 90\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom exclusions", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_exclude_mastectomy", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_mastectomy.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_mastectomy.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_exclude_mastectomy"], "alias": "_int_nqf2372_exclude_mastectomy", "checksum": {"name": "sha256", "checksum": "1d03b9f7580863adc845af8cd09d5287de5bcb9d1138260fafebf1a3cd035440"}, "config": {"enabled": true, "alias": "_int_nqf2372_exclude_mastectomy", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients with a mastectomy for the reporting  version of NQF 2372, Breast Cancer Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_exclude_mastectomy", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4191065, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_exclude_mastectomy", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Women who had a bilateral mastectomy or who have a history of a bilateral\n    mastectomy or for whom there is evidence of a right and a left\n    unilateral mastectomy\n*/\n\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n    from {{ ref('quality_measures__int_nqf2372_denominator') }}\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n          'Bilateral Mastectomy'\n        , 'History of bilateral mastectomy'\n        , 'Status Post Left Mastectomy'\n        , 'Status Post Right Mastectomy'\n        , 'Unilateral Mastectomy Left'\n        , 'Unilateral Mastectomy Right'\n        , 'Unilateral Mastectomy, Unspecified Laterality'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__condition') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n             on conditions.code = exclusion_codes.code\n             and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, all_mastectomy as (\n\n    select\n          denominator.patient_id\n        , condition_exclusions.recorded_date as exclusion_date\n        , condition_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join condition_exclusions\n            on denominator.patient_id = condition_exclusions.patient_id\n\n    union all\n\n    select\n          denominator.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n            on denominator.patient_id = observation_exclusions.patient_id\n\n    union all\n\n    select\n          denominator.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n\n)\n\n/*\n    Women who had a bilateral mastectomy or who have a history of a bilateral\n    mastectomy\n*/\n, bilateral_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Bilateral Mastectomy'\n        , 'History of bilateral mastectomy'\n    )\n\n)\n\n, right_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Status Post Right Mastectomy'\n        , 'Unilateral Mastectomy Right'\n    )\n\n)\n\n, left_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Status Post Left Mastectomy'\n        , 'Unilateral Mastectomy Left'\n    )\n\n)\n\n, unspecified_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n        'Unilateral Mastectomy, Unspecified Laterality'\n    )\n\n)\n\n/*\n    Women for whom there is evidence of a right AND a left unilateral mastectomy\n    or unspecific mastectomies on different dates\n*/\n, unilateral_mastectomy as (\n\n    select\n          right_mastectomy.patient_id\n        , right_mastectomy.exclusion_date\n        , right_mastectomy.exclusion_reason\n    from right_mastectomy\n         inner join left_mastectomy\n            on right_mastectomy.patient_id = left_mastectomy.patient_id\n\n    union all\n\n    select\n          unspecified_mastectomy.patient_id\n        , unspecified_mastectomy.exclusion_date\n        , unspecified_mastectomy.exclusion_reason\n    from unspecified_mastectomy\n         inner join unspecified_mastectomy as self_join\n            on unspecified_mastectomy.patient_id = self_join.patient_id\n            and unspecified_mastectomy.exclusion_date <> self_join.exclusion_date\n\n)\n\n, unioned as (\n\n    select * from bilateral_mastectomy\n    union all\n    select * from unilateral_mastectomy\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom unioned", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372_denominator", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__condition", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_mastectomy.sql", "compiled": true, "compiled_code": "\n\n/*\n    Women who had a bilateral mastectomy or who have a history of a bilateral\n    mastectomy or for whom there is evidence of a right and a left\n    unilateral mastectomy\n*/\n\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n    from tuva_project_demo.quality_measures._int_nqf2372_denominator\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n          'Bilateral Mastectomy'\n        , 'History of bilateral mastectomy'\n        , 'Status Post Left Mastectomy'\n        , 'Status Post Right Mastectomy'\n        , 'Unilateral Mastectomy Left'\n        , 'Unilateral Mastectomy Right'\n        , 'Unilateral Mastectomy, Unspecified Laterality'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n             on conditions.code = exclusion_codes.code\n             and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, all_mastectomy as (\n\n    select\n          denominator.patient_id\n        , condition_exclusions.recorded_date as exclusion_date\n        , condition_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join condition_exclusions\n            on denominator.patient_id = condition_exclusions.patient_id\n\n    union all\n\n    select\n          denominator.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n            on denominator.patient_id = observation_exclusions.patient_id\n\n    union all\n\n    select\n          denominator.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n\n)\n\n/*\n    Women who had a bilateral mastectomy or who have a history of a bilateral\n    mastectomy\n*/\n, bilateral_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Bilateral Mastectomy'\n        , 'History of bilateral mastectomy'\n    )\n\n)\n\n, right_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Status Post Right Mastectomy'\n        , 'Unilateral Mastectomy Right'\n    )\n\n)\n\n, left_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n          'Status Post Left Mastectomy'\n        , 'Unilateral Mastectomy Left'\n    )\n\n)\n\n, unspecified_mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from all_mastectomy\n    where exclusion_reason in (\n        'Unilateral Mastectomy, Unspecified Laterality'\n    )\n\n)\n\n/*\n    Women for whom there is evidence of a right AND a left unilateral mastectomy\n    or unspecific mastectomies on different dates\n*/\n, unilateral_mastectomy as (\n\n    select\n          right_mastectomy.patient_id\n        , right_mastectomy.exclusion_date\n        , right_mastectomy.exclusion_reason\n    from right_mastectomy\n         inner join left_mastectomy\n            on right_mastectomy.patient_id = left_mastectomy.patient_id\n\n    union all\n\n    select\n          unspecified_mastectomy.patient_id\n        , unspecified_mastectomy.exclusion_date\n        , unspecified_mastectomy.exclusion_reason\n    from unspecified_mastectomy\n         inner join unspecified_mastectomy as self_join\n            on unspecified_mastectomy.patient_id = self_join.patient_id\n            and unspecified_mastectomy.exclusion_date <> self_join.exclusion_date\n\n)\n\n, unioned as (\n\n    select * from bilateral_mastectomy\n    union all\n    select * from unilateral_mastectomy\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom unioned", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__condition", "sql": " __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_exclude_palliative", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_palliative.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_palliative.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_exclude_palliative"], "alias": "_int_nqf2372_exclude_palliative", "checksum": {"name": "sha256", "checksum": "c918c4c5bd88f84a06ba57d6bb47c5aa2ad66a028c856e6a11823c9615bed9f6"}, "config": {"enabled": true, "alias": "_int_nqf2372_exclude_palliative", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients using palliative services for the reporting  version of NQF 2372, Breast Cancer Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_exclude_palliative", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4233966, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_exclude_palliative", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Palliative care services used by patient any time during the measurement period\n*/\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n    from {{ ref('quality_measures__int_nqf2372_denominator') }}\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n          'Palliative Care Encounter'\n        , 'Palliative Care Intervention'\n    )\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, palliative_care as (\n\n    select\n          denominator.patient_id\n        , coalesce (\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join med_claim_exclusions\n            on denominator.patient_id = med_claim_exclusions.patient_id\n    where (\n        med_claim_exclusions.claim_start_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n        or med_claim_exclusions.claim_end_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n    )\n\n    union all\n\n    select\n          denominator.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n         on denominator.patient_id = observation_exclusions.patient_id\n    where observation_exclusions.observation_date\n        between denominator.performance_period_begin\n        and denominator.performance_period_end\n\n    union all\n\n    select\n          denominator.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n    where procedure_exclusions.procedure_date\n        between denominator.performance_period_begin\n        and denominator.performance_period_end\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom palliative_care", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372_denominator", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclude_palliative.sql", "compiled": true, "compiled_code": "\n\n/*\n    Palliative care services used by patient any time during the measurement period\n*/\nwith  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n    from tuva_project_demo.quality_measures._int_nqf2372_denominator\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n          'Palliative Care Encounter'\n        , 'Palliative Care Intervention'\n    )\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, palliative_care as (\n\n    select\n          denominator.patient_id\n        , coalesce (\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join med_claim_exclusions\n            on denominator.patient_id = med_claim_exclusions.patient_id\n    where (\n        med_claim_exclusions.claim_start_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n        or med_claim_exclusions.claim_end_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n    )\n\n    union all\n\n    select\n          denominator.patient_id\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n         on denominator.patient_id = observation_exclusions.patient_id\n    where observation_exclusions.observation_date\n        between denominator.performance_period_begin\n        and denominator.performance_period_end\n\n    union all\n\n    select\n          denominator.patient_id\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n    where procedure_exclusions.procedure_date\n        between denominator.performance_period_begin\n        and denominator.performance_period_end\n\n)\n\nselect\n      patient_id\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom palliative_care", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_exclusions": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_exclusions", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclusions.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclusions.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclusions", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_exclusions"], "alias": "_int_nqf2372_exclusions", "checksum": {"name": "sha256", "checksum": "c6a26a6b0fb05ea2806a8181b62d61e27d1ba02c27f21929481c879ebd33b1fb"}, "config": {"enabled": true, "alias": "_int_nqf2372_exclusions", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Combined exclusion logic for the reporting version of NQF 2372, Breast Cancer  Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_begin": {"name": "performance_period_begin", "description": "Beginning date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_end": {"name": "performance_period_end", "description": "Ending date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_id": {"name": "measure_id", "description": "Unique measure identification number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_name": {"name": "measure_name", "description": "Name of the measure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_version": {"name": "measure_version", "description": "Version of the measure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_flag": {"name": "exclusion_flag", "description": "Specifications of those characteristics that would cause groups of  individuals to be removed from the numerator and/or denominator of  a measure although they experience the denominator index event.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date and timestamp of the dbt run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_exclusions", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4271727, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_exclusions", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Eligible population from the denominator model before exclusions\n*/\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from {{ ref('quality_measures__int_nqf2372_denominator') }}\n\n)\n\n, advanced_illness as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf2372_exclude_advanced_illness') }}\n\n)\n\n, dementia as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf2372_exclude_dementia') }}\n\n)\n\n, hospice as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf2372_exclude_hospice') }}\n\n)\n\n, institutional as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf2372_exclude_institutional') }}\n\n)\n\n, mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf2372_exclude_mastectomy') }}\n\n)\n\n, palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from {{ ref('quality_measures__int_nqf2372_exclude_palliative') }}\n\n)\n\n, denominator_with_advanced_illness as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when advanced_illness.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , advanced_illness.exclusion_date\n        , advanced_illness.exclusion_reason\n    from denominator\n         left join advanced_illness\n            on denominator.patient_id = advanced_illness.patient_id\n\n)\n\n, denominator_with_dementia as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when dementia.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , dementia.exclusion_date\n        , dementia.exclusion_reason\n    from denominator\n         left join dementia\n            on denominator.patient_id = dementia.patient_id\n\n)\n\n, denominator_with_hospice as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when hospice.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , hospice.exclusion_date\n        , hospice.exclusion_reason\n    from denominator\n         left join hospice\n            on denominator.patient_id = hospice.patient_id\n\n)\n\n, denominator_with_institutional as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when institutional.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , institutional.exclusion_date\n        , institutional.exclusion_reason\n    from denominator\n         left join institutional\n            on denominator.patient_id = institutional.patient_id\n\n)\n\n, denominator_with_mastectomy as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when mastectomy.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , mastectomy.exclusion_date\n        , mastectomy.exclusion_reason\n    from denominator\n         left join mastectomy\n            on denominator.patient_id = mastectomy.patient_id\n\n)\n\n, denominator_with_palliative as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when palliative.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , palliative.exclusion_date\n        , palliative.exclusion_reason\n    from denominator\n         left join palliative\n            on denominator.patient_id = palliative.patient_id\n\n)\n\n, exclusions_unioned as (\n\n    select * from denominator_with_advanced_illness\n    union all\n    select * from denominator_with_dementia\n    union all\n    select * from denominator_with_hospice\n    union all\n    select * from denominator_with_institutional\n    union all\n    select * from denominator_with_mastectomy\n    union all\n    select * from denominator_with_palliative\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as {{ dbt.type_string() }}) as measure_id\n        , cast(measure_name as {{ dbt.type_string() }}) as measure_name\n        , cast(measure_version as {{ dbt.type_string() }}) as measure_version\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as {{ dbt.type_string() }}) as exclusion_reason\n        , cast(exclusion_flag as integer) as exclusion_flag\n    from exclusions_unioned\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372_denominator", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_exclude_advanced_illness", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_exclude_dementia", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_exclude_hospice", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_exclude_institutional", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_exclude_mastectomy", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_exclude_palliative", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_exclusions.sql", "compiled": true, "compiled_code": "\n\n/*\n    Eligible population from the denominator model before exclusions\n*/\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from tuva_project_demo.quality_measures._int_nqf2372_denominator\n\n)\n\n, advanced_illness as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf2372_exclude_advanced_illness\n\n)\n\n, dementia as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf2372_exclude_dementia\n\n)\n\n, hospice as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf2372_exclude_hospice\n\n)\n\n, institutional as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf2372_exclude_institutional\n\n)\n\n, mastectomy as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf2372_exclude_mastectomy\n\n)\n\n, palliative as (\n\n    select\n          patient_id\n        , exclusion_date\n        , exclusion_reason\n    from tuva_project_demo.quality_measures._int_nqf2372_exclude_palliative\n\n)\n\n, denominator_with_advanced_illness as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when advanced_illness.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , advanced_illness.exclusion_date\n        , advanced_illness.exclusion_reason\n    from denominator\n         left join advanced_illness\n            on denominator.patient_id = advanced_illness.patient_id\n\n)\n\n, denominator_with_dementia as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when dementia.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , dementia.exclusion_date\n        , dementia.exclusion_reason\n    from denominator\n         left join dementia\n            on denominator.patient_id = dementia.patient_id\n\n)\n\n, denominator_with_hospice as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when hospice.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , hospice.exclusion_date\n        , hospice.exclusion_reason\n    from denominator\n         left join hospice\n            on denominator.patient_id = hospice.patient_id\n\n)\n\n, denominator_with_institutional as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when institutional.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , institutional.exclusion_date\n        , institutional.exclusion_reason\n    from denominator\n         left join institutional\n            on denominator.patient_id = institutional.patient_id\n\n)\n\n, denominator_with_mastectomy as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when mastectomy.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , mastectomy.exclusion_date\n        , mastectomy.exclusion_reason\n    from denominator\n         left join mastectomy\n            on denominator.patient_id = mastectomy.patient_id\n\n)\n\n, denominator_with_palliative as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when palliative.patient_id is not null then 1\n            else 0\n          end as exclusion_flag\n        , palliative.exclusion_date\n        , palliative.exclusion_reason\n    from denominator\n         left join palliative\n            on denominator.patient_id = palliative.patient_id\n\n)\n\n, exclusions_unioned as (\n\n    select * from denominator_with_advanced_illness\n    union all\n    select * from denominator_with_dementia\n    union all\n    select * from denominator_with_hospice\n    union all\n    select * from denominator_with_institutional\n    union all\n    select * from denominator_with_mastectomy\n    union all\n    select * from denominator_with_palliative\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(exclusion_flag as integer) as exclusion_flag\n    from exclusions_unioned\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , exclusion_date\n    , exclusion_reason\n    , exclusion_flag\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_long": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_long", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_long.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_long.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_long", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_long"], "alias": "_int_nqf2372_long", "checksum": {"name": "sha256", "checksum": "5154133f60202353f7f9e3ad89ff63f8a1361d30f21892a764b763b38717ec79"}, "config": {"enabled": true, "alias": "_int_nqf2372_long", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Final preparation of the reporting version of NQF 2372, Breast Cancer  Screening before combining with other measures.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "denominator_flag": {"name": "denominator_flag", "description": "The denominator is associated with a given patient population that  may be counted as eligible to meet a measure\u2019s inclusion requirements.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numerator_flag": {"name": "numerator_flag", "description": "The numerator reflects the subset of patients in the denominator  for whom a particular service has been provided or for whom a  particular outcome has been achieved.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_flag": {"name": "exclusion_flag", "description": "Specifications of those characteristics that would cause groups of  individuals to be removed from the numerator and/or denominator of  a measure although they experience the denominator index event.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_date": {"name": "evidence_date", "description": "Date of event or service that places patient in the numerator.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_date": {"name": "exclusion_date", "description": "Date of event or service that excludes patient from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclusion_reason": {"name": "exclusion_reason", "description": "Reason (usually the value set concept name) that excludes patient  from the measure.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_begin": {"name": "performance_period_begin", "description": "Beginning date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_end": {"name": "performance_period_end", "description": "Ending date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_id": {"name": "measure_id", "description": "Unique measure identification number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_name": {"name": "measure_name", "description": "Name of the measure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_version": {"name": "measure_version", "description": "Version of the measure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date and timestamp of the dbt run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_long", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4312081, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_long", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/* selecting the full patient population as the grain of this table */\nwith patient as (\n\n    select distinct patient_id\n    from {{ ref('quality_measures__stg_core__patient') }}\n\n)\n\n, denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from {{ ref('quality_measures__int_nqf2372_denominator') }}\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , evidence_date\n        , numerator_flag\n    from {{ ref('quality_measures__int_nqf2372_numerator') }}\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_flag\n    from {{ ref('quality_measures__int_nqf2372_exclusions') }}\n\n)\n\n, measure_flags as (\n\n    select\n          patient.patient_id\n        , case\n            when denominator.patient_id is not null\n            then denominator.denominator_flag\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null\n            then numerator.numerator_flag\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null\n            then exclusions.exclusion_flag\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n    from patient\n        left join denominator\n            on patient.patient_id = denominator.patient_id\n        left join numerator\n            on patient.patient_id = numerator.patient_id\n        left join exclusions\n            on patient.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, add_rownum as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , row_number() over(\n            partition by\n                  patient_id\n                , performance_period_begin\n                , performance_period_end\n                , measure_id\n                , measure_name\n            order by\n                  evidence_date desc nulls last\n                , exclusion_date desc nulls last\n          ) as row_num\n    from measure_flags\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from add_rownum\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as {{ dbt.type_string() }}) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as {{ dbt.type_string() }}) as measure_id\n        , cast(measure_name as {{ dbt.type_string() }}) as measure_name\n        , cast(measure_version as {{ dbt.type_string() }}) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "quality_measures__stg_core__patient", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_denominator", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_numerator", "package": null, "version": null}, {"name": "quality_measures__int_nqf2372_exclusions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__patient", "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "model.the_tuva_project.quality_measures__int_nqf2372_exclusions"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_long.sql", "compiled": true, "compiled_code": "\n\n/* selecting the full patient population as the grain of this table */\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n), patient as (\n\n    select distinct patient_id\n    from __dbt__cte__quality_measures__stg_core__patient\n\n)\n\n, denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , denominator_flag\n    from tuva_project_demo.quality_measures._int_nqf2372_denominator\n\n)\n\n, numerator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , evidence_date\n        , numerator_flag\n    from tuva_project_demo.quality_measures._int_nqf2372_numerator\n\n)\n\n, exclusions as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , exclusion_date\n        , exclusion_reason\n        , exclusion_flag\n    from tuva_project_demo.quality_measures._int_nqf2372_exclusions\n\n)\n\n, measure_flags as (\n\n    select\n          patient.patient_id\n        , case\n            when denominator.patient_id is not null\n            then denominator.denominator_flag\n            else null\n          end as denominator_flag\n        , case\n            when numerator.patient_id is not null\n            then numerator.numerator_flag\n            else null\n          end as numerator_flag\n        , case\n            when exclusions.patient_id is not null\n            then exclusions.exclusion_flag\n            else null\n          end as exclusion_flag\n        , numerator.evidence_date\n        , exclusions.exclusion_date\n        , exclusions.exclusion_reason\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n    from patient\n        left join denominator\n            on patient.patient_id = denominator.patient_id\n        left join numerator\n            on patient.patient_id = numerator.patient_id\n        left join exclusions\n            on patient.patient_id = exclusions.patient_id\n\n)\n\n/*\n    Deduplicate measure rows by latest evidence date or exclusion date\n*/\n, add_rownum as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n        , row_number() over(\n            partition by\n                  patient_id\n                , performance_period_begin\n                , performance_period_end\n                , measure_id\n                , measure_name\n            order by\n                  evidence_date desc nulls last\n                , exclusion_date desc nulls last\n          ) as row_num\n    from measure_flags\n\n)\n\n, deduped as (\n\n    select\n          patient_id\n        , denominator_flag\n        , numerator_flag\n        , exclusion_flag\n        , evidence_date\n        , exclusion_date\n        , exclusion_reason\n        , performance_period_begin\n        , performance_period_end\n        , measure_id\n        , measure_name\n        , measure_version\n    from add_rownum\n    where row_num = 1\n\n)\n\n, add_data_types as (\n\n    select\n          cast(patient_id as TEXT) as patient_id\n        , cast(denominator_flag as integer) as denominator_flag\n        , cast(numerator_flag as integer) as numerator_flag\n        , cast(exclusion_flag as integer) as exclusion_flag\n        , cast(evidence_date as date) as evidence_date\n        , cast(exclusion_date as date) as exclusion_date\n        , cast(exclusion_reason as TEXT) as exclusion_reason\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n    from deduped\n\n)\n\nselect\n      patient_id\n    , denominator_flag\n    , numerator_flag\n    , exclusion_flag\n    , evidence_date\n    , exclusion_date\n    , exclusion_reason\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__patient", "sql": " __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372_numerator": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372_numerator", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_numerator.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_numerator.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372_numerator"], "alias": "_int_nqf2372_numerator", "checksum": {"name": "sha256", "checksum": "0cfdf5a2bf37c8de59fd04d624c654e0f3c50135ade5672540f56e99e316ad28"}, "config": {"enabled": true, "alias": "_int_nqf2372_numerator", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Numerator logic for the reporting version of NQF 2372, Breast Cancer  Screening.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique patient_id for each person.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_begin": {"name": "performance_period_begin", "description": "Beginning date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "performance_period_end": {"name": "performance_period_end", "description": "Ending date of the performance or measurement period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_id": {"name": "measure_id", "description": "Unique measure identification number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_name": {"name": "measure_name", "description": "Name of the measure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measure_version": {"name": "measure_version", "description": "Version of the measure.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_date": {"name": "evidence_date", "description": "Date of event or service that places patient in the numerator.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numerator_flag": {"name": "numerator_flag", "description": "The numerator reflects the subset of patients in the denominator  for whom a particular service has been provided or for whom a  particular outcome has been achieved.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The date and timestamp of the dbt run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372_numerator", "tags": "quality_measures", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4349842, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372_numerator", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n/*\n    Eligible population from the denominator model before exclusions\n*/\nwith denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , performance_period_lookback\n        , measure_id\n        , measure_name\n        , measure_version\n    from {{ ref('quality_measures__int_nqf2372_denominator') }}\n\n)\n\n, mammography_codes as (\n\n    select\n          code\n        , code_system\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name = 'Mammography'\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce(\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, qualifying_claims as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n    from medical_claim\n         inner join mammography_codes\n            on medical_claim.hcpcs_code = mammography_codes.code\n    where mammography_codes.code_system = 'hcpcs'\n\n)\n\n, qualifying_observations as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n    from observations\n         inner join mammography_codes\n             on observations.code = mammography_codes.code\n             and observations.code_type = mammography_codes.code_system\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n         inner join mammography_codes\n             on procedures.code = mammography_codes.code\n             and procedures.code_type = mammography_codes.code_system\n\n)\n\n/*\n    Check if patients in the eligible population have had a screening,\n    diagnostic, film, digital or digital breast tomosynthesis (3D)\n    mammography results documented and reviewed.\n*/\n\n, patients_with_mammograms as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.performance_period_lookback\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when qualifying_claims.claim_start_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_claims.claim_start_date\n            when qualifying_claims.claim_end_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_claims.claim_end_date\n            when qualifying_observations.observation_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_observations.observation_date\n            when qualifying_procedures.procedure_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_procedures.procedure_date\n            else null\n          end as evidence_date\n        , case\n            when qualifying_claims.claim_start_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_claims.claim_end_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_observations.observation_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_procedures.procedure_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            else 0\n          end as numerator_flag\n    from denominator\n         left join qualifying_claims\n            on denominator.patient_id = qualifying_claims.patient_id\n        left join qualifying_observations\n            on denominator.patient_id = qualifying_observations.patient_id\n        left join qualifying_procedures\n            on denominator.patient_id = qualifying_procedures.patient_id\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as {{ dbt.type_string() }}) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as {{ dbt.type_string() }}) as measure_id\n        , cast(measure_name as {{ dbt.type_string() }}) as measure_name\n        , cast(measure_version as {{ dbt.type_string() }}) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(numerator_flag as integer) as numerator_flag\n    from patients_with_mammograms\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , numerator_flag\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom add_data_types", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372_denominator", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372_numerator.sql", "compiled": true, "compiled_code": "\n\n/*\n    Eligible population from the denominator model before exclusions\n*/\nwith  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , performance_period_begin\n        , performance_period_end\n        , performance_period_lookback\n        , measure_id\n        , measure_name\n        , measure_version\n    from tuva_project_demo.quality_measures._int_nqf2372_denominator\n\n)\n\n, mammography_codes as (\n\n    select\n          code\n        , code_system\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name = 'Mammography'\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce(\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce(\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, qualifying_claims as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n    from medical_claim\n         inner join mammography_codes\n            on medical_claim.hcpcs_code = mammography_codes.code\n    where mammography_codes.code_system = 'hcpcs'\n\n)\n\n, qualifying_observations as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n    from observations\n         inner join mammography_codes\n             on observations.code = mammography_codes.code\n             and observations.code_type = mammography_codes.code_system\n)\n\n, qualifying_procedures as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n    from procedures\n         inner join mammography_codes\n             on procedures.code = mammography_codes.code\n             and procedures.code_type = mammography_codes.code_system\n\n)\n\n/*\n    Check if patients in the eligible population have had a screening,\n    diagnostic, film, digital or digital breast tomosynthesis (3D)\n    mammography results documented and reviewed.\n*/\n\n, patients_with_mammograms as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , denominator.performance_period_lookback\n        , denominator.measure_id\n        , denominator.measure_name\n        , denominator.measure_version\n        , case\n            when qualifying_claims.claim_start_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_claims.claim_start_date\n            when qualifying_claims.claim_end_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_claims.claim_end_date\n            when qualifying_observations.observation_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_observations.observation_date\n            when qualifying_procedures.procedure_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then qualifying_procedures.procedure_date\n            else null\n          end as evidence_date\n        , case\n            when qualifying_claims.claim_start_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_claims.claim_end_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_observations.observation_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            when qualifying_procedures.procedure_date\n                between denominator.performance_period_lookback\n                and denominator.performance_period_end\n                then 1\n            else 0\n          end as numerator_flag\n    from denominator\n         left join qualifying_claims\n            on denominator.patient_id = qualifying_claims.patient_id\n        left join qualifying_observations\n            on denominator.patient_id = qualifying_observations.patient_id\n        left join qualifying_procedures\n            on denominator.patient_id = qualifying_procedures.patient_id\n\n)\n\n, add_data_types as (\n\n     select distinct\n          cast(patient_id as TEXT) as patient_id\n        , cast(performance_period_begin as date) as performance_period_begin\n        , cast(performance_period_end as date) as performance_period_end\n        , cast(measure_id as TEXT) as measure_id\n        , cast(measure_name as TEXT) as measure_name\n        , cast(measure_version as TEXT) as measure_version\n        , cast(evidence_date as date) as evidence_date\n        , cast(numerator_flag as integer) as numerator_flag\n    from patients_with_mammograms\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , measure_id\n    , measure_name\n    , measure_version\n    , evidence_date\n    , numerator_flag\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom add_data_types", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372__frailty": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372__frailty", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372__frailty.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372__frailty.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__frailty", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372__frailty"], "alias": "_int_nqf2372__frailty", "checksum": {"name": "sha256", "checksum": "03fec5d7df9045ff25d56ab1d0b5449b04371a917ac4c002ce589f1f69f3dd88"}, "config": {"enabled": true, "alias": "_int_nqf2372__frailty", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Exclusion logic for patients with frailty used by other exclusion models.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372__frailty", "tags": "quality_measures", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3945115, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372__frailty", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n/*\n    This concept is used in multiple exclusions. Patients greater than\n    or equal to 66 with at least one claim/encounter for frailty during\n    the measurement period.\n*/\nwith denominator as (\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n    from {{ ref('quality_measures__int_nqf2372_denominator') }}\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from {{ ref('quality_measures__value_sets') }}\n    where concept_name in (\n          'Frailty Device'\n        , 'Frailty Diagnosis'\n        , 'Frailty Encounter'\n        , 'Frailty Symptom'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__condition') }}\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from {{ ref('quality_measures__stg_medical_claim') }}\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__observation') }}\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from {{ ref('quality_measures__stg_core__procedure') }}\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n             on conditions.code = exclusion_codes.code\n             and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_frailty as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , condition_exclusions.recorded_date as exclusion_date\n        , condition_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join condition_exclusions\n            on denominator.patient_id = condition_exclusions.patient_id\n    where denominator.age >= 66\n        and condition_exclusions.concept_name in (\n              'Frailty Device'\n            , 'Frailty Diagnosis'\n            , 'Frailty Encounter'\n            , 'Frailty Symptom'\n        )\n        and condition_exclusions.recorded_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n\n    union all\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join med_claim_exclusions\n            on denominator.patient_id = med_claim_exclusions.patient_id\n    where denominator.age >= 66\n        and med_claim_exclusions.concept_name in (\n              'Frailty Device'\n            , 'Frailty Diagnosis'\n            , 'Frailty Encounter'\n            , 'Frailty Symptom'\n        )\n        and (\n            med_claim_exclusions.claim_start_date\n                between denominator.performance_period_begin\n                and denominator.performance_period_end\n            or med_claim_exclusions.claim_end_date\n                between denominator.performance_period_begin\n                and denominator.performance_period_end\n        )\n\n    union all\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n            on denominator.patient_id = observation_exclusions.patient_id\n    where denominator.age >= 66\n        and observation_exclusions.concept_name in (\n              'Frailty Device'\n            , 'Frailty Diagnosis'\n            , 'Frailty Encounter'\n            , 'Frailty Symptom'\n        )\n        and observation_exclusions.observation_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n\n    union all\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n    where denominator.age >= 66\n        and procedure_exclusions.concept_name in (\n              'Frailty Device'\n            , 'Frailty Diagnosis'\n            , 'Frailty Encounter'\n            , 'Frailty Symptom'\n        )\n        and procedure_exclusions.procedure_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , exclusion_date\n    , exclusion_reason\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom patients_with_frailty", "language": "sql", "refs": [{"name": "quality_measures__int_nqf2372_denominator", "package": null, "version": null}, {"name": "quality_measures__value_sets", "package": null, "version": null}, {"name": "quality_measures__stg_core__condition", "package": null, "version": null}, {"name": "quality_measures__stg_medical_claim", "package": null, "version": null}, {"name": "quality_measures__stg_core__observation", "package": null, "version": null}, {"name": "quality_measures__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "seed.the_tuva_project.quality_measures__value_sets", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_medical_claim", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372__frailty.sql", "compiled": true, "compiled_code": "\n/*\n    This concept is used in multiple exclusions. Patients greater than\n    or equal to 66 with at least one claim/encounter for frailty during\n    the measurement period.\n*/\nwith  __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n),  __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n),  __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n),  __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n), denominator as (\n\n    select\n          patient_id\n        , age\n        , performance_period_begin\n        , performance_period_end\n    from tuva_project_demo.quality_measures._int_nqf2372_denominator\n\n)\n\n, exclusion_codes as (\n\n    select\n          code\n        , code_system\n        , concept_name\n    from tuva_project_demo.quality_measures._value_set_codes\n    where concept_name in (\n          'Frailty Device'\n        , 'Frailty Diagnosis'\n        , 'Frailty Encounter'\n        , 'Frailty Symptom'\n    )\n\n)\n\n, conditions as (\n\n    select\n          patient_id\n        , recorded_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__condition\n\n)\n\n, medical_claim as (\n\n    select\n          patient_id\n        , claim_start_date\n        , claim_end_date\n        , hcpcs_code\n        , place_of_service_code\n    from __dbt__cte__quality_measures__stg_medical_claim\n\n)\n\n, observations as (\n\n    select\n          patient_id\n        , observation_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__observation\n\n)\n\n, procedures as (\n\n    select\n          patient_id\n        , procedure_date\n        , coalesce (\n              normalized_code_type\n            , case\n                when lower(source_code_type) = 'cpt' then 'hcpcs'\n                when lower(source_code_type) = 'snomed' then 'snomed-ct'\n                else lower(source_code_type)\n              end\n          ) as code_type\n        , coalesce (\n              normalized_code\n            , source_code\n          ) as code\n    from __dbt__cte__quality_measures__stg_core__procedure\n\n)\n\n, condition_exclusions as (\n\n    select\n          conditions.patient_id\n        , conditions.recorded_date\n        , exclusion_codes.concept_name\n    from conditions\n         inner join exclusion_codes\n             on conditions.code = exclusion_codes.code\n             and conditions.code_type = exclusion_codes.code_system\n\n)\n\n, med_claim_exclusions as (\n\n    select\n          medical_claim.patient_id\n        , medical_claim.claim_start_date\n        , medical_claim.claim_end_date\n        , medical_claim.hcpcs_code\n        , exclusion_codes.concept_name\n    from medical_claim\n         inner join exclusion_codes\n            on medical_claim.hcpcs_code = exclusion_codes.code\n    where exclusion_codes.code_system = 'hcpcs'\n\n)\n\n, observation_exclusions as (\n\n    select\n          observations.patient_id\n        , observations.observation_date\n        , exclusion_codes.concept_name\n    from observations\n         inner join exclusion_codes\n             on observations.code = exclusion_codes.code\n             and observations.code_type = exclusion_codes.code_system\n\n)\n\n, procedure_exclusions as (\n\n    select\n          procedures.patient_id\n        , procedures.procedure_date\n        , exclusion_codes.concept_name\n    from procedures\n         inner join exclusion_codes\n             on procedures.code = exclusion_codes.code\n             and procedures.code_type = exclusion_codes.code_system\n\n)\n\n, patients_with_frailty as (\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , condition_exclusions.recorded_date as exclusion_date\n        , condition_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join condition_exclusions\n            on denominator.patient_id = condition_exclusions.patient_id\n    where denominator.age >= 66\n        and condition_exclusions.concept_name in (\n              'Frailty Device'\n            , 'Frailty Diagnosis'\n            , 'Frailty Encounter'\n            , 'Frailty Symptom'\n        )\n        and condition_exclusions.recorded_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n\n    union all\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , coalesce(\n              med_claim_exclusions.claim_start_date\n            , med_claim_exclusions.claim_end_date\n          ) as exclusion_date\n        , med_claim_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join med_claim_exclusions\n            on denominator.patient_id = med_claim_exclusions.patient_id\n    where denominator.age >= 66\n        and med_claim_exclusions.concept_name in (\n              'Frailty Device'\n            , 'Frailty Diagnosis'\n            , 'Frailty Encounter'\n            , 'Frailty Symptom'\n        )\n        and (\n            med_claim_exclusions.claim_start_date\n                between denominator.performance_period_begin\n                and denominator.performance_period_end\n            or med_claim_exclusions.claim_end_date\n                between denominator.performance_period_begin\n                and denominator.performance_period_end\n        )\n\n    union all\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , observation_exclusions.observation_date as exclusion_date\n        , observation_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join observation_exclusions\n            on denominator.patient_id = observation_exclusions.patient_id\n    where denominator.age >= 66\n        and observation_exclusions.concept_name in (\n              'Frailty Device'\n            , 'Frailty Diagnosis'\n            , 'Frailty Encounter'\n            , 'Frailty Symptom'\n        )\n        and observation_exclusions.observation_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n\n    union all\n\n    select\n          denominator.patient_id\n        , denominator.performance_period_begin\n        , denominator.performance_period_end\n        , procedure_exclusions.procedure_date as exclusion_date\n        , procedure_exclusions.concept_name as exclusion_reason\n    from denominator\n         inner join procedure_exclusions\n            on denominator.patient_id = procedure_exclusions.patient_id\n    where denominator.age >= 66\n        and procedure_exclusions.concept_name in (\n              'Frailty Device'\n            , 'Frailty Diagnosis'\n            , 'Frailty Encounter'\n            , 'Frailty Symptom'\n        )\n        and procedure_exclusions.procedure_date\n            between denominator.performance_period_begin\n            and denominator.performance_period_end\n\n)\n\nselect\n      patient_id\n    , performance_period_begin\n    , performance_period_end\n    , exclusion_date\n    , exclusion_reason\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom patients_with_frailty", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__condition", "sql": " __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_medical_claim", "sql": " __dbt__cte__quality_measures__stg_medical_claim as (\n\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}, {"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__int_nqf2372__performance_period": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__int_nqf2372__performance_period", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372__performance_period.sql", "original_file_path": "models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372__performance_period.sql", "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period", "fqn": ["the_tuva_project", "quality_measures", "intermediate", "nqf2372_breast_cancer_screening", "quality_measures__int_nqf2372__performance_period"], "alias": "_int_nqf2372__performance_period", "checksum": {"name": "sha256", "checksum": "325f2b8405e1c308fe0ce98776cdda1da15e499c7ebfc1f7bad6e4731c12671e"}, "config": {"enabled": true, "alias": "_int_nqf2372__performance_period", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Performance Period definition for Breast Cancer screening.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_int_nqf2372__performance_period", "tags": "quality_measures", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.3908577, "relation_name": "tuva_project_demo.quality_measures._int_nqf2372__performance_period", "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n{%- set measure_id -%}\n(select id\nfrom {{ ref('quality_measures__measures') }}\nwhere id = 'NQF2372')\n{%- endset -%}\n\n{%- set measure_name -%}\n(select name\nfrom {{ ref('quality_measures__measures') }}\nwhere id = 'NQF2372')\n{%- endset -%}\n\n{%- set measure_version -%}\n(select version\nfrom {{ ref('quality_measures__measures') }}\nwhere id = 'NQF2372')\n{%- endset -%}\n\n/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        {% if var('quality_measures_period_end',False) == False -%}\n        {{ last_day(dbt.current_timestamp(), 'year') }}\n        {% else -%}\n        cast('{{ var('quality_measures_period_end') }}' as date)\n        {%- endif %}\n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , {{ dbt.dateadd (\n              datepart = \"day\"\n            , interval = +1\n            , from_date_or_timestamp =\n                dbt.dateadd (\n                      datepart = \"year\"\n                    , interval = -1\n                    , from_date_or_timestamp = \"performance_period_end\"\n            )\n          ) }} as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback period to 27 months prior to the end of the\n    performance period\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , {{ dbt.dateadd (\n              datepart = \"month\"\n            , interval = -27\n            , from_date_or_timestamp = \"performance_period_end\"\n          ) }} as performance_period_lookback\n    from period_begin\n\n\n)\n\nselect\n      cast({{ measure_id }} as {{ dbt.type_string() }}) as measure_id\n    , cast({{ measure_name }} as {{ dbt.type_string() }}) as measure_name\n    , cast({{ measure_version }} as {{ dbt.type_string() }}) as measure_version\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_lookback as date) as performance_period_lookback\nfrom period_lookback", "language": "sql", "refs": [{"name": "quality_measures__measures", "package": null, "version": null}, {"name": "quality_measures__measures", "package": null, "version": null}, {"name": "quality_measures__measures", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.type_string"], "nodes": ["seed.the_tuva_project.quality_measures__measures"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/intermediate/nqf2372_breast_cancer_screening/quality_measures__int_nqf2372__performance_period.sql", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast('2018-12-31' as date)\n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    dateadd(\n        day,\n        1,\n        \n\n    dateadd(\n        year,\n        -1,\n        performance_period_end\n        )\n\n\n        )\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback period to 27 months prior to the end of the\n    performance period\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    dateadd(\n        month,\n        -27,\n        performance_period_end\n        )\n\n as performance_period_lookback\n    from period_begin\n\n\n)\n\nselect\n      cast((select id\nfrom tuva_project_demo.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_id\n    , cast((select name\nfrom tuva_project_demo.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_name\n    , cast((select version\nfrom tuva_project_demo.quality_measures._value_set_measures\nwhere id = 'NQF2372') as TEXT) as measure_version\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_lookback as date) as performance_period_lookback\nfrom period_lookback", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_core__condition": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_core__condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_core__condition.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_core__condition.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_core__condition", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_core__condition"], "alias": "_stg_condition", "checksum": {"name": "sha256", "checksum": "7328c6608e112884137102e96a625ab72eded37772421ffec34e6d450faa0495"}, "config": {"enabled": true, "alias": "_stg_condition", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging conditions from core.", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recorded_date": {"name": "recorded_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code_type": {"name": "normalized_code_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_condition", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4837394, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__condition') }}", "language": "sql", "refs": [{"name": "core__condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_core__condition.sql", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_core__encounter": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_core__encounter", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_core__encounter.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_core__encounter.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_core__encounter", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_core__encounter"], "alias": "_stg_encounter", "checksum": {"name": "sha256", "checksum": "864a8d92e301fad08a8bd0a826182b58b7a475a968de05c347d34652df05acfb"}, "config": {"enabled": true, "alias": "_stg_encounter", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging encounters from core. Creates an empty table if using claims only.\n", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_type": {"name": "encounter_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_end_date": {"name": "encounter_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_encounter", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4886365, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , encounter_type\n    , encounter_start_date\n    , encounter_end_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__encounter') }}\n\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , encounter_type\n    , encounter_start_date\n    , encounter_end_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__encounter') }}\n\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      cast(null as {{ dbt.type_string() }} ) as patient_id\n    , cast(null as {{ dbt.type_string() }} ) as encounter_type\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as encounter_start_date\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as encounter_end_date\n    , cast(null as {{ dbt.type_timestamp() }} ) as tuva_last_run\nlimit 0\n\n{%- endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_core__encounter.sql", "compiled": true, "compiled_code": "\n\nselect\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , try_cast( null as date ) as encounter_start_date\n    , try_cast( null as date ) as encounter_end_date\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_core__lab_result": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_core__lab_result", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_core__lab_result.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_core__lab_result.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_core__lab_result", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_core__lab_result"], "alias": "_stg_lab_result", "checksum": {"name": "sha256", "checksum": "f3b89d9a06448320730322ce5e362792ab473fff9054bca3ab84afa01ec38fa2"}, "config": {"enabled": true, "alias": "_stg_lab_result", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging lab results from the input layer. Creates an empty table if  using claims only.\n", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "result_date": {"name": "result_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collection_date": {"name": "collection_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code_type": {"name": "normalized_code_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_lab_result", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.525848, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__lab_result') }}\n\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , result_date\n    , collection_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__lab_result') }}\n\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      cast(null as {{ dbt.type_string() }} ) as patient_id\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as result_date\n    ,  {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as collection_date\n    , cast(null as {{ dbt.type_string() }} ) as source_code_type\n    , cast(null as {{ dbt.type_string() }} ) as source_code\n    , cast(null as {{ dbt.type_string() }} ) as normalized_code_type\n    , cast(null as {{ dbt.type_string() }} ) as normalized_code\n    , cast(null as {{ dbt.type_timestamp() }} ) as tuva_last_run\nlimit 0\n\n{%- endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_core__lab_result.sql", "compiled": true, "compiled_code": "\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as result_date\n    ,  try_cast( null as date ) as collection_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_core__medication": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_core__medication", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_core__medication.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_core__medication.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_core__medication", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_core__medication"], "alias": "_stg_medication", "checksum": {"name": "sha256", "checksum": "1d1eb6e4f6a76a6c0e528be64d6ffd0491eaeb5937e25f4801bc1a9600281693"}, "config": {"enabled": true, "alias": "_stg_medication", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging medications from core. Creates an empty table if using claims only.\n", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispensing_date": {"name": "dispensing_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ndc_code": {"name": "ndc_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rxnorm_code": {"name": "rxnorm_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_medication", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.494106, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__medication') }}\n\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__medication') }}\n\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      cast(null as {{ dbt.type_string() }} ) as patient_id\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as dispensing_date\n    , cast(null as {{ dbt.type_string() }} ) as source_code_type\n    , cast(null as {{ dbt.type_string() }} ) as source_code\n    , cast(null as {{ dbt.type_string() }} ) as ndc_code\n    , cast(null as {{ dbt.type_string() }} ) as rxnorm_code\n    , cast(null as {{ dbt.type_timestamp() }} ) as tuva_last_run\nlimit 0\n\n{%- endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_core__medication.sql", "compiled": true, "compiled_code": "\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as dispensing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_core__observation": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_core__observation", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_core__observation.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_core__observation.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_core__observation", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_core__observation"], "alias": "_stg_observation", "checksum": {"name": "sha256", "checksum": "6ac64920ae666a218eb2065d9d319b7ae7f5ec53c8cda0b870b9e8ac45f36505"}, "config": {"enabled": true, "alias": "_stg_observation", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging medications from core. Creates an empty table if using claims only.\n", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_date": {"name": "observation_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code_type": {"name": "normalized_code_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_observation", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.4987826, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , observation_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__observation') }}\n\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , observation_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__observation') }}\n\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      cast(null as {{ dbt.type_string() }} ) as patient_id\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as observation_date\n    , cast(null as {{ dbt.type_string() }} ) as source_code_type\n    , cast(null as {{ dbt.type_string() }} ) as source_code\n    , cast(null as {{ dbt.type_string() }} ) as normalized_code_type\n    , cast(null as {{ dbt.type_string() }} ) as normalized_code\n    , cast(null as {{ dbt.type_timestamp() }} ) as tuva_last_run\nlimit 0\n\n{%- endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_core__observation.sql", "compiled": true, "compiled_code": "\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_core__patient": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_core__patient", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_core__patient.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_core__patient.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_core__patient", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_core__patient"], "alias": "_stg_patient", "checksum": {"name": "sha256", "checksum": "e450b5ec0c774f3e3624565aee8e99b0fb4638cb3bfa3fad3b1646ea49ad7795"}, "config": {"enabled": true, "alias": "_stg_patient", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging eligibility from the input layer.", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sex": {"name": "sex", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_patient", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.5029554, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__patient') }}", "language": "sql", "refs": [{"name": "core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_core__patient.sql", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_core__procedure": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_core__procedure", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_core__procedure.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_core__procedure.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_core__procedure", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_core__procedure"], "alias": "_stg_procedure", "checksum": {"name": "sha256", "checksum": "61025c6978615c6c9369fdb019207e0d5154cb47f90e696ba3bc9c2ea5c5db8c"}, "config": {"enabled": true, "alias": "_stg_procedure", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging procedures from core.", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "procedure_date": {"name": "procedure_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code_type": {"name": "normalized_code_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_procedure", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.5095096, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__procedure') }}", "language": "sql", "refs": [{"name": "core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_core__procedure.sql", "compiled": true, "compiled_code": "\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_medical_claim": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_medical_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_medical_claim.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_medical_claim.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_medical_claim", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_medical_claim"], "alias": "_stg_medical_claim", "checksum": {"name": "sha256", "checksum": "2598a77f063c83df17e4263dd10147ee0914b36917186e3e35d51f4dae0a8756"}, "config": {"enabled": true, "alias": "_stg_medical_claim", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging medical claims from the input layer. Creates an empty table if  using clinical only.\n", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_start_date": {"name": "claim_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "claim_end_date": {"name": "claim_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "place_of_service": {"name": "place_of_service", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hcpcs_code": {"name": "hcpcs_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_medical_claim", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.5152006, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__medical_claim') }}\n\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__medical_claim') }}\n\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n     cast(null as {{ dbt.type_string() }} ) as patient_id\n    , cast(null as {{ dbt.type_string() }} ) as claim_id\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as claim_start_date\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as claim_end_date\n    , cast(null as {{ dbt.type_string() }} ) as place_of_service_code\n    , cast(null as {{ dbt.type_string() }} ) as hcpcs_code\n    , cast(null as {{ dbt.type_timestamp() }} ) as tuva_last_run\nlimit 0\n\n{%- endif %}", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_medical_claim.sql", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , claim_id\n    , claim_start_date\n    , claim_end_date\n    , place_of_service_code\n    , hcpcs_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.medical_claim\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.quality_measures__stg_pharmacy_claim": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__stg_pharmacy_claim", "resource_type": "model", "package_name": "the_tuva_project", "path": "quality_measures/staging/quality_measures__stg_pharmacy_claim.sql", "original_file_path": "models/quality_measures/staging/quality_measures__stg_pharmacy_claim.sql", "unique_id": "model.the_tuva_project.quality_measures__stg_pharmacy_claim", "fqn": ["the_tuva_project", "quality_measures", "staging", "quality_measures__stg_pharmacy_claim"], "alias": "_stg_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "d3cc37b103a2cdce19944f7fff56a050f260fa91d716da4ba2be10fe4dddb001"}, "config": {"enabled": true, "alias": "_stg_pharmacy_claim", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["quality_measures"], "description": "Staging pharmacy claims from the input layer. Creates an empty table if  using clinical only.\n", "columns": {"patient_id": {"name": "patient_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispensing_date": {"name": "dispensing_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ndc_code": {"name": "ndc_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/quality_measures/quality_measures_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_stg_pharmacy_claim", "tags": "quality_measures", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.5208814, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False))))\n   )\n}}\n\n{% if var('clinical_enabled', var('tuva_marts_enabled',False)) == true and var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__pharmacy_claim') }}\n\n{% elif var('claims_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__pharmacy_claim') }}\n\n{% elif var('clinical_enabled', var('tuva_marts_enabled',False)) == true -%}\n\nselect\n      cast(null as {{ dbt.type_string() }} ) as patient_id\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as dispensing_date\n    , cast(null as {{ dbt.type_string() }} ) as ndc_code\n    , {{ try_to_cast_date('null', 'YYYY-MM-DD') }} as paid_date\n    , cast(null as {{ dbt.type_timestamp() }} ) as tuva_last_run\nlimit 0\n\n{%- endif %}", "language": "sql", "refs": [{"name": "core__pharmacy_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__pharmacy_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/staging/quality_measures__stg_pharmacy_claim.sql", "compiled": true, "compiled_code": "\n\nselect\n      patient_id\n    , dispensing_date\n    , ndc_code\n    , paid_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.pharmacy_claim\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__encounter_augmented": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__encounter_augmented", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/final/readmissions__encounter_augmented.sql", "original_file_path": "models/readmissions/final/readmissions__encounter_augmented.sql", "unique_id": "model.the_tuva_project.readmissions__encounter_augmented", "fqn": ["the_tuva_project", "readmissions", "final", "readmissions__encounter_augmented"], "alias": "encounter_augmented", "checksum": {"name": "sha256", "checksum": "8acb4f433d275d04d71fce1ceaa4b8684adb2d54587cacd59090577865357b91"}, "config": {"enabled": true, "alias": "encounter_augmented", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model includes all encounters from the stg_encounter model, and for each encounter_id we add fields relevant for the encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__discharge_disposition.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "The MS-DRG associted with the inpatient visit", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__ms_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "The number of dollars paid on the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "Integer representing the length of stay of the inpatient visit in days", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "index_admission_flag": {"name": "index_admission_flag", "description": "Flag to indicate if the encounter is an index admission", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "planned_flag": {"name": "planned_flag", "description": "Flag to indicate if the encounter was planned", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "Specialty cohort the encounter belongs to", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/readmissions/readmissions__specialty_cohort.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "died_flag": {"name": "died_flag", "description": "Flag to indicate of the patient died in this encounter", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the encounter", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/readmissions/readmissions__acute_diagnosis_ccs.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "disqualified_encounter_flag": {"name": "disqualified_encounter_flag", "description": "A flag that indicates whether this encounter is disqualified from being used in readmission measures for any critical data quality problem.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "missing_admit_date_flag": {"name": "missing_admit_date_flag", "description": "A flag that indicates whether the admit date is missing from this encounter.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "missing_discharge_date_flag": {"name": "missing_discharge_date_flag", "description": "A flag that indicates whether the discharge date is missing from this encounter.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "admit_after_discharge_flag": {"name": "admit_after_discharge_flag", "description": "A flag that indicates whether the admit date for the encounter is after the discharge date for the encounter.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "missing_discharge_disposition_code_flag": {"name": "missing_discharge_disposition_code_flag", "description": "A flag that indicates whether the discharge status code is missing for the encounter.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "invalid_discharge_disposition_code_flag": {"name": "invalid_discharge_disposition_code_flag", "description": "A flag that indicates whether the discharge status code that is present for this encounter is invalid. This flag is 1 only when the discharge status code is present but invalid.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "missing_primary_diagnosis_flag": {"name": "missing_primary_diagnosis_flag", "description": "A flag that indicates whether there is no primary diagnosis associated with the encounter.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "multiple_primary_diagnoses_flag": {"name": "multiple_primary_diagnoses_flag", "description": "A flag that indicates whether there are multiple primary diagnoses associated with the encounter.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "invalid_primary_diagnosis_code_flag": {"name": "invalid_primary_diagnosis_code_flag", "description": "A flag that indicates whether the primary diagnosis present for this encounter is invalid, i.e. a non existing ICD-10-CM code. This flag indicates that a primary diagnosis code is indeed present for the encounter, but it is not a valid ICD-10-CM code.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "no_diagnosis_ccs_flag": {"name": "no_diagnosis_ccs_flag", "description": "A flag that indicates whether there is no CCS diagnosis category associated with the primary ICD-10-CM diagnosis code for the encounter. This flag indicates that there is a valid primary ICD-10-CM diagnosis code associated with the encounter, but there is no CCS diagnosis category associated with that ICD-10-CM code.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "overlaps_with_another_encounter_flag": {"name": "overlaps_with_another_encounter_flag", "description": "A flag that indicates whether this encounter's dates overlap with those of another encounter in the dataset", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "missing_ms_drg_flag": {"name": "missing_ms_drg_flag", "description": "A flag that indicates whether this encounter contains a claim with a missing ms-drg code", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "invalid_ms_drg_flag": {"name": "invalid_ms_drg_flag", "description": "A flag that indicates whether this encounter contains a claim with an invalid missing ms-drg code", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "encounter_augmented", "tags": "readmissions", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.5790596, "relation_name": "tuva_project_demo.readmissions.encounter_augmented", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we list all encounters from the stg_encounter model\n-- and we augment them with extra fields\n-- that are relevant for readmission measures\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    {{ dbt.datediff(\"aa.admit_date\", \"aa.discharge_date\",\"day\") }} as length_of_stay,\n    case\n        when bb.encounter_id is not null then 1\n\t    else 0\n    end as index_admission_flag,\n    case\n        when cc.encounter_id is not null then 1\n\t    else 0\n    end as planned_flag,\n    dd.specialty_cohort,\n    case\n        when aa.discharge_disposition_code = '20' then 1\n\t    else 0\n    end as died_flag,\n    ee.diagnosis_ccs,\n    ee.disqualified_encounter_flag,\n    ee.missing_admit_date_flag,\n    ee.missing_discharge_date_flag,\n    ee.admit_after_discharge_flag,\n    ee.missing_discharge_disposition_code_flag,\n    ee.invalid_discharge_disposition_code_flag,\n    ee.missing_primary_diagnosis_flag,\n    ee.invalid_primary_diagnosis_code_flag,\n    ee.no_diagnosis_ccs_flag,\n    ee.overlaps_with_another_encounter_flag,\n    ee.missing_ms_drg_flag,\n    ee.invalid_ms_drg_flag,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom\n    {{ ref('readmissions__encounter') }} aa\n    left join {{ ref('readmissions__index_admission') }} bb\n    on aa.encounter_id = bb.encounter_id\n    left join {{ ref('readmissions__planned_encounter') }} cc\n    on aa.encounter_id = cc.encounter_id \n    left join {{ ref('readmissions__encounter_specialty_cohort') }} dd\n    on aa.encounter_id = dd.encounter_id\n    left join {{ ref('readmissions__encounter_data_quality') }} ee\n    on aa.encounter_id = ee.encounter_id", "language": "sql", "refs": [{"name": "readmissions__encounter", "package": null, "version": null}, {"name": "readmissions__index_admission", "package": null, "version": null}, {"name": "readmissions__planned_encounter", "package": null, "version": null}, {"name": "readmissions__encounter_specialty_cohort", "package": null, "version": null}, {"name": "readmissions__encounter_data_quality", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.the_tuva_project.readmissions__encounter", "model.the_tuva_project.readmissions__index_admission", "model.the_tuva_project.readmissions__planned_encounter", "model.the_tuva_project.readmissions__encounter_specialty_cohort", "model.the_tuva_project.readmissions__encounter_data_quality"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/final/readmissions__encounter_augmented.sql", "compiled": true, "compiled_code": "\n\n-- Here we list all encounters from the stg_encounter model\n-- and we augment them with extra fields\n-- that are relevant for readmission measures\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    datediff(\n        day,\n        aa.admit_date,\n        aa.discharge_date\n        ) as length_of_stay,\n    case\n        when bb.encounter_id is not null then 1\n\t    else 0\n    end as index_admission_flag,\n    case\n        when cc.encounter_id is not null then 1\n\t    else 0\n    end as planned_flag,\n    dd.specialty_cohort,\n    case\n        when aa.discharge_disposition_code = '20' then 1\n\t    else 0\n    end as died_flag,\n    ee.diagnosis_ccs,\n    ee.disqualified_encounter_flag,\n    ee.missing_admit_date_flag,\n    ee.missing_discharge_date_flag,\n    ee.admit_after_discharge_flag,\n    ee.missing_discharge_disposition_code_flag,\n    ee.invalid_discharge_disposition_code_flag,\n    ee.missing_primary_diagnosis_flag,\n    ee.invalid_primary_diagnosis_code_flag,\n    ee.no_diagnosis_ccs_flag,\n    ee.overlaps_with_another_encounter_flag,\n    ee.missing_ms_drg_flag,\n    ee.invalid_ms_drg_flag,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom\n    tuva_project_demo.readmissions._int_encounter aa\n    left join tuva_project_demo.readmissions._int_index_admission bb\n    on aa.encounter_id = bb.encounter_id\n    left join tuva_project_demo.readmissions._int_planned_encounter cc\n    on aa.encounter_id = cc.encounter_id \n    left join tuva_project_demo.readmissions._int_encounter_specialty_cohort dd\n    on aa.encounter_id = dd.encounter_id\n    left join tuva_project_demo.readmissions._int_encounter_data_quality ee\n    on aa.encounter_id = ee.encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__readmission_summary": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__readmission_summary", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/final/readmissions__readmission_summary.sql", "original_file_path": "models/readmissions/final/readmissions__readmission_summary.sql", "unique_id": "model.the_tuva_project.readmissions__readmission_summary", "fqn": ["the_tuva_project", "readmissions", "final", "readmissions__readmission_summary"], "alias": "readmission_summary", "checksum": {"name": "sha256", "checksum": "858de26396b984f5e2adda6855e80fe6a5593cc897ca8342462465859174b4cc"}, "config": {"enabled": true, "alias": "readmission_summary", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model includes all rows from the encounter_augmented model where disqualified_encounter_flag = 0 (all rows for encounters that are not disqualified for data quality issues). For each of these encounters we add fields to indicate whether it had a readmission and, when a readmission was present, to show relevant fields for the readmission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__discharge_disposition.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "The MS-DRG associted with the inpatient visit", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__ms_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_paid_amount": {"name": "total_paid_amount", "description": "The amount paid for the visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "Integer representing the length of stay of the inpatient visit in days", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "index_admission_flag": {"name": "index_admission_flag", "description": "Flag to indicate if the encounter is an index admission", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "planned_flag": {"name": "planned_flag", "description": "Flag to indicate if the encounter was planned", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "Specialty cohort the encounter belongs to", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/readmissions/readmissions__specialty_cohort.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "died_flag": {"name": "died_flag", "description": "Flag to indicate of the patient died in this encounter", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the encounter", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/readmissions/readmissions__acute_diagnosis_ccs.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "had_readmission_flag": {"name": "had_readmission_flag", "description": "A flag to indicate whether the encounter had a readmission any number of days after discharge", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "days_to_readmit": {"name": "days_to_readmit", "description": "An integer to indicate the number of days to readmission", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "readmit_30_flag": {"name": "readmit_30_flag", "description": "A flag to indicate whether the encounter had a 30-day readmission", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "unplanned_readmit_30_flag": {"name": "unplanned_readmit_30_flag", "description": "A flag to indicate whether the encounter had an unplanned 30-day readmission", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "readmission_encounter_id": {"name": "readmission_encounter_id", "description": "The unique identifier for the readmission encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmission_patient_id": {"name": "readmission_patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmission_admit_date": {"name": "readmission_admit_date", "description": "The date of admission for the readmission inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmission_discharge_date": {"name": "readmission_discharge_date", "description": "The date of discharge for the readmission inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmission_discharge_disposition_code": {"name": "readmission_discharge_disposition_code", "description": "The valid 2-digit discharge status for the readmission inpatient visit", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__discharge_disposition.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmission_facility": {"name": "readmission_facility", "description": "A name or ID for the facility where the readmission inpatient visit occured", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmission_ms_drg": {"name": "readmission_ms_drg", "description": "The MS-DRG associted with the readmission inpatient visit", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__ms_drg.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmission_length_of_stay": {"name": "readmission_length_of_stay", "description": "Integer representing the length of stay of the readmission inpatient visit in days", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "readmission_index_admission_flag": {"name": "readmission_index_admission_flag", "description": "Flag to indicate if the readmission encounter is an index admission", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "readmission_planned_flag": {"name": "readmission_planned_flag", "description": "Flag to indicate if the readmission encounter was planned", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "readmission_specialty_cohort": {"name": "readmission_specialty_cohort", "description": "Specialty cohort the readmission encounter belongs to", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/readmissions/readmissions__specialty_cohort.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmission_died_flag": {"name": "readmission_died_flag", "description": "Flag to indicate of the patient died in the readmission encounter", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "readmission_diagnosis_ccs": {"name": "readmission_diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the readmission encounter", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/value_sets/readmissions/readmissions__acute_diagnosis_ccs.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The time at with the model was materialized. Generated by `dbt_utils.pretty_time` as the local time of the `dbt run` environment.  Timezone is configurable via the `tuva_last_run` var.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "readmission_summary", "tags": "readmissions", "materialized": "table", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.5948606, "relation_name": "tuva_project_demo.readmissions.readmission_summary", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    *,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom {{ ref('readmissions__encounter_augmented') }}\nwhere disqualified_encounter_flag = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    aa.length_of_stay,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    case\n        when bb.encounter_id is not null then 1\n\t    else 0\n    end as had_readmission_flag,\n    {{ dbt.datediff(\"aa.discharge_date\", \"bb.admit_date\",\"day\") }} as days_to_readmit,\n    case\n        when ({{ dbt.datediff(\"aa.discharge_date\", \"bb.admit_date\",\"day\") }}) <= 30  then 1\n\t    else 0\n    end as readmit_30_flag,\n    case\n        when\n\t    (({{ dbt.datediff(\"aa.discharge_date\", \"bb.admit_date\", \"day\") }}) <= 30) and (bb.planned_flag = 0) then 1\n\t    else 0\n    end as unplanned_readmit_30_flag,\n    bb.encounter_id as readmission_encounter_id,\n    bb.admit_date as readmission_admit_date,\n    bb.discharge_date as readmission_discharge_date,\n    bb.discharge_disposition_code as readmission_discharge_disposition_code,\n    bb.facility_npi as readmission_facility,\n    bb.ms_drg_code as readmission_ms_drg,\n    bb.length_of_stay as readmission_length_of_stay,\n    bb.index_admission_flag as readmission_index_admission_flag,\n    bb.planned_flag as readmission_planned_flag,\n    bb.specialty_cohort as readmission_specialty_cohort,\n    bb.died_flag as readmission_died_flag,\n    bb.diagnosis_ccs as readmission_diagnosis_ccs,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\nselect *\nfrom readmission_calc", "language": "sql", "refs": [{"name": "readmissions__encounter_augmented", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.the_tuva_project.readmissions__encounter_augmented"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/final/readmissions__readmission_summary.sql", "compiled": true, "compiled_code": "\n\n-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    *,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom tuva_project_demo.readmissions.encounter_augmented\nwhere disqualified_encounter_flag = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    aa.length_of_stay,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    case\n        when bb.encounter_id is not null then 1\n\t    else 0\n    end as had_readmission_flag,\n    datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        ) as days_to_readmit,\n    case\n        when (datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        )) <= 30  then 1\n\t    else 0\n    end as readmit_30_flag,\n    case\n        when\n\t    ((datediff(\n        day,\n        aa.discharge_date,\n        bb.admit_date\n        )) <= 30) and (bb.planned_flag = 0) then 1\n\t    else 0\n    end as unplanned_readmit_30_flag,\n    bb.encounter_id as readmission_encounter_id,\n    bb.admit_date as readmission_admit_date,\n    bb.discharge_date as readmission_discharge_date,\n    bb.discharge_disposition_code as readmission_discharge_disposition_code,\n    bb.facility_npi as readmission_facility,\n    bb.ms_drg_code as readmission_ms_drg,\n    bb.length_of_stay as readmission_length_of_stay,\n    bb.index_admission_flag as readmission_index_admission_flag,\n    bb.planned_flag as readmission_planned_flag,\n    bb.specialty_cohort as readmission_specialty_cohort,\n    bb.died_flag as readmission_died_flag,\n    bb.diagnosis_ccs as readmission_diagnosis_ccs,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\nselect *\nfrom readmission_calc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__encounter": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__encounter", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__encounter.sql", "original_file_path": "models/readmissions/intermediate/readmissions__encounter.sql", "unique_id": "model.the_tuva_project.readmissions__encounter", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__encounter"], "alias": "_int_encounter", "checksum": {"name": "sha256", "checksum": "d47d990a3ebb98b14acf75aca3525c2e0cf91f0d4c253a91423bd27dd7882fd7"}, "config": {"enabled": true, "alias": "_int_encounter", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This is a staging table for the input layer. Each row represents a unique acute inpatient encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "facility": {"name": "facility", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ms_drg": {"name": "ms_drg", "description": "The MS-DRG associted with the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_encounter", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6634657, "relation_name": "tuva_project_demo.readmissions._int_encounter", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Staging model for the input layer:\n-- stg_encounter input layer model.\n-- This contains one row for every unique encounter in the dataset.\n\nselect\n    cast(encounter_id as {{ dbt.type_string() }}) as encounter_id,\n    cast(patient_id as {{ dbt.type_string() }}) as patient_id,\n    cast(encounter_start_date as date) as admit_date,\n    cast(encounter_end_date as date) as discharge_date,\n    cast(discharge_disposition_code as {{ dbt.type_string() }}) as discharge_disposition_code,\n    cast(facility_npi as {{ dbt.type_string() }}) as facility_npi,\n    cast(ms_drg_code as {{ dbt.type_string() }}) as ms_drg_code,\n    cast(paid_amount as numeric) as paid_amount,\n    cast(primary_diagnosis_code as {{ dbt.type_string() }}) as primary_diagnosis_code,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('readmissions__stg_core__encounter') }}", "language": "sql", "refs": [{"name": "readmissions__stg_core__encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.the_tuva_project.readmissions__stg_core__encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__encounter.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__readmissions__stg_core__encounter as (\n\n\nselect\n    encounter_id,\n    patient_id,\n    encounter_start_date,\n    encounter_end_date,\n    discharge_disposition_code,\n    facility_npi,\n    ms_drg_code,\n    paid_amount,\n    primary_diagnosis_code,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.encounter\nwhere encounter_type = 'acute inpatient'\n) -- Staging model for the input layer:\n-- stg_encounter input layer model.\n-- This contains one row for every unique encounter in the dataset.\n\nselect\n    cast(encounter_id as TEXT) as encounter_id,\n    cast(patient_id as TEXT) as patient_id,\n    cast(encounter_start_date as date) as admit_date,\n    cast(encounter_end_date as date) as discharge_date,\n    cast(discharge_disposition_code as TEXT) as discharge_disposition_code,\n    cast(facility_npi as TEXT) as facility_npi,\n    cast(ms_drg_code as TEXT) as ms_drg_code,\n    cast(paid_amount as numeric) as paid_amount,\n    cast(primary_diagnosis_code as TEXT) as primary_diagnosis_code,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom __dbt__cte__readmissions__stg_core__encounter", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.readmissions__stg_core__encounter", "sql": " __dbt__cte__readmissions__stg_core__encounter as (\n\n\nselect\n    encounter_id,\n    patient_id,\n    encounter_start_date,\n    encounter_end_date,\n    discharge_disposition_code,\n    facility_npi,\n    ms_drg_code,\n    paid_amount,\n    primary_diagnosis_code,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.encounter\nwhere encounter_type = 'acute inpatient'\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__encounter_data_quality": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__encounter_data_quality", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__encounter_data_quality.sql", "original_file_path": "models/readmissions/intermediate/readmissions__encounter_data_quality.sql", "unique_id": "model.the_tuva_project.readmissions__encounter_data_quality", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__encounter_data_quality"], "alias": "_int_encounter_data_quality", "checksum": {"name": "sha256", "checksum": "37717cfd0573e09b8777034f35b5fa808f2f7b43c85511c9ccd3c89e0be18f0e"}, "config": {"enabled": true, "alias": "_int_encounter_data_quality", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model has the same number of rows as the stg_encounter model. Here we have one row for every unique encounter in the stg_encounter model, and for each encounter we have a flag (disqualified_encounter_flag) to indicte if the encounter is disqualified from being useful for readmission measures. We also have other flags to indicate which specific data quality issues this encounter has that may disqualify it from being used in readmission measures.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "The CCS diagnosis category associated with the primary diagnosis of this encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "disqualified_encounter_flag": {"name": "disqualified_encounter_flag", "description": "A flag that indicates whether this encounter is disqualified from being used in readmission measures for any critical data quality problem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "missing_admit_date_flag": {"name": "missing_admit_date_flag", "description": "A flag that indicates whether the admit date is missing from this encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "missing_discharge_date_flag": {"name": "missing_discharge_date_flag", "description": "A flag that indicates whether the discharge date is missing from this encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_after_discharge_flag": {"name": "admit_after_discharge_flag", "description": "A flag that indicates whether the admit date for the encounter is after the discharge date for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "missing_discharge_status_code_flag": {"name": "missing_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code is missing for the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invalid_discharge_status_code_flag": {"name": "invalid_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code that is present for this encounter is invalid. This flag is 1 only when the discharge status code is present but invalid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "missing_primary_diagnosis_flag": {"name": "missing_primary_diagnosis_flag", "description": "A flag that indicates whether there is no primary diagnosis associated with the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "multiple_primary_diagnosis": {"name": "multiple_primary_diagnosis", "description": "A flag that indicates whether there are multiple primary diagnoses associated with the encounter.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invalid_primary_diagnosis_code": {"name": "invalid_primary_diagnosis_code", "description": "A flag that indicates whether the primary diagnosis present for this encounter is invalid, i.e. a non existing ICD-10-CM code. This flag indicates that a primary diagnosis code is indeed present for the encounter, but it is not a valid ICD-10-CM code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "no_diagnosis_ccs_flag": {"name": "no_diagnosis_ccs_flag", "description": "A flag that indicates whether there is no CCS diagnosis category associated with the primary ICD-10-CM diagnosis code for the encounter. This flag indicates that there is a valid primary ICD-10-CM diagnosis code associated with the encounter, but there is no CCS diagnosis category associated with that ICD-10-CM code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "overlaps_with_another_encounter_flag": {"name": "overlaps_with_another_encounter_flag", "description": "A flag that indicates whether this encounter's dates overlap with those of another encounter in the dataset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_encounter_data_quality", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6019123, "relation_name": "tuva_project_demo.readmissions._int_encounter_data_quality", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n-- Flag several potential data quality issues\n-- with all encounters.\n-- Every encounter_id from the stg_encounter model\n-- will be here. This CTE should have the same\n-- number of rows as the stg_encounter model, i.e.,\n-- there is a one to one correspondence between the\n-- rows in stg_encounter and this CTE.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date_flag,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date_flag,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge_flag,\n    case\n        when aa.discharge_disposition_code is null then 1\n\telse 0\n    end as missing_discharge_disposition_code_flag,\n    case\n        when\n\t    (aa.discharge_disposition_code is not null)\n\t    and\n\t    (bb.discharge_disposition_code is null) then 1\n\telse 0\n    end as invalid_discharge_disposition_code_flag,\n    case\n      when aa.primary_diagnosis_code is null then 1\n      else 0\n    end as missing_primary_diagnosis_flag,\n    case\n        when aa.valid_primary_diagnosis_code_flag = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code_flag,\n    case\n        when aa.ccs_diagnosis_category is null  then 1\n\telse 0\n    end as no_diagnosis_ccs_flag,\n    aa.ccs_diagnosis_category as diagnosis_ccs,\n    case\n        when aa.encounter_id in (select distinct encounter_id_A\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\n\t     or\n\t     aa.encounter_id in (select distinct encounter_id_B\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\n\tthen 1\n\telse 0\n    end as overlaps_with_another_encounter_flag,\n    case\n        when aa.ms_drg_code is null then 1\n\telse 0\n    end as missing_ms_drg_flag,\n    case\n        when cc.ms_drg_code is null then 1\n\telse 0\n    end as invalid_ms_drg_flag\n\nfrom {{ ref('readmissions__encounter_with_ccs') }} aa\n     left join {{ ref('terminology__discharge_disposition') }} bb\n     on aa.discharge_disposition_code = bb.discharge_disposition_code\n     left join {{ ref('terminology__ms_drg') }} cc\n     on aa.ms_drg_code = cc.ms_drg_code\n),\n\n\n-- Here we add a disqualified_encounter_flag.\n-- This disqualified_encounter_flag = 1\n-- when any of the critical data quality flags\n-- from the above CTE are equal to 1.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date_flag = 1)\n\t    or\n\t    (missing_discharge_date_flag = 1)\n\t    or\n\t    (admit_after_discharge_flag = 1)\n\t    or\n\t    (missing_discharge_disposition_code_flag = 1)\n\t    or\n\t    (invalid_discharge_disposition_code_flag = 1)\n\t    or\n\t    (missing_primary_diagnosis_flag = 1)\n\t    or\n\t    (invalid_primary_diagnosis_code_flag = 1)\n\t    or\n\t    (no_diagnosis_ccs_flag = 1)\n\t    or\n\t    (overlaps_with_another_encounter_flag = 1)\n\t    or\n\t    (missing_ms_drg_flag = 1)\n\t    or\n\t    (invalid_ms_drg_flag = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter_flag,\n    missing_admit_date_flag,\n    missing_discharge_date_flag,\n    admit_after_discharge_flag,\n    missing_discharge_disposition_code_flag,\n    invalid_discharge_disposition_code_flag,\n    missing_primary_diagnosis_flag,\n    invalid_primary_diagnosis_code_flag,\n    no_diagnosis_ccs_flag,\n    overlaps_with_another_encounter_flag,\n    missing_ms_drg_flag,\n    invalid_ms_drg_flag\nfrom encounter_data_quality_issues\n)    \n\n\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom all_data_quality_flags", "language": "sql", "refs": [{"name": "readmissions__encounter_overlap", "package": null, "version": null}, {"name": "readmissions__encounter_overlap", "package": null, "version": null}, {"name": "readmissions__encounter_with_ccs", "package": null, "version": null}, {"name": "terminology__discharge_disposition", "package": null, "version": null}, {"name": "terminology__ms_drg", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__encounter_overlap", "model.the_tuva_project.readmissions__encounter_with_ccs", "seed.the_tuva_project.terminology__discharge_disposition", "seed.the_tuva_project.terminology__ms_drg"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__encounter_data_quality.sql", "compiled": true, "compiled_code": "\n\n-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n-- Flag several potential data quality issues\n-- with all encounters.\n-- Every encounter_id from the stg_encounter model\n-- will be here. This CTE should have the same\n-- number of rows as the stg_encounter model, i.e.,\n-- there is a one to one correspondence between the\n-- rows in stg_encounter and this CTE.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date_flag,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date_flag,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge_flag,\n    case\n        when aa.discharge_disposition_code is null then 1\n\telse 0\n    end as missing_discharge_disposition_code_flag,\n    case\n        when\n\t    (aa.discharge_disposition_code is not null)\n\t    and\n\t    (bb.discharge_disposition_code is null) then 1\n\telse 0\n    end as invalid_discharge_disposition_code_flag,\n    case\n      when aa.primary_diagnosis_code is null then 1\n      else 0\n    end as missing_primary_diagnosis_flag,\n    case\n        when aa.valid_primary_diagnosis_code_flag = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code_flag,\n    case\n        when aa.ccs_diagnosis_category is null  then 1\n\telse 0\n    end as no_diagnosis_ccs_flag,\n    aa.ccs_diagnosis_category as diagnosis_ccs,\n    case\n        when aa.encounter_id in (select distinct encounter_id_A\n\t                         from tuva_project_demo.readmissions._int_encounter_overlap )\n\t     or\n\t     aa.encounter_id in (select distinct encounter_id_B\n\t                         from tuva_project_demo.readmissions._int_encounter_overlap )\n\tthen 1\n\telse 0\n    end as overlaps_with_another_encounter_flag,\n    case\n        when aa.ms_drg_code is null then 1\n\telse 0\n    end as missing_ms_drg_flag,\n    case\n        when cc.ms_drg_code is null then 1\n\telse 0\n    end as invalid_ms_drg_flag\n\nfrom tuva_project_demo.readmissions._int_encounter_with_ccs aa\n     left join tuva_project_demo.terminology.discharge_disposition bb\n     on aa.discharge_disposition_code = bb.discharge_disposition_code\n     left join tuva_project_demo.terminology.ms_drg cc\n     on aa.ms_drg_code = cc.ms_drg_code\n),\n\n\n-- Here we add a disqualified_encounter_flag.\n-- This disqualified_encounter_flag = 1\n-- when any of the critical data quality flags\n-- from the above CTE are equal to 1.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date_flag = 1)\n\t    or\n\t    (missing_discharge_date_flag = 1)\n\t    or\n\t    (admit_after_discharge_flag = 1)\n\t    or\n\t    (missing_discharge_disposition_code_flag = 1)\n\t    or\n\t    (invalid_discharge_disposition_code_flag = 1)\n\t    or\n\t    (missing_primary_diagnosis_flag = 1)\n\t    or\n\t    (invalid_primary_diagnosis_code_flag = 1)\n\t    or\n\t    (no_diagnosis_ccs_flag = 1)\n\t    or\n\t    (overlaps_with_another_encounter_flag = 1)\n\t    or\n\t    (missing_ms_drg_flag = 1)\n\t    or\n\t    (invalid_ms_drg_flag = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter_flag,\n    missing_admit_date_flag,\n    missing_discharge_date_flag,\n    admit_after_discharge_flag,\n    missing_discharge_disposition_code_flag,\n    invalid_discharge_disposition_code_flag,\n    missing_primary_diagnosis_flag,\n    invalid_primary_diagnosis_code_flag,\n    no_diagnosis_ccs_flag,\n    overlaps_with_another_encounter_flag,\n    missing_ms_drg_flag,\n    invalid_ms_drg_flag\nfrom encounter_data_quality_issues\n)    \n\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom all_data_quality_flags", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__encounter_overlap": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__encounter_overlap", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__encounter_overlap.sql", "original_file_path": "models/readmissions/intermediate/readmissions__encounter_overlap.sql", "unique_id": "model.the_tuva_project.readmissions__encounter_overlap", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__encounter_overlap"], "alias": "_int_encounter_overlap", "checksum": {"name": "sha256", "checksum": "48b64009c3102d94509d9e7cadabb92b55281dab968718216983a90ea7019145"}, "config": {"enabled": true, "alias": "_int_encounter_overlap", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model lists all pairs of encounters that have some date overlap.", "columns": {"patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id_A": {"name": "encounter_id_A", "description": "Unique identifier for one of the overlapping encounters", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id_B": {"name": "encounter_id_B", "description": "Unique identifier for the other overlapping encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_encounter_overlap", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6071286, "relation_name": "tuva_project_demo.readmissions._int_encounter_overlap", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we give a list of all pairs of encounters\n-- that have some date overlap.\n\n\nwith encounters_with_row_num as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over (\n        partition by patient_id order by encounter_id\n\t) as row_num\nfrom {{ ref('readmissions__encounter') }}\n),\n\n\ncartesian as (\nselect\n    aa.encounter_id as encounter_id_A,\n    bb.encounter_id as encounter_id_B,\n    aa.patient_id,\n    aa.admit_date as Ai,\n    aa.discharge_date as Af,\n    bb.admit_date as Bi,\n    bb.discharge_date as Bf,\n    case\n        when (aa.admit_date between bb.admit_date and bb.discharge_date) or (aa.discharge_date between bb.admit_date and bb.discharge_date) or\n             (bb.admit_date between aa.admit_date and aa.discharge_date) or (bb.discharge_date between aa.admit_date and aa.discharge_date)\n        then 1\n        else 0\n    end as overlap\n    from encounters_with_row_num aa\n    left join encounters_with_row_num bb\n    on aa.patient_id = bb.patient_id and aa.row_num < bb.row_num\n),\n\n\noverlapping_pairs\nas\n(\n    select\n        patient_id,\n        encounter_id_A,\n\tencounter_id_B\n    from cartesian\n    where overlap = 1\n)\n\n\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom overlapping_pairs", "language": "sql", "refs": [{"name": "readmissions__encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__encounter_overlap.sql", "compiled": true, "compiled_code": "\n\n-- Here we give a list of all pairs of encounters\n-- that have some date overlap.\n\n\nwith encounters_with_row_num as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over (\n        partition by patient_id order by encounter_id\n\t) as row_num\nfrom tuva_project_demo.readmissions._int_encounter\n),\n\n\ncartesian as (\nselect\n    aa.encounter_id as encounter_id_A,\n    bb.encounter_id as encounter_id_B,\n    aa.patient_id,\n    aa.admit_date as Ai,\n    aa.discharge_date as Af,\n    bb.admit_date as Bi,\n    bb.discharge_date as Bf,\n    case\n        when (aa.admit_date between bb.admit_date and bb.discharge_date) or (aa.discharge_date between bb.admit_date and bb.discharge_date) or\n             (bb.admit_date between aa.admit_date and aa.discharge_date) or (bb.discharge_date between aa.admit_date and aa.discharge_date)\n        then 1\n        else 0\n    end as overlap\n    from encounters_with_row_num aa\n    left join encounters_with_row_num bb\n    on aa.patient_id = bb.patient_id and aa.row_num < bb.row_num\n),\n\n\noverlapping_pairs\nas\n(\n    select\n        patient_id,\n        encounter_id_A,\n\tencounter_id_B\n    from cartesian\n    where overlap = 1\n)\n\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom overlapping_pairs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__encounter_specialty_cohort": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__encounter_specialty_cohort", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__encounter_specialty_cohort.sql", "original_file_path": "models/readmissions/intermediate/readmissions__encounter_specialty_cohort.sql", "unique_id": "model.the_tuva_project.readmissions__encounter_specialty_cohort", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__encounter_specialty_cohort"], "alias": "_int_encounter_specialty_cohort", "checksum": {"name": "sha256", "checksum": "9a59bc8886820ac96f6bb358a7141e6e3935746059b72b5b6f8f43ac28c70902"}, "config": {"enabled": true, "alias": "_int_encounter_specialty_cohort", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model lists the specialty cohort associated with each inpatient encounter. All encounters in the stg_encounter model are present here, and each gets a specialty cohort assigned from the following list of 5 options: Surgery/Gynecology, Medicine, Cardiorespiratory, Cardiovascular, Neurology. Encounters that don't have a specialty cohort get 'Medicine' assigned by default.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "The specialty cohort associated with the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_encounter_specialty_cohort", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6134398, "relation_name": "tuva_project_demo.readmissions._int_encounter_specialty_cohort", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n--ranking to eventually assign a cohort to encounters in multiple cohorts\nwith cohort_ranks as (\n    select 'Surgery/Gynecology' as cohort, 1 as c_rank\n    union all\n    select 'Cardiorespiratory' as cohort, 2 as c_rank\n    union all\n    select 'Cardiovascular' as cohort, 3 as c_rank\n    union all\n    select 'Neurology' as cohort, 4 as c_rank\n    union all\n    select 'Medicine' as cohort, 5 as c_rank\n)\n\n\n--get all encounter ids in any procedure or diagnosis based cohorts\n, all_encounter_cohorts as (\n\n    --encounter ids in procedure based cohorts\n    select proc.encounter_id, 1 as c_rank\n    from {{ ref('readmissions__procedure_ccs') }} proc\n    left join {{ ref('readmissions__surgery_gynecology_cohort') }} sgc\n        on proc.procedure_code = sgc.icd_10_pcs\n    left join {{ ref('readmissions__specialty_cohort') }} sgsc\n        on proc.ccs_procedure_category = sgsc.ccs and sgsc.specialty_cohort = 'Surgery/Gynecology'\n    where sgc.icd_10_pcs is not null or sgsc.ccs is not null\n\n    union all\n\n    --encounter ids in diagnosis based cohorts\n    select diag.encounter_id, cohort_ranks.c_rank\n    from {{ ref('readmissions__encounter_with_ccs') }} diag\n    inner join {{ ref('readmissions__specialty_cohort') }} sc\n        on diag.ccs_diagnosis_category = sc.ccs and sc.procedure_or_diagnosis = 'Diagnosis'\n    inner join cohort_ranks\n        on sc.specialty_cohort = cohort_ranks.cohort\n)\n\n\n-- getting one cohort per encounter\n, main_encounter_cohort as (\n    select encounter_id, min(c_rank) as main_c_rank\n    from all_encounter_cohorts\n    group by encounter_id\n\n)\n\n\n--getting all encounters, with labeled cohorts, if no cohort cohort is \"medicine\"\nselect enc.encounter_id, coalesce(cohort_ranks.cohort, 'Medicine') as specialty_cohort, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('readmissions__encounter') }} enc\nleft join main_encounter_cohort mec\n    on enc.encounter_id = mec.encounter_id\nleft join cohort_ranks\n    on mec.main_c_rank = cohort_ranks.c_rank", "language": "sql", "refs": [{"name": "readmissions__procedure_ccs", "package": null, "version": null}, {"name": "readmissions__surgery_gynecology_cohort", "package": null, "version": null}, {"name": "readmissions__specialty_cohort", "package": null, "version": null}, {"name": "readmissions__encounter_with_ccs", "package": null, "version": null}, {"name": "readmissions__specialty_cohort", "package": null, "version": null}, {"name": "readmissions__encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__procedure_ccs", "seed.the_tuva_project.readmissions__surgery_gynecology_cohort", "seed.the_tuva_project.readmissions__specialty_cohort", "model.the_tuva_project.readmissions__encounter_with_ccs", "model.the_tuva_project.readmissions__encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__encounter_specialty_cohort.sql", "compiled": true, "compiled_code": "\n\n-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n--ranking to eventually assign a cohort to encounters in multiple cohorts\nwith cohort_ranks as (\n    select 'Surgery/Gynecology' as cohort, 1 as c_rank\n    union all\n    select 'Cardiorespiratory' as cohort, 2 as c_rank\n    union all\n    select 'Cardiovascular' as cohort, 3 as c_rank\n    union all\n    select 'Neurology' as cohort, 4 as c_rank\n    union all\n    select 'Medicine' as cohort, 5 as c_rank\n)\n\n\n--get all encounter ids in any procedure or diagnosis based cohorts\n, all_encounter_cohorts as (\n\n    --encounter ids in procedure based cohorts\n    select proc.encounter_id, 1 as c_rank\n    from tuva_project_demo.readmissions._int_procedure_ccs proc\n    left join tuva_project_demo.readmissions._value_set_surgery_gynecology_cohort sgc\n        on proc.procedure_code = sgc.icd_10_pcs\n    left join tuva_project_demo.readmissions._value_set_specialty_cohort sgsc\n        on proc.ccs_procedure_category = sgsc.ccs and sgsc.specialty_cohort = 'Surgery/Gynecology'\n    where sgc.icd_10_pcs is not null or sgsc.ccs is not null\n\n    union all\n\n    --encounter ids in diagnosis based cohorts\n    select diag.encounter_id, cohort_ranks.c_rank\n    from tuva_project_demo.readmissions._int_encounter_with_ccs diag\n    inner join tuva_project_demo.readmissions._value_set_specialty_cohort sc\n        on diag.ccs_diagnosis_category = sc.ccs and sc.procedure_or_diagnosis = 'Diagnosis'\n    inner join cohort_ranks\n        on sc.specialty_cohort = cohort_ranks.cohort\n)\n\n\n-- getting one cohort per encounter\n, main_encounter_cohort as (\n    select encounter_id, min(c_rank) as main_c_rank\n    from all_encounter_cohorts\n    group by encounter_id\n\n)\n\n\n--getting all encounters, with labeled cohorts, if no cohort cohort is \"medicine\"\nselect enc.encounter_id, coalesce(cohort_ranks.cohort, 'Medicine') as specialty_cohort, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.readmissions._int_encounter enc\nleft join main_encounter_cohort mec\n    on enc.encounter_id = mec.encounter_id\nleft join cohort_ranks\n    on mec.main_c_rank = cohort_ranks.c_rank", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__encounter_with_ccs": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__encounter_with_ccs", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__encounter_with_ccs.sql", "original_file_path": "models/readmissions/intermediate/readmissions__encounter_with_ccs.sql", "unique_id": "model.the_tuva_project.readmissions__encounter_with_ccs", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__encounter_with_ccs"], "alias": "_int_encounter_with_ccs", "checksum": {"name": "sha256", "checksum": "fa6e0d7b51af58d7f3c449b4a8940be6889d8ae35f215cbc9eb4a9ecd6c0292e"}, "config": {"enabled": true, "alias": "_int_encounter_with_ccs", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_encounter_with_ccs", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6175475, "relation_name": "tuva_project_demo.readmissions._int_encounter_with_ccs", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we add a CCS diagnosis category to\n-- every encounter that we can add a CCS diagnosis category to.\n-- The CCS diagnosis category is found using\n-- the encounter's primary diagnosis code.\n\n\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    aa.primary_diagnosis_code,\n\n    case\n      when bb.icd_10_cm is not null then 1\n      else 0\n    end as valid_primary_diagnosis_code_flag,\n\n    cc.ccs_diagnosis_category,\n\n    '{{ var('tuva_last_run')}}' as tuva_last_run\n\nfrom\n    {{ ref('readmissions__encounter') }} aa\n    left join {{ ref('terminology__icd_10_cm') }} bb\n    on aa.primary_diagnosis_code = bb.icd_10_cm\n    left join {{ ref('readmissions__icd_10_cm_to_ccs') }} cc\n    on aa.primary_diagnosis_code = cc.icd_10_cm", "language": "sql", "refs": [{"name": "readmissions__encounter", "package": null, "version": null}, {"name": "terminology__icd_10_cm", "package": null, "version": null}, {"name": "readmissions__icd_10_cm_to_ccs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__encounter", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.readmissions__icd_10_cm_to_ccs"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__encounter_with_ccs.sql", "compiled": true, "compiled_code": "\n\n-- Here we add a CCS diagnosis category to\n-- every encounter that we can add a CCS diagnosis category to.\n-- The CCS diagnosis category is found using\n-- the encounter's primary diagnosis code.\n\n\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.paid_amount,\n    aa.primary_diagnosis_code,\n\n    case\n      when bb.icd_10_cm is not null then 1\n      else 0\n    end as valid_primary_diagnosis_code_flag,\n\n    cc.ccs_diagnosis_category,\n\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\n\nfrom\n    tuva_project_demo.readmissions._int_encounter aa\n    left join tuva_project_demo.terminology.icd_10_cm bb\n    on aa.primary_diagnosis_code = bb.icd_10_cm\n    left join tuva_project_demo.readmissions._value_set_icd_10_cm_to_ccs cc\n    on aa.primary_diagnosis_code = cc.icd_10_cm", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__exclusion": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__exclusion", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__exclusion.sql", "original_file_path": "models/readmissions/intermediate/readmissions__exclusion.sql", "unique_id": "model.the_tuva_project.readmissions__exclusion", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__exclusion"], "alias": "_int_exclusion", "checksum": {"name": "sha256", "checksum": "db0b1ccfbdfa87302900ce66ce965ea395d50e0beaf321a5f84dab08e88e20bd"}, "config": {"enabled": true, "alias": "_int_exclusion", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model lists all encounters that are excluded from being index admissions because they belong to one of the exclusion categories.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_exclusion", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6232677, "relation_name": "tuva_project_demo.readmissions._int_exclusion", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__encounter_with_ccs') }}\nwhere\n(ccs_diagnosis_category is not null)\nand\n(\nccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from {{ ref('readmissions__exclusion_ccs_diagnosis_category') }} )\n)\n)\n\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom exclusions", "language": "sql", "refs": [{"name": "readmissions__encounter_with_ccs", "package": null, "version": null}, {"name": "readmissions__exclusion_ccs_diagnosis_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__encounter_with_ccs", "seed.the_tuva_project.readmissions__exclusion_ccs_diagnosis_category"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__exclusion.sql", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom tuva_project_demo.readmissions._int_encounter_with_ccs\nwhere\n(ccs_diagnosis_category is not null)\nand\n(\nccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from tuva_project_demo.readmissions._value_set_exclusion_ccs_diagnosis_category )\n)\n)\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom exclusions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__index_admission": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__index_admission", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__index_admission.sql", "original_file_path": "models/readmissions/intermediate/readmissions__index_admission.sql", "unique_id": "model.the_tuva_project.readmissions__index_admission", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__index_admission"], "alias": "_int_index_admission", "checksum": {"name": "sha256", "checksum": "38fc51f07ea6674747976b72fd7050258d6f472437f3b3f290c9cbba92768288"}, "config": {"enabled": true, "alias": "_int_index_admission", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model lists all index admissions for the hospital wide readmissions measure. These represent encounter_ids that meet the requirements to be an index admission for the HWR measure.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_index_admission", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6301346, "relation_name": "tuva_project_demo.readmissions._int_index_admission", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n\nselect distinct a.encounter_id, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('readmissions__encounter') }} a\ninner join {{ ref('readmissions__index_time_requirement') }} b\n    on a.encounter_id = b.encounter_id\ninner join {{ ref('readmissions__index_discharge_requirement') }} c\n    on a.encounter_id = c.encounter_id\nleft join {{ ref('readmissions__exclusion') }} d\n    on a.encounter_id = d.encounter_id\nwhere d.encounter_id is null", "language": "sql", "refs": [{"name": "readmissions__encounter", "package": null, "version": null}, {"name": "readmissions__index_time_requirement", "package": null, "version": null}, {"name": "readmissions__index_discharge_requirement", "package": null, "version": null}, {"name": "readmissions__exclusion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__encounter", "model.the_tuva_project.readmissions__index_time_requirement", "model.the_tuva_project.readmissions__index_discharge_requirement", "model.the_tuva_project.readmissions__exclusion"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__index_admission.sql", "compiled": true, "compiled_code": "\n\n-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n\nselect distinct a.encounter_id, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.readmissions._int_encounter a\ninner join tuva_project_demo.readmissions._int_index_time_requirement b\n    on a.encounter_id = b.encounter_id\ninner join tuva_project_demo.readmissions._int_index_discharge_requirement c\n    on a.encounter_id = c.encounter_id\nleft join tuva_project_demo.readmissions._int_exclusion d\n    on a.encounter_id = d.encounter_id\nwhere d.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__index_discharge_requirement": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__index_discharge_requirement", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__index_discharge_requirement.sql", "original_file_path": "models/readmissions/intermediate/readmissions__index_discharge_requirement.sql", "unique_id": "model.the_tuva_project.readmissions__index_discharge_requirement", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__index_discharge_requirement"], "alias": "_int_index_discharge_requirement", "checksum": {"name": "sha256", "checksum": "a6d50fccefae6d851d6e9f2e0d1b7484a749c1154e123aa571149d178e5c493b"}, "config": {"enabled": true, "alias": "_int_index_discharge_requirement", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model lists all encounters that meet the discharge disposition requirement to be an index admission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_index_discharge_requirement", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6351714, "relation_name": "tuva_project_demo.readmissions._int_index_discharge_requirement", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we list encounter_ids that meet\n-- the discharge_disposition_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n\nwith all_invalid_discharges as (\nselect encounter_id\nfrom {{ ref('readmissions__encounter') }}\nwhere discharge_disposition_code in (\n     '02' -- Patient discharged/transferred to other short term general hospital for inpatient care.\n    ,'07' -- Patient left against medical advice\n    ,'20' -- Patient died\n    )\n)\n\n-- All discharges that meet the discharge_disposition_code\n-- requirements to be an index admission\nselect a.encounter_id, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('readmissions__encounter') }} a\nleft join all_invalid_discharges b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "language": "sql", "refs": [{"name": "readmissions__encounter", "package": null, "version": null}, {"name": "readmissions__encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__index_discharge_requirement.sql", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that meet\n-- the discharge_disposition_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n\nwith all_invalid_discharges as (\nselect encounter_id\nfrom tuva_project_demo.readmissions._int_encounter\nwhere discharge_disposition_code in (\n     '02' -- Patient discharged/transferred to other short term general hospital for inpatient care.\n    ,'07' -- Patient left against medical advice\n    ,'20' -- Patient died\n    )\n)\n\n-- All discharges that meet the discharge_disposition_code\n-- requirements to be an index admission\nselect a.encounter_id, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.readmissions._int_encounter a\nleft join all_invalid_discharges b\n    on a.encounter_id = b.encounter_id\nwhere b.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__index_time_requirement": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__index_time_requirement", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__index_time_requirement.sql", "original_file_path": "models/readmissions/intermediate/readmissions__index_time_requirement.sql", "unique_id": "model.the_tuva_project.readmissions__index_time_requirement", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__index_time_requirement"], "alias": "_int_index_time_requirement", "checksum": {"name": "sha256", "checksum": "15c3b8b384a9c1963185400e2990e1e273317848106f1ff9c8327211664c02e2"}, "config": {"enabled": true, "alias": "_int_index_time_requirement", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model lists all encounters that meet the time requirement to be an index admission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_index_time_requirement", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6417525, "relation_name": "tuva_project_demo.readmissions._int_index_time_requirement", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\n\nselect encounter_id, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('readmissions__encounter') }}\nwhere discharge_date <= (select max(discharge_date)\n                         from {{ ref('readmissions__encounter') }} ) - 30", "language": "sql", "refs": [{"name": "readmissions__encounter", "package": null, "version": null}, {"name": "readmissions__encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__index_time_requirement.sql", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\n\nselect encounter_id, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.readmissions._int_encounter\nwhere discharge_date <= (select max(discharge_date)\n                         from tuva_project_demo.readmissions._int_encounter ) - 30", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__planned_encounter": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__planned_encounter", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__planned_encounter.sql", "original_file_path": "models/readmissions/intermediate/readmissions__planned_encounter.sql", "unique_id": "model.the_tuva_project.readmissions__planned_encounter", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__planned_encounter"], "alias": "_int_planned_encounter", "checksum": {"name": "sha256", "checksum": "5994adcd4d41b8fec01785252882bde419f5221b7df7f56a1deb5a80a2ed8e9d"}, "config": {"enabled": true, "alias": "_int_planned_encounter", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model gives a list of all encounter_ids that were planned encounters.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_planned_encounter", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.648324, "relation_name": "tuva_project_demo.readmissions._int_planned_encounter", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct pccs.encounter_id\nfrom {{ ref('readmissions__procedure_ccs') }} pccs\ninner join {{ ref('readmissions__always_planned_ccs_procedure_category') }} apc\n    on pccs.ccs_procedure_category = apc.ccs_procedure_category\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__encounter_with_ccs') }} dccs\ninner join {{ ref('readmissions__always_planned_ccs_diagnosis_category') }} apd\n    on dccs.ccs_diagnosis_category = apd.ccs_diagnosis_category\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__procedure_ccs') }} pccs\ninner join {{ ref('readmissions__potentially_planned_ccs_procedure_category') }} pcs\n    on pccs.ccs_procedure_category = pcs.ccs_procedure_category\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_icd_10_pcs as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__procedure_ccs') }} pcs\ninner join  {{ ref('readmissions__potentially_planned_icd_10_pcs') }} pps\n    on pcs.procedure_code = pps.icd_10_pcs\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__encounter_with_ccs') }} dccs\nleft join {{ ref('readmissions__acute_diagnosis_icd_10_cm') }} adi\n    on dccs.primary_diagnosis_code = adi.icd_10_cm\nleft join {{ ref('readmissions__acute_diagnosis_ccs') }} adc\n    on dccs.ccs_diagnosis_category = adc.ccs_diagnosis_category\nwhere adi.icd_10_cm is not null or adc.ccs_diagnosis_category is not null\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--               their ICD-10-PCS procedure codes\n--           [2] not acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect distinct ppp.encounter_id\nfrom (\n    select * from potentially_planned_px_ccs\n        union all\n    select * from potentially_planned_px_icd_10_pcs) ppp\nleft join acute_encounters\n    on ppp.encounter_id = acute_encounters.encounter_id\nwhere acute_encounters.encounter_id is null\n\n)\n\n\n-- Aggregate of all encounter_ids for planned encounters\n\nselect * , '{{ var('tuva_last_run')}}' as tuva_last_run from always_planned_px\nunion distinct\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run from always_planned_dx\nunion distinct\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run from potentially_planned_that_are_actually_planned", "language": "sql", "refs": [{"name": "readmissions__procedure_ccs", "package": null, "version": null}, {"name": "readmissions__always_planned_ccs_procedure_category", "package": null, "version": null}, {"name": "readmissions__encounter_with_ccs", "package": null, "version": null}, {"name": "readmissions__always_planned_ccs_diagnosis_category", "package": null, "version": null}, {"name": "readmissions__procedure_ccs", "package": null, "version": null}, {"name": "readmissions__potentially_planned_ccs_procedure_category", "package": null, "version": null}, {"name": "readmissions__procedure_ccs", "package": null, "version": null}, {"name": "readmissions__potentially_planned_icd_10_pcs", "package": null, "version": null}, {"name": "readmissions__encounter_with_ccs", "package": null, "version": null}, {"name": "readmissions__acute_diagnosis_icd_10_cm", "package": null, "version": null}, {"name": "readmissions__acute_diagnosis_ccs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__procedure_ccs", "seed.the_tuva_project.readmissions__always_planned_ccs_procedure_category", "model.the_tuva_project.readmissions__encounter_with_ccs", "seed.the_tuva_project.readmissions__always_planned_ccs_diagnosis_category", "seed.the_tuva_project.readmissions__potentially_planned_ccs_procedure_category", "seed.the_tuva_project.readmissions__potentially_planned_icd_10_pcs", "seed.the_tuva_project.readmissions__acute_diagnosis_icd_10_cm", "seed.the_tuva_project.readmissions__acute_diagnosis_ccs"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__planned_encounter.sql", "compiled": true, "compiled_code": "\n\n-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct pccs.encounter_id\nfrom tuva_project_demo.readmissions._int_procedure_ccs pccs\ninner join tuva_project_demo.readmissions._value_set_always_planned_ccs_procedure_category apc\n    on pccs.ccs_procedure_category = apc.ccs_procedure_category\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom tuva_project_demo.readmissions._int_encounter_with_ccs dccs\ninner join tuva_project_demo.readmissions._value_set_always_planned_ccs_diagnosis_category apd\n    on dccs.ccs_diagnosis_category = apd.ccs_diagnosis_category\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom tuva_project_demo.readmissions._int_procedure_ccs pccs\ninner join tuva_project_demo.readmissions._value_set_potentially_planned_ccs_procedure_category pcs\n    on pccs.ccs_procedure_category = pcs.ccs_procedure_category\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_icd_10_pcs as (\nselect distinct encounter_id\nfrom tuva_project_demo.readmissions._int_procedure_ccs pcs\ninner join  tuva_project_demo.readmissions._value_set_potentially_planned_icd_10_pcs pps\n    on pcs.procedure_code = pps.icd_10_pcs\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom tuva_project_demo.readmissions._int_encounter_with_ccs dccs\nleft join tuva_project_demo.readmissions._value_set_acute_diagnosis_icd_10_cm adi\n    on dccs.primary_diagnosis_code = adi.icd_10_cm\nleft join tuva_project_demo.readmissions._value_set_acute_diagnosis_ccs adc\n    on dccs.ccs_diagnosis_category = adc.ccs_diagnosis_category\nwhere adi.icd_10_cm is not null or adc.ccs_diagnosis_category is not null\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--               their ICD-10-PCS procedure codes\n--           [2] not acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect distinct ppp.encounter_id\nfrom (\n    select * from potentially_planned_px_ccs\n        union all\n    select * from potentially_planned_px_icd_10_pcs) ppp\nleft join acute_encounters\n    on ppp.encounter_id = acute_encounters.encounter_id\nwhere acute_encounters.encounter_id is null\n\n)\n\n\n-- Aggregate of all encounter_ids for planned encounters\n\nselect * , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run from always_planned_px\nunion distinct\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run from always_planned_dx\nunion distinct\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run from potentially_planned_that_are_actually_planned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__procedure_ccs": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__procedure_ccs", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__procedure_ccs.sql", "original_file_path": "models/readmissions/intermediate/readmissions__procedure_ccs.sql", "unique_id": "model.the_tuva_project.readmissions__procedure_ccs", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__procedure_ccs"], "alias": "_int_procedure_ccs", "checksum": {"name": "sha256", "checksum": "76e7c9d3546ce2e8d751fb68428a8830d4381a8439cf5a1fa9d9e1a8a809632f"}, "config": {"enabled": true, "alias": "_int_procedure_ccs", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model includes all procedures from the stg_procedure model and adds a valid_icd_10_pcs_flag to indicate if the ICD-10-PCS code for this procedure is valid. We also add the CCS procedure category associated with the procedure", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "An ICD-10-PCS code associated with this encounter_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_icd_10_pcs_flag": {"name": "valid_icd_10_pcs_flag", "description": "A flag indicating if the ICD-10-PCS procedure code given is valid", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ccs_procedure_category": {"name": "ccs_procedure_category", "description": "The CCS code associated with the given ICD-10-PCS procedure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_procedure_ccs", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6545627, "relation_name": "tuva_project_demo.readmissions._int_procedure_ccs", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id because different procedures associated with the\n-- encounter (different rows on the stg_procedure model) may have\n-- different associated CCS procedure categories.\n\n\n\nselect\n    aa.encounter_id,\n    aa.normalized_code as procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs_flag,\n    cc.ccs_procedure_category,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom\n    {{ ref('readmissions__stg_core__procedure') }} aa\n    left join {{ ref('terminology__icd_10_pcs') }} bb\n    on aa.normalized_code = bb.icd_10_pcs\n    left join {{ ref('readmissions__icd_10_pcs_to_ccs') }} cc\n    on aa.normalized_code = cc.icd_10_pcs\nwhere aa.normalized_code_type = 'icd-10-pcs'", "language": "sql", "refs": [{"name": "readmissions__stg_core__procedure", "package": null, "version": null}, {"name": "terminology__icd_10_pcs", "package": null, "version": null}, {"name": "readmissions__icd_10_pcs_to_ccs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.readmissions__stg_core__procedure", "seed.the_tuva_project.terminology__icd_10_pcs", "seed.the_tuva_project.readmissions__icd_10_pcs_to_ccs"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__procedure_ccs.sql", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__readmissions__stg_core__procedure as (\n\n\nselect\n  encounter_id\n, normalized_code\n, normalized_code_type\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n) -- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id because different procedures associated with the\n-- encounter (different rows on the stg_procedure model) may have\n-- different associated CCS procedure categories.\n\n\n\nselect\n    aa.encounter_id,\n    aa.normalized_code as procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs_flag,\n    cc.ccs_procedure_category,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom\n    __dbt__cte__readmissions__stg_core__procedure aa\n    left join tuva_project_demo.terminology.icd_10_pcs bb\n    on aa.normalized_code = bb.icd_10_pcs\n    left join tuva_project_demo.readmissions._value_set_icd_10_pcs_to_ccs cc\n    on aa.normalized_code = cc.icd_10_pcs\nwhere aa.normalized_code_type = 'icd-10-pcs'", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.readmissions__stg_core__procedure", "sql": " __dbt__cte__readmissions__stg_core__procedure as (\n\n\nselect\n  encounter_id\n, normalized_code\n, normalized_code_type\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__readmission_crude": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__readmission_crude", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/intermediate/readmissions__readmission_crude.sql", "original_file_path": "models/readmissions/intermediate/readmissions__readmission_crude.sql", "unique_id": "model.the_tuva_project.readmissions__readmission_crude", "fqn": ["the_tuva_project", "readmissions", "intermediate", "readmissions__readmission_crude"], "alias": "_int_readmission_crude", "checksum": {"name": "sha256", "checksum": "454bd26e9c7757935669745f67484c3cad454c109894c66a2a89254e7719e940"}, "config": {"enabled": true, "alias": "_int_readmission_crude", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "This model lists all encounters and whether they had a 'crude' readmission, meaning that the encounter had a hospitalization after discharge, without regard to all CMS readmission logic.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "had_readmission_flag": {"name": "had_readmission_flag", "description": "A flag to indicate whether the encounter had a readmission any number of days after discharge", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_to_readmit": {"name": "days_to_readmit", "description": "An integer to indicate the number of days to readmission", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "readmit_30_flag": {"name": "readmit_30_flag", "description": "A flag to indicate whether the encounter had a 30-day readmission", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_int_readmission_crude", "tags": "readmissions", "materialized": "view", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6582615, "relation_name": "tuva_project_demo.readmissions._int_readmission_crude", "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\n-- Here we calculate readmissions using all encounters\n-- that have valid admit and discharge dates and no overlap.\n-- This is meant to give a crude sense of the readmission\n-- rate without taking into account all the CMS HWR logic.\n\n\nwith encounter_info as (\nselect\n    enc.encounter_id,\n    enc.patient_id,\n    enc.admit_date,\n    enc.discharge_date\nfrom {{ ref('readmissions__encounter') }} enc\nleft join {{ ref('readmissions__encounter_overlap') }} over_a\n    on enc.encounter_id = over_a.encounter_id_A\nleft join {{ ref('readmissions__encounter_overlap') }} over_b\n    on enc.encounter_id = over_b.encounter_id_B\nwhere\n    admit_date is not null\n    and\n    discharge_date is not null\n    and\n    admit_date <= discharge_date\nand over_a.encounter_id_A is null and over_b.encounter_id_B is null\n    ),\n\n\nencounter_sequence as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom encounter_info\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit,\n    case\n        when ({{ dbt.datediff(\"bb.admit_date\", \"aa.discharge_date\", \"day\") }}) <= 30  then 1\n\telse 0\n    end as readmit_30_flag\nfrom encounter_sequence aa left join encounter_sequence bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\n\n\nselect *, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom readmission_calc", "language": "sql", "refs": [{"name": "readmissions__encounter", "package": null, "version": null}, {"name": "readmissions__encounter_overlap", "package": null, "version": null}, {"name": "readmissions__encounter_overlap", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.the_tuva_project.readmissions__encounter", "model.the_tuva_project.readmissions__encounter_overlap"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/intermediate/readmissions__readmission_crude.sql", "compiled": true, "compiled_code": "\n\n-- Here we calculate readmissions using all encounters\n-- that have valid admit and discharge dates and no overlap.\n-- This is meant to give a crude sense of the readmission\n-- rate without taking into account all the CMS HWR logic.\n\n\nwith encounter_info as (\nselect\n    enc.encounter_id,\n    enc.patient_id,\n    enc.admit_date,\n    enc.discharge_date\nfrom tuva_project_demo.readmissions._int_encounter enc\nleft join tuva_project_demo.readmissions._int_encounter_overlap over_a\n    on enc.encounter_id = over_a.encounter_id_A\nleft join tuva_project_demo.readmissions._int_encounter_overlap over_b\n    on enc.encounter_id = over_b.encounter_id_B\nwhere\n    admit_date is not null\n    and\n    discharge_date is not null\n    and\n    admit_date <= discharge_date\nand over_a.encounter_id_A is null and over_b.encounter_id_B is null\n    ),\n\n\nencounter_sequence as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom encounter_info\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit,\n    case\n        when (datediff(\n        day,\n        bb.admit_date,\n        aa.discharge_date\n        )) <= 30  then 1\n\telse 0\n    end as readmit_30_flag\nfrom encounter_sequence aa left join encounter_sequence bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\n\n\nselect *, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom readmission_calc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__stg_core__condition": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "readmissions__stg_core__condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/staging/readmissions__stg_core__condition.sql", "original_file_path": "models/readmissions/staging/readmissions__stg_core__condition.sql", "unique_id": "model.the_tuva_project.readmissions__stg_core__condition", "fqn": ["the_tuva_project", "readmissions", "staging", "readmissions__stg_core__condition"], "alias": "readmissions__stg_core__condition", "checksum": {"name": "sha256", "checksum": "a040a3440e44d4f4ce099ff084b2c766561b91097b6fe53dd23f59ddf996f245"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": "readmissions", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6653473, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n  encounter_id\n, normalized_code\n, condition_rank\n, normalized_code_type\n, claim_id\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__condition') }}", "language": "sql", "refs": [{"name": "core__condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/staging/readmissions__stg_core__condition.sql", "compiled": true, "compiled_code": "\n\nselect\n  encounter_id\n, normalized_code\n, condition_rank\n, normalized_code_type\n, claim_id\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__stg_core__encounter": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "readmissions__stg_core__encounter", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/staging/readmissions__stg_core__encounter.sql", "original_file_path": "models/readmissions/staging/readmissions__stg_core__encounter.sql", "unique_id": "model.the_tuva_project.readmissions__stg_core__encounter", "fqn": ["the_tuva_project", "readmissions", "staging", "readmissions__stg_core__encounter"], "alias": "readmissions__stg_core__encounter", "checksum": {"name": "sha256", "checksum": "0e8b26d829a0d9f2ce05b6341873bd4ed7a347a3578412e75abb80510da6c163"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": "readmissions", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.667188, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n    encounter_id,\n    patient_id,\n    encounter_start_date,\n    encounter_end_date,\n    discharge_disposition_code,\n    facility_npi,\n    ms_drg_code,\n    paid_amount,\n    primary_diagnosis_code,\n    '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__encounter') }}\nwhere encounter_type = 'acute inpatient'", "language": "sql", "refs": [{"name": "core__encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/staging/readmissions__stg_core__encounter.sql", "compiled": true, "compiled_code": "\n\nselect\n    encounter_id,\n    patient_id,\n    encounter_start_date,\n    encounter_end_date,\n    discharge_disposition_code,\n    facility_npi,\n    ms_drg_code,\n    paid_amount,\n    primary_diagnosis_code,\n    '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.encounter\nwhere encounter_type = 'acute inpatient'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.the_tuva_project.readmissions__stg_core__procedure": {"database": "tuva_project_demo", "schema": "PUBLIC", "name": "readmissions__stg_core__procedure", "resource_type": "model", "package_name": "the_tuva_project", "path": "readmissions/staging/readmissions__stg_core__procedure.sql", "original_file_path": "models/readmissions/staging/readmissions__stg_core__procedure.sql", "unique_id": "model.the_tuva_project.readmissions__stg_core__procedure", "fqn": ["the_tuva_project", "readmissions", "staging", "readmissions__stg_core__procedure"], "alias": "readmissions__stg_core__procedure", "checksum": {"name": "sha256", "checksum": "1a0e7d8853a0b8062b61826a96fd9d17f5098f8fcab3f4358f1352060c4760d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/readmissions/readmissions_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": "readmissions", "materialized": "ephemeral", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501482.6752553, "relation_name": null, "raw_code": "{{ config(\n     enabled = var('readmissions_enabled',var('claims_enabled',var('tuva_marts_enabled',False)))\n   )\n}}\n\nselect\n  encounter_id\n, normalized_code\n, normalized_code_type\n, '{{ var('tuva_last_run')}}' as tuva_last_run\nfrom {{ ref('core__procedure') }}", "language": "sql", "refs": [{"name": "core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.the_tuva_project.core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/readmissions/staging/readmissions__stg_core__procedure.sql", "compiled": true, "compiled_code": "\n\nselect\n  encounter_id\n, normalized_code\n, normalized_code_type\n, '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.the_tuva_project.terminology__admit_source": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__admit_source", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__admit_source.csv", "original_file_path": "seeds/terminology/terminology__admit_source.csv", "unique_id": "seed.the_tuva_project.terminology__admit_source", "fqn": ["the_tuva_project", "terminology", "terminology__admit_source"], "alias": "admit_source", "checksum": {"name": "sha256", "checksum": "392e0c1935973dbea2e96030db856a8ccfa660cbd51f45c92d51d121aa432a8b"}, "config": {"enabled": true, "alias": "admit_source", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "admit_source", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.731175, "relation_name": "tuva_project_demo.terminology.admit_source", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__admit_type": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__admit_type", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__admit_type.csv", "original_file_path": "seeds/terminology/terminology__admit_type.csv", "unique_id": "seed.the_tuva_project.terminology__admit_type", "fqn": ["the_tuva_project", "terminology", "terminology__admit_type"], "alias": "admit_type", "checksum": {"name": "sha256", "checksum": "fd67aa459041a8d1f8b8b8c6cf9bb041b9e5405c2c28c70b54eacbc01926508b"}, "config": {"enabled": true, "alias": "admit_type", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "admit_type", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.736585, "relation_name": "tuva_project_demo.terminology.admit_type", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__ansi_fips_state": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__ansi_fips_state", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__ansi_fips_state.csv", "original_file_path": "seeds/terminology/terminology__ansi_fips_state.csv", "unique_id": "seed.the_tuva_project.terminology__ansi_fips_state", "fqn": ["the_tuva_project", "terminology", "terminology__ansi_fips_state"], "alias": "ansi_fips_state", "checksum": {"name": "sha256", "checksum": "9aace3600ddf44495c8071368abbab6baf6bc83ccf454cdb6125079b355a7055"}, "config": {"enabled": true, "alias": "ansi_fips_state", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "medicare_cclf_connector"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ansi_fips_state_code": "varchar", "ansi_fips_state_abbreviation": "varchar", "ansi_fips_state_name": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "medicare_cclf_connector"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "ansi_fips_state", "tags": ["terminology", "medicare_cclf_connector"], "column_types": {"ansi_fips_state_code": "varchar", "ansi_fips_state_abbreviation": "varchar", "ansi_fips_state_name": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.7984717, "relation_name": "tuva_project_demo.terminology.ansi_fips_state", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__apr_drg": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__apr_drg", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__apr_drg.csv", "original_file_path": "seeds/terminology/terminology__apr_drg.csv", "unique_id": "seed.the_tuva_project.terminology__apr_drg", "fqn": ["the_tuva_project", "terminology", "terminology__apr_drg"], "alias": "apr_drg", "checksum": {"name": "sha256", "checksum": "4458f5fe5df95b8291d6a0ccc4023cd7e567cca527aa56c7fb1b62c3a88d6c23"}, "config": {"enabled": true, "alias": "apr_drg", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"apr_drg_code": "varchar", "severity": "varchar", "apr_drg_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "apr_drg", "tags": ["terminology", "data_profiling"], "column_types": {"apr_drg_code": "varchar", "severity": "varchar", "apr_drg_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.201823, "relation_name": "tuva_project_demo.terminology.apr_drg", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__bill_type": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__bill_type", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__bill_type.csv", "original_file_path": "seeds/terminology/terminology__bill_type.csv", "unique_id": "seed.the_tuva_project.terminology__bill_type", "fqn": ["the_tuva_project", "terminology", "terminology__bill_type"], "alias": "bill_type", "checksum": {"name": "sha256", "checksum": "2e28bfc3dc31c7858ebbdeb75c46bfa3ea2fd2e9448d65884289d909383b4ea5"}, "config": {"enabled": true, "alias": "bill_type", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "bill_type", "tags": ["terminology", "data_profiling"], "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "database": "tuva_project_demo"}, "created_at": 1705501479.745248, "relation_name": "tuva_project_demo.terminology.bill_type", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__calendar": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__calendar", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__calendar.csv", "original_file_path": "seeds/terminology/terminology__calendar.csv", "unique_id": "seed.the_tuva_project.terminology__calendar", "fqn": ["the_tuva_project", "terminology", "terminology__calendar"], "alias": "calendar", "checksum": {"name": "sha256", "checksum": "e0e2dcef31be96e75c148c0c957eb818f563c04e71a5e7faefc8057598198671"}, "config": {"enabled": true, "alias": "calendar", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "pmpm"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/terminology','calendar.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"full_date": "date", "year": "integer", "month": "integer", "day": "integer", "month_name": "varchar", "day_of_week_number": "integer", "day_of_week_name": "varchar", "week_of_year": "integer", "day_of_year": "integer", "year_month": "varchar", "first_day_of_month": "date", "last_day_of_month": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "pmpm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/terminology','calendar.csv',compression=true,null_marker=true) }}", "schema": "terminology", "alias": "calendar", "tags": ["terminology", "pmpm"], "column_types": {"full_date": "date", "year": "integer", "month": "integer", "day": "integer", "month_name": "varchar", "day_of_week_number": "integer", "day_of_week_name": "varchar", "week_of_year": "integer", "day_of_year": "integer", "year_month": "varchar", "first_day_of_month": "date", "last_day_of_month": "date"}, "database": "tuva_project_demo"}, "created_at": 1705501479.7558017, "relation_name": "tuva_project_demo.terminology.calendar", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.terminology__claim_type": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__claim_type", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__claim_type.csv", "original_file_path": "seeds/terminology/terminology__claim_type.csv", "unique_id": "seed.the_tuva_project.terminology__claim_type", "fqn": ["the_tuva_project", "terminology", "terminology__claim_type"], "alias": "claim_type", "checksum": {"name": "sha256", "checksum": "da35be4c432144ba8003d5ef8f2d815d8afce6ed215d6aa065e305ad11f7552c"}, "config": {"enabled": true, "alias": "claim_type", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "claim_type", "tags": ["terminology", "data_profiling"], "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.7618544, "relation_name": "tuva_project_demo.terminology.claim_type", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__code_type": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__code_type", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__code_type.csv", "original_file_path": "seeds/terminology/terminology__code_type.csv", "unique_id": "seed.the_tuva_project.terminology__code_type", "fqn": ["the_tuva_project", "terminology", "terminology__code_type"], "alias": "code_type", "checksum": {"name": "sha256", "checksum": "5fe9aa562e036ca6f98866fe29d85c1f2351f53d00fdde631ad8dce183ce5788"}, "config": {"enabled": true, "alias": "code_type", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "code_type", "tags": ["terminology", "data_profiling"], "column_types": {"description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.766443, "relation_name": "tuva_project_demo.terminology.code_type", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__discharge_disposition": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__discharge_disposition", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__discharge_disposition.csv", "original_file_path": "seeds/terminology/terminology__discharge_disposition.csv", "unique_id": "seed.the_tuva_project.terminology__discharge_disposition", "fqn": ["the_tuva_project", "terminology", "terminology__discharge_disposition"], "alias": "discharge_disposition", "checksum": {"name": "sha256", "checksum": "15c1af0306238509e41a88152b1ac9dc683776d790531da941c9cac40430ce05"}, "config": {"enabled": true, "alias": "discharge_disposition", "schema": "terminology", "database": "tuva_project_demo", "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "discharge_disposition", "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.7718456, "relation_name": "tuva_project_demo.terminology.discharge_disposition", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__encounter_type": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__encounter_type", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__encounter_type.csv", "original_file_path": "seeds/terminology/terminology__encounter_type.csv", "unique_id": "seed.the_tuva_project.terminology__encounter_type", "fqn": ["the_tuva_project", "terminology", "terminology__encounter_type"], "alias": "encounter_type", "checksum": {"name": "sha256", "checksum": "6860a611d3dde5a476c3c6b2969b4e90f63e05491e6a943d1158bb5f2e7b1879"}, "config": {"enabled": true, "alias": "encounter_type", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "encounter_type", "tags": ["terminology", "claims_preprocessing"], "column_types": {"description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.778227, "relation_name": "tuva_project_demo.terminology.encounter_type", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__ethnicity": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__ethnicity", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__ethnicity.csv", "original_file_path": "seeds/terminology/terminology__ethnicity.csv", "unique_id": "seed.the_tuva_project.terminology__ethnicity", "fqn": ["the_tuva_project", "terminology", "terminology__ethnicity"], "alias": "ethnicity", "checksum": {"name": "sha256", "checksum": "d23c1e3d7417d569bbb1e11cd0a493cfd60f60e231756adb2f7b6160ca2f93e6"}, "config": {"enabled": true, "alias": "ethnicity", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "ethnicity", "tags": "terminology", "column_types": {"code": "varchar", "description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.7851229, "relation_name": "tuva_project_demo.terminology.ethnicity", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__fips_county": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__fips_county", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__fips_county.csv", "original_file_path": "seeds/terminology/terminology__fips_county.csv", "unique_id": "seed.the_tuva_project.terminology__fips_county", "fqn": ["the_tuva_project", "terminology", "terminology__fips_county"], "alias": "fips_county", "checksum": {"name": "sha256", "checksum": "51c80da82ec1f20665fbd65379796c53f724781fa3833396cba093c89004bfb5"}, "config": {"enabled": true, "alias": "fips_county", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "fips_county", "tags": "terminology", "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.7914739, "relation_name": "tuva_project_demo.terminology.fips_county", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__gender": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__gender", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__gender.csv", "original_file_path": "seeds/terminology/terminology__gender.csv", "unique_id": "seed.the_tuva_project.terminology__gender", "fqn": ["the_tuva_project", "terminology", "terminology__gender"], "alias": "gender", "checksum": {"name": "sha256", "checksum": "49caad564a6d46cabcbbaa25857984aa1f7d4426ed5927989cdeddc1539d6fb6"}, "config": {"enabled": true, "alias": "gender", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "gender", "tags": ["terminology", "data_profiling"], "column_types": {"description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.804499, "relation_name": "tuva_project_demo.terminology.gender", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__hcpcs_level_2": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__hcpcs_level_2", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__hcpcs_level_2.csv", "original_file_path": "seeds/terminology/terminology__hcpcs_level_2.csv", "unique_id": "seed.the_tuva_project.terminology__hcpcs_level_2", "fqn": ["the_tuva_project", "terminology", "terminology__hcpcs_level_2"], "alias": "hcpcs_level_2", "checksum": {"name": "path", "checksum": "seeds/terminology/terminology__hcpcs_level_2.csv"}, "config": {"enabled": true, "alias": "hcpcs_level_2", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "hcpcs_level_2", "tags": "terminology", "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.8195925, "relation_name": "tuva_project_demo.terminology.hcpcs_level_2", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__icd_10_cm": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__icd_10_cm", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__icd_10_cm.csv", "original_file_path": "seeds/terminology/terminology__icd_10_cm.csv", "unique_id": "seed.the_tuva_project.terminology__icd_10_cm", "fqn": ["the_tuva_project", "terminology", "terminology__icd_10_cm"], "alias": "icd_10_cm", "checksum": {"name": "sha256", "checksum": "08903dd5b951cfdd2dc1e2d92406571ab08c2fa401c2f951a6190b38af1dbf61"}, "config": {"enabled": true, "alias": "icd_10_cm", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/terminology','icd_10_cm.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/terminology','icd_10_cm.csv',compression=true,null_marker=true) }}", "schema": "terminology", "alias": "icd_10_cm", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.9702225, "relation_name": "tuva_project_demo.terminology.icd_10_cm", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.terminology__icd_10_pcs": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__icd_10_pcs", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__icd_10_pcs.csv", "original_file_path": "seeds/terminology/terminology__icd_10_pcs.csv", "unique_id": "seed.the_tuva_project.terminology__icd_10_pcs", "fqn": ["the_tuva_project", "terminology", "terminology__icd_10_pcs"], "alias": "icd_10_pcs", "checksum": {"name": "sha256", "checksum": "1d18cafa0d405e60cd1be1e039fbfb2dfa9591a1cef6a441b60c26a61de41ad3"}, "config": {"enabled": true, "alias": "icd_10_pcs", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/terminology','icd_10_pcs.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/terminology','icd_10_pcs.csv',compression=true,null_marker=true) }}", "schema": "terminology", "alias": "icd_10_pcs", "tags": ["terminology", "claims_preprocessing", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.9880419, "relation_name": "tuva_project_demo.terminology.icd_10_pcs", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.terminology__icd_9_cm": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__icd_9_cm", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__icd_9_cm.csv", "original_file_path": "seeds/terminology/terminology__icd_9_cm.csv", "unique_id": "seed.the_tuva_project.terminology__icd_9_cm", "fqn": ["the_tuva_project", "terminology", "terminology__icd_9_cm"], "alias": "icd_9_cm", "checksum": {"name": "path", "checksum": "seeds/terminology/terminology__icd_9_cm.csv"}, "config": {"enabled": true, "alias": "icd_9_cm", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"icd_9_cm": "varchar", "long_description": "varchar", "short_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "icd_9_cm", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"icd_9_cm": "varchar", "long_description": "varchar", "short_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501479.9970677, "relation_name": "tuva_project_demo.terminology.icd_9_cm", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__icd_9_pcs": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__icd_9_pcs", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__icd_9_pcs.csv", "original_file_path": "seeds/terminology/terminology__icd_9_pcs.csv", "unique_id": "seed.the_tuva_project.terminology__icd_9_pcs", "fqn": ["the_tuva_project", "terminology", "terminology__icd_9_pcs"], "alias": "icd_9_pcs", "checksum": {"name": "sha256", "checksum": "dc97df38ffbff5dddcd6e0160d41f76c3d29b7d740b583faaac1a5de86698fab"}, "config": {"enabled": true, "alias": "icd_9_pcs", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"icd_9_pcs": "varchar", "long_description": "varchar", "short_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "icd_9_pcs", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"icd_9_pcs": "varchar", "long_description": "varchar", "short_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.006218, "relation_name": "tuva_project_demo.terminology.icd_9_pcs", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__loinc": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__loinc", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__loinc.csv", "original_file_path": "seeds/terminology/terminology__loinc.csv", "unique_id": "seed.the_tuva_project.terminology__loinc", "fqn": ["the_tuva_project", "terminology", "terminology__loinc"], "alias": "loinc", "checksum": {"name": "sha256", "checksum": "374101e8b4e4fd5038c5bcae0dca2e5fcf2992883068619e2cbadad7ea3a8e7b"}, "config": {"enabled": true, "alias": "loinc", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/terminology','loinc.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"loinc": "varchar", "short_name": "varchar", "long_common_name": "varchar", "component": "varchar", "property": "varchar", "time_aspect": "varchar", "system": "varchar", "scale_type": "varchar", "method_type": "varchar", "class_code": "varchar", "class_description": "varchar", "class_type_code": "varchar", "class_type_description": "varchar", "external_copyright_notice": "varchar(3000)", "status": "varchar", "version_first_released": "varchar", "version_last_changed": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "columns": [{"name": "loinc", "description": "The LOINC code"}, {"name": "short_name", "description": "If exists, the short human readable version of the LOINC description"}, {"name": "long_common_name", "description": "Clinician-friendly full loinc description"}, {"name": "component", "description": "The substance or entity being measured or observed.  Also called the Analyte. The first of six loinc parts."}, {"name": "property", "description": "The characteristic or attribute of the analyte. The second of six loinc parts."}, {"name": "time_aspect", "description": "The interval of time over which an observation was made. The third of six loinc parts."}, {"name": "system", "description": "The thing upon which the observation was made. Also called specimen for laboratory tests. The fourth of six loinc parts."}, {"name": "scale_type", "description": "How the observation value is quantified or expressed (e.g. quantitative, ordinal, nominal, etc).  The fifth of six loinc parts."}, {"name": "method_type", "description": "A high-level classification of how the observation was made. Optional; only needed when the technique affects the clinical interpretation of the results.  The sixth of six loinc parts."}, {"name": "class_code", "description": "A code representing the general category of the loinc term"}, {"name": "class_description", "description": "The general category of the LOINC term"}, {"name": "class_type_code", "description": "A code representing the top level category for the test"}, {"name": "class_type_description", "description": "The top level category for the test; Laboratory, Clincal, Claims attachments, or Surveys"}, {"name": "external_copyright_notice", "description": "External copyright holders copyright notice for this LOINC code"}, {"name": "status", "description": "The status of the LOINC code concept. Active, Trial (experimental), Discouraged (not recommended), or Deprecated (should not be used)"}, {"name": "version_first_released", "description": "The first release version of LOINC that included this code"}, {"name": "version_last_changed", "description": "The last LOINC version in which this record was changed"}]}, "tags": ["terminology"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/terminology','loinc.csv',compression=true,null_marker=true) }}", "schema": "terminology", "alias": "loinc", "tags": ["terminology"], "columns": [{"name": "loinc", "description": "The LOINC code"}, {"name": "short_name", "description": "If exists, the short human readable version of the LOINC description"}, {"name": "long_common_name", "description": "Clinician-friendly full loinc description"}, {"name": "component", "description": "The substance or entity being measured or observed.  Also called the Analyte. The first of six loinc parts."}, {"name": "property", "description": "The characteristic or attribute of the analyte. The second of six loinc parts."}, {"name": "time_aspect", "description": "The interval of time over which an observation was made. The third of six loinc parts."}, {"name": "system", "description": "The thing upon which the observation was made. Also called specimen for laboratory tests. The fourth of six loinc parts."}, {"name": "scale_type", "description": "How the observation value is quantified or expressed (e.g. quantitative, ordinal, nominal, etc).  The fifth of six loinc parts."}, {"name": "method_type", "description": "A high-level classification of how the observation was made. Optional; only needed when the technique affects the clinical interpretation of the results.  The sixth of six loinc parts."}, {"name": "class_code", "description": "A code representing the general category of the loinc term"}, {"name": "class_description", "description": "The general category of the LOINC term"}, {"name": "class_type_code", "description": "A code representing the top level category for the test"}, {"name": "class_type_description", "description": "The top level category for the test; Laboratory, Clincal, Claims attachments, or Surveys"}, {"name": "external_copyright_notice", "description": "External copyright holders copyright notice for this LOINC code"}, {"name": "status", "description": "The status of the LOINC code concept. Active, Trial (experimental), Discouraged (not recommended), or Deprecated (should not be used)"}, {"name": "version_first_released", "description": "The first release version of LOINC that included this code"}, {"name": "version_last_changed", "description": "The last LOINC version in which this record was changed"}], "column_types": {"loinc": "varchar", "short_name": "varchar", "long_common_name": "varchar", "component": "varchar", "property": "varchar", "time_aspect": "varchar", "system": "varchar", "scale_type": "varchar", "method_type": "varchar", "class_code": "varchar", "class_description": "varchar", "class_type_code": "varchar", "class_type_description": "varchar", "external_copyright_notice": "varchar(3000)", "status": "varchar", "version_first_released": "varchar", "version_last_changed": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.0473664, "relation_name": "tuva_project_demo.terminology.loinc", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.terminology__loinc_deprecated_mapping": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__loinc_deprecated_mapping", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__loinc_deprecated_mapping.csv", "original_file_path": "seeds/terminology/terminology__loinc_deprecated_mapping.csv", "unique_id": "seed.the_tuva_project.terminology__loinc_deprecated_mapping", "fqn": ["the_tuva_project", "terminology", "terminology__loinc_deprecated_mapping"], "alias": "loinc_deprecated_mapping", "checksum": {"name": "sha256", "checksum": "eecd52c3944bc1abd373c557a286ee386438733c6daf2fbb844e86623f7af119"}, "config": {"enabled": true, "alias": "loinc_deprecated_mapping", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/terminology','loinc_deprecated_mapping.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"loinc": "varchar", "map_to": "varchar", "comment": "varchar", "final_map_to": "varchar", "all_comments": "varchar", "depth": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null, "columns": [{"name": "loinc", "description": "The deprecated term to which the replacement term(s) apply."}, {"name": "map_to", "description": "A replacement term that is to be used in place of the deprecated or discouraged term."}, {"name": "comment", "description": "Narrative text that explains the rational for using the recommended replacement term."}, {"name": "final_map_to", "description": "If there are multiple steps of deprecated codes, this is the final (active) code"}, {"name": "all_comments", "description": "An aggregation of comments for any mapping steps between the deprecated code and the active code"}, {"name": "depth", "description": "How many steps this mapping is to the active code"}]}, "tags": ["terminology"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/terminology','loinc_deprecated_mapping.csv',compression=true,null_marker=true) }}", "schema": "terminology", "alias": "loinc_deprecated_mapping", "tags": ["terminology"], "columns": [{"name": "loinc", "description": "The deprecated term to which the replacement term(s) apply."}, {"name": "map_to", "description": "A replacement term that is to be used in place of the deprecated or discouraged term."}, {"name": "comment", "description": "Narrative text that explains the rational for using the recommended replacement term."}, {"name": "final_map_to", "description": "If there are multiple steps of deprecated codes, this is the final (active) code"}, {"name": "all_comments", "description": "An aggregation of comments for any mapping steps between the deprecated code and the active code"}, {"name": "depth", "description": "How many steps this mapping is to the active code"}], "column_types": {"loinc": "varchar", "map_to": "varchar", "comment": "varchar", "final_map_to": "varchar", "all_comments": "varchar", "depth": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.068919, "relation_name": "tuva_project_demo.terminology.loinc_deprecated_mapping", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.terminology__mdc": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__mdc", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__mdc.csv", "original_file_path": "seeds/terminology/terminology__mdc.csv", "unique_id": "seed.the_tuva_project.terminology__mdc", "fqn": ["the_tuva_project", "terminology", "terminology__mdc"], "alias": "mdc", "checksum": {"name": "sha256", "checksum": "b19311ec103fd48ea11a228d065b646f52fde1292a42ca3feb6fb2884eb00522"}, "config": {"enabled": true, "alias": "mdc", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "mdc", "tags": "terminology", "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.0747993, "relation_name": "tuva_project_demo.terminology.mdc", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__medicare_dual_eligibility": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__medicare_dual_eligibility", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__medicare_dual_eligibility.csv", "original_file_path": "seeds/terminology/terminology__medicare_dual_eligibility.csv", "unique_id": "seed.the_tuva_project.terminology__medicare_dual_eligibility", "fqn": ["the_tuva_project", "terminology", "terminology__medicare_dual_eligibility"], "alias": "medicare_dual_eligibility", "checksum": {"name": "sha256", "checksum": "193c868833835d33634e0a4bee8841859d32b26e46b8bf9378a0fa9e20e6baac"}, "config": {"enabled": true, "alias": "medicare_dual_eligibility", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "medicare_dual_eligibility", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.0810926, "relation_name": "tuva_project_demo.terminology.medicare_dual_eligibility", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__medicare_orec": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__medicare_orec", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__medicare_orec.csv", "original_file_path": "seeds/terminology/terminology__medicare_orec.csv", "unique_id": "seed.the_tuva_project.terminology__medicare_orec", "fqn": ["the_tuva_project", "terminology", "terminology__medicare_orec"], "alias": "medicare_orec", "checksum": {"name": "sha256", "checksum": "ff425893ec0ec8d7e3eb1911d3c979540d02a8853efa2af0676ccd9c954a50f4"}, "config": {"enabled": true, "alias": "medicare_orec", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"original_reason_entitlement_code": "varchar", "original_reason_entitlement_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "medicare_orec", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"original_reason_entitlement_code": "varchar", "original_reason_entitlement_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.0885127, "relation_name": "tuva_project_demo.terminology.medicare_orec", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__medicare_status": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__medicare_status", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__medicare_status.csv", "original_file_path": "seeds/terminology/terminology__medicare_status.csv", "unique_id": "seed.the_tuva_project.terminology__medicare_status", "fqn": ["the_tuva_project", "terminology", "terminology__medicare_status"], "alias": "medicare_status", "checksum": {"name": "sha256", "checksum": "2bd1a8a081fceb69bf91287c8a56c370ea1544a1fbbe12829566955012c04c97"}, "config": {"enabled": true, "alias": "medicare_status", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "medicare_status", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.1026018, "relation_name": "tuva_project_demo.terminology.medicare_status", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__ms_drg": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__ms_drg", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__ms_drg.csv", "original_file_path": "seeds/terminology/terminology__ms_drg.csv", "unique_id": "seed.the_tuva_project.terminology__ms_drg", "fqn": ["the_tuva_project", "terminology", "terminology__ms_drg"], "alias": "ms_drg", "checksum": {"name": "sha256", "checksum": "4f604ede8b4f04891a180b2a28d0591dd19c6f2213f31771cb12651b833bb587"}, "config": {"enabled": true, "alias": "ms_drg", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "ms_drg", "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "database": "tuva_project_demo"}, "created_at": 1705501480.1113083, "relation_name": "tuva_project_demo.terminology.ms_drg", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__other_provider_taxonomy": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__other_provider_taxonomy", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__other_provider_taxonomy.csv", "original_file_path": "seeds/terminology/terminology__other_provider_taxonomy.csv", "unique_id": "seed.the_tuva_project.terminology__other_provider_taxonomy", "fqn": ["the_tuva_project", "terminology", "terminology__other_provider_taxonomy"], "alias": "other_provider_taxonomy", "checksum": {"name": "sha256", "checksum": "ea344ae188db60f0f75e52a39114af49b7828fe050d3f761db03d4d07039cccf"}, "config": {"enabled": true, "alias": "other_provider_taxonomy", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/provider_data','other_provider_taxonomy.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"npi": "varchar(35)", "taxonomy_code": "varchar(35)", "medicare_specialty_code": "varchar(173)", "description": "varchar(101)", "primary_flag": "integer"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/provider_data','other_provider_taxonomy.csv',compression=true,null_marker=true) }}", "schema": "terminology", "tags": ["terminology", "claims_preprocessing"], "alias": "other_provider_taxonomy", "column_types": {"npi": "varchar(35)", "taxonomy_code": "varchar(35)", "medicare_specialty_code": "varchar(173)", "description": "varchar(101)", "primary_flag": "integer"}, "database": "tuva_project_demo"}, "created_at": 1705501480.1262224, "relation_name": "tuva_project_demo.terminology.other_provider_taxonomy", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.terminology__payer_type": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__payer_type", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__payer_type.csv", "original_file_path": "seeds/terminology/terminology__payer_type.csv", "unique_id": "seed.the_tuva_project.terminology__payer_type", "fqn": ["the_tuva_project", "terminology", "terminology__payer_type"], "alias": "payer_type", "checksum": {"name": "sha256", "checksum": "df7db012d6c46b24f5b5a367e191ef85df76a70c661cacd27989c212fac241b4"}, "config": {"enabled": true, "alias": "payer_type", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"payer_type": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "payer_type", "tags": ["terminology", "data_profiling"], "column_types": {"payer_type": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.1317577, "relation_name": "tuva_project_demo.terminology.payer_type", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__place_of_service": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__place_of_service", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__place_of_service.csv", "original_file_path": "seeds/terminology/terminology__place_of_service.csv", "unique_id": "seed.the_tuva_project.terminology__place_of_service", "fqn": ["the_tuva_project", "terminology", "terminology__place_of_service"], "alias": "place_of_service", "checksum": {"name": "sha256", "checksum": "d53d91055ebddab61198919a4d08fd4b312ced8dc91df28d76106f5185642ceb"}, "config": {"enabled": true, "alias": "place_of_service", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "place_of_service", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.1384633, "relation_name": "tuva_project_demo.terminology.place_of_service", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__present_on_admission": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__present_on_admission", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__present_on_admission.csv", "original_file_path": "seeds/terminology/terminology__present_on_admission.csv", "unique_id": "seed.the_tuva_project.terminology__present_on_admission", "fqn": ["the_tuva_project", "terminology", "terminology__present_on_admission"], "alias": "present_on_admission", "checksum": {"name": "sha256", "checksum": "f0cdf4a2206612969016f8427eb97159b5954364518a92194275adc2ba9ce53b"}, "config": {"enabled": true, "alias": "present_on_admission", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "data_profiling", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "data_profiling", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "present_on_admission", "tags": ["terminology", "data_profiling", "claims_preprocessing"], "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.1451304, "relation_name": "tuva_project_demo.terminology.present_on_admission", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__provider": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__provider", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__provider.csv", "original_file_path": "seeds/terminology/terminology__provider.csv", "unique_id": "seed.the_tuva_project.terminology__provider", "fqn": ["the_tuva_project", "terminology", "terminology__provider"], "alias": "provider", "checksum": {"name": "sha256", "checksum": "f88950a046cf237eda0f4b60cd8284961c4b9c59742960a8e63f7305fe89ed05"}, "config": {"enabled": true, "alias": "provider", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/provider_data','provider.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"npi": "varchar(35)", "entity_type_code": "varchar(26)", "entity_type_description": "varchar(37)", "primary_taxonomy_code": "varchar(35)", "primary_specialty_description": "varchar(173)", "provider_first_name": "varchar(95)", "provider_last_name": "varchar(95)", "provider_organization_name": "varchar(95)", "parent_organization_name": "varchar(95)", "practice_address_line_1": "varchar(80)", "practice_address_line_2": "varchar(80)", "practice_city": "varchar(65)", "practice_state": "varchar(65)", "practice_zip_code": "varchar(42)", "last_updated": "date", "deactivation_date": "date", "deactivation_flag": "varchar(80)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/provider_data','provider.csv',compression=true,null_marker=true) }}", "schema": "terminology", "tags": ["terminology", "claims_preprocessing"], "alias": "provider", "column_types": {"npi": "varchar(35)", "entity_type_code": "varchar(26)", "entity_type_description": "varchar(37)", "primary_taxonomy_code": "varchar(35)", "primary_specialty_description": "varchar(173)", "provider_first_name": "varchar(95)", "provider_last_name": "varchar(95)", "provider_organization_name": "varchar(95)", "parent_organization_name": "varchar(95)", "practice_address_line_1": "varchar(80)", "practice_address_line_2": "varchar(80)", "practice_city": "varchar(65)", "practice_state": "varchar(65)", "practice_zip_code": "varchar(42)", "last_updated": "date", "deactivation_date": "date", "deactivation_flag": "varchar(80)"}, "database": "tuva_project_demo"}, "created_at": 1705501480.1702917, "relation_name": "tuva_project_demo.terminology.provider", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.terminology__race": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__race", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__race.csv", "original_file_path": "seeds/terminology/terminology__race.csv", "unique_id": "seed.the_tuva_project.terminology__race", "fqn": ["the_tuva_project", "terminology", "terminology__race"], "alias": "race", "checksum": {"name": "sha256", "checksum": "f2eb6f41b8f9653d6191d77991ab07dc20e7a15fa3e128c9407134cf7d1717bc"}, "config": {"enabled": true, "alias": "race", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"race_code": "varchar", "race_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "race", "tags": ["terminology", "data_profiling"], "column_types": {"race_code": "varchar", "race_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.182859, "relation_name": "tuva_project_demo.terminology.race", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__revenue_center": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__revenue_center", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__revenue_center.csv", "original_file_path": "seeds/terminology/terminology__revenue_center.csv", "unique_id": "seed.the_tuva_project.terminology__revenue_center", "fqn": ["the_tuva_project", "terminology", "terminology__revenue_center"], "alias": "revenue_center", "checksum": {"name": "sha256", "checksum": "ff5cfaa788fef04e5c0dac4a135cb7479132d76d98ebcbf75c97f70a9735c8db"}, "config": {"enabled": true, "alias": "revenue_center", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"revenue_center_code": "varchar", "revenue_center_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "revenue_center", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"revenue_center_code": "varchar", "revenue_center_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.1891286, "relation_name": "tuva_project_demo.terminology.revenue_center", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.terminology__ssa_fips_state": {"database": "tuva_project_demo", "schema": "terminology", "name": "terminology__ssa_fips_state", "resource_type": "seed", "package_name": "the_tuva_project", "path": "terminology/terminology__ssa_fips_state.csv", "original_file_path": "seeds/terminology/terminology__ssa_fips_state.csv", "unique_id": "seed.the_tuva_project.terminology__ssa_fips_state", "fqn": ["the_tuva_project", "terminology", "terminology__ssa_fips_state"], "alias": "ssa_fips_state", "checksum": {"name": "sha256", "checksum": "c3a5543c86971b4895f4ff9a814a07c5e38068ea341426c5e7acff0914ada0ce"}, "config": {"enabled": true, "alias": "ssa_fips_state", "schema": "terminology", "database": "tuva_project_demo", "tags": ["terminology"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ssa_fips_state_code": "varchar", "ssa_fips_state_name": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["terminology"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/terminology/terminology_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "terminology", "alias": "ssa_fips_state", "tags": "terminology", "column_types": {"ssa_fips_state_code": "varchar", "ssa_fips_state_name": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.0955918, "relation_name": "tuva_project_demo.terminology.ssa_fips_state", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.ccsr__dxccsr_v2023_1_body_systems": {"database": "tuva_project_demo", "schema": "ccsr", "name": "ccsr__dxccsr_v2023_1_body_systems", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/ccsr/ccsr__dxccsr_v2023_1_body_systems.csv", "original_file_path": "seeds/value_sets/ccsr/ccsr__dxccsr_v2023_1_body_systems.csv", "unique_id": "seed.the_tuva_project.ccsr__dxccsr_v2023_1_body_systems", "fqn": ["the_tuva_project", "value_sets", "ccsr", "ccsr__dxccsr_v2023_1_body_systems"], "alias": "_value_set_dxccsr_v2023_1_body_systems", "checksum": {"name": "sha256", "checksum": "dd8b64d00c38d7a99174fa8d2b6b82f2eae2b039e7ef0cd00da36d3233d6b326"}, "config": {"enabled": true, "alias": "_value_set_dxccsr_v2023_1_body_systems", "schema": "ccsr", "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["ccsr"], "description": "A table containing descriptions of the top level categories used in the CCSR condition mapper.\nThis was manually exctracted from the User Guide PDF included with the DXCCSR SAS program.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/ccsr/ccsr_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ccsr", "alias": "_value_set_dxccsr_v2023_1_body_systems", "tags": ["ccsr"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.2729688, "relation_name": "tuva_project_demo.ccsr._value_set_dxccsr_v2023_1_body_systems", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.ccsr__dxccsr_v2023_1_cleaned_map": {"database": "tuva_project_demo", "schema": "ccsr", "name": "ccsr__dxccsr_v2023_1_cleaned_map", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/ccsr/ccsr__dxccsr_v2023_1_cleaned_map.csv", "original_file_path": "seeds/value_sets/ccsr/ccsr__dxccsr_v2023_1_cleaned_map.csv", "unique_id": "seed.the_tuva_project.ccsr__dxccsr_v2023_1_cleaned_map", "fqn": ["the_tuva_project", "value_sets", "ccsr", "ccsr__dxccsr_v2023_1_cleaned_map"], "alias": "_value_set_dxccsr_v2023_1_cleaned_map", "checksum": {"name": "sha256", "checksum": "cce1c4661615e89299e601fb26d3e3060b140864507858e5d0e8b61ea9b70c12"}, "config": {"enabled": true, "alias": "_value_set_dxccsr_v2023_1_cleaned_map", "schema": "ccsr", "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/value-sets','dxccsr_v2023_1_cleaned_map.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_cm_code": "varchar", "icd_10_cm_code_description": "varchar", "default_ccsr_category_ip": "varchar", "default_ccsr_category_description_ip": "varchar", "default_ccsr_category_op": "varchar", "default_ccsr_category_description_op": "varchar", "ccsr_category_1": "varchar", "ccsr_category_1_description": "varchar", "ccsr_category_2": "varchar", "ccsr_category_2_description": "varchar", "ccsr_category_3": "varchar", "ccsr_category_3_description": "varchar", "ccsr_category_4": "varchar", "ccsr_category_4_description": "varchar", "ccsr_category_5": "varchar", "ccsr_category_5_description": "varchar", "ccsr_category_6": "varchar", "ccsr_category_6_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["ccsr"], "description": "A table containing the CSV mapping file included with the DXCCSR SAS program. The original CSV was not natively seedable, and the file was transformed with the coded included in the README. For each ICD-10-CM code, the table contains up to six CCSR category codes and a default CCSR category code.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/ccsr/ccsr_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/value-sets','dxccsr_v2023_1_cleaned_map.csv',compression=true,null_marker=true) }}", "schema": "ccsr", "alias": "_value_set_dxccsr_v2023_1_cleaned_map", "tags": ["ccsr"], "enabled": true, "column_types": {"icd_10_cm_code": "varchar", "icd_10_cm_code_description": "varchar", "default_ccsr_category_ip": "varchar", "default_ccsr_category_description_ip": "varchar", "default_ccsr_category_op": "varchar", "default_ccsr_category_description_op": "varchar", "ccsr_category_1": "varchar", "ccsr_category_1_description": "varchar", "ccsr_category_2": "varchar", "ccsr_category_2_description": "varchar", "ccsr_category_3": "varchar", "ccsr_category_3_description": "varchar", "ccsr_category_4": "varchar", "ccsr_category_4_description": "varchar", "ccsr_category_5": "varchar", "ccsr_category_5_description": "varchar", "ccsr_category_6": "varchar", "ccsr_category_6_description": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.24304, "relation_name": "tuva_project_demo.ccsr._value_set_dxccsr_v2023_1_cleaned_map", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.ccsr__prccsr_v2023_1_cleaned_map": {"database": "tuva_project_demo", "schema": "ccsr", "name": "ccsr__prccsr_v2023_1_cleaned_map", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/ccsr/ccsr__prccsr_v2023_1_cleaned_map.csv", "original_file_path": "seeds/value_sets/ccsr/ccsr__prccsr_v2023_1_cleaned_map.csv", "unique_id": "seed.the_tuva_project.ccsr__prccsr_v2023_1_cleaned_map", "fqn": ["the_tuva_project", "value_sets", "ccsr", "ccsr__prccsr_v2023_1_cleaned_map"], "alias": "_value_set_prccsr_v2023_1_cleaned_map", "checksum": {"name": "sha256", "checksum": "fd84423264c0174b1fc1e2ba23f1ac7957ef4fa7aaefcb2c45932f587b59fedf"}, "config": {"enabled": true, "alias": "_value_set_prccsr_v2023_1_cleaned_map", "schema": "ccsr", "database": "tuva_project_demo", "tags": ["ccsr"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/value-sets','prccsr_v2023_1_cleaned_map.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "icd_10_pcs_description": "varchar", "prccsr": "varchar", "prccsr_description": "varchar", "clinical_domain": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["ccsr"], "description": "A table containing the CSV mapping file included with the PRCCSR SAS program. The original CSV was not natively seedable, and the file was transformed with the coded included in the README.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/ccsr/ccsr_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/value-sets','prccsr_v2023_1_cleaned_map.csv',compression=true,null_marker=true) }}", "schema": "ccsr", "alias": "_value_set_prccsr_v2023_1_cleaned_map", "tags": ["ccsr"], "enabled": true, "column_types": {"icd_10_pcs": "varchar", "icd_10_pcs_description": "varchar", "prccsr": "varchar", "prccsr_description": "varchar", "clinical_domain": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.2637842, "relation_name": "tuva_project_demo.ccsr._value_set_prccsr_v2023_1_cleaned_map", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__cms_chronic_conditions_hierarchy", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/chronic_conditions/chronic_conditions__cms_chronic_conditions_hierarchy.csv", "original_file_path": "seeds/value_sets/chronic_conditions/chronic_conditions__cms_chronic_conditions_hierarchy.csv", "unique_id": "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy", "fqn": ["the_tuva_project", "value_sets", "chronic_conditions", "chronic_conditions__cms_chronic_conditions_hierarchy"], "alias": "_value_set_cms_chronic_conditions_hierarchy", "checksum": {"name": "path", "checksum": "seeds/value_sets/chronic_conditions/chronic_conditions__cms_chronic_conditions_hierarchy.csv"}, "config": {"enabled": true, "alias": "_value_set_cms_chronic_conditions_hierarchy", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["cms_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_chronic_conditions", "chronic_conditions"], "description": "CMS generated grouping of ICD 10 codes into chronic conditions groups", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/chronic_conditions/cms_chronic_conditions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "_value_set_cms_chronic_conditions_hierarchy", "tags": ["cms_chronic_conditions", "chronic_conditions"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.2845237, "relation_name": "tuva_project_demo.chronic_conditions._value_set_cms_chronic_conditions_hierarchy", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy": {"database": "tuva_project_demo", "schema": "chronic_conditions", "name": "chronic_conditions__tuva_chronic_conditions_hierarchy", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/chronic_conditions/chronic_conditions__tuva_chronic_conditions_hierarchy.csv", "original_file_path": "seeds/value_sets/chronic_conditions/chronic_conditions__tuva_chronic_conditions_hierarchy.csv", "unique_id": "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy", "fqn": ["the_tuva_project", "value_sets", "chronic_conditions", "chronic_conditions__tuva_chronic_conditions_hierarchy"], "alias": "_value_set_tuva_chronic_conditions_hierarchy", "checksum": {"name": "sha256", "checksum": "765b1e8cf4a724b2269f44bc43e1d1ad8bbcdaf693afc6e2750e3f3f62b29ab3"}, "config": {"enabled": true, "alias": "_value_set_tuva_chronic_conditions_hierarchy", "schema": "chronic_conditions", "database": "tuva_project_demo", "tags": ["tuva_chronic_conditions", "chronic_conditions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["tuva_chronic_conditions", "chronic_conditions"], "description": "A list of the diagnoses codes and their long and short names along with grouping logic classifying each code into a condition group and a condition family group.", "columns": {"condition_family": {"name": "condition_family", "description": "A higher level rollup grouping of conditions from the condition column", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the condition that each diagnosis code rolls up into", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "icd_10_cm_code": {"name": "icd_10_cm_code", "description": "The icd10 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "icd_10_cm_description": {"name": "icd_10_cm_description", "description": "The description for the icd10 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_column_name": {"name": "condition_column_name", "description": "The name of the column as it will appear in chronic_conditions_wide", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/chronic_conditions/tuva_chronic_conditions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "chronic_conditions", "alias": "_value_set_tuva_chronic_conditions_hierarchy", "tags": ["tuva_chronic_conditions", "chronic_conditions"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.297544, "relation_name": "tuva_project_demo.chronic_conditions._value_set_tuva_chronic_conditions_hierarchy", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__adjustment_rates": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__adjustment_rates", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__adjustment_rates.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__adjustment_rates.csv", "unique_id": "seed.the_tuva_project.cms_hcc__adjustment_rates", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__adjustment_rates"], "alias": "_value_set_adjustment_rates", "checksum": {"name": "sha256", "checksum": "b04e9b46c651f17c76c76a61ae62c2502fd13bc48bc3841e64f1b42f53c98369"}, "config": {"enabled": true, "alias": "_value_set_adjustment_rates", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"coefficient": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "Adjustment rates by payment year. Extracted from rate announcement documents on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_adjustment_rates", "tags": "cms_hcc", "enabled": true, "column_types": {"coefficient": "float"}, "database": "tuva_project_demo"}, "created_at": 1705501480.3054438, "relation_name": "tuva_project_demo.cms_hcc._value_set_adjustment_rates", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__cpt_hcpcs": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__cpt_hcpcs", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__cpt_hcpcs.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__cpt_hcpcs.csv", "unique_id": "seed.the_tuva_project.cms_hcc__cpt_hcpcs", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__cpt_hcpcs"], "alias": "_value_set_cpt_hcpcs", "checksum": {"name": "sha256", "checksum": "aca2760b1820c1f60170d5ee7bf046668d57124bb104a731d088c91929cb4eb0"}, "config": {"enabled": true, "alias": "_value_set_cpt_hcpcs", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"payment_year": "integer", "hcpcs_cpt_code": "varchar", "included_flag": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "CPT/HCPCS encounter filtering included list by payment year. Combined  and cleaned version of code files on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_cpt_hcpcs", "tags": "cms_hcc", "enabled": true, "column_types": {"payment_year": "integer", "hcpcs_cpt_code": "varchar", "included_flag": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.3183162, "relation_name": "tuva_project_demo.cms_hcc._value_set_cpt_hcpcs", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__demographic_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__demographic_factors", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__demographic_factors.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__demographic_factors.csv", "unique_id": "seed.the_tuva_project.cms_hcc__demographic_factors", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__demographic_factors"], "alias": "_value_set_demographic_factors", "checksum": {"name": "sha256", "checksum": "f142060654f2f520ab61805f804b209ae498cb597f1db8749185cd5c52b9cee8"}, "config": {"enabled": true, "alias": "_value_set_demographic_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"coefficient": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "Demographic factors by model version and risk segment. Extracted from  rate announcement documents on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_demographic_factors", "tags": "cms_hcc", "enabled": true, "column_types": {"coefficient": "float"}, "database": "tuva_project_demo"}, "created_at": 1705501480.3254569, "relation_name": "tuva_project_demo.cms_hcc._value_set_demographic_factors", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__disabled_interaction_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__disabled_interaction_factors", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__disabled_interaction_factors.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__disabled_interaction_factors.csv", "unique_id": "seed.the_tuva_project.cms_hcc__disabled_interaction_factors", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__disabled_interaction_factors"], "alias": "_value_set_disabled_interaction_factors", "checksum": {"name": "sha256", "checksum": "757502fc0be72f9b65adb6e58de6bc46332a1f46730b4cd586759665cc47162d"}, "config": {"enabled": true, "alias": "_value_set_disabled_interaction_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"hcc_code": "varchar", "coefficient": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "Disease and disabled interaction factors by model version  and risk segment. Extracted from rate announcement documents on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_disabled_interaction_factors", "tags": "cms_hcc", "enabled": true, "column_types": {"hcc_code": "varchar", "coefficient": "float"}, "database": "tuva_project_demo"}, "created_at": 1705501480.3365383, "relation_name": "tuva_project_demo.cms_hcc._value_set_disabled_interaction_factors", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__disease_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__disease_factors", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__disease_factors.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__disease_factors.csv", "unique_id": "seed.the_tuva_project.cms_hcc__disease_factors", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__disease_factors"], "alias": "_value_set_disease_factors", "checksum": {"name": "sha256", "checksum": "60df59ceb99dacdbc8b05c418424b6a266bb7919f90f39c52f960c605276cc0a"}, "config": {"enabled": true, "alias": "_value_set_disease_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"hcc_code": "varchar", "coefficient": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "Disease factors by model version and risk segment. Extracted from rate  announcement documents on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_disease_factors", "tags": "cms_hcc", "enabled": true, "column_types": {"hcc_code": "varchar", "coefficient": "float"}, "database": "tuva_project_demo"}, "created_at": 1705501480.3488915, "relation_name": "tuva_project_demo.cms_hcc._value_set_disease_factors", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__disease_hierarchy": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__disease_hierarchy", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__disease_hierarchy.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__disease_hierarchy.csv", "unique_id": "seed.the_tuva_project.cms_hcc__disease_hierarchy", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__disease_hierarchy"], "alias": "_value_set_disease_hierarchy", "checksum": {"name": "sha256", "checksum": "0b15c71ea485269e3a2d833c3e651678e3d554596d7abcbe75f8c3e169b71191"}, "config": {"enabled": true, "alias": "_value_set_disease_hierarchy", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"hcc_code": "varchar", "hccs_to_exclude": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "Disease hierarchies by model version. Extracted from rate announcement documents on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_disease_hierarchy", "tags": "cms_hcc", "enabled": true, "column_types": {"hcc_code": "varchar", "hccs_to_exclude": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.359874, "relation_name": "tuva_project_demo.cms_hcc._value_set_disease_hierarchy", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__disease_interaction_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__disease_interaction_factors", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__disease_interaction_factors.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__disease_interaction_factors.csv", "unique_id": "seed.the_tuva_project.cms_hcc__disease_interaction_factors", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__disease_interaction_factors"], "alias": "_value_set_disease_interaction_factors", "checksum": {"name": "sha256", "checksum": "2a846d76ff9ac6f97b15da6b0082cc6e5ee8b06dd84fa35c5e14ae977c7f1881"}, "config": {"enabled": true, "alias": "_value_set_disease_interaction_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"hcc_code_1": "varchar", "hcc_code_2": "varchar", "coefficient": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "Disease interaction factors by model version and risk segment. Extracted  from rate announcement documents on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_disease_interaction_factors", "tags": "cms_hcc", "enabled": true, "column_types": {"hcc_code_1": "varchar", "hcc_code_2": "varchar", "coefficient": "float"}, "database": "tuva_project_demo"}, "created_at": 1705501480.3743768, "relation_name": "tuva_project_demo.cms_hcc._value_set_disease_interaction_factors", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__enrollment_interaction_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__enrollment_interaction_factors", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__enrollment_interaction_factors.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__enrollment_interaction_factors.csv", "unique_id": "seed.the_tuva_project.cms_hcc__enrollment_interaction_factors", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__enrollment_interaction_factors"], "alias": "_value_set_enrollment_interaction_factors", "checksum": {"name": "sha256", "checksum": "ac4f859523a7a137c15906d056c934d587421dd46130b5af64da6f96090944af"}, "config": {"enabled": true, "alias": "_value_set_enrollment_interaction_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"coefficient": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "Enrollment interaction factors by model version and risk segment.  Extracted from rate announcement documents on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_enrollment_interaction_factors", "tags": "cms_hcc", "enabled": true, "column_types": {"coefficient": "float"}, "database": "tuva_project_demo"}, "created_at": 1705501480.3818977, "relation_name": "tuva_project_demo.cms_hcc._value_set_enrollment_interaction_factors", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__icd_10_cm_mappings", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__icd_10_cm_mappings.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__icd_10_cm_mappings.csv", "unique_id": "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__icd_10_cm_mappings"], "alias": "_value_set_icd_10_cm_mappings", "checksum": {"name": "path", "checksum": "seeds/value_sets/cms_hcc/cms_hcc__icd_10_cm_mappings.csv"}, "config": {"enabled": true, "alias": "_value_set_icd_10_cm_mappings", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"payment_year": "integer", "diagnosis_code": "varchar", "cms_hcc_v24": "varchar", "cms_hcc_v24_flag": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "ICD-10 to HCC mapping by payment year and model version. Combined and  cleaned version of code files on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_icd_10_cm_mappings", "tags": "cms_hcc", "enabled": true, "column_types": {"payment_year": "integer", "diagnosis_code": "varchar", "cms_hcc_v24": "varchar", "cms_hcc_v24_flag": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.3950949, "relation_name": "tuva_project_demo.cms_hcc._value_set_icd_10_cm_mappings", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.cms_hcc__payment_hcc_count_factors": {"database": "tuva_project_demo", "schema": "cms_hcc", "name": "cms_hcc__payment_hcc_count_factors", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/cms_hcc/cms_hcc__payment_hcc_count_factors.csv", "original_file_path": "seeds/value_sets/cms_hcc/cms_hcc__payment_hcc_count_factors.csv", "unique_id": "seed.the_tuva_project.cms_hcc__payment_hcc_count_factors", "fqn": ["the_tuva_project", "value_sets", "cms_hcc", "cms_hcc__payment_hcc_count_factors"], "alias": "_value_set_payment_hcc_count_factors", "checksum": {"name": "sha256", "checksum": "5935ce8a101aa461274f5e2cc1e42a94c88651391ba8c7c7c39f40e8b9a28bbd"}, "config": {"enabled": true, "alias": "_value_set_payment_hcc_count_factors", "schema": "cms_hcc", "database": "tuva_project_demo", "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"coefficient": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["cms_hcc"], "description": "Payment HCC count factors by model version and risk segment. Extracted  from rate announcement documents on cms.gov.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/cms_hcc/cms_hcc_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "cms_hcc", "alias": "_value_set_payment_hcc_count_factors", "tags": "cms_hcc", "enabled": true, "column_types": {"coefficient": "float"}, "database": "tuva_project_demo"}, "created_at": 1705501480.405016, "relation_name": "tuva_project_demo.cms_hcc._value_set_payment_hcc_count_factors", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.data_quality__test_catalog": {"database": "tuva_project_demo", "schema": "data_quality", "name": "data_quality__test_catalog", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/data_quality/data_quality__test_catalog.csv", "original_file_path": "seeds/value_sets/data_quality/data_quality__test_catalog.csv", "unique_id": "seed.the_tuva_project.data_quality__test_catalog", "fqn": ["the_tuva_project", "value_sets", "data_quality", "data_quality__test_catalog"], "alias": "_value_set_test_catalog", "checksum": {"name": "sha256", "checksum": "bc9b83eedf11d59ad14860b4ff4b3a83c2ac1c8a882b6587be904319ef4fff2e"}, "config": {"enabled": true, "alias": "_value_set_test_catalog", "schema": "data_quality", "database": "tuva_project_demo", "tags": ["data_quality", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"source_table": "varchar", "test_category": "varchar", "test_name": "varchar", "test_field": "varchar", "claim_type": "varchar", "pipeline_test": "integer"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["data_quality", "claims_preprocessing"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/data_quality/data_quality__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "data_quality", "alias": "_value_set_test_catalog", "tags": ["data_quality", "claims_preprocessing"], "enabled": true, "column_types": {"source_table": "varchar", "test_category": "varchar", "test_name": "varchar", "test_field": "varchar", "claim_type": "varchar", "pipeline_test": "integer"}, "database": "tuva_project_demo"}, "created_at": 1705501480.422758, "relation_name": "tuva_project_demo.data_quality._value_set_test_catalog", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.ed_classification__categories": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__categories", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/ed_classification/ed_classification__categories.csv", "original_file_path": "seeds/value_sets/ed_classification/ed_classification__categories.csv", "unique_id": "seed.the_tuva_project.ed_classification__categories", "fqn": ["the_tuva_project", "value_sets", "ed_classification", "ed_classification__categories"], "alias": "_value_set_categories", "checksum": {"name": "sha256", "checksum": "a4a1b0d731d19623e16365ea9739848d4758aa16bc57e9f6cfddb510f4aff769"}, "config": {"enabled": true, "alias": "_value_set_categories", "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["ed_classification"], "description": "A mapping of ED Classifications to human readable names", "columns": {"classification": {"name": "classification", "description": "code for classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "classification_name": {"name": "classification_name", "description": "human readable name for classification", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "classification_order": {"name": "classification_order", "description": "Sortable column that organizes the ED classes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/ed_classification/ed_classification_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ed_classification", "alias": "_value_set_categories", "tags": "ed_classification", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.4330697, "relation_name": "tuva_project_demo.ed_classification._value_set_categories", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.ed_classification__icd_10_cm_to_ccs": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__icd_10_cm_to_ccs", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/ed_classification/ed_classification__icd_10_cm_to_ccs.csv", "original_file_path": "seeds/value_sets/ed_classification/ed_classification__icd_10_cm_to_ccs.csv", "unique_id": "seed.the_tuva_project.ed_classification__icd_10_cm_to_ccs", "fqn": ["the_tuva_project", "value_sets", "ed_classification", "ed_classification__icd_10_cm_to_ccs"], "alias": "_value_set_icd_10_cm_to_ccs", "checksum": {"name": "sha256", "checksum": "0f2119b159a22eeb902b925b2eb98357b33bbc09bae3b7fceb04de71cf041476"}, "config": {"enabled": true, "alias": "_value_set_icd_10_cm_to_ccs", "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/value-sets','icd_10_cm_to_ccs.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["ed_classification"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/ed_classification/ed_classification_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/value-sets','icd_10_cm_to_ccs.csv',compression=true,null_marker=true) }}", "schema": "ed_classification", "alias": "_value_set_icd_10_cm_to_ccs", "tags": "ed_classification", "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.454586, "relation_name": "tuva_project_demo.ed_classification._value_set_icd_10_cm_to_ccs", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.ed_classification__johnston_icd10": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__johnston_icd10", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/ed_classification/ed_classification__johnston_icd10.csv", "original_file_path": "seeds/value_sets/ed_classification/ed_classification__johnston_icd10.csv", "unique_id": "seed.the_tuva_project.ed_classification__johnston_icd10", "fqn": ["the_tuva_project", "value_sets", "ed_classification", "ed_classification__johnston_icd10"], "alias": "_value_set_johnston_icd10", "checksum": {"name": "path", "checksum": "seeds/value_sets/ed_classification/ed_classification__johnston_icd10.csv"}, "config": {"enabled": true, "alias": "_value_set_johnston_icd10", "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"icd10": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["ed_classification"], "description": "A probabilistic mapping of icd9 codes to ed classification categories", "columns": {"icd10": {"name": "icd10", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "edcnnpa": {"name": "edcnnpa", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "edcnpa": {"name": "edcnpa", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "epct": {"name": "epct", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "noner": {"name": "noner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "injury": {"name": "injury", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "psych": {"name": "psych", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alcohol": {"name": "alcohol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug": {"name": "drug", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/ed_classification/ed_classification_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ed_classification", "alias": "_value_set_johnston_icd10", "tags": "ed_classification", "enabled": true, "column_types": {"icd10": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.48145, "relation_name": "tuva_project_demo.ed_classification._value_set_johnston_icd10", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.ed_classification__johnston_icd9": {"database": "tuva_project_demo", "schema": "ed_classification", "name": "ed_classification__johnston_icd9", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/ed_classification/ed_classification__johnston_icd9.csv", "original_file_path": "seeds/value_sets/ed_classification/ed_classification__johnston_icd9.csv", "unique_id": "seed.the_tuva_project.ed_classification__johnston_icd9", "fqn": ["the_tuva_project", "value_sets", "ed_classification", "ed_classification__johnston_icd9"], "alias": "_value_set_johnston_icd9", "checksum": {"name": "sha256", "checksum": "ff9a51b81f0b62a2059afdc216b4c9e1750c36c638c489f0fe1d99e943d32560"}, "config": {"enabled": true, "alias": "_value_set_johnston_icd9", "schema": "ed_classification", "database": "tuva_project_demo", "tags": ["ed_classification"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"icd9": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["ed_classification"], "description": "A probabilistic mapping of icd9 codes to ed classification categories", "columns": {"icd9": {"name": "icd9", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "edcnnpa": {"name": "edcnnpa", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "edcnpa": {"name": "edcnpa", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "epct": {"name": "epct", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "noner": {"name": "noner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "injury": {"name": "injury", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "psych": {"name": "psych", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alcohol": {"name": "alcohol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug": {"name": "drug", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/ed_classification/ed_classification_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "ed_classification", "alias": "_value_set_johnston_icd9", "tags": "ed_classification", "enabled": true, "column_types": {"icd9": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.4672577, "relation_name": "tuva_project_demo.ed_classification._value_set_johnston_icd9", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.quality_measures__concepts": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__concepts", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/quality_measures/quality_measures__concepts.csv", "original_file_path": "seeds/value_sets/quality_measures/quality_measures__concepts.csv", "unique_id": "seed.the_tuva_project.quality_measures__concepts", "fqn": ["the_tuva_project", "value_sets", "quality_measures", "quality_measures__concepts"], "alias": "_value_set_concepts", "checksum": {"name": "sha256", "checksum": "5e10ba31fb1bffd24bcb68fffef57426d18f34ad50d772ccd13f4bbe19051102"}, "config": {"enabled": true, "alias": "_value_set_concepts", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["quality_measures"], "description": "Measures to concepts crosswalk. List of concepts used in each reporting measure.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/quality_measures/quality_measures_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_value_set_concepts", "tags": "quality_measures", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.6955838, "relation_name": "tuva_project_demo.quality_measures._value_set_concepts", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.quality_measures__measures": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__measures", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/quality_measures/quality_measures__measures.csv", "original_file_path": "seeds/value_sets/quality_measures/quality_measures__measures.csv", "unique_id": "seed.the_tuva_project.quality_measures__measures", "fqn": ["the_tuva_project", "value_sets", "quality_measures", "quality_measures__measures"], "alias": "_value_set_measures", "checksum": {"name": "sha256", "checksum": "e23d53774fec57d7b8664ef8f86f175381c450bb0b9dbd79e63aa8915490eb25"}, "config": {"enabled": true, "alias": "_value_set_measures", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["quality_measures"], "description": "Overview of reporting measures.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/quality_measures/quality_measures_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_value_set_measures", "tags": "quality_measures", "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.6854718, "relation_name": "tuva_project_demo.quality_measures._value_set_measures", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.quality_measures__value_sets": {"database": "tuva_project_demo", "schema": "quality_measures", "name": "quality_measures__value_sets", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/quality_measures/quality_measures__value_sets.csv", "original_file_path": "seeds/value_sets/quality_measures/quality_measures__value_sets.csv", "unique_id": "seed.the_tuva_project.quality_measures__value_sets", "fqn": ["the_tuva_project", "value_sets", "quality_measures", "quality_measures__value_sets"], "alias": "_value_set_codes", "checksum": {"name": "sha256", "checksum": "ccf04d2ac1f7304567f472688af5ea8eef9dfecc0b35e3504edbccb95e577286"}, "config": {"enabled": true, "alias": "_value_set_codes", "schema": "quality_measures", "database": "tuva_project_demo", "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["quality_measures"], "description": "Concepts to value sets crosswalk. List of codes in each concept.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/quality_measures/quality_measures_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quality_measures", "alias": "_value_set_codes", "tags": "quality_measures", "enabled": true, "column_types": {"code": "varchar"}, "database": "tuva_project_demo"}, "created_at": 1705501480.7062426, "relation_name": "tuva_project_demo.quality_measures._value_set_codes", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__acute_diagnosis_ccs": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__acute_diagnosis_ccs", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__acute_diagnosis_ccs.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__acute_diagnosis_ccs.csv", "unique_id": "seed.the_tuva_project.readmissions__acute_diagnosis_ccs", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__acute_diagnosis_ccs"], "alias": "_value_set_acute_diagnosis_ccs", "checksum": {"name": "sha256", "checksum": "74b06e3fd3a570c8110eb488a98469b0678787d8af13a28ac99bc61b94713eae"}, "config": {"enabled": true, "alias": "_value_set_acute_diagnosis_ccs", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_acute_diagnosis_ccs", "tags": "readmissions", "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7189727, "relation_name": "tuva_project_demo.readmissions._value_set_acute_diagnosis_ccs", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__acute_diagnosis_icd_10_cm": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__acute_diagnosis_icd_10_cm", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__acute_diagnosis_icd_10_cm.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__acute_diagnosis_icd_10_cm.csv", "unique_id": "seed.the_tuva_project.readmissions__acute_diagnosis_icd_10_cm", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__acute_diagnosis_icd_10_cm"], "alias": "_value_set_acute_diagnosis_icd_10_cm", "checksum": {"name": "path", "checksum": "seeds/value_sets/readmissions/readmissions__acute_diagnosis_icd_10_cm.csv"}, "config": {"enabled": true, "alias": "_value_set_acute_diagnosis_icd_10_cm", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_acute_diagnosis_icd_10_cm", "tags": "readmissions", "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7290494, "relation_name": "tuva_project_demo.readmissions._value_set_acute_diagnosis_icd_10_cm", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__always_planned_ccs_diagnosis_category": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__always_planned_ccs_diagnosis_category", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__always_planned_ccs_diagnosis_category.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__always_planned_ccs_diagnosis_category.csv", "unique_id": "seed.the_tuva_project.readmissions__always_planned_ccs_diagnosis_category", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__always_planned_ccs_diagnosis_category"], "alias": "_value_set_always_planned_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "499c76e35337737047bd80bcba0426a67c55692eb22f45194313e167ded1afe5"}, "config": {"enabled": true, "alias": "_value_set_always_planned_ccs_diagnosis_category", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_always_planned_ccs_diagnosis_category", "tags": "readmissions", "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7388911, "relation_name": "tuva_project_demo.readmissions._value_set_always_planned_ccs_diagnosis_category", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__always_planned_ccs_procedure_category": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__always_planned_ccs_procedure_category", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__always_planned_ccs_procedure_category.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__always_planned_ccs_procedure_category.csv", "unique_id": "seed.the_tuva_project.readmissions__always_planned_ccs_procedure_category", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__always_planned_ccs_procedure_category"], "alias": "_value_set_always_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "a216ba7955ea5bca4ad11fae4501633a172a4a73fff064dbcfcc70e15ce7560a"}, "config": {"enabled": true, "alias": "_value_set_always_planned_ccs_procedure_category", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_always_planned_ccs_procedure_category", "tags": "readmissions", "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7467132, "relation_name": "tuva_project_demo.readmissions._value_set_always_planned_ccs_procedure_category", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__exclusion_ccs_diagnosis_category": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__exclusion_ccs_diagnosis_category", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__exclusion_ccs_diagnosis_category.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__exclusion_ccs_diagnosis_category.csv", "unique_id": "seed.the_tuva_project.readmissions__exclusion_ccs_diagnosis_category", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__exclusion_ccs_diagnosis_category"], "alias": "_value_set_exclusion_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "fa65f6e11fdd726743a6ba462794bd5d22d518f82cac73b8aa8f4e0a067a36b0"}, "config": {"enabled": true, "alias": "_value_set_exclusion_ccs_diagnosis_category", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_exclusion_ccs_diagnosis_category", "tags": "readmissions", "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7552829, "relation_name": "tuva_project_demo.readmissions._value_set_exclusion_ccs_diagnosis_category", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__icd_10_cm_to_ccs": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__icd_10_cm_to_ccs", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__icd_10_cm_to_ccs.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__icd_10_cm_to_ccs.csv", "unique_id": "seed.the_tuva_project.readmissions__icd_10_cm_to_ccs", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__icd_10_cm_to_ccs"], "alias": "_value_set_icd_10_cm_to_ccs", "checksum": {"name": "sha256", "checksum": "0f2119b159a22eeb902b925b2eb98357b33bbc09bae3b7fceb04de71cf041476"}, "config": {"enabled": true, "alias": "_value_set_icd_10_cm_to_ccs", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/value-sets','icd_10_cm_to_ccs.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/value-sets','icd_10_cm_to_ccs.csv',compression=true,null_marker=true) }}", "schema": "readmissions", "alias": "_value_set_icd_10_cm_to_ccs", "tags": "readmissions", "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7667482, "relation_name": "tuva_project_demo.readmissions._value_set_icd_10_cm_to_ccs", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.readmissions__icd_10_pcs_to_ccs": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__icd_10_pcs_to_ccs", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__icd_10_pcs_to_ccs.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__icd_10_pcs_to_ccs.csv", "unique_id": "seed.the_tuva_project.readmissions__icd_10_pcs_to_ccs", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__icd_10_pcs_to_ccs"], "alias": "_value_set_icd_10_pcs_to_ccs", "checksum": {"name": "sha256", "checksum": "b152259e1a13057a37cf15ae765f61c7c9559340b5469fa93909ad910929fd0e"}, "config": {"enabled": true, "alias": "_value_set_icd_10_pcs_to_ccs", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ load_seed('tuva-public-resources/value-sets','icd_10_pcs_to_ccs.csv',compression=true,null_marker=true) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "{{ load_seed('tuva-public-resources/value-sets','icd_10_pcs_to_ccs.csv',compression=true,null_marker=true) }}", "schema": "readmissions", "alias": "_value_set_icd_10_pcs_to_ccs", "tags": "readmissions", "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7851431, "relation_name": "tuva_project_demo.readmissions._value_set_icd_10_pcs_to_ccs", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": ["macro.the_tuva_project.load_seed"]}}, "seed.the_tuva_project.readmissions__potentially_planned_ccs_procedure_category": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__potentially_planned_ccs_procedure_category", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__potentially_planned_ccs_procedure_category.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__potentially_planned_ccs_procedure_category.csv", "unique_id": "seed.the_tuva_project.readmissions__potentially_planned_ccs_procedure_category", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__potentially_planned_ccs_procedure_category"], "alias": "_value_set_potentially_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "5ada1d0d458400596baf1a5e284e7d6559bf47ef94418cba529d27e11753d0d4"}, "config": {"enabled": true, "alias": "_value_set_potentially_planned_ccs_procedure_category", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_potentially_planned_ccs_procedure_category", "tags": "readmissions", "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7931566, "relation_name": "tuva_project_demo.readmissions._value_set_potentially_planned_ccs_procedure_category", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__potentially_planned_icd_10_pcs": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__potentially_planned_icd_10_pcs", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__potentially_planned_icd_10_pcs.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__potentially_planned_icd_10_pcs.csv", "unique_id": "seed.the_tuva_project.readmissions__potentially_planned_icd_10_pcs", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__potentially_planned_icd_10_pcs"], "alias": "_value_set_potentially_planned_icd_10_pcs", "checksum": {"name": "sha256", "checksum": "fc6b0634ce61183117cfedfb07c3c5f30d3276096f752d6493364594621a0d6e"}, "config": {"enabled": true, "alias": "_value_set_potentially_planned_icd_10_pcs", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_potentially_planned_icd_10_pcs", "tags": "readmissions", "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.7998142, "relation_name": "tuva_project_demo.readmissions._value_set_potentially_planned_icd_10_pcs", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__specialty_cohort": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__specialty_cohort", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__specialty_cohort.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__specialty_cohort.csv", "unique_id": "seed.the_tuva_project.readmissions__specialty_cohort", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__specialty_cohort"], "alias": "_value_set_specialty_cohort", "checksum": {"name": "sha256", "checksum": "65ba652be488ef65b44533359bbae6973a247524c5ec72469a5b6ca7f5d18a34"}, "config": {"enabled": true, "alias": "_value_set_specialty_cohort", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_specialty_cohort", "tags": "readmissions", "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.8076022, "relation_name": "tuva_project_demo.readmissions._value_set_specialty_cohort", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.readmissions__surgery_gynecology_cohort": {"database": "tuva_project_demo", "schema": "readmissions", "name": "readmissions__surgery_gynecology_cohort", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/readmissions/readmissions__surgery_gynecology_cohort.csv", "original_file_path": "seeds/value_sets/readmissions/readmissions__surgery_gynecology_cohort.csv", "unique_id": "seed.the_tuva_project.readmissions__surgery_gynecology_cohort", "fqn": ["the_tuva_project", "value_sets", "readmissions", "readmissions__surgery_gynecology_cohort"], "alias": "_value_set_surgery_gynecology_cohort", "checksum": {"name": "sha256", "checksum": "da4b148d09202dca95cf53d461f385cd3f339dbe1d13d4eced8d2170ee9a559c"}, "config": {"enabled": true, "alias": "_value_set_surgery_gynecology_cohort", "schema": "readmissions", "database": "tuva_project_demo", "tags": ["readmissions"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["readmissions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/readmissions/readmissions_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "readmissions", "alias": "_value_set_surgery_gynecology_cohort", "tags": "readmissions", "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}, "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.8173175, "relation_name": "tuva_project_demo.readmissions._value_set_surgery_gynecology_cohort", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "seed.the_tuva_project.service_category__service_categories": {"database": "tuva_project_demo", "schema": "claims_preprocessing", "name": "service_category__service_categories", "resource_type": "seed", "package_name": "the_tuva_project", "path": "value_sets/service_categories/service_category__service_categories.csv", "original_file_path": "seeds/value_sets/service_categories/service_category__service_categories.csv", "unique_id": "seed.the_tuva_project.service_category__service_categories", "fqn": ["the_tuva_project", "value_sets", "service_categories", "service_category__service_categories"], "alias": "_value_set_service_categories", "checksum": {"name": "sha256", "checksum": "8e26537c0e32a9a8dc6e9ed587f9fde623955d8c981a6c832527ae3988587143"}, "config": {"enabled": true, "alias": "_value_set_service_categories", "schema": "claims_preprocessing", "database": "tuva_project_demo", "tags": ["service_category", "claims_preprocessing"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": ["service_category", "claims_preprocessing"], "description": "List of service categories and sub-categories", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://seeds/value_sets/service_categories/service_categories_seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "claims_preprocessing", "alias": "_value_set_service_categories", "tags": ["service_category", "claims_preprocessing"], "enabled": true, "database": "tuva_project_demo"}, "created_at": 1705501480.8223522, "relation_name": "tuva_project_demo.claims_preprocessing._value_set_service_categories", "raw_code": "", "root_path": "/mnt/c/Users/UX510663/tuva_exp/tuva_demo/dbt_packages/the_tuva_project", "depends_on": {"macros": []}}, "test.the_tuva_project.unique_ed_classification__johnston_icd9_icd9.08c1dc4617": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "icd9", "model": "{{ get_where_subquery(ref('ed_classification__johnston_icd9')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_ed_classification__johnston_icd9_icd9", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_ed_classification__johnston_icd9_icd9.sql", "original_file_path": "seeds/value_sets/ed_classification/ed_classification_seeds.yml", "unique_id": "test.the_tuva_project.unique_ed_classification__johnston_icd9_icd9.08c1dc4617", "fqn": ["the_tuva_project", "value_sets", "ed_classification", "unique_ed_classification__johnston_icd9_icd9"], "alias": "unique_ed_classification__johnston_icd9_icd9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501480.6613483, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ed_classification__johnston_icd9", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.the_tuva_project.ed_classification__johnston_icd9"]}, "compiled_path": "target/compiled/the_tuva_project/seeds/value_sets/ed_classification/ed_classification_seeds.yml/unique_ed_classification__johnston_icd9_icd9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    icd9 as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.ed_classification._value_set_johnston_icd9\nwhere icd9 is not null\ngroup by icd9\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "icd9", "file_key_name": "seeds.ed_classification__johnston_icd9", "attached_node": "seed.the_tuva_project.ed_classification__johnston_icd9"}, "test.the_tuva_project.not_null_ed_classification__johnston_icd9_icd9.a7feea49c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "icd9", "model": "{{ get_where_subquery(ref('ed_classification__johnston_icd9')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_ed_classification__johnston_icd9_icd9", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_ed_classification__johnston_icd9_icd9.sql", "original_file_path": "seeds/value_sets/ed_classification/ed_classification_seeds.yml", "unique_id": "test.the_tuva_project.not_null_ed_classification__johnston_icd9_icd9.a7feea49c0", "fqn": ["the_tuva_project", "value_sets", "ed_classification", "not_null_ed_classification__johnston_icd9_icd9"], "alias": "not_null_ed_classification__johnston_icd9_icd9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501480.665976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ed_classification__johnston_icd9", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.the_tuva_project.ed_classification__johnston_icd9"]}, "compiled_path": "target/compiled/the_tuva_project/seeds/value_sets/ed_classification/ed_classification_seeds.yml/not_null_ed_classification__johnston_icd9_icd9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect icd9\nfrom tuva_project_demo.ed_classification._value_set_johnston_icd9\nwhere icd9 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "icd9", "file_key_name": "seeds.ed_classification__johnston_icd9", "attached_node": "seed.the_tuva_project.ed_classification__johnston_icd9"}, "test.the_tuva_project.unique_ed_classification__johnston_icd10_icd10.3d55f2b2dd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "icd10", "model": "{{ get_where_subquery(ref('ed_classification__johnston_icd10')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_ed_classification__johnston_icd10_icd10", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_ed_classification__johnston_icd10_icd10.sql", "original_file_path": "seeds/value_sets/ed_classification/ed_classification_seeds.yml", "unique_id": "test.the_tuva_project.unique_ed_classification__johnston_icd10_icd10.3d55f2b2dd", "fqn": ["the_tuva_project", "value_sets", "ed_classification", "unique_ed_classification__johnston_icd10_icd10"], "alias": "unique_ed_classification__johnston_icd10_icd10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501480.6709018, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ed_classification__johnston_icd10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.the_tuva_project.ed_classification__johnston_icd10"]}, "compiled_path": "target/compiled/the_tuva_project/seeds/value_sets/ed_classification/ed_classification_seeds.yml/unique_ed_classification__johnston_icd10_icd10.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    icd10 as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.ed_classification._value_set_johnston_icd10\nwhere icd10 is not null\ngroup by icd10\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "icd10", "file_key_name": "seeds.ed_classification__johnston_icd10", "attached_node": "seed.the_tuva_project.ed_classification__johnston_icd10"}, "test.the_tuva_project.not_null_ed_classification__johnston_icd10_icd10.d04e7f84c7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "icd10", "model": "{{ get_where_subquery(ref('ed_classification__johnston_icd10')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_ed_classification__johnston_icd10_icd10", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_ed_classification__johnston_icd10_icd10.sql", "original_file_path": "seeds/value_sets/ed_classification/ed_classification_seeds.yml", "unique_id": "test.the_tuva_project.not_null_ed_classification__johnston_icd10_icd10.d04e7f84c7", "fqn": ["the_tuva_project", "value_sets", "ed_classification", "not_null_ed_classification__johnston_icd10_icd10"], "alias": "not_null_ed_classification__johnston_icd10_icd10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501480.674665, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "ed_classification__johnston_icd10", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.the_tuva_project.ed_classification__johnston_icd10"]}, "compiled_path": "target/compiled/the_tuva_project/seeds/value_sets/ed_classification/ed_classification_seeds.yml/not_null_ed_classification__johnston_icd10_icd10.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect icd10\nfrom tuva_project_demo.ed_classification._value_set_johnston_icd10\nwhere icd10 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "icd10", "file_key_name": "seeds.ed_classification__johnston_icd10", "attached_node": "seed.the_tuva_project.ed_classification__johnston_icd10"}, "test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('ccsr__singular_condition_category')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_ccsr__singular_condition_category_claim_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_ccsr__singular_condition_category_claim_id.sql", "original_file_path": "models/ccsr/ccsr_models.yml", "unique_id": "test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8", "fqn": ["the_tuva_project", "ccsr", "not_null_ccsr__singular_condition_category_claim_id"], "alias": "not_null_ccsr__singular_condition_category_claim_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501480.9197822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "ccsr__singular_condition_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.ccsr__singular_condition_category"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/ccsr_models.yml/not_null_ccsr__singular_condition_category_claim_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva_project_demo.ccsr.singular_condition_category\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "claim_id", "file_key_name": "models.ccsr__singular_condition_category", "attached_node": "model.the_tuva_project.ccsr__singular_condition_category"}, "test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('ccsr__singular_condition_category')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_ccsr__singular_condition_category_claim_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_ccsr__singular_condition_category_claim_id.sql", "original_file_path": "models/ccsr/ccsr_models.yml", "unique_id": "test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b", "fqn": ["the_tuva_project", "ccsr", "unique_ccsr__singular_condition_category_claim_id"], "alias": "unique_ccsr__singular_condition_category_claim_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501480.9218102, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "ccsr__singular_condition_category", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.ccsr__singular_condition_category"]}, "compiled_path": "target/compiled/the_tuva_project/models/ccsr/ccsr_models.yml/unique_ccsr__singular_condition_category_claim_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    claim_id as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.ccsr.singular_condition_category\nwhere claim_id is not null\ngroup by claim_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "claim_id", "file_key_name": "models.ccsr__singular_condition_category", "attached_node": "model.the_tuva_project.ccsr__singular_condition_category"}, "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_wide')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_chronic_conditions__cms_chronic_conditions_wide_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_chronic_conditions__cms_dd279730922ed20d9a6785adad24b5e2.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586", "fqn": ["the_tuva_project", "chronic_conditions", "unique_chronic_conditions__cms_chronic_conditions_wide_patient_id"], "alias": "unique_chronic_conditions__cms_dd279730922ed20d9a6785adad24b5e2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_chronic_conditions__cms_dd279730922ed20d9a6785adad24b5e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_chronic_conditions__cms_dd279730922ed20d9a6785adad24b5e2"}, "created_at": 1705501480.9867194, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_chronic_conditions__cms_dd279730922ed20d9a6785adad24b5e2\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_wide", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/unique_chronic_conditions__cms_dd279730922ed20d9a6785adad24b5e2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.chronic_conditions.cms_chronic_conditions_wide\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_wide", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_wide')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_acd55fa202206ca2dac1594f14fc377c.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id"], "alias": "not_null_chronic_conditions__c_acd55fa202206ca2dac1594f14fc377c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_acd55fa202206ca2dac1594f14fc377c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_acd55fa202206ca2dac1594f14fc377c"}, "created_at": 1705501480.9888365, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_acd55fa202206ca2dac1594f14fc377c\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_wide", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_acd55fa202206ca2dac1594f14fc377c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva_project_demo.chronic_conditions.cms_chronic_conditions_wide\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_wide", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_long')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_long_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_49a2bb666f68dc10cb37814113581b53.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_long_patient_id"], "alias": "not_null_chronic_conditions__c_49a2bb666f68dc10cb37814113581b53", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_49a2bb666f68dc10cb37814113581b53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_49a2bb666f68dc10cb37814113581b53"}, "created_at": 1705501480.9908736, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_49a2bb666f68dc10cb37814113581b53\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_49a2bb666f68dc10cb37814113581b53.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva_project_demo.chronic_conditions.cms_chronic_conditions_long\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_long", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_long')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_long_claim_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_6cb109fc60fe56040c1e9a18e4e77fd4.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_long_claim_id"], "alias": "not_null_chronic_conditions__c_6cb109fc60fe56040c1e9a18e4e77fd4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_6cb109fc60fe56040c1e9a18e4e77fd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_6cb109fc60fe56040c1e9a18e4e77fd4"}, "created_at": 1705501480.9931128, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_6cb109fc60fe56040c1e9a18e4e77fd4\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_6cb109fc60fe56040c1e9a18e4e77fd4.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva_project_demo.chronic_conditions.cms_chronic_conditions_long\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "claim_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_long", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_long')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_long_condition", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_9ae72d56fe6849d0aacc73d604c5b0cf.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_long_condition"], "alias": "not_null_chronic_conditions__c_9ae72d56fe6849d0aacc73d604c5b0cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_9ae72d56fe6849d0aacc73d604c5b0cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_9ae72d56fe6849d0aacc73d604c5b0cf"}, "created_at": 1705501480.9951978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_9ae72d56fe6849d0aacc73d604c5b0cf\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_9ae72d56fe6849d0aacc73d604c5b0cf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva_project_demo.chronic_conditions.cms_chronic_conditions_long\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "condition", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_long", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"}, "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || claim_id || start_date || condition)", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_long')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_chronic_conditions__cms_a604d2d2a2cdd1e22a6855beff37d57b.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320", "fqn": ["the_tuva_project", "chronic_conditions", "unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_"], "alias": "unique_chronic_conditions__cms_a604d2d2a2cdd1e22a6855beff37d57b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_chronic_conditions__cms_a604d2d2a2cdd1e22a6855beff37d57b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_chronic_conditions__cms_a604d2d2a2cdd1e22a6855beff37d57b"}, "created_at": 1705501480.9972773, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_chronic_conditions__cms_a604d2d2a2cdd1e22a6855beff37d57b\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/unique_chronic_conditions__cms_a604d2d2a2cdd1e22a6855beff37d57b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || claim_id || start_date || condition) as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.chronic_conditions.cms_chronic_conditions_long\nwhere (patient_id || claim_id || start_date || condition) is not null\ngroup by (patient_id || claim_id || start_date || condition)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.chronic_conditions__cms_chronic_conditions_long", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_all')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_all_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_409ab6a82d1b97c996f87af7f330605c.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_all_patient_id"], "alias": "not_null_chronic_conditions__c_409ab6a82d1b97c996f87af7f330605c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_409ab6a82d1b97c996f87af7f330605c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_409ab6a82d1b97c996f87af7f330605c"}, "created_at": 1705501480.9993126, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_409ab6a82d1b97c996f87af7f330605c\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_all", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_409ab6a82d1b97c996f87af7f330605c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_all\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_all", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_all')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_all_claim_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_b541fb9d33a4f06d5fea55b9a24aa3a9.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_all_claim_id"], "alias": "not_null_chronic_conditions__c_b541fb9d33a4f06d5fea55b9a24aa3a9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_b541fb9d33a4f06d5fea55b9a24aa3a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_b541fb9d33a4f06d5fea55b9a24aa3a9"}, "created_at": 1705501481.002792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_b541fb9d33a4f06d5fea55b9a24aa3a9\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_all", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_b541fb9d33a4f06d5fea55b9a24aa3a9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_all\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "claim_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_all", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_all')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_all_condition", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_c4a0f280255574fa8bab0a3d8629b09c.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_all_condition"], "alias": "not_null_chronic_conditions__c_c4a0f280255574fa8bab0a3d8629b09c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_c4a0f280255574fa8bab0a3d8629b09c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_c4a0f280255574fa8bab0a3d8629b09c"}, "created_at": 1705501481.0045676, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_c4a0f280255574fa8bab0a3d8629b09c\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_all", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_c4a0f280255574fa8bab0a3d8629b09c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_all\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "condition", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_all", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_hiv_aids')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_6da0dbac3eab9746301bed2ab3f2d52d.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id"], "alias": "not_null_chronic_conditions__c_6da0dbac3eab9746301bed2ab3f2d52d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_6da0dbac3eab9746301bed2ab3f2d52d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_6da0dbac3eab9746301bed2ab3f2d52d"}, "created_at": 1705501481.0066164, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_6da0dbac3eab9746301bed2ab3f2d52d\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_hiv_aids", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_6da0dbac3eab9746301bed2ab3f2d52d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_hiv_aids", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_hiv_aids')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_075c29078cdfc99a6fe124f31746e827.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id"], "alias": "not_null_chronic_conditions__c_075c29078cdfc99a6fe124f31746e827", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_075c29078cdfc99a6fe124f31746e827", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_075c29078cdfc99a6fe124f31746e827"}, "created_at": 1705501481.0088685, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_075c29078cdfc99a6fe124f31746e827\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_hiv_aids", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_075c29078cdfc99a6fe124f31746e827.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "claim_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_hiv_aids", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_hiv_aids')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_52f5eb486d06b1bc6c4a979fe5d64785.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition"], "alias": "not_null_chronic_conditions__c_52f5eb486d06b1bc6c4a979fe5d64785", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_52f5eb486d06b1bc6c4a979fe5d64785", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_52f5eb486d06b1bc6c4a979fe5d64785"}, "created_at": 1705501481.0114005, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_52f5eb486d06b1bc6c4a979fe5d64785\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_hiv_aids", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_52f5eb486d06b1bc6c4a979fe5d64785.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_hiv_aids\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "condition", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_hiv_aids", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"}, "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)"], "column_name": "condition", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_hiv_aids')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_", "resource_type": "test", "package_name": "the_tuva_project", "path": "accepted_values_chronic_condit_dac30732a31f8623801cc82d686e9e8f.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6", "fqn": ["the_tuva_project", "chronic_conditions", "accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_"], "alias": "accepted_values_chronic_condit_dac30732a31f8623801cc82d686e9e8f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_chronic_condit_dac30732a31f8623801cc82d686e9e8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_chronic_condit_dac30732a31f8623801cc82d686e9e8f"}, "created_at": 1705501481.0134406, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_chronic_condit_dac30732a31f8623801cc82d686e9e8f\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_hiv_aids", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/accepted_values_chronic_condit_dac30732a31f8623801cc82d686e9e8f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        condition as value_field,\n        count(*) as n_records\n\n    from tuva_project_demo.chronic_conditions._int_cms_chronic_condition_hiv_aids\n    group by condition\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "condition", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_hiv_aids", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_oud')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_9bc0b8199dada8f26dfa51bc604f3741.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id"], "alias": "not_null_chronic_conditions__c_9bc0b8199dada8f26dfa51bc604f3741", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_9bc0b8199dada8f26dfa51bc604f3741", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_9bc0b8199dada8f26dfa51bc604f3741"}, "created_at": 1705501481.0281107, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_9bc0b8199dada8f26dfa51bc604f3741\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_oud", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_9bc0b8199dada8f26dfa51bc604f3741.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_oud\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_oud", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_oud')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_e8858b22e3298bb06dc366c69d72845e.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id"], "alias": "not_null_chronic_conditions__c_e8858b22e3298bb06dc366c69d72845e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_e8858b22e3298bb06dc366c69d72845e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_e8858b22e3298bb06dc366c69d72845e"}, "created_at": 1705501481.0301743, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_e8858b22e3298bb06dc366c69d72845e\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_oud", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_e8858b22e3298bb06dc366c69d72845e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_oud\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "claim_id", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_oud", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"}, "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_oud')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__cms_chronic_conditions_oud_condition", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__c_e1503323470a6f1632ee17ce36ebfdf4.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__cms_chronic_conditions_oud_condition"], "alias": "not_null_chronic_conditions__c_e1503323470a6f1632ee17ce36ebfdf4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__c_e1503323470a6f1632ee17ce36ebfdf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__c_e1503323470a6f1632ee17ce36ebfdf4"}, "created_at": 1705501481.0326385, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__c_e1503323470a6f1632ee17ce36ebfdf4\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_oud", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/not_null_chronic_conditions__c_e1503323470a6f1632ee17ce36ebfdf4.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva_project_demo.chronic_conditions._int_cms_chronic_condition_oud\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "condition", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_oud", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"}, "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Opioid Use Disorder (OUD)"], "column_name": "condition", "model": "{{ get_where_subquery(ref('chronic_conditions__cms_chronic_conditions_oud')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_", "resource_type": "test", "package_name": "the_tuva_project", "path": "accepted_values_chronic_condit_e9f47fcdb123676b8c14e66963fb2f9e.sql", "original_file_path": "models/chronic_conditions/cms_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5", "fqn": ["the_tuva_project", "chronic_conditions", "accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_"], "alias": "accepted_values_chronic_condit_e9f47fcdb123676b8c14e66963fb2f9e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_chronic_condit_e9f47fcdb123676b8c14e66963fb2f9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_chronic_condit_e9f47fcdb123676b8c14e66963fb2f9e"}, "created_at": 1705501481.034491, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_chronic_condit_e9f47fcdb123676b8c14e66963fb2f9e\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__cms_chronic_conditions_oud", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/cms_chronic_conditions_models.yml/accepted_values_chronic_condit_e9f47fcdb123676b8c14e66963fb2f9e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        condition as value_field,\n        count(*) as n_records\n\n    from tuva_project_demo.chronic_conditions._int_cms_chronic_condition_oud\n    group by condition\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Opioid Use Disorder (OUD)'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "condition", "file_key_name": "models.chronic_conditions__cms_chronic_conditions_oud", "attached_node": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"}, "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || '_' || condition)", "model": "{{ get_where_subquery(ref('chronic_conditions__tuva_chronic_conditions_long')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_chronic_conditions__tuv_5a5fdcf2a52369894b11527da0860423.sql", "original_file_path": "models/chronic_conditions/tuva_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f", "fqn": ["the_tuva_project", "chronic_conditions", "unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_"], "alias": "unique_chronic_conditions__tuv_5a5fdcf2a52369894b11527da0860423", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_chronic_conditions__tuv_5a5fdcf2a52369894b11527da0860423", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_chronic_conditions__tuv_5a5fdcf2a52369894b11527da0860423"}, "created_at": 1705501481.0720081, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_chronic_conditions__tuv_5a5fdcf2a52369894b11527da0860423\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__tuva_chronic_conditions_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/tuva_chronic_conditions_models.yml/unique_chronic_conditions__tuv_5a5fdcf2a52369894b11527da0860423.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || '_' || condition) as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.chronic_conditions.tuva_chronic_conditions_long\nwhere (patient_id || '_' || condition) is not null\ngroup by (patient_id || '_' || condition)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.chronic_conditions__tuva_chronic_conditions_long", "attached_node": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long"}, "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('chronic_conditions__tuva_chronic_conditions_wide')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_chronic_conditions__tuv_f6c9876f5d8c62c8b1b037d28f2c9550.sql", "original_file_path": "models/chronic_conditions/tuva_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158", "fqn": ["the_tuva_project", "chronic_conditions", "unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id"], "alias": "unique_chronic_conditions__tuv_f6c9876f5d8c62c8b1b037d28f2c9550", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_chronic_conditions__tuv_f6c9876f5d8c62c8b1b037d28f2c9550", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_chronic_conditions__tuv_f6c9876f5d8c62c8b1b037d28f2c9550"}, "created_at": 1705501481.0739312, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_chronic_conditions__tuv_f6c9876f5d8c62c8b1b037d28f2c9550\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__tuva_chronic_conditions_wide", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/tuva_chronic_conditions_models.yml/unique_chronic_conditions__tuv_f6c9876f5d8c62c8b1b037d28f2c9550.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.chronic_conditions.tuva_chronic_conditions_wide\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.chronic_conditions__tuva_chronic_conditions_wide", "attached_node": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide"}, "test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('chronic_conditions__tuva_chronic_conditions_wide')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_chronic_conditions__t_85a7e6e4e3c122035b615b501d74cac4.sql", "original_file_path": "models/chronic_conditions/tuva_chronic_conditions_models.yml", "unique_id": "test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561", "fqn": ["the_tuva_project", "chronic_conditions", "not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id"], "alias": "not_null_chronic_conditions__t_85a7e6e4e3c122035b615b501d74cac4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_chronic_conditions__t_85a7e6e4e3c122035b615b501d74cac4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_chronic_conditions__t_85a7e6e4e3c122035b615b501d74cac4"}, "created_at": 1705501481.0771809, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_chronic_conditions__t_85a7e6e4e3c122035b615b501d74cac4\") }}", "language": "sql", "refs": [{"name": "chronic_conditions__tuva_chronic_conditions_wide", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide"]}, "compiled_path": "target/compiled/the_tuva_project/models/chronic_conditions/tuva_chronic_conditions_models.yml/not_null_chronic_conditions__t_85a7e6e4e3c122035b615b501d74cac4.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva_project_demo.chronic_conditions.tuva_chronic_conditions_wide\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.chronic_conditions__tuva_chronic_conditions_wide", "attached_node": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide"}, "test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id||'-'||claim_line_number)", "model": "{{ get_where_subquery(ref('normalized_input__medical_claim')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_normalized_input__medical_claim__claim_id_claim_line_number_", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_normalized_input__medic_bbd2054a58f89fc572df7bb74dd9ab46.sql", "original_file_path": "models/claims_preprocessing/claims_preprocessing_models.yml", "unique_id": "test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f", "fqn": ["the_tuva_project", "claims_preprocessing", "unique_normalized_input__medical_claim__claim_id_claim_line_number_"], "alias": "unique_normalized_input__medic_bbd2054a58f89fc572df7bb74dd9ab46", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_normalized_input__medic_bbd2054a58f89fc572df7bb74dd9ab46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_normalized_input__medic_bbd2054a58f89fc572df7bb74dd9ab46"}, "created_at": 1705501481.6422122, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_normalized_input__medic_bbd2054a58f89fc572df7bb74dd9ab46\") }}", "language": "sql", "refs": [{"name": "normalized_input__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.normalized_input__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/claims_preprocessing/claims_preprocessing_models.yml/unique_normalized_input__medic_bbd2054a58f89fc572df7bb74dd9ab46.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (claim_id||'-'||claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.claims_preprocessing.normalized_input_medical_claim\nwhere (claim_id||'-'||claim_line_number) is not null\ngroup by (claim_id||'-'||claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.normalized_input__medical_claim", "attached_node": "model.the_tuva_project.normalized_input__medical_claim"}, "test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_hcc__patient_risk_scores')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_cms_hcc__patient_risk_scores_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_cms_hcc__patient_risk_scores_patient_id.sql", "original_file_path": "models/cms_hcc/cms_hcc_models.yml", "unique_id": "test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126", "fqn": ["the_tuva_project", "cms_hcc", "unique_cms_hcc__patient_risk_scores_patient_id"], "alias": "unique_cms_hcc__patient_risk_scores_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501481.7351923, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cms_hcc__patient_risk_scores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.cms_hcc__patient_risk_scores"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/cms_hcc_models.yml/unique_cms_hcc__patient_risk_scores_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.cms_hcc.patient_risk_scores\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.cms_hcc__patient_risk_scores", "attached_node": "model.the_tuva_project.cms_hcc__patient_risk_scores"}, "test.the_tuva_project.unique_cms_hcc__int_demographic_factors_patient_id.1e7ac0d681": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_hcc__int_demographic_factors')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_cms_hcc__int_demographic_factors_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_cms_hcc__int_demographic_factors_patient_id.sql", "original_file_path": "models/cms_hcc/cms_hcc_models.yml", "unique_id": "test.the_tuva_project.unique_cms_hcc__int_demographic_factors_patient_id.1e7ac0d681", "fqn": ["the_tuva_project", "cms_hcc", "unique_cms_hcc__int_demographic_factors_patient_id"], "alias": "unique_cms_hcc__int_demographic_factors_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501481.7371283, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cms_hcc__int_demographic_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.cms_hcc__int_demographic_factors"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/cms_hcc_models.yml/unique_cms_hcc__int_demographic_factors_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.cms_hcc._int_demographic_factors\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.cms_hcc__int_demographic_factors", "attached_node": "model.the_tuva_project.cms_hcc__int_demographic_factors"}, "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition_code", "model": "{{ get_where_subquery(ref('cms_hcc__int_eligible_conditions')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_cms_hcc__int_eligible_conditions_condition_code", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_cms_hcc__int_eligible_conditions_condition_code.sql", "original_file_path": "models/cms_hcc/cms_hcc_models.yml", "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc", "fqn": ["the_tuva_project", "cms_hcc", "not_null_cms_hcc__int_eligible_conditions_condition_code"], "alias": "not_null_cms_hcc__int_eligible_conditions_condition_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501481.7390954, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cms_hcc__int_eligible_conditions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.cms_hcc__int_eligible_conditions"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/cms_hcc_models.yml/not_null_cms_hcc__int_eligible_conditions_condition_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect condition_code\nfrom tuva_project_demo.cms_hcc._int_eligible_conditions\nwhere condition_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "condition_code", "file_key_name": "models.cms_hcc__int_eligible_conditions", "attached_node": "model.the_tuva_project.cms_hcc__int_eligible_conditions"}, "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_hcc__int_members')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_cms_hcc__int_members_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_cms_hcc__int_members_patient_id.sql", "original_file_path": "models/cms_hcc/cms_hcc_models.yml", "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b", "fqn": ["the_tuva_project", "cms_hcc", "not_null_cms_hcc__int_members_patient_id"], "alias": "not_null_cms_hcc__int_members_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501481.742437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cms_hcc__int_members", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.cms_hcc__int_members"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/cms_hcc_models.yml/not_null_cms_hcc__int_members_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva_project_demo.cms_hcc._int_members\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.cms_hcc__int_members", "attached_node": "model.the_tuva_project.cms_hcc__int_members"}, "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_hcc__int_members')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_cms_hcc__int_members_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_cms_hcc__int_members_patient_id.sql", "original_file_path": "models/cms_hcc/cms_hcc_models.yml", "unique_id": "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb", "fqn": ["the_tuva_project", "cms_hcc", "unique_cms_hcc__int_members_patient_id"], "alias": "unique_cms_hcc__int_members_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501481.744465, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cms_hcc__int_members", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.cms_hcc__int_members"]}, "compiled_path": "target/compiled/the_tuva_project/models/cms_hcc/cms_hcc_models.yml/unique_cms_hcc__int_members_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.cms_hcc._int_members\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.cms_hcc__int_members", "attached_node": "model.the_tuva_project.cms_hcc__int_members"}, "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "condition_id", "model": "{{ get_where_subquery(ref('core__condition')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_core__condition_condition_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_core__condition_condition_id.sql", "original_file_path": "models/core/core_models.yml", "unique_id": "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0", "fqn": ["the_tuva_project", "core", "unique_core__condition_condition_id"], "alias": "unique_core__condition_condition_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501481.9388494, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.core__condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/core_models.yml/unique_core__condition_condition_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    condition_id as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.core.condition\nwhere condition_id is not null\ngroup by condition_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "condition_id", "file_key_name": "models.core__condition", "attached_node": "model.the_tuva_project.core__condition"}, "test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id||'-'||claim_line_number)", "model": "{{ get_where_subquery(ref('core__medical_claim')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_core__medical_claim__claim_id_claim_line_number_", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_core__medical_claim__claim_id_claim_line_number_.sql", "original_file_path": "models/core/core_models.yml", "unique_id": "test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0", "fqn": ["the_tuva_project", "core", "unique_core__medical_claim__claim_id_claim_line_number_"], "alias": "unique_core__medical_claim__claim_id_claim_line_number_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501481.9430337, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__medical_claim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.core__medical_claim"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/core_models.yml/unique_core__medical_claim__claim_id_claim_line_number_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (claim_id||'-'||claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.core.medical_claim\nwhere (claim_id||'-'||claim_line_number) is not null\ngroup by (claim_id||'-'||claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__medical_claim", "attached_node": "model.the_tuva_project.core__medical_claim"}, "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "procedure_id", "model": "{{ get_where_subquery(ref('core__procedure')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_core__procedure_procedure_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_core__procedure_procedure_id.sql", "original_file_path": "models/core/core_models.yml", "unique_id": "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5", "fqn": ["the_tuva_project", "core", "unique_core__procedure_procedure_id"], "alias": "unique_core__procedure_procedure_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501481.9462323, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/core/core_models.yml/unique_core__procedure_procedure_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    procedure_id as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.core.procedure\nwhere procedure_id is not null\ngroup by procedure_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "procedure_id", "file_key_name": "models.core__procedure", "attached_node": "model.the_tuva_project.core__procedure"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "source_table", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_summary')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_summary_source_table", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__f679bb8922eec2815a77cfff081e9e10.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_summary_source_table"], "alias": "not_null_data_quality__claims__f679bb8922eec2815a77cfff081e9e10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__f679bb8922eec2815a77cfff081e9e10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__f679bb8922eec2815a77cfff081e9e10"}, "created_at": 1705501482.1868143, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__f679bb8922eec2815a77cfff081e9e10\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__f679bb8922eec2815a77cfff081e9e10.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source_table\nfrom tuva_project_demo.data_quality.claims_preprocessing_summary\nwhere source_table is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source_table", "file_key_name": "models.data_quality__claims_preprocessing_summary", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_summary"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_category", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_summary')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_summary_test_category", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__336abc6fa3e364c103685e2faae83477.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_summary_test_category"], "alias": "not_null_data_quality__claims__336abc6fa3e364c103685e2faae83477", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__336abc6fa3e364c103685e2faae83477", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__336abc6fa3e364c103685e2faae83477"}, "created_at": 1705501482.1887896, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__336abc6fa3e364c103685e2faae83477\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__336abc6fa3e364c103685e2faae83477.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect test_category\nfrom tuva_project_demo.data_quality.claims_preprocessing_summary\nwhere test_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_category", "file_key_name": "models.data_quality__claims_preprocessing_summary", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_summary"}, "test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468": {"test_metadata": {"name": "claims_preprocessing_pipeline_checks", "kwargs": {"model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_summary')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_", "resource_type": "test", "package_name": "the_tuva_project", "path": "claims_preprocessing_pipeline__d4efae38f014be38415215d3c15b873c.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468", "fqn": ["the_tuva_project", "data_quality", "claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_"], "alias": "claims_preprocessing_pipeline__d4efae38f014be38415215d3c15b873c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "claims_preprocessing_pipeline__d4efae38f014be38415215d3c15b873c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "claims_preprocessing_pipeline__d4efae38f014be38415215d3c15b873c"}, "created_at": 1705501482.1914816, "relation_name": null, "raw_code": "{{ test_claims_preprocessing_pipeline_checks(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"claims_preprocessing_pipeline__d4efae38f014be38415215d3c15b873c\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_summary", "package": null, "version": null}, {"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.the_tuva_project.test_claims_preprocessing_pipeline_checks", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/claims_preprocessing_pipeline__d4efae38f014be38415215d3c15b873c.sql", "compiled": true, "compiled_code": "\n\n    select *\n    from tuva_project_demo.data_quality.claims_preprocessing_test_detail\n    where pipeline_test = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.data_quality__claims_preprocessing_summary", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_summary"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "source_table", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_test_detail')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_test_detail_source_table", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__5898c059411e7fc10ba8219c734e6e08.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_test_detail_source_table"], "alias": "not_null_data_quality__claims__5898c059411e7fc10ba8219c734e6e08", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__5898c059411e7fc10ba8219c734e6e08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__5898c059411e7fc10ba8219c734e6e08"}, "created_at": 1705501482.1975782, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__5898c059411e7fc10ba8219c734e6e08\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__5898c059411e7fc10ba8219c734e6e08.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source_table\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_detail\nwhere source_table is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source_table", "file_key_name": "models.data_quality__claims_preprocessing_test_detail", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_category", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_test_detail')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_test_detail_test_category", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__56459226ea7065b8eb9a80d40b78ff80.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_test_detail_test_category"], "alias": "not_null_data_quality__claims__56459226ea7065b8eb9a80d40b78ff80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__56459226ea7065b8eb9a80d40b78ff80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__56459226ea7065b8eb9a80d40b78ff80"}, "created_at": 1705501482.1993268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__56459226ea7065b8eb9a80d40b78ff80\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__56459226ea7065b8eb9a80d40b78ff80.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect test_category\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_detail\nwhere test_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_category", "file_key_name": "models.data_quality__claims_preprocessing_test_detail", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_name", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_test_detail')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_test_detail_test_name", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__f05207c475588fc8a73c0e2b3a575049.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_test_detail_test_name"], "alias": "not_null_data_quality__claims__f05207c475588fc8a73c0e2b3a575049", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__f05207c475588fc8a73c0e2b3a575049", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__f05207c475588fc8a73c0e2b3a575049"}, "created_at": 1705501482.201566, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__f05207c475588fc8a73c0e2b3a575049\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__f05207c475588fc8a73c0e2b3a575049.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect test_name\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_detail\nwhere test_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_name", "file_key_name": "models.data_quality__claims_preprocessing_test_detail", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "source_table", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_test_result')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_test_result_source_table", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__412833294baa145f20c48137d8814886.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_test_result_source_table"], "alias": "not_null_data_quality__claims__412833294baa145f20c48137d8814886", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__412833294baa145f20c48137d8814886", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__412833294baa145f20c48137d8814886"}, "created_at": 1705501482.203682, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__412833294baa145f20c48137d8814886\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_result", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__412833294baa145f20c48137d8814886.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source_table\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_result\nwhere source_table is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source_table", "file_key_name": "models.data_quality__claims_preprocessing_test_result", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_test_result"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_category", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_test_result')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_test_result_test_category", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__b2af6c316533f702a46cd6223fa65367.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_test_result_test_category"], "alias": "not_null_data_quality__claims__b2af6c316533f702a46cd6223fa65367", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__b2af6c316533f702a46cd6223fa65367", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__b2af6c316533f702a46cd6223fa65367"}, "created_at": 1705501482.2054257, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__b2af6c316533f702a46cd6223fa65367\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_result", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__b2af6c316533f702a46cd6223fa65367.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect test_category\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_result\nwhere test_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_category", "file_key_name": "models.data_quality__claims_preprocessing_test_result", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_test_result"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_name", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_test_result')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_test_result_test_name", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__9b4fbcc2957c4f9bd554a6666f91ad49.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_test_result_test_name"], "alias": "not_null_data_quality__claims__9b4fbcc2957c4f9bd554a6666f91ad49", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__9b4fbcc2957c4f9bd554a6666f91ad49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__9b4fbcc2957c4f9bd554a6666f91ad49"}, "created_at": 1705501482.2077365, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__9b4fbcc2957c4f9bd554a6666f91ad49\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_test_result", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__9b4fbcc2957c4f9bd554a6666f91ad49.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect test_name\nfrom tuva_project_demo.data_quality.claims_preprocessing_test_result\nwhere test_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_name", "file_key_name": "models.data_quality__claims_preprocessing_test_result", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_test_result"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "use_case", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_use_case')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_use_case_use_case", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims_preprocessing_use_case_use_case.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_use_case_use_case"], "alias": "not_null_data_quality__claims_preprocessing_use_case_use_case", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501482.210026, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_use_case", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_use_case"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims_preprocessing_use_case_use_case.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect use_case\nfrom tuva_project_demo.data_quality.claims_preprocessing_use_case\nwhere use_case is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "use_case", "file_key_name": "models.data_quality__claims_preprocessing_use_case", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_use_case"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "source_table", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_use_case')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_use_case_source_table", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims__e20e4fef5e6980ffb07c442849539e37.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_use_case_source_table"], "alias": "not_null_data_quality__claims__e20e4fef5e6980ffb07c442849539e37", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_data_quality__claims__e20e4fef5e6980ffb07c442849539e37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_data_quality__claims__e20e4fef5e6980ffb07c442849539e37"}, "created_at": 1705501482.2119138, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_data_quality__claims__e20e4fef5e6980ffb07c442849539e37\") }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_use_case", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_use_case"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims__e20e4fef5e6980ffb07c442849539e37.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source_table\nfrom tuva_project_demo.data_quality.claims_preprocessing_use_case\nwhere source_table is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source_table", "file_key_name": "models.data_quality__claims_preprocessing_use_case", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_use_case"}, "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_name", "model": "{{ get_where_subquery(ref('data_quality__claims_preprocessing_use_case')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_data_quality__claims_preprocessing_use_case_test_name", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_data_quality__claims_preprocessing_use_case_test_name.sql", "original_file_path": "models/data_quality/data_quality_models.yml", "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa", "fqn": ["the_tuva_project", "data_quality", "not_null_data_quality__claims_preprocessing_use_case_test_name"], "alias": "not_null_data_quality__claims_preprocessing_use_case_test_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705501482.2140458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "data_quality__claims_preprocessing_use_case", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.data_quality__claims_preprocessing_use_case"]}, "compiled_path": "target/compiled/the_tuva_project/models/data_quality/data_quality_models.yml/not_null_data_quality__claims_preprocessing_use_case_test_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect test_name\nfrom tuva_project_demo.data_quality.claims_preprocessing_use_case\nwhere test_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_name", "file_key_name": "models.data_quality__claims_preprocessing_use_case", "attached_node": "model.the_tuva_project.data_quality__claims_preprocessing_use_case"}, "test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || '_' || year_month || '_' || plan)", "model": "{{ get_where_subquery(ref('financial_pmpm__pmpm_prep')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_", "resource_type": "test", "package_name": "the_tuva_project", "path": "unique_financial_pmpm__pmpm_pr_c36fcd8dfb24026167eeab878c3dd5cf.sql", "original_file_path": "models/financial_pmpm/financial_pmpm_models.yml", "unique_id": "test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e", "fqn": ["the_tuva_project", "financial_pmpm", "unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_"], "alias": "unique_financial_pmpm__pmpm_pr_c36fcd8dfb24026167eeab878c3dd5cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_financial_pmpm__pmpm_pr_c36fcd8dfb24026167eeab878c3dd5cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_financial_pmpm__pmpm_pr_c36fcd8dfb24026167eeab878c3dd5cf"}, "created_at": 1705501482.3088608, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_financial_pmpm__pmpm_pr_c36fcd8dfb24026167eeab878c3dd5cf\") }}", "language": "sql", "refs": [{"name": "financial_pmpm__pmpm_prep", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.financial_pmpm__pmpm_prep"]}, "compiled_path": "target/compiled/the_tuva_project/models/financial_pmpm/financial_pmpm_models.yml/unique_financial_pmpm__pmpm_pr_c36fcd8dfb24026167eeab878c3dd5cf.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || '_' || year_month || '_' || plan) as unique_field,\n    count(*) as n_records\n\nfrom tuva_project_demo.financial_pmpm.pmpm_prep\nwhere (patient_id || '_' || year_month || '_' || plan) is not null\ngroup by (patient_id || '_' || year_month || '_' || plan)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.financial_pmpm__pmpm_prep", "attached_node": "model.the_tuva_project.financial_pmpm__pmpm_prep"}, "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__condition')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_quality_measures__stg_core__condition_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_quality_measures__stg_core__condition_patient_id.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348", "fqn": ["the_tuva_project", "quality_measures", "not_null_quality_measures__stg_core__condition_patient_id"], "alias": "not_null_quality_measures__stg_core__condition_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501482.527159, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__condition"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/not_null_quality_measures__stg_core__condition_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__condition\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__condition", "sql": " __dbt__cte__quality_measures__stg_core__condition as (\n\nselect\n      patient_id\n    , claim_id\n    , recorded_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.condition\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.quality_measures__stg_core__condition", "attached_node": "model.the_tuva_project.quality_measures__stg_core__condition"}, "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__encounter')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_quality_measures__stg_core__encounter_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_quality_measures__stg_core__encounter_patient_id.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159", "fqn": ["the_tuva_project", "quality_measures", "not_null_quality_measures__stg_core__encounter_patient_id"], "alias": "not_null_quality_measures__stg_core__encounter_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501482.5298898, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__encounter"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/not_null_quality_measures__stg_core__encounter_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , try_cast( null as date ) as encounter_start_date\n    , try_cast( null as date ) as encounter_end_date\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__encounter\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__encounter", "sql": " __dbt__cte__quality_measures__stg_core__encounter as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , cast(null as TEXT ) as encounter_type\n    , try_cast( null as date ) as encounter_start_date\n    , try_cast( null as date ) as encounter_end_date\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.quality_measures__stg_core__encounter", "attached_node": "model.the_tuva_project.quality_measures__stg_core__encounter"}, "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__medication')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_quality_measures__stg_core__medication_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_quality_measures__stg_core__medication_patient_id.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652", "fqn": ["the_tuva_project", "quality_measures", "not_null_quality_measures__stg_core__medication_patient_id"], "alias": "not_null_quality_measures__stg_core__medication_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501482.532611, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__medication", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__medication"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/not_null_quality_measures__stg_core__medication_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as dispensing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__medication\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__medication", "sql": " __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as dispensing_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as ndc_code\n    , cast(null as TEXT ) as rxnorm_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.quality_measures__stg_core__medication", "attached_node": "model.the_tuva_project.quality_measures__stg_core__medication"}, "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__observation')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_quality_measures__stg_core__observation_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_quality_measures__stg_core__observation_patient_id.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e", "fqn": ["the_tuva_project", "quality_measures", "not_null_quality_measures__stg_core__observation_patient_id"], "alias": "not_null_quality_measures__stg_core__observation_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501482.5353262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__observation"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/not_null_quality_measures__stg_core__observation_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__observation\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__observation", "sql": " __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      cast(null as TEXT ) as patient_id\n    , try_cast( null as date ) as observation_date\n    , cast(null as TEXT ) as source_code_type\n    , cast(null as TEXT ) as source_code\n    , cast(null as TEXT ) as normalized_code_type\n    , cast(null as TEXT ) as normalized_code\n    , cast(null as timestamp ) as tuva_last_run\nlimit 0\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.quality_measures__stg_core__observation", "attached_node": "model.the_tuva_project.quality_measures__stg_core__observation"}, "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__patient')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_quality_measures__stg_core__patient_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_quality_measures__stg_core__patient_patient_id.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd", "fqn": ["the_tuva_project", "quality_measures", "not_null_quality_measures__stg_core__patient_patient_id"], "alias": "not_null_quality_measures__stg_core__patient_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501482.5378187, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/not_null_quality_measures__stg_core__patient_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__patient\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__patient", "sql": " __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.quality_measures__stg_core__patient", "attached_node": "model.the_tuva_project.quality_measures__stg_core__patient"}, "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sex", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__patient')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_quality_measures__stg_core__patient_sex", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_quality_measures__stg_core__patient_sex.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69", "fqn": ["the_tuva_project", "quality_measures", "not_null_quality_measures__stg_core__patient_sex"], "alias": "not_null_quality_measures__stg_core__patient_sex", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501482.540195, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/not_null_quality_measures__stg_core__patient_sex.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n) select sex\nfrom __dbt__cte__quality_measures__stg_core__patient\nwhere sex is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__patient", "sql": " __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sex", "file_key_name": "models.quality_measures__stg_core__patient", "attached_node": "model.the_tuva_project.quality_measures__stg_core__patient"}, "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male.47cbdf864b": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["female", "male"], "column_name": "sex", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__patient')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "accepted_values_quality_measures__stg_core__patient_sex__female__male", "resource_type": "test", "package_name": "the_tuva_project", "path": "accepted_values_quality_measur_12782dbc4c931575c089a8978147a897.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male.47cbdf864b", "fqn": ["the_tuva_project", "quality_measures", "accepted_values_quality_measures__stg_core__patient_sex__female__male"], "alias": "accepted_values_quality_measur_12782dbc4c931575c089a8978147a897", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_quality_measur_12782dbc4c931575c089a8978147a897", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "accepted_values_quality_measur_12782dbc4c931575c089a8978147a897"}, "created_at": 1705501482.5453603, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_quality_measur_12782dbc4c931575c089a8978147a897\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/accepted_values_quality_measur_12782dbc4c931575c089a8978147a897.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n), all_values as (\n\n    select\n        sex as value_field,\n        count(*) as n_records\n\n    from __dbt__cte__quality_measures__stg_core__patient\n    group by sex\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'female','male'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__patient", "sql": " __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sex", "file_key_name": "models.quality_measures__stg_core__patient", "attached_node": "model.the_tuva_project.quality_measures__stg_core__patient"}, "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "birth_date", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__patient')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_quality_measures__stg_core__patient_birth_date", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_quality_measures__stg_core__patient_birth_date.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6", "fqn": ["the_tuva_project", "quality_measures", "not_null_quality_measures__stg_core__patient_birth_date"], "alias": "not_null_quality_measures__stg_core__patient_birth_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501482.5557673, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__patient"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/not_null_quality_measures__stg_core__patient_birth_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n) select birth_date\nfrom __dbt__cte__quality_measures__stg_core__patient\nwhere birth_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__patient", "sql": " __dbt__cte__quality_measures__stg_core__patient as (\n\nselect\n      patient_id\n    , sex\n    , birth_date\n    , death_date\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.patient\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "birth_date", "file_key_name": "models.quality_measures__stg_core__patient", "attached_node": "model.the_tuva_project.quality_measures__stg_core__patient"}, "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('quality_measures__stg_core__procedure')) }}"}, "namespace": null}, "database": "TUVA_PROJECT_DEMO", "schema": "dbt_test__audit", "name": "not_null_quality_measures__stg_core__procedure_patient_id", "resource_type": "test", "package_name": "the_tuva_project", "path": "not_null_quality_measures__stg_core__procedure_patient_id.sql", "original_file_path": "models/quality_measures/quality_measures_models.yml", "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9", "fqn": ["the_tuva_project", "quality_measures", "not_null_quality_measures__stg_core__procedure_patient_id"], "alias": "not_null_quality_measures__stg_core__procedure_patient_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1705501482.5587444, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "quality_measures__stg_core__procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.the_tuva_project.quality_measures__stg_core__procedure"]}, "compiled_path": "target/compiled/the_tuva_project/models/quality_measures/quality_measures_models.yml/not_null_quality_measures__stg_core__procedure_patient_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__procedure\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.the_tuva_project.quality_measures__stg_core__procedure", "sql": " __dbt__cte__quality_measures__stg_core__procedure as (\n\nselect\n      patient_id\n    , procedure_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-01-17 14:47:17.546759+00:00' as tuva_last_run\nfrom tuva_project_demo.core.procedure\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "patient_id", "file_key_name": "models.quality_measures__stg_core__procedure", "attached_node": "model.the_tuva_project.quality_measures__stg_core__procedure"}}, "sources": {}, "macros": {"macro.the_tuva_project_demo.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "the_tuva_project_demo", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.the_tuva_project_demo.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.0979583, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.1038625, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.1067715, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        coalesce(table_type, 'DYNAMIC TABLE') as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.1075413, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.108039, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.1082969, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.1090076, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    upper(\"table_schema\") = upper('{{ relation.schema }}')\n                    and upper(\"table_name\") = upper('{{ relation.identifier }}')\n                )\n            {% elif relation.schema %}\n                (\n                    upper(\"table_schema\") = upper('{{ relation.schema }}')\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.1109643, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.129726, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.1305895, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.1324215, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2120194, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {%- set paginated_sql -%}\n         show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n      {%- endset -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2150383, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2169673, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2176828, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2207634, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2225199, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2246232, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2251537, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2255619, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2267187, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2271404, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.228208, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2308214, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2318, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2330256, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.235296, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2366312, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.236979, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.238345, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.239598, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.240221, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.241104, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2456076, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2466438, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.247095, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) %}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.248303, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2499185, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.250785, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2558885, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.256747, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2609403, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.261442, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2619386, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2624216, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- set transient = config.get('transient', default=true) -%}\n\n  {% if temporary -%}\n    {%- set table_type = \"temporary\" -%}\n  {%- elif transient -%}\n    {%- set table_type = \"transient\" -%}\n  {%- else -%}\n    {%- set table_type = \"\" -%}\n  {%- endif %}\n\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ table_type }} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=table_type) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2714465, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2720895, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2726932, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2733612, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.274632, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2760336, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2849262, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2902613, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2912102, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.293635, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.2978706, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3066487, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3076103, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3096294, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3198357, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3327115, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.333435, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3344338, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3378947, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3387167, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3392856, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3397293, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3453424, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3480825, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3485727, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3497503, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3504076, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3511043, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.351886, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3526332, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3541658, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3549376, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3552768, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3556314, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3560803, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3564482, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3573952, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3581233, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.359315, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3611429, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3632207, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3645716, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.365215, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.36612, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3668284, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3695598, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3711836, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.371861, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3726356, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3736687, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.374324, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3753235, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.375921, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3767312, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3772871, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.378794, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3831308, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.384104, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3844705, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3848605, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3858075, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3865478, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3868237, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.387427, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3877685, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3897173, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3903372, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3942893, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.394868, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3953724, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.3971891, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.397776, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.399257, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4019089, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.403482, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4040878, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.404802, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4058192, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.406588, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4078705, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4083943, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4090703, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.409428, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4106731, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4110758, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4118311, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.412307, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4131207, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4135258, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4142277, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4144948, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4150925, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.415438, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4160604, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4164724, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.417495, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4183044, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4210916, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4215317, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4264605, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.427181, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4275808, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4304514, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4314091, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4322736, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.43319, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4340956, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4354718, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4361932, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.the_tuva_project_demo.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.437264, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4378376, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4384077, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4413307, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.441684, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4443643, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4453435, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4465647, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4476144, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4477885, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4485207, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4491436, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.449822, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4527602, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4538198, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4543235, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4549186, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4554453, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4567542, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4584627, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.460481, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.461758, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4677558, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.475318, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4866133, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4880617, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.489409, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4924214, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4930983, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.4946964, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.501579, "supported_languages": ["sql"]}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5104952, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.511572, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.51205, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5128407, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.513177, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5151992, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.515753, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5162272, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.516958, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.517384, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5180528, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5184548, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5192716, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5200534, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5205886, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5213945, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5252302, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5282388, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5297563, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5302715, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5337603, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5447474, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5488067, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5565438, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5601087, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5744755, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5783913, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5906677, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5960698, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.5972905, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6007996, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.601393, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6035745, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6109743, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6114118, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6119344, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6135802, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6139848, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.61445, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.619402, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6220787, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6351752, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6428356, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6434553, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6438165, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6447048, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6455107, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.645899, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6464078, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6485083, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6489377, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6494813, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6507125, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.651995, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6526136, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6591995, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6676452, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.670196, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6711495, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.672479, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6729124, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6732028, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6735055, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6737404, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6740496, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.674286, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6752172, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6756046, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6785893, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6793911, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6799004, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6805193, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6815827, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6879637, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.688619, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.689616, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.690118, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6912944, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6917486, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6947734, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6956887, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.696086, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6968074, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.6972632, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.699563, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7001731, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7027612, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7044165, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7050703, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7063885, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.706777, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7073238, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7084632, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7093995, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7099013, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7102919, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7107117, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.711294, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7117798, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7127755, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7131224, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7142658, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.714677, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7159958, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7163978, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7170866, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7177155, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7188778, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7192924, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7195659, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7235875, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7243004, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7252276, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7264056, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7270498, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7278101, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7281797, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7285235, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7291157, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.730537, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7309976, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7312748, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.732226, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.733925, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7401989, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7413146, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7421212, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7429397, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7434568, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7447674, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.745217, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7457948, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7462356, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7476208, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7481527, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7485464, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.748923, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.749254, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7496784, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.750189, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7540622, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7544653, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7549536, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7563608, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7583108, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7589903, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7593327, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.759991, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7617388, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7625155, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7632794, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7639272, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7655604, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7659626, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7664728, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.76694, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7698512, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7731364, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7734938, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7738595, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7749178, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7754955, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7759335, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7764168, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.777051, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7781339, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7784731, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.780081, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7810693, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7817342, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7829385, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7842689, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7862177, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.787186, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7882895, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7889373, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7892237, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.790815, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7912743, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7926633, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.794046, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7967887, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7972353, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.798013, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7983916, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7991247, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.799443, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.7999566, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8001988, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8007445, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.800957, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8017151, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8021505, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8036695, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8042374, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8049066, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8055007, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8059065, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8070214, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8074973, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8081338, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8084872, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8097453, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.810189, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8107176, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.811192, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8113568, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.814926, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8154292, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8159184, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8164442, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.81694, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8176775, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8181255, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8185678, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8189251, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8192513, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.819578, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8198702, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8201914, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8204727, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8211806, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8215413, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8223314, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8227162, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.824367, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.826241, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8270292, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8291903, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8299139, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.830514, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8321927, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8332055, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.833874, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8341389, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8384206, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8401148, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8413284, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8454306, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8491943, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.851906, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8526003, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8537006, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8543026, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8551056, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8559952, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8576658, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8587718, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8602157, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8629699, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8641949, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8649595, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8667407, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8695536, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.871523, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.873856, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.874861, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.876687, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8791404, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8815258, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8884733, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8931005, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8944366, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.895435, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8964446, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8977797, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.898747, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.8995476, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9012341, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9036977, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9055712, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9077427, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9095004, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.910271, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9118457, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.916261, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.917584, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9189885, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9200852, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9209447, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9222791, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.922835, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9239488, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9245493, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.926002, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9278374, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9288323, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9302185, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9321642, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.932793, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.93358, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9350464, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9355855, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.935981, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9365942, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9369729, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9375217, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9380207, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9402003, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9411833, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9415739, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.942924, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.943882, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9454293, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.94761, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9524505, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9538095, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9560628, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9572418, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9591224, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9604683, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9627905, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9639423, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.965736, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9669542, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9686143, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.975872, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9768095, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9782805, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9797032, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9810033, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9825292, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9832244, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9842372, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9845288, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.984808, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9850712, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.985615, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9861288, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.987872, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9887922, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9910998, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9936666, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9944074, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9951875, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.996612, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.9973762, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501472.999642, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.001574, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0024784, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.004513, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0051172, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0054002, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.006429, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0082548, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0109792, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0147076, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0155048, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0159738, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0205407, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0307243, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0330465, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0375366, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0390615, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0401008, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0405319, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0414202, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0424511, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0431957, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0440614, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0450635, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.046776, "supported_languages": null}, "macro.the_tuva_project.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/date_part.sql", "original_file_path": "macros/date_part.sql", "unique_id": "macro.the_tuva_project.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\r\n    {{ adapter.dispatch('date_part') (datepart, date) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.the_tuva_project.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0477893, "supported_languages": null}, "macro.the_tuva_project.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/date_part.sql", "original_file_path": "macros/date_part.sql", "unique_id": "macro.the_tuva_project.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\r\n    date_part('{{ datepart }}', {{  date }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0482306, "supported_languages": null}, "macro.the_tuva_project.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/date_part.sql", "original_file_path": "macros/date_part.sql", "unique_id": "macro.the_tuva_project.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\r\n    extract({{ datepart }} from {{ date }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0485518, "supported_languages": null}, "macro.the_tuva_project.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.the_tuva_project.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0495894, "supported_languages": null}, "macro.the_tuva_project.load_seed": {"name": "load_seed", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/load_seed.sql", "original_file_path": "macros/load_seed.sql", "unique_id": "macro.the_tuva_project.load_seed", "macro_sql": "{% macro load_seed(uri,pattern,compression=false,headers=false,null_marker=false) %}\n{{ return(adapter.dispatch('load_seed', 'the_tuva_project')(uri,pattern,compression,headers,null_marker)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.the_tuva_project.snowflake__load_seed"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0542257, "supported_languages": null}, "macro.the_tuva_project.duckdb__load_seed": {"name": "duckdb__load_seed", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/load_seed.sql", "original_file_path": "macros/load_seed.sql", "unique_id": "macro.the_tuva_project.duckdb__load_seed", "macro_sql": "{% macro duckdb__load_seed(uri,pattern,compression,headers,null_marker) %}\n{%- set columns = adapter.get_columns_in_relation(this) -%}\n{%- set collist = [] -%}\n\n{% for col in columns %}\n  {% do collist.append(\"'\" ~col.name~\"'\" ~ \": \" ~ \"'\"~col.dtype~\"'\") %}\n{% endfor %}\n\n{%- set cols = collist|join(',') -%}\n{# { log( cols,true) } #}\n\n{% set sql %}\n  set s3_access_key_id='AKIA2EPVNTV4FLAEBFGE';\n  set s3_secret_access_key='TARgblERrFP81Op+52KZW7HrP1Om6ObEDQAUVN2u';\n  set s3_region='us-east-1';\n  create or replace table {{this}} as\n  select\n      *\n    from\n        read_csv('s3://{{ uri }}/{{ pattern }}*',\n        {% if null_marker == true %} nullstr = '\\N' {% else %} nullstr = '' {% endif %},\n         header=true,\n         columns= { {{ cols }} } )\n\n{% endset %}\n\n{% call statement('ducksql',fetch_result=true) %}\n{{ sql }}\n{% endcall %}\n\n{% if execute %}\n{# debugging { log(sql, True)} #}\n{% set results = load_result('ducksql') %}\n{{ log(\"Loaded data from external s3 resource\\n  loaded to: \" ~ this ~ \"\\n  from: s3://\" ~ uri ,True) }}\n{# debugging { log(results, True) } #}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.056786, "supported_languages": null}, "macro.the_tuva_project.redshift__load_seed": {"name": "redshift__load_seed", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/load_seed.sql", "original_file_path": "macros/load_seed.sql", "unique_id": "macro.the_tuva_project.redshift__load_seed", "macro_sql": "{% macro redshift__load_seed(uri,pattern,compression,headers,null_marker) %}\n{% set sql %}\ncopy  {{ this }}\n  from 's3://{{ uri }}/{{ pattern }}'\n  access_key_id 'AKIA2EPVNTV4FLAEBFGE'\n  secret_access_key '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'\n  csv\n  {% if compression == true %} gzip {% else %} {% endif %}\n  {% if headers == true %} ignoreheader 1 {% else %} {% endif %}\n  emptyasnull\n  region 'us-east-1'\n\n{% endset %}\n\n{% call statement('redsql',fetch_result=true) %}\n{{ sql }}\n{% endcall %}\n\n{% if execute %}\n{# debugging { log(sql, True)} #}\n{% set results = load_result('redsql') %}\n{{ log(\"Loaded data from external s3 resource\\n  loaded to: \" ~ this ~ \"\\n  from: s3://\" ~ uri ,True) }}\n{# debugging { log(results, True) } #}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0588112, "supported_languages": null}, "macro.the_tuva_project.snowflake__load_seed": {"name": "snowflake__load_seed", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/load_seed.sql", "original_file_path": "macros/load_seed.sql", "unique_id": "macro.the_tuva_project.snowflake__load_seed", "macro_sql": "{% macro snowflake__load_seed(uri,pattern,compression,headers,null_marker) %}\n{% set sql %}    \ncopy into {{ this }}\n    from s3://{{ uri }}\n    file_format = (type = CSV\n    {% if compression == true %} compression = 'GZIP' {% else %} compression = 'none' {% endif %}\n    {% if headers == true %} skip_header = 1 {% else %} {% endif %}\n    empty_field_as_null = true\n    field_optionally_enclosed_by = '\"'\n)\npattern = '.*\\/{{pattern}}.*';\n{% endset %}\n{% call statement('snowsql',fetch_result=true) %}\n{{ sql }}\n{% endcall %}\n\n{% if execute %}\n{# debugging { log(sql, True)} #}\n{% set results = load_result('snowsql') %}\n{{ log(\"Loaded data from external s3 resource\\n  loaded to: \" ~ this ~ \"\\n  from: s3://\" ~ uri ~ \"/\" ~ pattern ~ \"*\\n  rows: \" ~ results['data']|sum(attribute=2),True) }}\n{# debugging { log(results, True)} #}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0608883, "supported_languages": null}, "macro.the_tuva_project.bigquery__load_seed": {"name": "bigquery__load_seed", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/load_seed.sql", "original_file_path": "macros/load_seed.sql", "unique_id": "macro.the_tuva_project.bigquery__load_seed", "macro_sql": "{% macro bigquery__load_seed(uri,pattern,compression,headers,null_marker) %}\n{%- set columns = adapter.get_columns_in_relation(this) -%}\n{%- set collist = [] -%}\n\n{% for col in columns %}\n  {% do collist.append(col.name ~ \" \" ~ col.dtype) %}\n{% endfor %}\n\n{%- set cols = collist|join(',') -%}\n{# { log( cols,true) } #}\n{% set sql %}\nload data into {{ this }} ( {{collist|join(',')}} )\nfrom files (format = 'csv',\n    uris = ['gs://{{ uri }}/{{ pattern }}*'],\n    {% if compression == true %} compression = 'GZIP', {% else %} {% endif %}\n    {% if headers == true %} skip_leading_rows = 1, {% else %} {% endif %}\n    {% if null_marker == true %} null_marker = '\\\\N', {% else %} {% endif %}\n    quote = '\"'\n    )\n{% endset %}\n\n{% call statement('bigsql',fetch_result=true) %}\n{{ sql }}\n{% endcall %}\n\n{% if execute %}\n{# { log(sql, True) } #}\n{% set results = load_result('bigsql') %}\n{{ log(\"Loaded data from external gs resource\\n  loaded to: \" ~ this ~ \"\\n  from: gs://\" ~ uri ~ \"/\" ~ pattern ~ \"*\",True) }}\n{# log(results, True) #}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0632658, "supported_languages": null}, "macro.the_tuva_project.databricks__load_seed": {"name": "databricks__load_seed", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/load_seed.sql", "original_file_path": "macros/load_seed.sql", "unique_id": "macro.the_tuva_project.databricks__load_seed", "macro_sql": "{% macro databricks__load_seed(uri,pattern,compression,headers,null_marker) %}\n{% if execute %}\n\n{%- set s3_path = 's3://' ~ uri ~ '/' -%}\n{%- set columns = adapter.get_columns_in_relation(this) -%}\n{%- set collist = [] -%}\n\n{% for col in columns %}\n  {% do collist.append(\"_c\" ~ loop.index0 ~ \"::\" ~ col.dtype ~ \" AS \" ~ col.name ) %}\n{% endfor %}\n\n{%- set cols = collist|join(',\\n    ') -%}\n\n{% set sql %}\nCOPY INTO {{ this }}\nFROM (\n  SELECT\n    {{ cols }}\n\n  FROM '{{ s3_path }}'\n  {% if env_var('AWS_SESSION_TOKEN', False) %}\n  WITH (\n    CREDENTIAL (\n      AWS_ACCESS_KEY = \"{{ env_var('AWS_ACCESS_KEY') }}\",\n      AWS_SECRET_KEY = \"{{ env_var('AWS_SECRET_KEY') }}\",\n      AWS_SESSION_TOKEN = \"{{ env_var('AWS_SESSION_TOKEN') }}\"\n    )\n  )\n  {% endif %}\n)\nFILEFORMAT = CSV\nPATTERN = '{{ pattern }}*'\nFORMAT_OPTIONS (\n  {% if headers == true %} 'skipRows' = '1', {% else %} 'skipRows' = '0', {% endif %}\n  {% if null_marker == true %} 'nullValue' = '\\\\N', {% else %} {% endif %}\n  'enforceSchema' = 'true',\n  'inferSchema' = 'false',\n  'sep' = ','\n)\nCOPY_OPTIONS (\n  'mergeSchema' = 'false',\n  'force' = 'true'\n)\n{% endset %}\n\n{# check logs/dbt.log for output #}\n{{ log(cols, info=False) }}\n{{ log('Current model: ' ~ this ~ '\\n', info=False) }}\n{{ log('Full s3 path: ' ~ s3_path ~ '\\n', info=False) }}\n{{ log(sql, info=False) }}\n\n{% call statement('databrickssql',fetch_result=true) %}\n{{ sql }}\n{% endcall %}\n\n{% set results = load_result('databrickssql') %}\n{% set rows_affected = results['data'][0][0] %}\n\n{{ log(results, info=False) }}\n{{ log(rows_affected, info=False) }}\n\n{{ log(\"Loaded data from external s3 resource:\", True) }}\n{{ log(\"  source: \\t\" ~ s3_path ~ pattern, True) }}\n{{ log(\"  target: \\t\" ~ this | replace('`',''), True) }}\n{{ log(\"  rows: \\t\\033[92m\" ~ rows_affected ~ \"\\033[0m\", True) }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0686646, "supported_languages": null}, "macro.the_tuva_project.default__load_seed": {"name": "default__load_seed", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/load_seed.sql", "original_file_path": "macros/load_seed.sql", "unique_id": "macro.the_tuva_project.default__load_seed", "macro_sql": "{% macro default__load_seed(uri,pattern,compression,headers,null_marker) %}\n{% if execute %}\n{% do log('No adapter found, seed not loaded',info = True) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0692363, "supported_languages": null}, "macro.the_tuva_project.try_to_cast_date": {"name": "try_to_cast_date", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/try_to_cast_date.sql", "original_file_path": "macros/try_to_cast_date.sql", "unique_id": "macro.the_tuva_project.try_to_cast_date", "macro_sql": "\r\n\r\n{%- macro try_to_cast_date(column_name, date_format='YYYY-MM-DD') -%}\r\n\r\n    {{ return(adapter.dispatch('try_to_cast_date')(column_name, date_format)) }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.the_tuva_project.snowflake__try_to_cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0729365, "supported_languages": null}, "macro.the_tuva_project.bigquery__try_to_cast_date": {"name": "bigquery__try_to_cast_date", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/try_to_cast_date.sql", "original_file_path": "macros/try_to_cast_date.sql", "unique_id": "macro.the_tuva_project.bigquery__try_to_cast_date", "macro_sql": "{%- macro bigquery__try_to_cast_date(column_name, date_format) -%}\r\n\r\n    {%- if date_format == 'YYYY-MM-DD HH:MI:SS' -%}\r\n    safe_cast( date( {{ column_name }} ) as date )\r\n    {%- else -%}\r\n    safe_cast( {{ column_name }} as date )\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0733705, "supported_languages": null}, "macro.the_tuva_project.default__try_to_cast_date": {"name": "default__try_to_cast_date", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/try_to_cast_date.sql", "original_file_path": "macros/try_to_cast_date.sql", "unique_id": "macro.the_tuva_project.default__try_to_cast_date", "macro_sql": "{%- macro default__try_to_cast_date(column_name, date_format) -%}\r\n\r\n    try_cast( {{ column_name }} as date )\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0736053, "supported_languages": null}, "macro.the_tuva_project.postgres__try_to_cast_date": {"name": "postgres__try_to_cast_date", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/try_to_cast_date.sql", "original_file_path": "macros/try_to_cast_date.sql", "unique_id": "macro.the_tuva_project.postgres__try_to_cast_date", "macro_sql": "{%- macro postgres__try_to_cast_date(column_name, date_format) -%}\r\n\r\n    {%- if date_format == 'YYYY-MM-DD' -%}\r\n    case\r\n      when {{ column_name }} similar to '[0-9]{4}-[0-9]{2}-[0-9]{2}'\r\n      then to_date( {{ column_name }}, 'YYYY-MM-DD')\r\n      else date(NULL)\r\n    end\r\n    {%- elif date_format == 'YYYYMMDD' -%}\r\n    case\r\n      when {{ column_name }} similar to '[0-9]{4}[0-9]{2}[0-9]{2}'\r\n      then to_date( {{ column_name }}, 'YYYYMMDD')\r\n      else date(NULL)\r\n    end\r\n    {%- elif date_format == 'MM/DD/YYYY' -%}\r\n    case\r\n      when {{ column_name }} similar to '[0-9]{2}/[0-9]{2}/[0-9]{4}'\r\n      then to_date( {{ column_name }}, 'MM/DD/YYYY')\r\n      else date(NULL)\r\n    end\r\n    {%- elif date_format == 'YYYY-MM-DD HH:MI:SS' -%}\r\n    case\r\n      when {{ column_name }} similar to '[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}'\r\n      then to_date( {{ column_name }}, 'YYYY-MM-DD HH:MI:SS')\r\n      else date(NULL)\r\n    end\r\n    {%- else -%}\r\n    date(NULL)\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.074547, "supported_languages": null}, "macro.the_tuva_project.redshift__try_to_cast_date": {"name": "redshift__try_to_cast_date", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/try_to_cast_date.sql", "original_file_path": "macros/try_to_cast_date.sql", "unique_id": "macro.the_tuva_project.redshift__try_to_cast_date", "macro_sql": "{%- macro redshift__try_to_cast_date(column_name, date_format) -%}\r\n\r\n    {%- if date_format == 'YYYY-MM-DD' -%}\r\n    case\r\n      when {{ column_name }} similar to '\\\\d{4}-\\\\d{2}-\\\\d{2}'\r\n      then to_date( {{ column_name }}, 'YYYY-MM-DD')\r\n      else date(NULL)\r\n    end\r\n    {%- elif date_format == 'YYYYMMDD' -%}\r\n    case\r\n      when {{ column_name }} similar to '\\\\d{4}\\\\d{2}\\\\d{2}'\r\n      then to_date( {{ column_name }}, 'YYYYMMDD')\r\n      else date(NULL)\r\n    end\r\n    {%- elif date_format == 'MM/DD/YYYY' -%}\r\n    case\r\n      when {{ column_name }} similar to '\\\\d{2}/\\\\d{2}/\\\\d{4}'\r\n      then to_date( {{ column_name }}, 'MM/DD/YYYY')\r\n      else date(NULL)\r\n    end\r\n    {%- elif date_format == 'YYYY-MM-DD HH:MI:SS' -%}\r\n    case\r\n      when {{ column_name }} similar to '\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}'\r\n      then to_date( {{ column_name }}, 'YYYY-MM-DD HH:MI:SS')\r\n      else date(NULL)\r\n    end\r\n    {%- else -%}\r\n    date(NULL)\r\n    {%- endif -%}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0755298, "supported_languages": null}, "macro.the_tuva_project.snowflake__try_to_cast_date": {"name": "snowflake__try_to_cast_date", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/try_to_cast_date.sql", "original_file_path": "macros/try_to_cast_date.sql", "unique_id": "macro.the_tuva_project.snowflake__try_to_cast_date", "macro_sql": "{%- macro snowflake__try_to_cast_date(column_name, date_format) -%}\r\n\r\n    try_cast( {{ column_name }} as date )\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0757637, "supported_languages": null}, "macro.the_tuva_project.eligibility_denominator_invalid_values": {"name": "eligibility_denominator_invalid_values", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/data_quality/eligibility_denominator_invalid_values.sql", "original_file_path": "macros/data_quality/eligibility_denominator_invalid_values.sql", "unique_id": "macro.the_tuva_project.eligibility_denominator_invalid_values", "macro_sql": "{% macro eligibility_denominator_invalid_values(relation) %}\n{%- set sql_statement -%}\n    select test_field\n    from {{ ref('data_quality__test_catalog') }}\n    where source_table = 'normalized_input__eligibility'\n    and test_category = 'invalid_values'\n{%- endset -%}\n\n{%- set results = run_query(sql_statement) -%}\n\n{%- if execute -%}\n{%- set results_list = results.columns[0].values() -%}\n{%- else -%}\n{%- set results_list = [] -%}\n{%- endif -%}\n\n    {%- for test_field in results_list -%}\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from {{ relation }} as rel\n         left join {{ ref('data_quality__test_catalog') }} as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = '{{ test_field }}'\n    where rel.{{ test_field }} is not null\n    group by cat.test_name\n    {% if not loop.last -%}\n    union all\n    {% endif -%}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0780663, "supported_languages": null}, "macro.the_tuva_project.eligibility_missing_column_check": {"name": "eligibility_missing_column_check", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/data_quality/eligibility_missing_column_check.sql", "original_file_path": "macros/data_quality/eligibility_missing_column_check.sql", "unique_id": "macro.the_tuva_project.eligibility_missing_column_check", "macro_sql": "{% macro eligibility_missing_column_check(relation, column_list) %}\n    {%- for column_item in column_list  %}\n        select\n              patient_id\n            , data_source\n            , '{{ column_item }}' as column_checked\n        from {{ relation }}\n        where {{ column_item }} is null\n        {% if not loop.last -%}\n            union all\n        {%- endif -%}\n        {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0792348, "supported_languages": null}, "macro.the_tuva_project.medical_claim_date_check": {"name": "medical_claim_date_check", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/data_quality/medical_claim_date_check.sql", "original_file_path": "macros/data_quality/medical_claim_date_check.sql", "unique_id": "macro.the_tuva_project.medical_claim_date_check", "macro_sql": "{% macro medical_claim_date_check(relation, column_list, claim_type=false) %}\n    {%- for column_item in column_list -%}\n    select\n          claim_id\n        , data_source\n        , '{{ column_item }}' as column_checked\n    from {{ relation }} as rel\n         left join {{ ref('terminology__calendar') }} as cal\n           on rel.{{ column_item }} = cal.full_date\n    where cal.full_date is null\n    and rel.{{ column_item }} is not null\n    {% if claim_type -%}\n    and rel.claim_type = '{{ claim_type }}'\n    {% endif -%}\n    {% if not loop.last -%}\n    union all\n    {% endif -%}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0805168, "supported_languages": null}, "macro.the_tuva_project.medical_claim_denominator_invalid_values": {"name": "medical_claim_denominator_invalid_values", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/data_quality/medical_claim_denominator_invalid_values.sql", "original_file_path": "macros/data_quality/medical_claim_denominator_invalid_values.sql", "unique_id": "macro.the_tuva_project.medical_claim_denominator_invalid_values", "macro_sql": "{% macro medical_claim_denominator_invalid_values(relation) %}\n{%- set sql_statement -%}\n    select test_field\n    from {{ ref('data_quality__test_catalog') }}\n    where source_table = 'normalized_input__medical_claim'\n    and test_category = 'invalid_values'\n{%- endset -%}\n\n{%- set results = run_query(sql_statement) -%}\n\n{%- if execute -%}\n{%- set results_list = results.columns[0].values() -%}\n{%- else -%}\n{%- set results_list = [] -%}\n{%- endif -%}\n\n    {%- for test_field in results_list -%}\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '{{ var('tuva_last_run')}}' as tuva_last_run\n    from {{ relation }} as rel\n         left join {{ ref('data_quality__test_catalog') }} as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = '{{ test_field }}'\n    where rel.{{ test_field }} is not null\n    group by cat.test_name\n    {% if not loop.last -%}\n    union all\n    {% endif -%}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.082751, "supported_languages": null}, "macro.the_tuva_project.medical_claim_header_duplicate_check": {"name": "medical_claim_header_duplicate_check", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/data_quality/medical_claim_header_duplicate_check.sql", "original_file_path": "macros/data_quality/medical_claim_header_duplicate_check.sql", "unique_id": "macro.the_tuva_project.medical_claim_header_duplicate_check", "macro_sql": "{% macro medical_claim_header_duplicate_check(relation, column_list, claim_type) %}\n    {%- for column_item in column_list %}\n        select\n              claim_id\n            , data_source\n            , '{{ column_item }}' as column_checked\n            , count(distinct {{ column_item }}) as duplicate_count\n        from {{ relation }}\n        where claim_type = '{{ claim_type }}'\n        group by\n              claim_id\n            , data_source\n        having count(distinct {{ column_item }}) > 1\n        {% if not loop.last -%}\n            union all\n        {%- endif -%}\n        {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.084048, "supported_languages": null}, "macro.the_tuva_project.medical_claim_missing_column_check": {"name": "medical_claim_missing_column_check", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/data_quality/medical_claim_missing_column_check.sql", "original_file_path": "macros/data_quality/medical_claim_missing_column_check.sql", "unique_id": "macro.the_tuva_project.medical_claim_missing_column_check", "macro_sql": "{% macro medical_claim_missing_column_check(relation, column_list, claim_type) %}\n    {%- for column_item in column_list %}\n        select\n              claim_id\n            , data_source\n            , '{{ column_item }}' as column_checked\n        from {{ relation }}\n        where  {{ column_item }} is null\n        and claim_type = '{{ claim_type }}'\n        {% if not loop.last -%}\n            union all\n        {%- endif -%}\n        {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0849547, "supported_languages": null}, "macro.the_tuva_project.pharmacy_claim_header_duplicate_check": {"name": "pharmacy_claim_header_duplicate_check", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/data_quality/pharmacy_claim_header_duplicate_check.sql", "original_file_path": "macros/data_quality/pharmacy_claim_header_duplicate_check.sql", "unique_id": "macro.the_tuva_project.pharmacy_claim_header_duplicate_check", "macro_sql": "{% macro pharmacy_claim_header_duplicate_check(relation, column_list) %}\n    {%- for column_item in column_list %}\n        select\n              claim_id\n            , data_source\n            , '{{ column_item }}' as column_checked\n            , count(distinct {{ column_item }}) as duplicate_count\n        from {{ relation }}\n        group by claim_id, data_source\n        having count(distinct {{ column_item }}) > 1\n        {% if not loop.last -%}\n            union all\n        {%- endif -%}\n        {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0857873, "supported_languages": null}, "macro.the_tuva_project.pharmacy_claim_missing_column_check": {"name": "pharmacy_claim_missing_column_check", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/data_quality/pharmacy_claim_missing_column_check.sql", "original_file_path": "macros/data_quality/pharmacy_claim_missing_column_check.sql", "unique_id": "macro.the_tuva_project.pharmacy_claim_missing_column_check", "macro_sql": "{% macro pharmacy_claim_missing_column_check(relation, column_list) %}\n    {%- for column_item in column_list %}\n        select\n              claim_id\n            , data_source\n            , '{{ column_item }}' as column_checked\n        from {{ relation }}\n        where {{ column_item }} is null\n        {% if not loop.last -%}\n            union all\n        {%- endif -%}\n        {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.086501, "supported_languages": null}, "macro.the_tuva_project.test_claims_preprocessing_pipeline_checks": {"name": "test_claims_preprocessing_pipeline_checks", "resource_type": "macro", "package_name": "the_tuva_project", "path": "macros/tests/claims_preprocessing_pipeline_checks.sql", "original_file_path": "macros/tests/claims_preprocessing_pipeline_checks.sql", "unique_id": "macro.the_tuva_project.test_claims_preprocessing_pipeline_checks", "macro_sql": "{% test claims_preprocessing_pipeline_checks(model) %}\n\n    select *\n    from {{ ref('data_quality__claims_preprocessing_test_detail' )}}\n    where pipeline_test = 1\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705501473.0868597, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.the_tuva_project.core__lab_result": [{"database": "tuva_project_demo", "schema": "core", "name": "core__lab_result", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__lab_result.sql", "original_file_path": "models/core/final/core__lab_result.sql", "unique_id": "model.the_tuva_project.core__lab_result", "fqn": ["the_tuva_project", "core", "final", "core__lab_result"], "alias": "lab_result", "checksum": {"name": "sha256", "checksum": "f9476ba4518a0bd40ed1de34b409cd2a90558632afa56fb482ab58b016ad4ab9"}, "config": {"enabled": false, "alias": "lab_result", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The lab result table contains information about lab test results,  including the LOINC code and description, units, reference range, and  result.\n", "columns": {"lab_result_id": {"name": "lab_result_id", "description": "Unique identifier for the lab test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique identifier for each encounter.  Included in this table if the  lab test can be linked to an encounter.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accession_number": {"name": "accession_number", "description": "The lab order number from the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "The code type from the source system.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "The code for the lab from the source system.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__loinc.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_description": {"name": "source_description", "description": "The description for the lab test from the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_component": {"name": "source_component", "description": "The description for the component of the test from the source system.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__loinc.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code_type": {"name": "normalized_code_type", "description": "The normalized code type.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "The normalized code e.g. LOINC.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__loinc.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_description": {"name": "normalized_description", "description": "The normalized description for the code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_component": {"name": "normalized_component", "description": "The normalized component.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__loinc.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the lab test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "result": {"name": "result", "description": "The result of the lab test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "result_date": {"name": "result_date", "description": "Date of the test result.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collection_date": {"name": "collection_date", "description": "Date the test was collected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_units": {"name": "source_units", "description": "Source units of the lab test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_units": {"name": "normalized_units", "description": "Normalized units of the lab test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_reference_range_low": {"name": "source_reference_range_low", "description": "The low end of the reference range from the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_reference_range_high": {"name": "source_reference_range_high", "description": "The high end of the reference range from the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_reference_range_low": {"name": "normalized_reference_range_low", "description": "The normalized low end of the reference range.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_reference_range_high": {"name": "normalized_reference_range_high", "description": "The normalized high end of the reference range.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_abnormal_flag": {"name": "source_abnormal_flag", "description": "Indicates whether the result is abnormal or normal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_abnormal_flag": {"name": "normalized_abnormal_flag", "description": "Normalized abnormal flag.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specimen": {"name": "specimen", "description": "The type of specimen e.g. blood, plasma, urine.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ordering_practitioner_id": {"name": "ordering_practitioner_id", "description": "Unique identifier for the practitioner who ordered the lab test.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Custom description of the source system e.g. Epic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.    \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "lab_result", "tags": "core", "materialized": "table", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.784406, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core.lab_result", "raw_code": "{{ config(\r\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\r\n   )\r\n}}\r\n\r\nselect * from {{ ref('core__stg_clinical_lab_result')}}", "language": "sql", "refs": [{"name": "core__stg_clinical_lab_result", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__medication": [{"database": "tuva_project_demo", "schema": "core", "name": "core__medication", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__medication.sql", "original_file_path": "models/core/final/core__medication.sql", "unique_id": "model.the_tuva_project.core__medication", "fqn": ["the_tuva_project", "core", "final", "core__medication"], "alias": "medication", "checksum": {"name": "sha256", "checksum": "465c23d0e83d37bcd661cec2d9e6b14101d171d7dc5b1481e9ef8e0580998512"}, "config": {"enabled": false, "alias": "medication", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The medication table contains information on medications ordered and/or  administered during a patient encounter.\n", "columns": {"medication_id": {"name": "medication_id", "description": "Unique identifier for each medication in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique identifier for each encounter in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispensing_date": {"name": "dispensing_date", "description": "Date the medication was dispensed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "prescribing_date": {"name": "prescribing_date", "description": "Date the medication was prescribed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "The source code type of the medication.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "The source code for the medication.", "meta": {"terminology": "https://www.nlm.nih.gov/research/umls/rxnorm/index.html"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_description": {"name": "source_description", "description": "The source description of the medication.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ndc_code": {"name": "ndc_code", "description": "National drug code associated with the medication.", "meta": {"terminology": "https://www.fda.gov/drugs/drug-approvals-and-databases/national-drug-code-directory"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ndc_description": {"name": "ndc_description", "description": "Description for the NDC.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rxnorm_code": {"name": "rxnorm_code", "description": "RxNorm code associated with the medication.", "meta": {"terminology": "https://www.nlm.nih.gov/research/umls/rxnorm/index.html"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rxnorm_description": {"name": "rxnorm_description", "description": "Description for the RxNorm code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "atc_code": {"name": "atc_code", "description": "ATC code for the medication.", "meta": {"terminology": "https://www.who.int/tools/atc-ddd-toolkit/atc-classification"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "atc_description": {"name": "atc_description", "description": "Description for the ATC code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "route": {"name": "route", "description": "The route used to administer the medication.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strength": {"name": "strength", "description": "The strength of the medication.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the medication.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity_unit": {"name": "quantity_unit", "description": "The units for the quantity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_supply": {"name": "days_supply", "description": "The number of days supply included.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "practitioner_id": {"name": "practitioner_id", "description": "Unique identifier for the practitioner who ordered the medication.\n", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__provider.csv", "terminology_note": "**Note: this terminology set is too large to be loaded as a seed and is instead loaded from public cloud storage for supported adapters."}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Custom description of the source system e.g. Epic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "medication", "tags": "core", "materialized": "table", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.8101864, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core.medication", "raw_code": "{{ config(\r\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\r\n   )\r\n}}\r\n\r\n\r\nselect * from {{ ref('core__stg_clinical_medication')}}", "language": "sql", "refs": [{"name": "core__stg_clinical_medication", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__observation": [{"database": "tuva_project_demo", "schema": "core", "name": "core__observation", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/final/core__observation.sql", "original_file_path": "models/core/final/core__observation.sql", "unique_id": "model.the_tuva_project.core__observation", "fqn": ["the_tuva_project", "core", "final", "core__observation"], "alias": "observation", "checksum": {"name": "sha256", "checksum": "8e922586d391bb227ab514044d20f47f328a489ae785158adf2d12a7f1c84d4b"}, "config": {"enabled": false, "alias": "observation", "schema": "core", "database": "tuva_project_demo", "tags": ["core"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core"], "description": "The observation table contains information on measurements other than  lab tests e.g. blood pressure, height, and weight.\n", "columns": {"observation_id": {"name": "observation_id", "description": "Unique identifier for each observation in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique identifier for each encounter in the dataset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "panel_id": {"name": "panel_id", "description": "Unique identifier for the panel.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_date": {"name": "observation_date", "description": "Date the observation was recorded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_type": {"name": "observation_type", "description": "Type of observation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code_type": {"name": "source_code_type", "description": "Source code type of the observation.", "meta": {"terminology": "https://github.com/tuva-health/the_tuva_project/blob/main/seeds/terminology/terminology__code_type.csv"}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "Source code of the observation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_description": {"name": "source_description", "description": "Source description of the observation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code_type": {"name": "normalized_code_type", "description": "Normalized code type of the observation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_code": {"name": "normalized_code", "description": "Normalized code of the observation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_description": {"name": "normalized_description", "description": "Normalized description of the observatino.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "result": {"name": "result", "description": "The result of the observation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_units": {"name": "source_units", "description": "Source units of the lab test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_units": {"name": "normalized_units", "description": "Normalized units of the lab test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_reference_range_low": {"name": "source_reference_range_low", "description": "The low end of the reference range from the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_reference_range_high": {"name": "source_reference_range_high", "description": "The high end of the reference range from the source system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_reference_range_low": {"name": "normalized_reference_range_low", "description": "The normalized low end of the reference range.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "normalized_reference_range_high": {"name": "normalized_reference_range_high", "description": "The normalized high end of the reference range.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Custom description of the source system e.g. Epic.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tuva_last_run": {"name": "tuva_last_run", "description": "The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time` as the local time of the `dbt run`  environment.  Timezone is configurable via the `tuva_last_run` var.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "observation", "tags": "core", "materialized": "table", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.8161683, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core.observation", "raw_code": "{{ config(\r\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\r\n   )\r\n}}\r\n\r\n\r\nselect * from {{ ref('core__stg_clinical_observation')}}", "language": "sql", "refs": [{"name": "core__stg_clinical_observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_condition": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_condition", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_condition.sql", "original_file_path": "models/core/staging/core__stg_clinical_condition.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_condition", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_condition"], "alias": "_stg_clinical_condition", "checksum": {"name": "sha256", "checksum": "d3889d8a95c2317831b0269c43788072e3e59a2c3c45d2ea457dcd50a56519c6"}, "config": {"enabled": false, "alias": "_stg_clinical_condition", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical conditions", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_condition", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.8964722, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_condition", "raw_code": "{{ config(\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\nselect\n    cast(condition_id as {{ dbt.type_string() }} ) as condition_id\n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(encounter_id as {{ dbt.type_string() }} ) as encounter_id\n    , cast(claim_id as {{ dbt.type_string() }} ) as claim_id\n    , {{ try_to_cast_date('recorded_date', 'YYYY-MM-DD') }} as recorded_date\n    , {{ try_to_cast_date('onset_date', 'YYYY-MM-DD') }} as onset_date\n    , {{ try_to_cast_date('resolved_date', 'YYYY-MM-DD') }} as resolved_date\n    , cast(status as {{ dbt.type_string() }} ) as status\n    , cast(condition_type as {{ dbt.type_string() }} ) as condition_type\n    , cast(source_code_type as {{ dbt.type_string() }} ) as source_code_type\n    , cast(source_code as {{ dbt.type_string() }} ) as source_code\n    , cast(source_description as {{ dbt.type_string() }} ) as source_description\n    , cast(normalized_code_type as {{ dbt.type_string() }} ) as normalized_code_type\n    , cast(normalized_code as {{ dbt.type_string() }} ) as normalized_code\n    , cast(normalized_description as {{ dbt.type_string() }} ) as normalized_description\n    , cast(condition_rank as {{ dbt.type_int() }} ) as condition_rank\n    , cast(present_on_admit_code as {{ dbt.type_string() }} ) as present_on_admit_code\n    , cast(present_on_admit_description as {{ dbt.type_string() }} ) as present_on_admit_description\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom {{ ref('condition') }}", "language": "sql", "refs": [{"name": "condition", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_int", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_encounter": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_encounter", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_encounter.sql", "original_file_path": "models/core/staging/core__stg_clinical_encounter.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_encounter", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_encounter"], "alias": "_stg_clinical_encounter", "checksum": {"name": "sha256", "checksum": "4431839a775b14f67b0b5264226fae33b2941824f1fa40f77253b0b9e9f77a44"}, "config": {"enabled": false, "alias": "_stg_clinical_encounter", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical encounters", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_encounter", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.9007757, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_encounter", "raw_code": "{{ config(\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\nselect \n    cast(encounter_id as {{ dbt.type_string() }} ) as encounter_id\n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(encounter_type as {{ dbt.type_string() }} ) as encounter_type\n    , {{ try_to_cast_date('encounter_start_date', 'YYYY-MM-DD') }} as encounter_start_date\n    , {{ try_to_cast_date('encounter_end_date', 'YYYY-MM-DD') }} as encounter_end_date\n    , cast(length_of_stay as {{ dbt.type_int() }} ) as length_of_stay\n    , cast(admit_source_code as {{ dbt.type_string() }} ) as admit_source_code\n    , cast(admit_source_description as {{ dbt.type_string() }} ) as admit_source_description\n    , cast(admit_type_code as {{ dbt.type_string() }} ) as admit_type_code\n    , cast(admit_type_description as {{ dbt.type_string() }} ) as admit_type_description\n    , cast(discharge_disposition_code as {{ dbt.type_string() }} ) as discharge_disposition_code\n    , cast(discharge_disposition_description as {{ dbt.type_string() }} ) as discharge_disposition_description\n    , cast(attending_provider_id as {{ dbt.type_string() }} ) as attending_provider_id\n    , cast(facility_npi as {{ dbt.type_string() }} ) as facility_npi\n    , cast(primary_diagnosis_code as {{ dbt.type_string() }} ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as {{ dbt.type_string() }} ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as {{ dbt.type_string() }} ) as primary_diagnosis_description\n    , cast(ms_drg_code as {{ dbt.type_string() }} ) as ms_drg_code\n    , cast(ms_drg_description as {{ dbt.type_string() }} ) as ms_drg_description \n    , cast(apr_drg_code as {{ dbt.type_string() }} ) as apr_drg_code\n    , cast(apr_drg_description as {{ dbt.type_string() }} ) as apr_drg_description\n    , cast(paid_amount as {{ dbt.type_numeric() }} ) as paid_amount\n    , cast(allowed_amount as {{ dbt.type_numeric() }} ) as allowed_amount\n    , cast(charge_amount as {{ dbt.type_numeric() }} ) as charge_amount\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom {{ ref('encounter') }}", "language": "sql", "refs": [{"name": "encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_int", "macro.dbt.type_numeric", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_lab_result": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_lab_result", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_lab_result.sql", "original_file_path": "models/core/staging/core__stg_clinical_lab_result.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_lab_result", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_lab_result"], "alias": "_stg_clinical_lab_result", "checksum": {"name": "sha256", "checksum": "4861fe602fc9b4355ea3da9ae79829c4c4eb329b9423d304eadf2523c43b8937"}, "config": {"enabled": false, "alias": "_stg_clinical_lab_result", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical lab results", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_lab_result", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.904429, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_lab_result", "raw_code": "{{ config(\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\nselect\n    cast(lab_result_id as {{ dbt.type_string() }} ) as lab_result_id\n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(encounter_id as {{ dbt.type_string() }} ) as encounter_id\n    , cast(accession_number as {{ dbt.type_string() }} ) as accession_number\n    , cast(source_code_type as {{ dbt.type_string() }} ) as source_code_type\n    , cast(source_code as {{ dbt.type_string() }} ) as source_code\n    , cast(source_description as {{ dbt.type_string() }} ) as source_description\n    , cast(source_component as {{ dbt.type_string() }} ) as source_component\n    , cast(normalized_code_type as {{ dbt.type_string() }} ) as normalized_code_type\n    , cast(normalized_code as {{ dbt.type_string() }} ) as normalized_code\n    , cast(normalized_description as {{ dbt.type_string() }} ) as normalized_description\n    , cast(normalized_component as {{ dbt.type_string() }} ) as normalized_component\n    , cast(status as {{ dbt.type_string() }} ) as status\n    , cast(result as {{ dbt.type_string() }} ) as result\n    , {{ try_to_cast_date('result_date', 'YYYY-MM-DD') }} as result_date\n    , {{ try_to_cast_date('collection_date', 'YYYY-MM-DD') }} as collection_date\n    , cast(source_units as {{ dbt.type_string() }} ) as source_units\n    , cast(normalized_units as {{ dbt.type_string() }} ) as normalized_units\n    , cast(source_reference_range_low as {{ dbt.type_string() }} ) as source_reference_range_low\n    , cast(source_reference_range_high as {{ dbt.type_string() }} ) as source_reference_range_high\n    , cast(normalized_reference_range_low as {{ dbt.type_string() }} ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as {{ dbt.type_string() }} ) as normalized_reference_range_high\n    , cast(source_abnormal_flag as {{ dbt.type_int() }} ) as source_abnormal_flag\n    , cast(normalized_abnormal_flag as {{ dbt.type_int() }} ) as normalized_abnormal_flag\n    , cast(specimen as {{ dbt.type_string() }} ) as specimen\n    , cast(ordering_practitioner_id as {{ dbt.type_string() }} ) as ordering_practitioner_id\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom {{ ref('lab_result') }}", "language": "sql", "refs": [{"name": "lab_result", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_int", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_location": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_location", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_location.sql", "original_file_path": "models/core/staging/core__stg_clinical_location.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_location", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_location"], "alias": "_stg_clinical_location", "checksum": {"name": "sha256", "checksum": "d174a7c1a6034db5bd81239712dd36ba2a7d8ddebeda83eca4c9d86f00c169b8"}, "config": {"enabled": false, "alias": "_stg_clinical_location", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical locations", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_location", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.9104602, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_location", "raw_code": "{{ config(\r\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\r\n   )\r\n}}\r\n\r\nselect\r\n    cast(location_id as {{ dbt.type_string() }} ) as location_id\r\n    , cast(npi as {{ dbt.type_string() }} ) as npi\r\n    , cast(name as {{ dbt.type_string() }} ) as name\r\n    , cast(facility_type as {{ dbt.type_string() }} ) as facility_type\r\n    , cast(parent_organization as {{ dbt.type_string() }} ) as parent_organization\r\n    , cast(address as {{ dbt.type_string() }} ) as address\r\n    , cast(city as {{ dbt.type_string() }} ) as city\r\n    , cast(state as {{ dbt.type_string() }} ) as state\r\n    , cast(zip_code as {{ dbt.type_string() }} ) as zip_code\r\n    , cast(latitude as {{ dbt.type_float() }} ) as latitude\r\n    , cast(longitude as {{ dbt.type_float() }} ) as longitude\r\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\r\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\r\nfrom {{ ref('location') }}", "language": "sql", "refs": [{"name": "location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_medication": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_medication", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_medication.sql", "original_file_path": "models/core/staging/core__stg_clinical_medication.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_medication", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_medication"], "alias": "_stg_clinical_medication", "checksum": {"name": "sha256", "checksum": "3534e17215e27b1fd8d009a8fd5a2f88343046667b640afb9e4fbb068db9e60b"}, "config": {"enabled": false, "alias": "_stg_clinical_medication", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical medications", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_medication", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.9149737, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_medication", "raw_code": "{{ config(\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\nselect\n    cast(medication_id as {{ dbt.type_string() }} ) as medication_id\n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(encounter_id as {{ dbt.type_string() }} ) as encounter_id\n    , {{ try_to_cast_date('dispensing_date', 'YYYY-MM-DD') }} as dispensing_date\n    , {{ try_to_cast_date('prescribing_date', 'YYYY-MM-DD') }} as prescribing_date\n    , cast(source_code_type as {{ dbt.type_string() }} ) as source_code_type\n    , cast(source_code as {{ dbt.type_string() }} ) as source_code\n    , cast(source_description as {{ dbt.type_string() }} ) as source_description\n    , cast(ndc_code as {{ dbt.type_string() }} ) as ndc_code\n    , cast(ndc_description as {{ dbt.type_string() }} ) as ndc_description\n    , cast(rxnorm_code as {{ dbt.type_string() }} ) as rxnorm_code\n    , cast(rxnorm_description as {{ dbt.type_string() }} ) as rxnorm_description \n    , cast(atc_code as {{ dbt.type_string() }} ) as atc_code\n    , cast(atc_description as {{ dbt.type_string() }} ) as atc_description\n    , cast(route as {{ dbt.type_string() }} ) as route\n    , cast(strength as {{ dbt.type_string() }} ) as strength\n    , cast(quantity as {{ dbt.type_int() }} ) as quantity\n    , cast(quantity_unit as {{ dbt.type_string() }} ) as quantity_unit\n    , cast(days_supply as {{ dbt.type_int() }} ) as days_supply\n    , cast(practitioner_id as {{ dbt.type_string() }} ) as practitioner_id\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom {{ ref('medication') }}", "language": "sql", "refs": [{"name": "medication", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_int", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_observation": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_observation", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_observation.sql", "original_file_path": "models/core/staging/core__stg_clinical_observation.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_observation", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_observation"], "alias": "_stg_clinical_observation", "checksum": {"name": "sha256", "checksum": "b31467cd0c59b6991f06f89f122a3e668b8620f30634b202c27e21905f6e9173"}, "config": {"enabled": false, "alias": "_stg_clinical_observation", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical observations", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_observation", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.9192522, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_observation", "raw_code": "{{ config(\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\n\nselect\n    cast(observation_id as {{ dbt.type_string() }} ) as observation_id\n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(encounter_id as {{ dbt.type_string() }} ) as encounter_id\n    , cast(panel_id as {{ dbt.type_string() }} ) as panel_id\n    , {{ try_to_cast_date('observation_date', 'YYYY-MM-DD') }} as observation_date\n    , cast(observation_type as {{ dbt.type_string() }} ) as observation_type\n    , cast(source_code_type as {{ dbt.type_string() }} ) as source_code_type\n    , cast(source_code as {{ dbt.type_string() }} ) as source_code\n    , cast(source_description as {{ dbt.type_string() }} ) as source_description\n    , cast(normalized_code_type as {{ dbt.type_string() }} ) as normalized_code_type\n    , cast(normalized_code as {{ dbt.type_string() }} ) as normalized_code\n    , cast(normalized_description as {{ dbt.type_string() }} ) as normalized_description\n    , cast(result as {{ dbt.type_string() }} ) as result\n    , cast(source_units as {{ dbt.type_string() }} ) as source_units\n    , cast(normalized_units as {{ dbt.type_string() }} ) as normalized_units\n    , cast(source_reference_range_low as {{ dbt.type_string() }} ) as source_reference_range_low\n    , cast(source_reference_range_high as {{ dbt.type_string() }} ) as source_reference_range_high\n    , cast(normalized_reference_range_low as {{ dbt.type_string() }} ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as {{ dbt.type_string() }} ) as normalized_reference_range_high\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom {{ ref('observation') }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_patient": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_patient", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_patient.sql", "original_file_path": "models/core/staging/core__stg_clinical_patient.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_patient", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_patient"], "alias": "_stg_clinical_patient", "checksum": {"name": "sha256", "checksum": "3daa12aef291b5031181cfcb88268f82029fd207206c85657d8cd0d4f3bf7b09"}, "config": {"enabled": false, "alias": "_stg_clinical_patient", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical patients", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_patient", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.9255838, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_patient", "raw_code": "{{ config(\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\nselect\n    cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(first_name as {{ dbt.type_string() }} ) as first_name\n    , cast(last_name as {{ dbt.type_string() }} ) as last_name\n    , cast(sex as {{ dbt.type_string() }} ) as sex\n    , cast(race as {{ dbt.type_string() }} ) as race\n    , {{ try_to_cast_date('birth_date', 'YYYY-MM-DD') }} as birth_date\n    , {{ try_to_cast_date('death_date', 'YYYY-MM-DD') }} as death_date\n    , cast(death_flag as {{ dbt.type_int() }} ) as death_flag\n    , cast(address as {{ dbt.type_string() }} ) as address\n    , cast(city as {{ dbt.type_string() }} ) as city\n    , cast(state as {{ dbt.type_string() }} ) as state\n    , cast(zip_code as {{ dbt.type_string() }} ) as zip_code\n    , cast(county as {{ dbt.type_string() }} ) as county\n    , cast(latitude as {{ dbt.type_float() }} ) as latitude\n    , cast(longitude as {{ dbt.type_float() }} ) as longitude\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\n\nfrom {{ ref('patient') }}", "language": "sql", "refs": [{"name": "patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_int", "macro.dbt.type_float", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_practitioner": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_practitioner", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_practitioner.sql", "original_file_path": "models/core/staging/core__stg_clinical_practitioner.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_practitioner", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_practitioner"], "alias": "_stg_clinical_practitioner", "checksum": {"name": "sha256", "checksum": "e04f15cb36d85a844dd2b7fb431eedc8db9a6dfc6eb03e8fdbe604002558dfb1"}, "config": {"enabled": false, "alias": "_stg_clinical_practitioner", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical providers", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_practitioner", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.929271, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_practitioner", "raw_code": "{{ config(\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\nselect\n    cast(practitioner_id as {{ dbt.type_string() }} ) as practitioner_id\n    , cast(npi as {{ dbt.type_string() }} ) as npi\n    , cast(first_name as {{ dbt.type_string() }} ) as first_name\n    , cast(last_name as {{ dbt.type_string() }} ) as last_name\n    , cast(practice_affiliation as {{ dbt.type_string() }} ) as practice_affiliation\n    , cast(specialty as {{ dbt.type_string() }} ) as specialty\n    , cast(sub_specialty as {{ dbt.type_string() }} ) as sub_specialty\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom {{ ref('practitioner') }}", "language": "sql", "refs": [{"name": "practitioner", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.the_tuva_project.core__stg_clinical_procedure": [{"database": "tuva_project_demo", "schema": "core", "name": "core__stg_clinical_procedure", "resource_type": "model", "package_name": "the_tuva_project", "path": "core/staging/core__stg_clinical_procedure.sql", "original_file_path": "models/core/staging/core__stg_clinical_procedure.sql", "unique_id": "model.the_tuva_project.core__stg_clinical_procedure", "fqn": ["the_tuva_project", "core", "staging", "core__stg_clinical_procedure"], "alias": "_stg_clinical_procedure", "checksum": {"name": "sha256", "checksum": "9f332ea3f889dc17ca47d3668380056beb9958919f436791d2d345119ba919bf"}, "config": {"enabled": false, "alias": "_stg_clinical_procedure", "schema": "core", "database": "tuva_project_demo", "tags": ["core_stage_clinical"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["core_stage_clinical"], "description": "Staging core clinical procedures", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "the_tuva_project://models/core/core_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "core", "alias": "_stg_clinical_procedure", "tags": "core_stage_clinical", "materialized": "view", "enabled": false, "database": "tuva_project_demo"}, "created_at": 1705501481.9353805, "config_call_dict": {"enabled": false}, "relation_name": "tuva_project_demo.core._stg_clinical_procedure", "raw_code": "{{ config(\n     enabled = var('clinical_enabled',var('tuva_marts_enabled',False))\n   )\n}}\n\nselect\n    cast(procedure_id as {{ dbt.type_string() }} ) as procedure_id \n    , cast(patient_id as {{ dbt.type_string() }} ) as patient_id\n    , cast(encounter_id as {{ dbt.type_string() }} ) as encounter_id\n    , cast(claim_id as {{ dbt.type_string() }} ) as claim_id\n    , {{ try_to_cast_date('procedure_date', 'YYYY-MM-DD') }} as procedure_date\n    , cast(source_code_type as {{ dbt.type_string() }} ) as source_code_type\n    , cast(source_code as {{ dbt.type_string() }} ) as source_code\n    , cast(source_description as {{ dbt.type_string() }} ) as source_description\n    , cast(normalized_code_type as {{ dbt.type_string() }} ) as normalized_code_type\n    , cast(normalized_code as {{ dbt.type_string() }} ) as normalized_code\n    , cast(normalized_description as {{ dbt.type_string() }} ) as normalized_description\n    , cast(modifier_1 as {{ dbt.type_string() }} ) as modifier_1\n    , cast(modifier_2 as {{ dbt.type_string() }} ) as modifier_2\n    , cast(modifier_3 as {{ dbt.type_string() }} ) as modifier_3\n    , cast(modifier_4 as {{ dbt.type_string() }} ) as modifier_4\n    , cast(modifier_5 as {{ dbt.type_string() }} ) as modifier_5\n    , cast(practitioner_id as {{ dbt.type_string() }} ) as practitioner_id\n    , cast(data_source as {{ dbt.type_string() }} ) as data_source\n    , cast('{{ var('tuva_last_run')}}' as {{ dbt.type_timestamp() }} ) as tuva_last_run\nfrom {{ ref('procedure') }}", "language": "sql", "refs": [{"name": "procedure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.the_tuva_project.try_to_cast_date", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "snapshot.the_tuva_project.cms_hcc__patient_risk_factors_snapshot": [{"database": "TUVA_PROJECT_DEMO", "schema": "cms_hcc", "name": "cms_hcc__patient_risk_factors_snapshot", "resource_type": "snapshot", "package_name": "the_tuva_project", "path": "cms_hcc/cms_hcc__patient_risk_factors_snapshot.sql", "original_file_path": "snapshots/cms_hcc/cms_hcc__patient_risk_factors_snapshot.sql", "unique_id": "snapshot.the_tuva_project.cms_hcc__patient_risk_factors_snapshot", "fqn": ["the_tuva_project", "cms_hcc", "cms_hcc__patient_risk_factors_snapshot", "cms_hcc__patient_risk_factors_snapshot"], "alias": "patient_risk_factors_snapshot", "checksum": {"name": "sha256", "checksum": "a70be9d54e7002d8c58e34ad19d6e3fd8ed685e4a555886ce6ce53163e959f3f"}, "config": {"enabled": false, "alias": "patient_risk_factors_snapshot", "schema": null, "database": null, "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "patient_id||model_version||payment_year||tuva_last_run", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "timestamp", "target_schema": "cms_hcc", "target_database": null, "updated_at": "tuva_last_run", "check_cols": null}, "tags": ["cms_hcc"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "cms_hcc", "alias": "patient_risk_factors_snapshot", "tags": ["cms_hcc"], "strategy": "timestamp", "updated_at": "tuva_last_run", "unique_key": "patient_id||model_version||payment_year||tuva_last_run", "enabled": false}, "created_at": 1705501479.061379, "config_call_dict": {"target_schema": "cms_hcc", "alias": "patient_risk_factors_snapshot", "tags": ["cms_hcc"], "strategy": "timestamp", "updated_at": "tuva_last_run", "unique_key": "patient_id||model_version||payment_year||tuva_last_run", "enabled": false}, "relation_name": "TUVA_PROJECT_DEMO.cms_hcc.patient_risk_factors_snapshot", "raw_code": "\n\n{% set schema_var %}\n{%- if var('tuva_schema_prefix',None) != None -%}{{var('tuva_schema_prefix')}}_cms_hcc{% else %}cms_hcc{%- endif -%}\n{% endset %}\n\n{{\n  config({\n      \"target_schema\": schema_var\n    , \"alias\": \"patient_risk_factors_snapshot\"\n    , \"tags\": \"cms_hcc\"\n    , \"strategy\": \"timestamp\"\n    , \"updated_at\": \"tuva_last_run\"\n    , \"unique_key\": \"patient_id||model_version||payment_year||tuva_last_run\"\n    , \"enabled\": var('snapshots_enabled',False) == true and var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False))) == true | as_bool\n  })\n}}\n\nselect * from {{ ref('cms_hcc__patient_risk_factors') }}\n\n", "language": "sql", "refs": [{"name": "cms_hcc__patient_risk_factors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "defer_relation": null}], "snapshot.the_tuva_project.cms_hcc__patient_risk_scores_snapshot": [{"database": "TUVA_PROJECT_DEMO", "schema": "cms_hcc", "name": "cms_hcc__patient_risk_scores_snapshot", "resource_type": "snapshot", "package_name": "the_tuva_project", "path": "cms_hcc/cms_hcc__patient_risk_scores_snapshot.sql", "original_file_path": "snapshots/cms_hcc/cms_hcc__patient_risk_scores_snapshot.sql", "unique_id": "snapshot.the_tuva_project.cms_hcc__patient_risk_scores_snapshot", "fqn": ["the_tuva_project", "cms_hcc", "cms_hcc__patient_risk_scores_snapshot", "cms_hcc__patient_risk_scores_snapshot"], "alias": "patient_risk_scores_snapshot", "checksum": {"name": "sha256", "checksum": "bd885b6e0ef9a428477c59c805e2f8e6c7633021acafc2f690436cb1317aa9f5"}, "config": {"enabled": false, "alias": "patient_risk_scores_snapshot", "schema": null, "database": null, "tags": ["cms_hcc"], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "patient_id||model_version||payment_year||tuva_last_run", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "timestamp", "target_schema": "cms_hcc", "target_database": null, "updated_at": "tuva_last_run", "check_cols": null}, "tags": ["cms_hcc"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "cms_hcc", "alias": "patient_risk_scores_snapshot", "tags": ["cms_hcc"], "strategy": "timestamp", "updated_at": "tuva_last_run", "unique_key": "patient_id||model_version||payment_year||tuva_last_run", "enabled": false}, "created_at": 1705501479.1128924, "config_call_dict": {"target_schema": "cms_hcc", "alias": "patient_risk_scores_snapshot", "tags": ["cms_hcc"], "strategy": "timestamp", "updated_at": "tuva_last_run", "unique_key": "patient_id||model_version||payment_year||tuva_last_run", "enabled": false}, "relation_name": "TUVA_PROJECT_DEMO.cms_hcc.patient_risk_scores_snapshot", "raw_code": "\n\n{% set schema_var %}\n{%- if var('tuva_schema_prefix',None) != None -%}{{var('tuva_schema_prefix')}}_cms_hcc{% else %}cms_hcc{%- endif -%}\n{% endset %}\n\n{{\n  config({\n      \"target_schema\": schema_var\n    , \"alias\": \"patient_risk_scores_snapshot\"\n    , \"tags\": \"cms_hcc\"\n    , \"strategy\": \"timestamp\"\n    , \"updated_at\": \"tuva_last_run\"\n    , \"unique_key\": \"patient_id||model_version||payment_year||tuva_last_run\"\n    , \"enabled\": var('snapshots_enabled',False) == true and var('cms_hcc_enabled',var('claims_enabled',var('tuva_marts_enabled',False))) == true | as_bool\n  })\n}}\n\nselect * from {{ ref('cms_hcc__patient_risk_scores') }}\n\n", "language": "sql", "refs": [{"name": "cms_hcc__patient_risk_scores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "defer_relation": null}], "snapshot.the_tuva_project.quality_measures__summary_counts_snapshot": [{"database": "TUVA_PROJECT_DEMO", "schema": "quality_measures", "name": "quality_measures__summary_counts_snapshot", "resource_type": "snapshot", "package_name": "the_tuva_project", "path": "quality_measures/quality_measures__summary_counts_snapshot.sql", "original_file_path": "snapshots/quality_measures/quality_measures__summary_counts_snapshot.sql", "unique_id": "snapshot.the_tuva_project.quality_measures__summary_counts_snapshot", "fqn": ["the_tuva_project", "quality_measures", "quality_measures__summary_counts_snapshot", "quality_measures__summary_counts_snapshot"], "alias": "summary_counts_snapshot", "checksum": {"name": "sha256", "checksum": "348565060acc2b018b5f81bca5b1994b9af39929bc7a448eb6eb029db5a6b2f1"}, "config": {"enabled": false, "alias": "summary_counts_snapshot", "schema": null, "database": null, "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "measure_id||measure_name||measure_version||performance_period_begin||performance_period_end||tuva_last_run", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "timestamp", "target_schema": "quality_measures", "target_database": null, "updated_at": "tuva_last_run", "check_cols": null}, "tags": ["quality_measures"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "quality_measures", "alias": "summary_counts_snapshot", "tags": ["quality_measures"], "strategy": "timestamp", "updated_at": "tuva_last_run", "unique_key": "measure_id||measure_name||measure_version||performance_period_begin||performance_period_end||tuva_last_run", "enabled": false}, "created_at": 1705501479.1275506, "config_call_dict": {"target_schema": "quality_measures", "alias": "summary_counts_snapshot", "tags": ["quality_measures"], "strategy": "timestamp", "updated_at": "tuva_last_run", "unique_key": "measure_id||measure_name||measure_version||performance_period_begin||performance_period_end||tuva_last_run", "enabled": false}, "relation_name": "TUVA_PROJECT_DEMO.quality_measures.summary_counts_snapshot", "raw_code": "\n\n{% set schema_var %}\n{%- if var('tuva_schema_prefix',None) != None -%}{{var('tuva_schema_prefix')}}_quality_measures{% else %}quality_measures{%- endif -%}\n{% endset %}\n\n{{\n  config({\n      \"target_schema\": schema_var\n    , \"alias\": \"summary_counts_snapshot\"\n    , \"tags\": \"quality_measures\"\n    , \"strategy\": \"timestamp\"\n    , \"updated_at\": \"tuva_last_run\"\n    , \"unique_key\": \"measure_id||measure_name||measure_version||performance_period_begin||performance_period_end||tuva_last_run\"\n    , \"enabled\": var('snapshots_enabled',False) == true and var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False)))) == true | as_bool\n  })\n}}\n\nselect * from {{ ref('quality_measures__summary_counts') }}\n\n", "language": "sql", "refs": [{"name": "quality_measures__summary_counts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "defer_relation": null}], "snapshot.the_tuva_project.quality_measures__summary_long_snapshot": [{"database": "TUVA_PROJECT_DEMO", "schema": "quality_measures", "name": "quality_measures__summary_long_snapshot", "resource_type": "snapshot", "package_name": "the_tuva_project", "path": "quality_measures/quality_measures__summary_long_snapshot.sql", "original_file_path": "snapshots/quality_measures/quality_measures__summary_long_snapshot.sql", "unique_id": "snapshot.the_tuva_project.quality_measures__summary_long_snapshot", "fqn": ["the_tuva_project", "quality_measures", "quality_measures__summary_long_snapshot", "quality_measures__summary_long_snapshot"], "alias": "summary_long_snapshot", "checksum": {"name": "sha256", "checksum": "508100013ad380223276c6d6452bacdfc8e465acbc98483518f15a99fa0200ee"}, "config": {"enabled": false, "alias": "summary_long_snapshot", "schema": null, "database": null, "tags": ["quality_measures"], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "patient_id||denominator_flag||numerator_flag||exclusion_flag||evidence_date||exclusion_date||exclusion_reason||performance_period_begin||performance_period_end||measure_id||measure_name||measure_version||tuva_last_run", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "timestamp", "target_schema": "quality_measures", "target_database": null, "updated_at": "tuva_last_run", "check_cols": null}, "tags": ["quality_measures"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "quality_measures", "alias": "summary_long_snapshot", "tags": ["quality_measures"], "strategy": "timestamp", "updated_at": "tuva_last_run", "unique_key": "patient_id||denominator_flag||numerator_flag||exclusion_flag||evidence_date||exclusion_date||exclusion_reason||performance_period_begin||performance_period_end||measure_id||measure_name||measure_version||tuva_last_run", "enabled": false}, "created_at": 1705501479.1401107, "config_call_dict": {"target_schema": "quality_measures", "alias": "summary_long_snapshot", "tags": ["quality_measures"], "strategy": "timestamp", "updated_at": "tuva_last_run", "unique_key": "patient_id||denominator_flag||numerator_flag||exclusion_flag||evidence_date||exclusion_date||exclusion_reason||performance_period_begin||performance_period_end||measure_id||measure_name||measure_version||tuva_last_run", "enabled": false}, "relation_name": "TUVA_PROJECT_DEMO.quality_measures.summary_long_snapshot", "raw_code": "\n\n{% set schema_var %}\n{%- if var('tuva_schema_prefix',None) != None -%}{{var('tuva_schema_prefix')}}_quality_measures{% else %}quality_measures{%- endif -%}\n{% endset %}\n\n{{\n  config({\n      \"target_schema\": schema_var\n    , \"alias\": \"summary_long_snapshot\"\n    , \"tags\": \"quality_measures\"\n    , \"strategy\": \"timestamp\"\n    , \"updated_at\": \"tuva_last_run\"\n    , \"unique_key\": \"patient_id||denominator_flag||numerator_flag||exclusion_flag||evidence_date||exclusion_date||exclusion_reason||performance_period_begin||performance_period_end||measure_id||measure_name||measure_version||tuva_last_run\"\n    , \"enabled\": var('snapshots_enabled',False) == true and var('quality_measures_enabled',var('claims_enabled',var('clinical_enabled',var('tuva_marts_enabled',False)))) == true | as_bool\n  })\n}}\n\nselect * from {{ ref('quality_measures__summary_long') }}\n\n", "language": "sql", "refs": [{"name": "quality_measures__summary_long", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "defer_relation": null}]}, "parent_map": {"seed.the_tuva_project_demo.eligibility": [], "seed.the_tuva_project_demo.medical_claim": [], "seed.the_tuva_project_demo.pharmacy_claim": [], "model.the_tuva_project.ccsr__long_condition_category": ["model.the_tuva_project.ccsr__dx_vertical_pivot", "model.the_tuva_project.ccsr__stg_core__condition", "seed.the_tuva_project.ccsr__dxccsr_v2023_1_body_systems"], "model.the_tuva_project.ccsr__long_procedure_category": ["model.the_tuva_project.ccsr__procedure_category_map", "model.the_tuva_project.ccsr__stg_core__procedure"], "model.the_tuva_project.ccsr__singular_condition_category": ["model.the_tuva_project.ccsr__long_condition_category"], "model.the_tuva_project.ccsr__dx_vertical_pivot": ["seed.the_tuva_project.ccsr__dxccsr_v2023_1_cleaned_map"], "model.the_tuva_project.ccsr__procedure_category_map": ["seed.the_tuva_project.ccsr__prccsr_v2023_1_cleaned_map"], "model.the_tuva_project.ccsr__stg_core__condition": ["model.the_tuva_project.core__condition"], "model.the_tuva_project.ccsr__stg_core__procedure": ["model.the_tuva_project.core__procedure"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "model.the_tuva_project.cms_chronic_conditions__stg_core__patient", "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy"], "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long": ["model.the_tuva_project.tuva_chronic_conditions__stg_core__condition", "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy"], "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long", "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient", "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all": ["model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure", "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim", "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids": ["model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim", "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure", "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim", "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy"], "model.the_tuva_project.cms_chronic_conditions__stg_core__condition": ["model.the_tuva_project.core__condition"], "model.the_tuva_project.cms_chronic_conditions__stg_core__patient": ["model.the_tuva_project.core__patient"], "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure": ["model.the_tuva_project.core__procedure"], "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim": ["seed.the_tuva_project_demo.medical_claim"], "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim": ["seed.the_tuva_project_demo.pharmacy_claim"], "model.the_tuva_project.tuva_chronic_conditions__stg_core__condition": ["model.the_tuva_project.core__condition"], "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient": ["model.the_tuva_project.core__patient"], "model.the_tuva_project.acute_inpatient__summary": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "model.the_tuva_project.acute_inpatient__first_claim_values", "model.the_tuva_project.acute_inpatient__institutional_encounter_id", "model.the_tuva_project.acute_inpatient__last_claim_values", "model.the_tuva_project.acute_inpatient__stg_eligibility", "model.the_tuva_project.acute_inpatient__stg_medical_claim", "seed.the_tuva_project.terminology__admit_source", "seed.the_tuva_project.terminology__admit_type", "seed.the_tuva_project.terminology__apr_drg", "seed.the_tuva_project.terminology__discharge_disposition", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__icd_9_cm", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__provider", "seed.the_tuva_project_demo.medical_claim"], "model.the_tuva_project.acute_inpatient__claims_with_encounter_data": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "model.the_tuva_project.acute_inpatient__institutional_claims"], "model.the_tuva_project.acute_inpatient__data_quality_summary": ["model.the_tuva_project.acute_inpatient__institutional_claims"], "model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims": ["model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "model.the_tuva_project.acute_inpatient__professional_encounter_id"], "model.the_tuva_project.acute_inpatient__encounter_id": ["model.the_tuva_project.acute_inpatient__institutional_encounter_id", "model.the_tuva_project.acute_inpatient__professional_encounter_id", "model.the_tuva_project.acute_inpatient__stg_medical_claim"], "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates": ["model.the_tuva_project.acute_inpatient__institutional_claims", "model.the_tuva_project.acute_inpatient__institutional_encounter_id"], "model.the_tuva_project.acute_inpatient__first_claim_values": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__stg_medical_claim"], "model.the_tuva_project.acute_inpatient__institutional_claims": ["model.the_tuva_project.acute_inpatient__stg_medical_claim", "model.the_tuva_project.acute_inpatient__stg_service_category"], "model.the_tuva_project.acute_inpatient__institutional_encounter_id": ["model.the_tuva_project.acute_inpatient__institutional_claims"], "model.the_tuva_project.acute_inpatient__last_claim_values": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__stg_medical_claim"], "model.the_tuva_project.acute_inpatient__professional_encounter_id": ["model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "model.the_tuva_project.acute_inpatient__stg_medical_claim", "model.the_tuva_project.acute_inpatient__stg_service_category"], "model.the_tuva_project.acute_inpatient__stg_eligibility": ["model.the_tuva_project.normalized_input__eligibility"], "model.the_tuva_project.acute_inpatient__stg_medical_claim": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.acute_inpatient__stg_service_category": ["model.the_tuva_project.service_category__service_category_grouper"], "model.the_tuva_project.emergency_department__summary": ["model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "model.the_tuva_project.emergency_department__int_first_claim_values", "model.the_tuva_project.emergency_department__int_institutional_encounter_id", "model.the_tuva_project.emergency_department__int_last_claim_values", "seed.the_tuva_project.terminology__admit_source", "seed.the_tuva_project.terminology__admit_type", "seed.the_tuva_project.terminology__apr_drg", "seed.the_tuva_project.terminology__discharge_disposition", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__icd_9_cm", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__provider", "seed.the_tuva_project_demo.eligibility", "seed.the_tuva_project_demo.medical_claim"], "model.the_tuva_project.emergency_department__int_encounter_id": ["model.the_tuva_project.emergency_department__int_institutional_encounter_id", "model.the_tuva_project.emergency_department__int_professional_encounter_id", "model.the_tuva_project.emergency_department__stg_medical_claim"], "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates": ["model.the_tuva_project.emergency_department__int_institutional_claims", "model.the_tuva_project.emergency_department__int_institutional_encounter_id"], "model.the_tuva_project.emergency_department__int_first_claim_values": ["model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.emergency_department__stg_medical_claim"], "model.the_tuva_project.emergency_department__int_institutional_claims": ["model.the_tuva_project.emergency_department__stg_medical_claim", "model.the_tuva_project.emergency_department__stg_service_category"], "model.the_tuva_project.emergency_department__int_institutional_encounter_id": ["model.the_tuva_project.emergency_department__int_institutional_claims"], "model.the_tuva_project.emergency_department__int_last_claim_values": ["model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.emergency_department__stg_medical_claim"], "model.the_tuva_project.emergency_department__int_professional_encounter_id": ["model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "model.the_tuva_project.emergency_department__stg_medical_claim", "model.the_tuva_project.emergency_department__stg_service_category"], "model.the_tuva_project.emergency_department__stg_eligibility": ["model.the_tuva_project.normalized_input__eligibility"], "model.the_tuva_project.emergency_department__stg_medical_claim": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.emergency_department__stg_service_category": ["model.the_tuva_project.service_category__service_category_grouper"], "model.the_tuva_project.normalized_input__eligibility": ["model.the_tuva_project.normalized_input__int_eligibility_dates_normalize", "model.the_tuva_project.normalized_input__stg_eligibility"], "model.the_tuva_project.normalized_input__medical_claim": ["model.the_tuva_project.normalized_input__int_admit_source_final", "model.the_tuva_project.normalized_input__int_admit_type_final", "model.the_tuva_project.normalized_input__int_apr_drg_final", "model.the_tuva_project.normalized_input__int_bill_type_final", "model.the_tuva_project.normalized_input__int_diagnosis_code_final", "model.the_tuva_project.normalized_input__int_discharge_disposition_final", "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "model.the_tuva_project.normalized_input__int_medical_date_aggregation", "model.the_tuva_project.normalized_input__int_medical_npi_normalize", "model.the_tuva_project.normalized_input__int_ms_drg_final", "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "model.the_tuva_project.normalized_input__int_present_on_admit_final", "model.the_tuva_project.normalized_input__int_procedure_code_final", "model.the_tuva_project.normalized_input__int_procedure_date_final", "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "model.the_tuva_project.normalized_input__int_undetermined_claim_type", "model.the_tuva_project.normalized_input__stg_medical_claim"], "model.the_tuva_project.normalized_input__pharmacy_claim": ["model.the_tuva_project.normalized_input__stg_pharmacy_claim"], "model.the_tuva_project.normalized_input__int_admit_source_final": ["model.the_tuva_project.normalized_input__int_admit_source_voting"], "model.the_tuva_project.normalized_input__int_admit_source_voting": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__admit_source"], "model.the_tuva_project.normalized_input__int_admit_type_final": ["model.the_tuva_project.normalized_input__int_admit_type_voting"], "model.the_tuva_project.normalized_input__int_admit_type_voting": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__admit_type"], "model.the_tuva_project.normalized_input__int_apr_drg_final": ["model.the_tuva_project.normalized_input__int_apr_drg_voting"], "model.the_tuva_project.normalized_input__int_apr_drg_voting": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__apr_drg"], "model.the_tuva_project.normalized_input__int_bill_type_final": ["model.the_tuva_project.normalized_input__int_bill_type_voting"], "model.the_tuva_project.normalized_input__int_bill_type_voting": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__bill_type"], "model.the_tuva_project.normalized_input__int_diagnosis_code_final": ["model.the_tuva_project.normalized_input__int_diagnosis_code_voting"], "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__icd_9_cm"], "model.the_tuva_project.normalized_input__int_diagnosis_code_voting": ["model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"], "model.the_tuva_project.normalized_input__int_discharge_disposition_final": ["model.the_tuva_project.normalized_input__int_discharge_disposition_voting"], "model.the_tuva_project.normalized_input__int_discharge_disposition_voting": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__discharge_disposition"], "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize": ["model.the_tuva_project.normalized_input__stg_eligibility", "seed.the_tuva_project.terminology__calendar"], "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__calendar"], "model.the_tuva_project.normalized_input__int_medical_date_aggregation": ["model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"], "model.the_tuva_project.normalized_input__int_medical_npi_normalize": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__provider"], "model.the_tuva_project.normalized_input__int_ms_drg_final": ["model.the_tuva_project.normalized_input__int_ms_drg_voting"], "model.the_tuva_project.normalized_input__int_ms_drg_voting": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__ms_drg"], "model.the_tuva_project.normalized_input__int_place_of_service_normalize": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__place_of_service"], "model.the_tuva_project.normalized_input__int_present_on_admit_final": ["model.the_tuva_project.normalized_input__int_present_on_admit_voting"], "model.the_tuva_project.normalized_input__int_present_on_admit_normalize": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__present_on_admission"], "model.the_tuva_project.normalized_input__int_present_on_admit_voting": ["model.the_tuva_project.normalized_input__int_present_on_admit_normalize"], "model.the_tuva_project.normalized_input__int_procedure_code_final": ["model.the_tuva_project.normalized_input__int_procedure_code_voting"], "model.the_tuva_project.normalized_input__int_procedure_code_normalize": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__icd_10_pcs", "seed.the_tuva_project.terminology__icd_9_pcs"], "model.the_tuva_project.normalized_input__int_procedure_code_voting": ["model.the_tuva_project.normalized_input__int_procedure_code_normalize"], "model.the_tuva_project.normalized_input__int_procedure_date_final": ["model.the_tuva_project.normalized_input__int_procedure_date_voting"], "model.the_tuva_project.normalized_input__int_procedure_date_normalize": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__calendar"], "model.the_tuva_project.normalized_input__int_procedure_date_voting": ["model.the_tuva_project.normalized_input__int_procedure_code_normalize", "model.the_tuva_project.normalized_input__int_procedure_date_normalize"], "model.the_tuva_project.normalized_input__int_revenue_center_normalize": ["model.the_tuva_project.normalized_input__stg_medical_claim", "seed.the_tuva_project.terminology__revenue_center"], "model.the_tuva_project.normalized_input__int_undetermined_claim_type": ["model.the_tuva_project.normalized_input__stg_medical_claim"], "model.the_tuva_project.normalized_input__stg_eligibility": ["seed.the_tuva_project_demo.eligibility"], "model.the_tuva_project.normalized_input__stg_medical_claim": ["seed.the_tuva_project_demo.medical_claim"], "model.the_tuva_project.normalized_input__stg_pharmacy_claim": ["seed.the_tuva_project_demo.pharmacy_claim"], "model.the_tuva_project.service_category__dq_input_layer_results": ["model.the_tuva_project.service_category__dq_input_layer_tests"], "model.the_tuva_project.service_category__dq_input_layer_tests": ["model.the_tuva_project.service_category__stg_medical_claim", "seed.the_tuva_project.terminology__apr_drg", "seed.the_tuva_project.terminology__bill_type", "seed.the_tuva_project.terminology__claim_type", "seed.the_tuva_project.terminology__hcpcs_level_2", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__place_of_service", "seed.the_tuva_project.terminology__revenue_center"], "model.the_tuva_project.service_category__dq_multiple_service_categories_institutional": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__dq_multiple_service_categories_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__service_category_grouper": ["model.the_tuva_project.service_category__combined_institutional", "model.the_tuva_project.service_category__combined_professional", "model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__acute_inpatient_institutional": ["model.the_tuva_project.service_category__stg_medical_claim", "seed.the_tuva_project.terminology__apr_drg", "seed.the_tuva_project.terminology__ms_drg"], "model.the_tuva_project.service_category__acute_inpatient_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__ambulance_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__ambulatory_surgery_professional": ["model.the_tuva_project.service_category__dme_professional", "model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__combined_institutional": ["model.the_tuva_project.service_category__acute_inpatient_institutional", "model.the_tuva_project.service_category__dialysis_institutional", "model.the_tuva_project.service_category__duplicate_bill_types", "model.the_tuva_project.service_category__emergency_department_institutional", "model.the_tuva_project.service_category__home_health_institutional", "model.the_tuva_project.service_category__hospice_institutional", "model.the_tuva_project.service_category__lab_institutional", "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "model.the_tuva_project.service_category__outpatient_psychiatric_institutional", "model.the_tuva_project.service_category__skilled_nursing_institutional", "model.the_tuva_project.service_category__urgent_care_institutional"], "model.the_tuva_project.service_category__combined_professional": ["model.the_tuva_project.service_category__acute_inpatient_professional", "model.the_tuva_project.service_category__ambulance_professional", "model.the_tuva_project.service_category__ambulatory_surgery_professional", "model.the_tuva_project.service_category__dialysis_professional", "model.the_tuva_project.service_category__dme_professional", "model.the_tuva_project.service_category__emergency_department_professional", "model.the_tuva_project.service_category__home_health_professional", "model.the_tuva_project.service_category__hospice_professional", "model.the_tuva_project.service_category__inpatient_psychiatric_professional", "model.the_tuva_project.service_category__inpatient_rehab_professional", "model.the_tuva_project.service_category__lab_professional", "model.the_tuva_project.service_category__office_visit_professional", "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional", "model.the_tuva_project.service_category__outpatient_psychiatric_professional", "model.the_tuva_project.service_category__outpatient_rehab_professional", "model.the_tuva_project.service_category__skilled_nursing_professional", "model.the_tuva_project.service_category__urgent_care_professional"], "model.the_tuva_project.service_category__dialysis_institutional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__dialysis_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__dme_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__duplicate_bill_types": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__emergency_department_institutional": ["model.the_tuva_project.service_category__acute_inpatient_institutional", "model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__emergency_department_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__home_health_institutional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__home_health_professional": ["model.the_tuva_project.service_category__dme_professional", "model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__hospice_institutional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__hospice_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__inpatient_psychiatric_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__inpatient_rehab_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__lab_institutional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__lab_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__office_visit_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional": ["model.the_tuva_project.service_category__emergency_department_institutional", "model.the_tuva_project.service_category__stg_medical_claim", "model.the_tuva_project.service_category__urgent_care_institutional"], "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__outpatient_psychiatric_institutional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__outpatient_psychiatric_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__outpatient_rehab_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__skilled_nursing_institutional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__skilled_nursing_professional": ["model.the_tuva_project.service_category__dme_professional", "model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__urgent_care_institutional": ["model.the_tuva_project.service_category__emergency_department_institutional", "model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__urgent_care_professional": ["model.the_tuva_project.service_category__stg_medical_claim"], "model.the_tuva_project.service_category__stg_medical_claim": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.cms_hcc__patient_hcc_history": ["model.the_tuva_project.cms_hcc__int_all_conditions"], "model.the_tuva_project.cms_hcc__patient_risk_factors": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "model.the_tuva_project.cms_hcc__int_disease_factors", "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors", "model.the_tuva_project.cms_hcc__int_hcc_count_factors"], "model.the_tuva_project.cms_hcc__patient_risk_scores": ["model.the_tuva_project.cms_hcc__patient_risk_factors", "seed.the_tuva_project.cms_hcc__adjustment_rates"], "model.the_tuva_project.cms_hcc__int_all_conditions": ["model.the_tuva_project.cms_hcc__stg_core__condition", "seed.the_tuva_project.cms_hcc__disease_factors", "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings"], "model.the_tuva_project.cms_hcc__int_demographic_factors": ["model.the_tuva_project.cms_hcc__int_members", "seed.the_tuva_project.cms_hcc__demographic_factors"], "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "seed.the_tuva_project.cms_hcc__disabled_interaction_factors"], "model.the_tuva_project.cms_hcc__int_disease_factors": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "seed.the_tuva_project.cms_hcc__disease_factors"], "model.the_tuva_project.cms_hcc__int_disease_interaction_factors": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "seed.the_tuva_project.cms_hcc__disease_interaction_factors"], "model.the_tuva_project.cms_hcc__int_eligible_conditions": ["model.the_tuva_project.cms_hcc__stg_core__condition", "model.the_tuva_project.cms_hcc__stg_core__medical_claim", "seed.the_tuva_project.cms_hcc__cpt_hcpcs"], "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "seed.the_tuva_project.cms_hcc__enrollment_interaction_factors"], "model.the_tuva_project.cms_hcc__int_hcc_count_factors": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "seed.the_tuva_project.cms_hcc__payment_hcc_count_factors"], "model.the_tuva_project.cms_hcc__int_hcc_hierarchy": ["model.the_tuva_project.cms_hcc__int_hcc_mapping", "seed.the_tuva_project.cms_hcc__disease_hierarchy"], "model.the_tuva_project.cms_hcc__int_hcc_mapping": ["model.the_tuva_project.cms_hcc__int_eligible_conditions", "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings"], "model.the_tuva_project.cms_hcc__int_members": ["model.the_tuva_project.cms_hcc__stg_core__eligibility", "model.the_tuva_project.cms_hcc__stg_core__patient"], "model.the_tuva_project.cms_hcc__stg_core__condition": ["model.the_tuva_project.core__condition"], "model.the_tuva_project.cms_hcc__stg_core__eligibility": ["model.the_tuva_project.core__eligibility"], "model.the_tuva_project.cms_hcc__stg_core__medical_claim": ["model.the_tuva_project.core__medical_claim"], "model.the_tuva_project.cms_hcc__stg_core__patient": ["model.the_tuva_project.core__patient"], "model.the_tuva_project.core__condition": ["model.the_tuva_project.core__stg_claims_condition"], "model.the_tuva_project.core__eligibility": ["model.the_tuva_project.core__stg_claims_eligibility"], "model.the_tuva_project.core__encounter": ["model.the_tuva_project.core__stg_claims_encounter"], "model.the_tuva_project.core__location": ["model.the_tuva_project.core__stg_claims_location"], "model.the_tuva_project.core__medical_claim": ["model.the_tuva_project.core__stg_claims_medical_claim"], "model.the_tuva_project.core__patient": ["model.the_tuva_project.core__stg_claims_patient"], "model.the_tuva_project.core__pharmacy_claim": ["model.the_tuva_project.core__stg_claims_pharmacy_claim"], "model.the_tuva_project.core__practitioner": ["model.the_tuva_project.core__stg_claims_practitioner"], "model.the_tuva_project.core__procedure": ["model.the_tuva_project.core__stg_claims_procedure"], "model.the_tuva_project.core__stg_claims_condition": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__present_on_admission"], "model.the_tuva_project.core__stg_claims_eligibility": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__eligibility"], "model.the_tuva_project.core__stg_claims_encounter": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.emergency_department__summary"], "model.the_tuva_project.core__stg_claims_location": ["model.the_tuva_project.core__stg_claims_medical_claim", "model.the_tuva_project.data_quality__claims_preprocessing_summary", "seed.the_tuva_project.terminology__provider"], "model.the_tuva_project.core__stg_claims_medical_claim": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.normalized_input__medical_claim", "model.the_tuva_project.service_category__service_category_grouper"], "model.the_tuva_project.core__stg_claims_patient": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__eligibility"], "model.the_tuva_project.core__stg_claims_pharmacy_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.normalized_input__pharmacy_claim"], "model.the_tuva_project.core__stg_claims_practitioner": ["model.the_tuva_project.core__stg_claims_medical_claim", "model.the_tuva_project.data_quality__claims_preprocessing_summary", "seed.the_tuva_project.terminology__provider"], "model.the_tuva_project.core__stg_claims_procedure": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.terminology__icd_10_pcs"], "model.the_tuva_project.data_quality__claims_preprocessing_summary": ["model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "model.the_tuva_project.data_quality__claims_preprocessing_test_detail": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_test_result": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility", "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim", "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_use_case": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "model.the_tuva_project.normalized_input__eligibility", "model.the_tuva_project.normalized_input__medical_claim", "model.the_tuva_project.normalized_input__pharmacy_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog", "seed.the_tuva_project.terminology__gender", "seed.the_tuva_project.terminology__medicare_dual_eligibility", "seed.the_tuva_project.terminology__medicare_orec", "seed.the_tuva_project.terminology__medicare_status", "seed.the_tuva_project.terminology__payer_type", "seed.the_tuva_project.terminology__race"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility": ["model.the_tuva_project.normalized_input__eligibility", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog", "seed.the_tuva_project.terminology__calendar"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog", "seed.the_tuva_project.terminology__calendar"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog", "seed.the_tuva_project.terminology__provider"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog", "seed.the_tuva_project.terminology__admit_source", "seed.the_tuva_project.terminology__admit_type", "seed.the_tuva_project.terminology__apr_drg", "seed.the_tuva_project.terminology__bill_type", "seed.the_tuva_project.terminology__claim_type", "seed.the_tuva_project.terminology__code_type", "seed.the_tuva_project.terminology__discharge_disposition", "seed.the_tuva_project.terminology__icd_10_cm", "seed.the_tuva_project.terminology__ms_drg", "seed.the_tuva_project.terminology__place_of_service", "seed.the_tuva_project.terminology__present_on_admission", "seed.the_tuva_project.terminology__revenue_center"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates": ["model.the_tuva_project.normalized_input__pharmacy_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers": ["model.the_tuva_project.normalized_input__pharmacy_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values": ["model.the_tuva_project.normalized_input__pharmacy_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details": ["model.the_tuva_project.normalized_input__pharmacy_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details": ["model.the_tuva_project.normalized_input__medical_claim", "seed.the_tuva_project.data_quality__test_catalog"], "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"], "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details"], "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"], "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "model.the_tuva_project.normalized_input__pharmacy_claim"], "model.the_tuva_project.ed_classification__summary": ["model.the_tuva_project.ed_classification__int_filter_encounter_with_classification", "model.the_tuva_project.ed_classification__stg_patient", "seed.the_tuva_project.ed_classification__categories", "seed.the_tuva_project.terminology__provider"], "model.the_tuva_project.ed_classification__int_filter_encounter_with_classification": ["model.the_tuva_project.ed_classification__int_map_primary_dx"], "model.the_tuva_project.ed_classification__int_map_primary_dx": ["model.the_tuva_project.ed_classification__stg_encounter", "seed.the_tuva_project.ed_classification__johnston_icd10", "seed.the_tuva_project.ed_classification__johnston_icd9"], "model.the_tuva_project.ed_classification__stg_encounter": ["model.the_tuva_project.core__encounter"], "model.the_tuva_project.ed_classification__stg_patient": ["model.the_tuva_project.core__patient"], "model.the_tuva_project.financial_pmpm__member_months": ["model.the_tuva_project.financial_pmpm__stg_eligibility", "seed.the_tuva_project.terminology__calendar"], "model.the_tuva_project.financial_pmpm__pmpm": ["model.the_tuva_project.financial_pmpm__pmpm_prep"], "model.the_tuva_project.financial_pmpm__pmpm_prep": ["model.the_tuva_project.financial_pmpm__member_months", "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot", "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot", "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot", "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot"], "model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories": ["model.the_tuva_project.financial_pmpm__stg_medical_claim", "model.the_tuva_project.financial_pmpm__stg_pharmacy_claim"], "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"], "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"], "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"], "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"], "model.the_tuva_project.financial_pmpm__stg_eligibility": ["model.the_tuva_project.core__eligibility"], "model.the_tuva_project.financial_pmpm__stg_medical_claim": ["model.the_tuva_project.core__medical_claim"], "model.the_tuva_project.financial_pmpm__stg_pharmacy_claim": ["model.the_tuva_project.core__pharmacy_claim"], "model.the_tuva_project.insights__count_claim_by_claim_type": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim"], "model.the_tuva_project.insights__count_claim_by_date_column": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim", "model.the_tuva_project.financial_pmpm__member_months", "seed.the_tuva_project.terminology__calendar"], "model.the_tuva_project.insights__count_claim_by_service_category": ["model.the_tuva_project.core__medical_claim"], "model.the_tuva_project.insights__orphan_claim_by_claim_type": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim", "model.the_tuva_project.financial_pmpm__member_months"], "model.the_tuva_project.insights__sum_amount_by_claim_type": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim"], "model.the_tuva_project.insights__sum_amount_by_service_category": ["model.the_tuva_project.core__medical_claim"], "model.the_tuva_project.insights__trend_count_claim_by_claim_type": ["model.the_tuva_project.core__medical_claim"], "model.the_tuva_project.insights__trend_count_claim_by_service_category": ["model.the_tuva_project.core__medical_claim"], "model.the_tuva_project.insights__trend_sum_amount_by_claim_type": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__pharmacy_claim"], "model.the_tuva_project.insights__trend_sum_amount_by_service_category": ["model.the_tuva_project.core__medical_claim"], "model.the_tuva_project.quality_measures__summary_counts": ["model.the_tuva_project.quality_measures__summary_long"], "model.the_tuva_project.quality_measures__summary_long": ["model.the_tuva_project.quality_measures__int_nqf0034_long", "model.the_tuva_project.quality_measures__int_nqf2372_long"], "model.the_tuva_project.quality_measures__summary_wide": ["model.the_tuva_project.quality_measures__summary_long"], "model.the_tuva_project.quality_measures__int_nqf0034_denominator": ["model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__stg_core__encounter", "model.the_tuva_project.quality_measures__stg_core__patient", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer": ["model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__stg_core__medication", "model.the_tuva_project.quality_measures__stg_pharmacy_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative": ["model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp": ["model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__stg_medical_claim"], "model.the_tuva_project.quality_measures__int_nqf0034_exclusions": ["model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp"], "model.the_tuva_project.quality_measures__int_nqf0034_long": ["model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf0034_exclusions", "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "model.the_tuva_project.quality_measures__stg_core__patient", "seed.the_tuva_project.quality_measures__measures"], "model.the_tuva_project.quality_measures__int_nqf0034_numerator": ["model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__stg_core__lab_result", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf0034__frailty": ["model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf0034__performance_period": [], "model.the_tuva_project.quality_measures__int_nqf2372_denominator": ["model.the_tuva_project.quality_measures__int_nqf2372__performance_period", "model.the_tuva_project.quality_measures__stg_core__encounter", "model.the_tuva_project.quality_measures__stg_core__patient", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness": ["model.the_tuva_project.quality_measures__int_nqf2372__frailty", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia": ["model.the_tuva_project.quality_measures__int_nqf2372__frailty", "model.the_tuva_project.quality_measures__stg_core__medication", "model.the_tuva_project.quality_measures__stg_pharmacy_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__stg_medical_claim"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf2372_exclusions": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative"], "model.the_tuva_project.quality_measures__int_nqf2372_long": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_exclusions", "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "model.the_tuva_project.quality_measures__stg_core__patient"], "model.the_tuva_project.quality_measures__int_nqf2372_numerator": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf2372__frailty": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__observation", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_medical_claim", "seed.the_tuva_project.quality_measures__value_sets"], "model.the_tuva_project.quality_measures__int_nqf2372__performance_period": ["seed.the_tuva_project.quality_measures__measures"], "model.the_tuva_project.quality_measures__stg_core__condition": ["model.the_tuva_project.core__condition"], "model.the_tuva_project.quality_measures__stg_core__encounter": [], "model.the_tuva_project.quality_measures__stg_core__lab_result": [], "model.the_tuva_project.quality_measures__stg_core__medication": [], "model.the_tuva_project.quality_measures__stg_core__observation": [], "model.the_tuva_project.quality_measures__stg_core__patient": ["model.the_tuva_project.core__patient"], "model.the_tuva_project.quality_measures__stg_core__procedure": ["model.the_tuva_project.core__procedure"], "model.the_tuva_project.quality_measures__stg_medical_claim": ["model.the_tuva_project.core__medical_claim"], "model.the_tuva_project.quality_measures__stg_pharmacy_claim": ["model.the_tuva_project.core__pharmacy_claim"], "model.the_tuva_project.readmissions__encounter_augmented": ["model.the_tuva_project.readmissions__encounter", "model.the_tuva_project.readmissions__encounter_data_quality", "model.the_tuva_project.readmissions__encounter_specialty_cohort", "model.the_tuva_project.readmissions__index_admission", "model.the_tuva_project.readmissions__planned_encounter"], "model.the_tuva_project.readmissions__readmission_summary": ["model.the_tuva_project.readmissions__encounter_augmented"], "model.the_tuva_project.readmissions__encounter": ["model.the_tuva_project.readmissions__stg_core__encounter"], "model.the_tuva_project.readmissions__encounter_data_quality": ["model.the_tuva_project.readmissions__encounter_overlap", "model.the_tuva_project.readmissions__encounter_with_ccs", "seed.the_tuva_project.terminology__discharge_disposition", "seed.the_tuva_project.terminology__ms_drg"], "model.the_tuva_project.readmissions__encounter_overlap": ["model.the_tuva_project.readmissions__encounter"], "model.the_tuva_project.readmissions__encounter_specialty_cohort": ["model.the_tuva_project.readmissions__encounter", "model.the_tuva_project.readmissions__encounter_with_ccs", "model.the_tuva_project.readmissions__procedure_ccs", "seed.the_tuva_project.readmissions__specialty_cohort", "seed.the_tuva_project.readmissions__surgery_gynecology_cohort"], "model.the_tuva_project.readmissions__encounter_with_ccs": ["model.the_tuva_project.readmissions__encounter", "seed.the_tuva_project.readmissions__icd_10_cm_to_ccs", "seed.the_tuva_project.terminology__icd_10_cm"], "model.the_tuva_project.readmissions__exclusion": ["model.the_tuva_project.readmissions__encounter_with_ccs", "seed.the_tuva_project.readmissions__exclusion_ccs_diagnosis_category"], "model.the_tuva_project.readmissions__index_admission": ["model.the_tuva_project.readmissions__encounter", "model.the_tuva_project.readmissions__exclusion", "model.the_tuva_project.readmissions__index_discharge_requirement", "model.the_tuva_project.readmissions__index_time_requirement"], "model.the_tuva_project.readmissions__index_discharge_requirement": ["model.the_tuva_project.readmissions__encounter"], "model.the_tuva_project.readmissions__index_time_requirement": ["model.the_tuva_project.readmissions__encounter"], "model.the_tuva_project.readmissions__planned_encounter": ["model.the_tuva_project.readmissions__encounter_with_ccs", "model.the_tuva_project.readmissions__procedure_ccs", "seed.the_tuva_project.readmissions__acute_diagnosis_ccs", "seed.the_tuva_project.readmissions__acute_diagnosis_icd_10_cm", "seed.the_tuva_project.readmissions__always_planned_ccs_diagnosis_category", "seed.the_tuva_project.readmissions__always_planned_ccs_procedure_category", "seed.the_tuva_project.readmissions__potentially_planned_ccs_procedure_category", "seed.the_tuva_project.readmissions__potentially_planned_icd_10_pcs"], "model.the_tuva_project.readmissions__procedure_ccs": ["model.the_tuva_project.readmissions__stg_core__procedure", "seed.the_tuva_project.readmissions__icd_10_pcs_to_ccs", "seed.the_tuva_project.terminology__icd_10_pcs"], "model.the_tuva_project.readmissions__readmission_crude": ["model.the_tuva_project.readmissions__encounter", "model.the_tuva_project.readmissions__encounter_overlap"], "model.the_tuva_project.readmissions__stg_core__condition": ["model.the_tuva_project.core__condition"], "model.the_tuva_project.readmissions__stg_core__encounter": ["model.the_tuva_project.core__encounter"], "model.the_tuva_project.readmissions__stg_core__procedure": ["model.the_tuva_project.core__procedure"], "seed.the_tuva_project.terminology__admit_source": [], "seed.the_tuva_project.terminology__admit_type": [], "seed.the_tuva_project.terminology__ansi_fips_state": [], "seed.the_tuva_project.terminology__apr_drg": [], "seed.the_tuva_project.terminology__bill_type": [], "seed.the_tuva_project.terminology__calendar": [], "seed.the_tuva_project.terminology__claim_type": [], "seed.the_tuva_project.terminology__code_type": [], "seed.the_tuva_project.terminology__discharge_disposition": [], "seed.the_tuva_project.terminology__encounter_type": [], "seed.the_tuva_project.terminology__ethnicity": [], "seed.the_tuva_project.terminology__fips_county": [], "seed.the_tuva_project.terminology__gender": [], "seed.the_tuva_project.terminology__hcpcs_level_2": [], "seed.the_tuva_project.terminology__icd_10_cm": [], "seed.the_tuva_project.terminology__icd_10_pcs": [], "seed.the_tuva_project.terminology__icd_9_cm": [], "seed.the_tuva_project.terminology__icd_9_pcs": [], "seed.the_tuva_project.terminology__loinc": [], "seed.the_tuva_project.terminology__loinc_deprecated_mapping": [], "seed.the_tuva_project.terminology__mdc": [], "seed.the_tuva_project.terminology__medicare_dual_eligibility": [], "seed.the_tuva_project.terminology__medicare_orec": [], "seed.the_tuva_project.terminology__medicare_status": [], "seed.the_tuva_project.terminology__ms_drg": [], "seed.the_tuva_project.terminology__other_provider_taxonomy": [], "seed.the_tuva_project.terminology__payer_type": [], "seed.the_tuva_project.terminology__place_of_service": [], "seed.the_tuva_project.terminology__present_on_admission": [], "seed.the_tuva_project.terminology__provider": [], "seed.the_tuva_project.terminology__race": [], "seed.the_tuva_project.terminology__revenue_center": [], "seed.the_tuva_project.terminology__ssa_fips_state": [], "seed.the_tuva_project.ccsr__dxccsr_v2023_1_body_systems": [], "seed.the_tuva_project.ccsr__dxccsr_v2023_1_cleaned_map": [], "seed.the_tuva_project.ccsr__prccsr_v2023_1_cleaned_map": [], "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy": [], "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy": [], "seed.the_tuva_project.cms_hcc__adjustment_rates": [], "seed.the_tuva_project.cms_hcc__cpt_hcpcs": [], "seed.the_tuva_project.cms_hcc__demographic_factors": [], "seed.the_tuva_project.cms_hcc__disabled_interaction_factors": [], "seed.the_tuva_project.cms_hcc__disease_factors": [], "seed.the_tuva_project.cms_hcc__disease_hierarchy": [], "seed.the_tuva_project.cms_hcc__disease_interaction_factors": [], "seed.the_tuva_project.cms_hcc__enrollment_interaction_factors": [], "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings": [], "seed.the_tuva_project.cms_hcc__payment_hcc_count_factors": [], "seed.the_tuva_project.data_quality__test_catalog": [], "seed.the_tuva_project.ed_classification__categories": [], "seed.the_tuva_project.ed_classification__icd_10_cm_to_ccs": [], "seed.the_tuva_project.ed_classification__johnston_icd10": [], "seed.the_tuva_project.ed_classification__johnston_icd9": [], "seed.the_tuva_project.quality_measures__concepts": [], "seed.the_tuva_project.quality_measures__measures": [], "seed.the_tuva_project.quality_measures__value_sets": [], "seed.the_tuva_project.readmissions__acute_diagnosis_ccs": [], "seed.the_tuva_project.readmissions__acute_diagnosis_icd_10_cm": [], "seed.the_tuva_project.readmissions__always_planned_ccs_diagnosis_category": [], "seed.the_tuva_project.readmissions__always_planned_ccs_procedure_category": [], "seed.the_tuva_project.readmissions__exclusion_ccs_diagnosis_category": [], "seed.the_tuva_project.readmissions__icd_10_cm_to_ccs": [], "seed.the_tuva_project.readmissions__icd_10_pcs_to_ccs": [], "seed.the_tuva_project.readmissions__potentially_planned_ccs_procedure_category": [], "seed.the_tuva_project.readmissions__potentially_planned_icd_10_pcs": [], "seed.the_tuva_project.readmissions__specialty_cohort": [], "seed.the_tuva_project.readmissions__surgery_gynecology_cohort": [], "seed.the_tuva_project.service_category__service_categories": [], "test.the_tuva_project.unique_ed_classification__johnston_icd9_icd9.08c1dc4617": ["seed.the_tuva_project.ed_classification__johnston_icd9"], "test.the_tuva_project.not_null_ed_classification__johnston_icd9_icd9.a7feea49c0": ["seed.the_tuva_project.ed_classification__johnston_icd9"], "test.the_tuva_project.unique_ed_classification__johnston_icd10_icd10.3d55f2b2dd": ["seed.the_tuva_project.ed_classification__johnston_icd10"], "test.the_tuva_project.not_null_ed_classification__johnston_icd10_icd10.d04e7f84c7": ["seed.the_tuva_project.ed_classification__johnston_icd10"], "test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8": ["model.the_tuva_project.ccsr__singular_condition_category"], "test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b": ["model.the_tuva_project.ccsr__singular_condition_category"], "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"], "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"], "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"], "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"], "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long"], "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide"], "test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide"], "test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f": ["model.the_tuva_project.normalized_input__medical_claim"], "test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126": ["model.the_tuva_project.cms_hcc__patient_risk_scores"], "test.the_tuva_project.unique_cms_hcc__int_demographic_factors_patient_id.1e7ac0d681": ["model.the_tuva_project.cms_hcc__int_demographic_factors"], "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc": ["model.the_tuva_project.cms_hcc__int_eligible_conditions"], "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b": ["model.the_tuva_project.cms_hcc__int_members"], "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb": ["model.the_tuva_project.cms_hcc__int_members"], "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0": ["model.the_tuva_project.core__condition"], "test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0": ["model.the_tuva_project.core__medical_claim"], "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5": ["model.the_tuva_project.core__procedure"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930": ["model.the_tuva_project.data_quality__claims_preprocessing_summary"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15": ["model.the_tuva_project.data_quality__claims_preprocessing_summary"], "test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d": ["model.the_tuva_project.data_quality__claims_preprocessing_use_case"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47": ["model.the_tuva_project.data_quality__claims_preprocessing_use_case"], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa": ["model.the_tuva_project.data_quality__claims_preprocessing_use_case"], "test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e": ["model.the_tuva_project.financial_pmpm__pmpm_prep"], "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348": ["model.the_tuva_project.quality_measures__stg_core__condition"], "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159": ["model.the_tuva_project.quality_measures__stg_core__encounter"], "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652": ["model.the_tuva_project.quality_measures__stg_core__medication"], "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e": ["model.the_tuva_project.quality_measures__stg_core__observation"], "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd": ["model.the_tuva_project.quality_measures__stg_core__patient"], "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69": ["model.the_tuva_project.quality_measures__stg_core__patient"], "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male.47cbdf864b": ["model.the_tuva_project.quality_measures__stg_core__patient"], "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6": ["model.the_tuva_project.quality_measures__stg_core__patient"], "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9": ["model.the_tuva_project.quality_measures__stg_core__procedure"]}, "child_map": {"seed.the_tuva_project_demo.eligibility": ["model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__stg_eligibility"], "seed.the_tuva_project_demo.medical_claim": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__stg_medical_claim"], "seed.the_tuva_project_demo.pharmacy_claim": ["model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim", "model.the_tuva_project.normalized_input__stg_pharmacy_claim"], "model.the_tuva_project.ccsr__long_condition_category": ["model.the_tuva_project.ccsr__singular_condition_category"], "model.the_tuva_project.ccsr__long_procedure_category": [], "model.the_tuva_project.ccsr__singular_condition_category": ["test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8", "test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b"], "model.the_tuva_project.ccsr__dx_vertical_pivot": ["model.the_tuva_project.ccsr__long_condition_category"], "model.the_tuva_project.ccsr__procedure_category_map": ["model.the_tuva_project.ccsr__long_procedure_category"], "model.the_tuva_project.ccsr__stg_core__condition": ["model.the_tuva_project.ccsr__long_condition_category"], "model.the_tuva_project.ccsr__stg_core__procedure": ["model.the_tuva_project.ccsr__long_procedure_category"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85", "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide": ["test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105", "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586"], "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide", "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f"], "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide": ["test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561", "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b"], "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea", "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0"], "model.the_tuva_project.cms_chronic_conditions__stg_core__condition": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"], "model.the_tuva_project.cms_chronic_conditions__stg_core__patient": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide"], "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"], "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids"], "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud"], "model.the_tuva_project.tuva_chronic_conditions__stg_core__condition": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long"], "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide"], "model.the_tuva_project.acute_inpatient__summary": ["model.the_tuva_project.core__stg_claims_encounter"], "model.the_tuva_project.acute_inpatient__claims_with_encounter_data": ["model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims"], "model.the_tuva_project.acute_inpatient__data_quality_summary": [], "model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims": [], "model.the_tuva_project.acute_inpatient__encounter_id": ["model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "model.the_tuva_project.acute_inpatient__first_claim_values", "model.the_tuva_project.acute_inpatient__last_claim_values", "model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.core__stg_claims_condition", "model.the_tuva_project.core__stg_claims_medical_claim", "model.the_tuva_project.core__stg_claims_procedure"], "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates": ["model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "model.the_tuva_project.acute_inpatient__professional_encounter_id", "model.the_tuva_project.acute_inpatient__summary"], "model.the_tuva_project.acute_inpatient__first_claim_values": ["model.the_tuva_project.acute_inpatient__summary"], "model.the_tuva_project.acute_inpatient__institutional_claims": ["model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "model.the_tuva_project.acute_inpatient__data_quality_summary", "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "model.the_tuva_project.acute_inpatient__institutional_encounter_id"], "model.the_tuva_project.acute_inpatient__institutional_encounter_id": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "model.the_tuva_project.acute_inpatient__summary"], "model.the_tuva_project.acute_inpatient__last_claim_values": ["model.the_tuva_project.acute_inpatient__summary"], "model.the_tuva_project.acute_inpatient__professional_encounter_id": ["model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims", "model.the_tuva_project.acute_inpatient__encounter_id"], "model.the_tuva_project.acute_inpatient__stg_eligibility": ["model.the_tuva_project.acute_inpatient__summary"], "model.the_tuva_project.acute_inpatient__stg_medical_claim": ["model.the_tuva_project.acute_inpatient__encounter_id", "model.the_tuva_project.acute_inpatient__first_claim_values", "model.the_tuva_project.acute_inpatient__institutional_claims", "model.the_tuva_project.acute_inpatient__last_claim_values", "model.the_tuva_project.acute_inpatient__professional_encounter_id", "model.the_tuva_project.acute_inpatient__summary"], "model.the_tuva_project.acute_inpatient__stg_service_category": ["model.the_tuva_project.acute_inpatient__institutional_claims", "model.the_tuva_project.acute_inpatient__professional_encounter_id"], "model.the_tuva_project.emergency_department__summary": ["model.the_tuva_project.core__stg_claims_encounter"], "model.the_tuva_project.emergency_department__int_encounter_id": ["model.the_tuva_project.core__stg_claims_condition", "model.the_tuva_project.core__stg_claims_medical_claim", "model.the_tuva_project.core__stg_claims_procedure", "model.the_tuva_project.emergency_department__int_first_claim_values", "model.the_tuva_project.emergency_department__int_last_claim_values", "model.the_tuva_project.emergency_department__summary"], "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates": ["model.the_tuva_project.emergency_department__int_professional_encounter_id", "model.the_tuva_project.emergency_department__summary"], "model.the_tuva_project.emergency_department__int_first_claim_values": ["model.the_tuva_project.emergency_department__summary"], "model.the_tuva_project.emergency_department__int_institutional_claims": ["model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "model.the_tuva_project.emergency_department__int_institutional_encounter_id"], "model.the_tuva_project.emergency_department__int_institutional_encounter_id": ["model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "model.the_tuva_project.emergency_department__summary"], "model.the_tuva_project.emergency_department__int_last_claim_values": ["model.the_tuva_project.emergency_department__summary"], "model.the_tuva_project.emergency_department__int_professional_encounter_id": ["model.the_tuva_project.emergency_department__int_encounter_id"], "model.the_tuva_project.emergency_department__stg_eligibility": [], "model.the_tuva_project.emergency_department__stg_medical_claim": ["model.the_tuva_project.emergency_department__int_encounter_id", "model.the_tuva_project.emergency_department__int_first_claim_values", "model.the_tuva_project.emergency_department__int_institutional_claims", "model.the_tuva_project.emergency_department__int_last_claim_values", "model.the_tuva_project.emergency_department__int_professional_encounter_id"], "model.the_tuva_project.emergency_department__stg_service_category": ["model.the_tuva_project.emergency_department__int_institutional_claims", "model.the_tuva_project.emergency_department__int_professional_encounter_id"], "model.the_tuva_project.normalized_input__eligibility": ["model.the_tuva_project.acute_inpatient__stg_eligibility", "model.the_tuva_project.core__stg_claims_eligibility", "model.the_tuva_project.core__stg_claims_patient", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility", "model.the_tuva_project.data_quality__claims_preprocessing_use_case", "model.the_tuva_project.emergency_department__stg_eligibility"], "model.the_tuva_project.normalized_input__medical_claim": ["model.the_tuva_project.acute_inpatient__stg_medical_claim", "model.the_tuva_project.core__stg_claims_condition", "model.the_tuva_project.core__stg_claims_medical_claim", "model.the_tuva_project.core__stg_claims_procedure", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_use_case", "model.the_tuva_project.emergency_department__stg_medical_claim", "model.the_tuva_project.service_category__stg_medical_claim", "test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f"], "model.the_tuva_project.normalized_input__pharmacy_claim": ["model.the_tuva_project.core__stg_claims_pharmacy_claim", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim", "model.the_tuva_project.data_quality__claims_preprocessing_use_case"], "model.the_tuva_project.normalized_input__int_admit_source_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_admit_source_voting": ["model.the_tuva_project.normalized_input__int_admit_source_final"], "model.the_tuva_project.normalized_input__int_admit_type_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_admit_type_voting": ["model.the_tuva_project.normalized_input__int_admit_type_final"], "model.the_tuva_project.normalized_input__int_apr_drg_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_apr_drg_voting": ["model.the_tuva_project.normalized_input__int_apr_drg_final"], "model.the_tuva_project.normalized_input__int_bill_type_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_bill_type_voting": ["model.the_tuva_project.normalized_input__int_bill_type_final"], "model.the_tuva_project.normalized_input__int_diagnosis_code_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize": ["model.the_tuva_project.normalized_input__int_diagnosis_code_voting"], "model.the_tuva_project.normalized_input__int_diagnosis_code_voting": ["model.the_tuva_project.normalized_input__int_diagnosis_code_final"], "model.the_tuva_project.normalized_input__int_discharge_disposition_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_discharge_disposition_voting": ["model.the_tuva_project.normalized_input__int_discharge_disposition_final"], "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize": ["model.the_tuva_project.normalized_input__eligibility"], "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize": ["model.the_tuva_project.normalized_input__int_medical_date_aggregation", "model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_medical_date_aggregation": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_medical_npi_normalize": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_ms_drg_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_ms_drg_voting": ["model.the_tuva_project.normalized_input__int_ms_drg_final"], "model.the_tuva_project.normalized_input__int_place_of_service_normalize": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_present_on_admit_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_present_on_admit_normalize": ["model.the_tuva_project.normalized_input__int_present_on_admit_voting"], "model.the_tuva_project.normalized_input__int_present_on_admit_voting": ["model.the_tuva_project.normalized_input__int_present_on_admit_final"], "model.the_tuva_project.normalized_input__int_procedure_code_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_procedure_code_normalize": ["model.the_tuva_project.normalized_input__int_procedure_code_voting", "model.the_tuva_project.normalized_input__int_procedure_date_voting"], "model.the_tuva_project.normalized_input__int_procedure_code_voting": ["model.the_tuva_project.normalized_input__int_procedure_code_final"], "model.the_tuva_project.normalized_input__int_procedure_date_final": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_procedure_date_normalize": ["model.the_tuva_project.normalized_input__int_procedure_date_voting"], "model.the_tuva_project.normalized_input__int_procedure_date_voting": ["model.the_tuva_project.normalized_input__int_procedure_date_final"], "model.the_tuva_project.normalized_input__int_revenue_center_normalize": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__int_undetermined_claim_type": ["model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__stg_eligibility": ["model.the_tuva_project.normalized_input__eligibility", "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"], "model.the_tuva_project.normalized_input__stg_medical_claim": ["model.the_tuva_project.normalized_input__int_admit_source_voting", "model.the_tuva_project.normalized_input__int_admit_type_voting", "model.the_tuva_project.normalized_input__int_apr_drg_voting", "model.the_tuva_project.normalized_input__int_bill_type_voting", "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize", "model.the_tuva_project.normalized_input__int_discharge_disposition_voting", "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "model.the_tuva_project.normalized_input__int_medical_npi_normalize", "model.the_tuva_project.normalized_input__int_ms_drg_voting", "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "model.the_tuva_project.normalized_input__int_present_on_admit_normalize", "model.the_tuva_project.normalized_input__int_procedure_code_normalize", "model.the_tuva_project.normalized_input__int_procedure_date_normalize", "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "model.the_tuva_project.normalized_input__int_undetermined_claim_type", "model.the_tuva_project.normalized_input__medical_claim"], "model.the_tuva_project.normalized_input__stg_pharmacy_claim": ["model.the_tuva_project.normalized_input__pharmacy_claim"], "model.the_tuva_project.service_category__dq_input_layer_results": [], "model.the_tuva_project.service_category__dq_input_layer_tests": ["model.the_tuva_project.service_category__dq_input_layer_results"], "model.the_tuva_project.service_category__dq_multiple_service_categories_institutional": [], "model.the_tuva_project.service_category__dq_multiple_service_categories_professional": [], "model.the_tuva_project.service_category__service_category_grouper": ["model.the_tuva_project.acute_inpatient__stg_service_category", "model.the_tuva_project.core__stg_claims_medical_claim", "model.the_tuva_project.emergency_department__stg_service_category"], "model.the_tuva_project.service_category__acute_inpatient_institutional": ["model.the_tuva_project.service_category__combined_institutional", "model.the_tuva_project.service_category__emergency_department_institutional"], "model.the_tuva_project.service_category__acute_inpatient_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__ambulance_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__ambulatory_surgery_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__combined_institutional": ["model.the_tuva_project.service_category__dq_multiple_service_categories_institutional", "model.the_tuva_project.service_category__service_category_grouper"], "model.the_tuva_project.service_category__combined_professional": ["model.the_tuva_project.service_category__dq_multiple_service_categories_professional", "model.the_tuva_project.service_category__service_category_grouper"], "model.the_tuva_project.service_category__dialysis_institutional": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__dialysis_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__dme_professional": ["model.the_tuva_project.service_category__ambulatory_surgery_professional", "model.the_tuva_project.service_category__combined_professional", "model.the_tuva_project.service_category__home_health_professional", "model.the_tuva_project.service_category__skilled_nursing_professional"], "model.the_tuva_project.service_category__duplicate_bill_types": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__emergency_department_institutional": ["model.the_tuva_project.service_category__combined_institutional", "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "model.the_tuva_project.service_category__urgent_care_institutional"], "model.the_tuva_project.service_category__emergency_department_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__home_health_institutional": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__home_health_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__hospice_institutional": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__hospice_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__inpatient_psychiatric_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__inpatient_rehab_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__lab_institutional": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__lab_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__office_visit_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__outpatient_psychiatric_institutional": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__outpatient_psychiatric_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__outpatient_rehab_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__skilled_nursing_institutional": ["model.the_tuva_project.service_category__combined_institutional"], "model.the_tuva_project.service_category__skilled_nursing_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__urgent_care_institutional": ["model.the_tuva_project.service_category__combined_institutional", "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional"], "model.the_tuva_project.service_category__urgent_care_professional": ["model.the_tuva_project.service_category__combined_professional"], "model.the_tuva_project.service_category__stg_medical_claim": ["model.the_tuva_project.service_category__acute_inpatient_institutional", "model.the_tuva_project.service_category__acute_inpatient_professional", "model.the_tuva_project.service_category__ambulance_professional", "model.the_tuva_project.service_category__ambulatory_surgery_professional", "model.the_tuva_project.service_category__dialysis_institutional", "model.the_tuva_project.service_category__dialysis_professional", "model.the_tuva_project.service_category__dme_professional", "model.the_tuva_project.service_category__dq_input_layer_tests", "model.the_tuva_project.service_category__duplicate_bill_types", "model.the_tuva_project.service_category__emergency_department_institutional", "model.the_tuva_project.service_category__emergency_department_professional", "model.the_tuva_project.service_category__home_health_institutional", "model.the_tuva_project.service_category__home_health_professional", "model.the_tuva_project.service_category__hospice_institutional", "model.the_tuva_project.service_category__hospice_professional", "model.the_tuva_project.service_category__inpatient_psychiatric_professional", "model.the_tuva_project.service_category__inpatient_rehab_professional", "model.the_tuva_project.service_category__lab_institutional", "model.the_tuva_project.service_category__lab_professional", "model.the_tuva_project.service_category__office_visit_professional", "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional", "model.the_tuva_project.service_category__outpatient_psychiatric_institutional", "model.the_tuva_project.service_category__outpatient_psychiatric_professional", "model.the_tuva_project.service_category__outpatient_rehab_professional", "model.the_tuva_project.service_category__service_category_grouper", "model.the_tuva_project.service_category__skilled_nursing_institutional", "model.the_tuva_project.service_category__skilled_nursing_professional", "model.the_tuva_project.service_category__urgent_care_institutional", "model.the_tuva_project.service_category__urgent_care_professional"], "model.the_tuva_project.cms_hcc__patient_hcc_history": [], "model.the_tuva_project.cms_hcc__patient_risk_factors": ["model.the_tuva_project.cms_hcc__patient_risk_scores"], "model.the_tuva_project.cms_hcc__patient_risk_scores": ["test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126"], "model.the_tuva_project.cms_hcc__int_all_conditions": ["model.the_tuva_project.cms_hcc__patient_hcc_history"], "model.the_tuva_project.cms_hcc__int_demographic_factors": ["model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "model.the_tuva_project.cms_hcc__int_disease_factors", "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors", "model.the_tuva_project.cms_hcc__int_hcc_count_factors", "model.the_tuva_project.cms_hcc__patient_risk_factors", "test.the_tuva_project.unique_cms_hcc__int_demographic_factors_patient_id.1e7ac0d681"], "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors": ["model.the_tuva_project.cms_hcc__patient_risk_factors"], "model.the_tuva_project.cms_hcc__int_disease_factors": ["model.the_tuva_project.cms_hcc__patient_risk_factors"], "model.the_tuva_project.cms_hcc__int_disease_interaction_factors": ["model.the_tuva_project.cms_hcc__patient_risk_factors"], "model.the_tuva_project.cms_hcc__int_eligible_conditions": ["model.the_tuva_project.cms_hcc__int_hcc_mapping", "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc"], "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors": ["model.the_tuva_project.cms_hcc__patient_risk_factors"], "model.the_tuva_project.cms_hcc__int_hcc_count_factors": ["model.the_tuva_project.cms_hcc__patient_risk_factors"], "model.the_tuva_project.cms_hcc__int_hcc_hierarchy": ["model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "model.the_tuva_project.cms_hcc__int_disease_factors", "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "model.the_tuva_project.cms_hcc__int_hcc_count_factors"], "model.the_tuva_project.cms_hcc__int_hcc_mapping": ["model.the_tuva_project.cms_hcc__int_hcc_hierarchy"], "model.the_tuva_project.cms_hcc__int_members": ["model.the_tuva_project.cms_hcc__int_demographic_factors", "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b", "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb"], "model.the_tuva_project.cms_hcc__stg_core__condition": ["model.the_tuva_project.cms_hcc__int_all_conditions", "model.the_tuva_project.cms_hcc__int_eligible_conditions"], "model.the_tuva_project.cms_hcc__stg_core__eligibility": ["model.the_tuva_project.cms_hcc__int_members"], "model.the_tuva_project.cms_hcc__stg_core__medical_claim": ["model.the_tuva_project.cms_hcc__int_eligible_conditions"], "model.the_tuva_project.cms_hcc__stg_core__patient": ["model.the_tuva_project.cms_hcc__int_members"], "model.the_tuva_project.core__condition": ["model.the_tuva_project.ccsr__stg_core__condition", "model.the_tuva_project.cms_chronic_conditions__stg_core__condition", "model.the_tuva_project.cms_hcc__stg_core__condition", "model.the_tuva_project.quality_measures__stg_core__condition", "model.the_tuva_project.readmissions__stg_core__condition", "model.the_tuva_project.tuva_chronic_conditions__stg_core__condition", "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0"], "model.the_tuva_project.core__eligibility": ["model.the_tuva_project.cms_hcc__stg_core__eligibility", "model.the_tuva_project.financial_pmpm__stg_eligibility"], "model.the_tuva_project.core__encounter": ["model.the_tuva_project.ed_classification__stg_encounter", "model.the_tuva_project.readmissions__stg_core__encounter"], "model.the_tuva_project.core__location": [], "model.the_tuva_project.core__medical_claim": ["model.the_tuva_project.cms_hcc__stg_core__medical_claim", "model.the_tuva_project.financial_pmpm__stg_medical_claim", "model.the_tuva_project.insights__count_claim_by_claim_type", "model.the_tuva_project.insights__count_claim_by_date_column", "model.the_tuva_project.insights__count_claim_by_service_category", "model.the_tuva_project.insights__orphan_claim_by_claim_type", "model.the_tuva_project.insights__sum_amount_by_claim_type", "model.the_tuva_project.insights__sum_amount_by_service_category", "model.the_tuva_project.insights__trend_count_claim_by_claim_type", "model.the_tuva_project.insights__trend_count_claim_by_service_category", "model.the_tuva_project.insights__trend_sum_amount_by_claim_type", "model.the_tuva_project.insights__trend_sum_amount_by_service_category", "model.the_tuva_project.quality_measures__stg_medical_claim", "test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0"], "model.the_tuva_project.core__patient": ["model.the_tuva_project.cms_chronic_conditions__stg_core__patient", "model.the_tuva_project.cms_hcc__stg_core__patient", "model.the_tuva_project.ed_classification__stg_patient", "model.the_tuva_project.quality_measures__stg_core__patient", "model.the_tuva_project.tuva_chronic_conditions__stg_core__patient"], "model.the_tuva_project.core__pharmacy_claim": ["model.the_tuva_project.financial_pmpm__stg_pharmacy_claim", "model.the_tuva_project.insights__count_claim_by_claim_type", "model.the_tuva_project.insights__count_claim_by_date_column", "model.the_tuva_project.insights__orphan_claim_by_claim_type", "model.the_tuva_project.insights__sum_amount_by_claim_type", "model.the_tuva_project.insights__trend_sum_amount_by_claim_type", "model.the_tuva_project.quality_measures__stg_pharmacy_claim"], "model.the_tuva_project.core__practitioner": [], "model.the_tuva_project.core__procedure": ["model.the_tuva_project.ccsr__stg_core__procedure", "model.the_tuva_project.cms_chronic_conditions__stg_core__procedure", "model.the_tuva_project.quality_measures__stg_core__procedure", "model.the_tuva_project.readmissions__stg_core__procedure", "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5"], "model.the_tuva_project.core__stg_claims_condition": ["model.the_tuva_project.core__condition"], "model.the_tuva_project.core__stg_claims_eligibility": ["model.the_tuva_project.core__eligibility"], "model.the_tuva_project.core__stg_claims_encounter": ["model.the_tuva_project.core__encounter"], "model.the_tuva_project.core__stg_claims_location": ["model.the_tuva_project.core__location"], "model.the_tuva_project.core__stg_claims_medical_claim": ["model.the_tuva_project.core__medical_claim", "model.the_tuva_project.core__stg_claims_location", "model.the_tuva_project.core__stg_claims_practitioner"], "model.the_tuva_project.core__stg_claims_patient": ["model.the_tuva_project.core__patient"], "model.the_tuva_project.core__stg_claims_pharmacy_claim": ["model.the_tuva_project.core__pharmacy_claim"], "model.the_tuva_project.core__stg_claims_practitioner": ["model.the_tuva_project.core__practitioner"], "model.the_tuva_project.core__stg_claims_procedure": ["model.the_tuva_project.core__procedure"], "model.the_tuva_project.data_quality__claims_preprocessing_summary": ["model.the_tuva_project.core__stg_claims_condition", "model.the_tuva_project.core__stg_claims_eligibility", "model.the_tuva_project.core__stg_claims_encounter", "model.the_tuva_project.core__stg_claims_location", "model.the_tuva_project.core__stg_claims_medical_claim", "model.the_tuva_project.core__stg_claims_patient", "model.the_tuva_project.core__stg_claims_pharmacy_claim", "model.the_tuva_project.core__stg_claims_practitioner", "model.the_tuva_project.core__stg_claims_procedure", "test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15"], "model.the_tuva_project.data_quality__claims_preprocessing_test_detail": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility", "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim", "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim", "model.the_tuva_project.data_quality__claims_preprocessing_use_case", "test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6"], "model.the_tuva_project.data_quality__claims_preprocessing_test_result": ["test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9"], "model.the_tuva_project.data_quality__claims_preprocessing_use_case": ["test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa", "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d"], "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"], "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"], "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details": ["model.the_tuva_project.data_quality__claims_preprocessing_summary", "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim"], "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_test_detail"], "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"], "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"], "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim": ["model.the_tuva_project.data_quality__claims_preprocessing_test_result"], "model.the_tuva_project.ed_classification__summary": [], "model.the_tuva_project.ed_classification__int_filter_encounter_with_classification": ["model.the_tuva_project.ed_classification__summary"], "model.the_tuva_project.ed_classification__int_map_primary_dx": ["model.the_tuva_project.ed_classification__int_filter_encounter_with_classification"], "model.the_tuva_project.ed_classification__stg_encounter": ["model.the_tuva_project.ed_classification__int_map_primary_dx"], "model.the_tuva_project.ed_classification__stg_patient": ["model.the_tuva_project.ed_classification__summary"], "model.the_tuva_project.financial_pmpm__member_months": ["model.the_tuva_project.financial_pmpm__pmpm_prep", "model.the_tuva_project.insights__count_claim_by_date_column", "model.the_tuva_project.insights__orphan_claim_by_claim_type"], "model.the_tuva_project.financial_pmpm__pmpm": [], "model.the_tuva_project.financial_pmpm__pmpm_prep": ["model.the_tuva_project.financial_pmpm__pmpm", "test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e"], "model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories": ["model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot", "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot", "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot", "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot"], "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot": ["model.the_tuva_project.financial_pmpm__pmpm_prep"], "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot": ["model.the_tuva_project.financial_pmpm__pmpm_prep"], "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot": ["model.the_tuva_project.financial_pmpm__pmpm_prep"], "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot": ["model.the_tuva_project.financial_pmpm__pmpm_prep"], "model.the_tuva_project.financial_pmpm__stg_eligibility": ["model.the_tuva_project.financial_pmpm__member_months"], "model.the_tuva_project.financial_pmpm__stg_medical_claim": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"], "model.the_tuva_project.financial_pmpm__stg_pharmacy_claim": ["model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories"], "model.the_tuva_project.insights__count_claim_by_claim_type": [], "model.the_tuva_project.insights__count_claim_by_date_column": [], "model.the_tuva_project.insights__count_claim_by_service_category": [], "model.the_tuva_project.insights__orphan_claim_by_claim_type": [], "model.the_tuva_project.insights__sum_amount_by_claim_type": [], "model.the_tuva_project.insights__sum_amount_by_service_category": [], "model.the_tuva_project.insights__trend_count_claim_by_claim_type": [], "model.the_tuva_project.insights__trend_count_claim_by_service_category": [], "model.the_tuva_project.insights__trend_sum_amount_by_claim_type": [], "model.the_tuva_project.insights__trend_sum_amount_by_service_category": [], "model.the_tuva_project.quality_measures__summary_counts": [], "model.the_tuva_project.quality_measures__summary_long": ["model.the_tuva_project.quality_measures__summary_counts", "model.the_tuva_project.quality_measures__summary_wide"], "model.the_tuva_project.quality_measures__summary_wide": [], "model.the_tuva_project.quality_measures__int_nqf0034_denominator": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp", "model.the_tuva_project.quality_measures__int_nqf0034_exclusions", "model.the_tuva_project.quality_measures__int_nqf0034_long", "model.the_tuva_project.quality_measures__int_nqf0034_numerator"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness": ["model.the_tuva_project.quality_measures__int_nqf0034_exclusions"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer": ["model.the_tuva_project.quality_measures__int_nqf0034_exclusions"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia": ["model.the_tuva_project.quality_measures__int_nqf0034_exclusions"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative": ["model.the_tuva_project.quality_measures__int_nqf0034_exclusions"], "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp": ["model.the_tuva_project.quality_measures__int_nqf0034_exclusions"], "model.the_tuva_project.quality_measures__int_nqf0034_exclusions": ["model.the_tuva_project.quality_measures__int_nqf0034_long"], "model.the_tuva_project.quality_measures__int_nqf0034_long": ["model.the_tuva_project.quality_measures__summary_long"], "model.the_tuva_project.quality_measures__int_nqf0034_numerator": ["model.the_tuva_project.quality_measures__int_nqf0034_long"], "model.the_tuva_project.quality_measures__int_nqf0034__frailty": ["model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia"], "model.the_tuva_project.quality_measures__int_nqf0034__performance_period": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp", "model.the_tuva_project.quality_measures__int_nqf0034_long", "model.the_tuva_project.quality_measures__int_nqf0034_numerator"], "model.the_tuva_project.quality_measures__int_nqf2372_denominator": ["model.the_tuva_project.quality_measures__int_nqf2372__frailty", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative", "model.the_tuva_project.quality_measures__int_nqf2372_exclusions", "model.the_tuva_project.quality_measures__int_nqf2372_long", "model.the_tuva_project.quality_measures__int_nqf2372_numerator"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness": ["model.the_tuva_project.quality_measures__int_nqf2372_exclusions"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia": ["model.the_tuva_project.quality_measures__int_nqf2372_exclusions"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice": ["model.the_tuva_project.quality_measures__int_nqf2372_exclusions"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional": ["model.the_tuva_project.quality_measures__int_nqf2372_exclusions"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy": ["model.the_tuva_project.quality_measures__int_nqf2372_exclusions"], "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative": ["model.the_tuva_project.quality_measures__int_nqf2372_exclusions"], "model.the_tuva_project.quality_measures__int_nqf2372_exclusions": ["model.the_tuva_project.quality_measures__int_nqf2372_long"], "model.the_tuva_project.quality_measures__int_nqf2372_long": ["model.the_tuva_project.quality_measures__summary_long"], "model.the_tuva_project.quality_measures__int_nqf2372_numerator": ["model.the_tuva_project.quality_measures__int_nqf2372_long"], "model.the_tuva_project.quality_measures__int_nqf2372__frailty": ["model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia"], "model.the_tuva_project.quality_measures__int_nqf2372__performance_period": ["model.the_tuva_project.quality_measures__int_nqf2372_denominator"], "model.the_tuva_project.quality_measures__stg_core__condition": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "model.the_tuva_project.quality_measures__int_nqf2372__frailty", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348"], "model.the_tuva_project.quality_measures__stg_core__encounter": ["model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159"], "model.the_tuva_project.quality_measures__stg_core__lab_result": ["model.the_tuva_project.quality_measures__int_nqf0034_numerator"], "model.the_tuva_project.quality_measures__stg_core__medication": ["model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia", "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"], "model.the_tuva_project.quality_measures__stg_core__observation": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "model.the_tuva_project.quality_measures__int_nqf2372__frailty", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative", "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"], "model.the_tuva_project.quality_measures__stg_core__patient": ["model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf0034_long", "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_long", "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male.47cbdf864b", "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6", "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd", "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69"], "model.the_tuva_project.quality_measures__stg_core__procedure": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "model.the_tuva_project.quality_measures__int_nqf2372__frailty", "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative", "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9"], "model.the_tuva_project.quality_measures__stg_medical_claim": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp", "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "model.the_tuva_project.quality_measures__int_nqf2372__frailty", "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative", "model.the_tuva_project.quality_measures__int_nqf2372_numerator"], "model.the_tuva_project.quality_measures__stg_pharmacy_claim": ["model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia"], "model.the_tuva_project.readmissions__encounter_augmented": ["model.the_tuva_project.readmissions__readmission_summary"], "model.the_tuva_project.readmissions__readmission_summary": [], "model.the_tuva_project.readmissions__encounter": ["model.the_tuva_project.readmissions__encounter_augmented", "model.the_tuva_project.readmissions__encounter_overlap", "model.the_tuva_project.readmissions__encounter_specialty_cohort", "model.the_tuva_project.readmissions__encounter_with_ccs", "model.the_tuva_project.readmissions__index_admission", "model.the_tuva_project.readmissions__index_discharge_requirement", "model.the_tuva_project.readmissions__index_time_requirement", "model.the_tuva_project.readmissions__readmission_crude"], "model.the_tuva_project.readmissions__encounter_data_quality": ["model.the_tuva_project.readmissions__encounter_augmented"], "model.the_tuva_project.readmissions__encounter_overlap": ["model.the_tuva_project.readmissions__encounter_data_quality", "model.the_tuva_project.readmissions__readmission_crude"], "model.the_tuva_project.readmissions__encounter_specialty_cohort": ["model.the_tuva_project.readmissions__encounter_augmented"], "model.the_tuva_project.readmissions__encounter_with_ccs": ["model.the_tuva_project.readmissions__encounter_data_quality", "model.the_tuva_project.readmissions__encounter_specialty_cohort", "model.the_tuva_project.readmissions__exclusion", "model.the_tuva_project.readmissions__planned_encounter"], "model.the_tuva_project.readmissions__exclusion": ["model.the_tuva_project.readmissions__index_admission"], "model.the_tuva_project.readmissions__index_admission": ["model.the_tuva_project.readmissions__encounter_augmented"], "model.the_tuva_project.readmissions__index_discharge_requirement": ["model.the_tuva_project.readmissions__index_admission"], "model.the_tuva_project.readmissions__index_time_requirement": ["model.the_tuva_project.readmissions__index_admission"], "model.the_tuva_project.readmissions__planned_encounter": ["model.the_tuva_project.readmissions__encounter_augmented"], "model.the_tuva_project.readmissions__procedure_ccs": ["model.the_tuva_project.readmissions__encounter_specialty_cohort", "model.the_tuva_project.readmissions__planned_encounter"], "model.the_tuva_project.readmissions__readmission_crude": [], "model.the_tuva_project.readmissions__stg_core__condition": [], "model.the_tuva_project.readmissions__stg_core__encounter": ["model.the_tuva_project.readmissions__encounter"], "model.the_tuva_project.readmissions__stg_core__procedure": ["model.the_tuva_project.readmissions__procedure_ccs"], "seed.the_tuva_project.terminology__admit_source": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__int_admit_source_voting"], "seed.the_tuva_project.terminology__admit_type": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__int_admit_type_voting"], "seed.the_tuva_project.terminology__ansi_fips_state": [], "seed.the_tuva_project.terminology__apr_drg": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__int_apr_drg_voting", "model.the_tuva_project.service_category__acute_inpatient_institutional", "model.the_tuva_project.service_category__dq_input_layer_tests"], "seed.the_tuva_project.terminology__bill_type": ["model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.normalized_input__int_bill_type_voting", "model.the_tuva_project.service_category__dq_input_layer_tests"], "seed.the_tuva_project.terminology__calendar": ["model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst", "model.the_tuva_project.financial_pmpm__member_months", "model.the_tuva_project.insights__count_claim_by_date_column", "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize", "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "model.the_tuva_project.normalized_input__int_procedure_date_normalize"], "seed.the_tuva_project.terminology__claim_type": ["model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.service_category__dq_input_layer_tests"], "seed.the_tuva_project.terminology__code_type": ["model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values"], "seed.the_tuva_project.terminology__discharge_disposition": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__int_discharge_disposition_voting", "model.the_tuva_project.readmissions__encounter_data_quality"], "seed.the_tuva_project.terminology__encounter_type": [], "seed.the_tuva_project.terminology__ethnicity": [], "seed.the_tuva_project.terminology__fips_county": [], "seed.the_tuva_project.terminology__gender": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"], "seed.the_tuva_project.terminology__hcpcs_level_2": ["model.the_tuva_project.service_category__dq_input_layer_tests"], "seed.the_tuva_project.terminology__icd_10_cm": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.core__stg_claims_condition", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize", "model.the_tuva_project.readmissions__encounter_with_ccs"], "seed.the_tuva_project.terminology__icd_10_pcs": ["model.the_tuva_project.core__stg_claims_procedure", "model.the_tuva_project.normalized_input__int_procedure_code_normalize", "model.the_tuva_project.readmissions__procedure_ccs"], "seed.the_tuva_project.terminology__icd_9_cm": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"], "seed.the_tuva_project.terminology__icd_9_pcs": ["model.the_tuva_project.normalized_input__int_procedure_code_normalize"], "seed.the_tuva_project.terminology__loinc": [], "seed.the_tuva_project.terminology__loinc_deprecated_mapping": [], "seed.the_tuva_project.terminology__mdc": [], "seed.the_tuva_project.terminology__medicare_dual_eligibility": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"], "seed.the_tuva_project.terminology__medicare_orec": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"], "seed.the_tuva_project.terminology__medicare_status": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"], "seed.the_tuva_project.terminology__ms_drg": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__int_ms_drg_voting", "model.the_tuva_project.readmissions__encounter_data_quality", "model.the_tuva_project.service_category__acute_inpatient_institutional", "model.the_tuva_project.service_category__dq_input_layer_tests"], "seed.the_tuva_project.terminology__other_provider_taxonomy": [], "seed.the_tuva_project.terminology__payer_type": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"], "seed.the_tuva_project.terminology__place_of_service": ["model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "model.the_tuva_project.service_category__dq_input_layer_tests"], "seed.the_tuva_project.terminology__present_on_admission": ["model.the_tuva_project.core__stg_claims_condition", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"], "seed.the_tuva_project.terminology__provider": ["model.the_tuva_project.acute_inpatient__summary", "model.the_tuva_project.core__stg_claims_location", "model.the_tuva_project.core__stg_claims_practitioner", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi", "model.the_tuva_project.ed_classification__summary", "model.the_tuva_project.emergency_department__summary", "model.the_tuva_project.normalized_input__int_medical_npi_normalize"], "seed.the_tuva_project.terminology__race": ["model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"], "seed.the_tuva_project.terminology__revenue_center": ["model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "model.the_tuva_project.service_category__dq_input_layer_tests"], "seed.the_tuva_project.terminology__ssa_fips_state": [], "seed.the_tuva_project.ccsr__dxccsr_v2023_1_body_systems": ["model.the_tuva_project.ccsr__long_condition_category"], "seed.the_tuva_project.ccsr__dxccsr_v2023_1_cleaned_map": ["model.the_tuva_project.ccsr__dx_vertical_pivot"], "seed.the_tuva_project.ccsr__prccsr_v2023_1_cleaned_map": ["model.the_tuva_project.ccsr__procedure_category_map"], "seed.the_tuva_project.chronic_conditions__cms_chronic_conditions_hierarchy": ["model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud", "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide"], "seed.the_tuva_project.chronic_conditions__tuva_chronic_conditions_hierarchy": ["model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long", "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide"], "seed.the_tuva_project.cms_hcc__adjustment_rates": ["model.the_tuva_project.cms_hcc__patient_risk_scores"], "seed.the_tuva_project.cms_hcc__cpt_hcpcs": ["model.the_tuva_project.cms_hcc__int_eligible_conditions"], "seed.the_tuva_project.cms_hcc__demographic_factors": ["model.the_tuva_project.cms_hcc__int_demographic_factors"], "seed.the_tuva_project.cms_hcc__disabled_interaction_factors": ["model.the_tuva_project.cms_hcc__int_disabled_interaction_factors"], "seed.the_tuva_project.cms_hcc__disease_factors": ["model.the_tuva_project.cms_hcc__int_all_conditions", "model.the_tuva_project.cms_hcc__int_disease_factors"], "seed.the_tuva_project.cms_hcc__disease_hierarchy": ["model.the_tuva_project.cms_hcc__int_hcc_hierarchy"], "seed.the_tuva_project.cms_hcc__disease_interaction_factors": ["model.the_tuva_project.cms_hcc__int_disease_interaction_factors"], "seed.the_tuva_project.cms_hcc__enrollment_interaction_factors": ["model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors"], "seed.the_tuva_project.cms_hcc__icd_10_cm_mappings": ["model.the_tuva_project.cms_hcc__int_all_conditions", "model.the_tuva_project.cms_hcc__int_hcc_mapping"], "seed.the_tuva_project.cms_hcc__payment_hcc_count_factors": ["model.the_tuva_project.cms_hcc__int_hcc_count_factors"], "seed.the_tuva_project.data_quality__test_catalog": ["model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility", "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility", "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values", "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details", "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details"], "seed.the_tuva_project.ed_classification__categories": ["model.the_tuva_project.ed_classification__summary"], "seed.the_tuva_project.ed_classification__icd_10_cm_to_ccs": [], "seed.the_tuva_project.ed_classification__johnston_icd10": ["model.the_tuva_project.ed_classification__int_map_primary_dx", "test.the_tuva_project.not_null_ed_classification__johnston_icd10_icd10.d04e7f84c7", "test.the_tuva_project.unique_ed_classification__johnston_icd10_icd10.3d55f2b2dd"], "seed.the_tuva_project.ed_classification__johnston_icd9": ["model.the_tuva_project.ed_classification__int_map_primary_dx", "test.the_tuva_project.not_null_ed_classification__johnston_icd9_icd9.a7feea49c0", "test.the_tuva_project.unique_ed_classification__johnston_icd9_icd9.08c1dc4617"], "seed.the_tuva_project.quality_measures__concepts": [], "seed.the_tuva_project.quality_measures__measures": ["model.the_tuva_project.quality_measures__int_nqf0034_long", "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"], "seed.the_tuva_project.quality_measures__value_sets": ["model.the_tuva_project.quality_measures__int_nqf0034__frailty", "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "model.the_tuva_project.quality_measures__int_nqf2372__frailty", "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative", "model.the_tuva_project.quality_measures__int_nqf2372_numerator"], "seed.the_tuva_project.readmissions__acute_diagnosis_ccs": ["model.the_tuva_project.readmissions__planned_encounter"], "seed.the_tuva_project.readmissions__acute_diagnosis_icd_10_cm": ["model.the_tuva_project.readmissions__planned_encounter"], "seed.the_tuva_project.readmissions__always_planned_ccs_diagnosis_category": ["model.the_tuva_project.readmissions__planned_encounter"], "seed.the_tuva_project.readmissions__always_planned_ccs_procedure_category": ["model.the_tuva_project.readmissions__planned_encounter"], "seed.the_tuva_project.readmissions__exclusion_ccs_diagnosis_category": ["model.the_tuva_project.readmissions__exclusion"], "seed.the_tuva_project.readmissions__icd_10_cm_to_ccs": ["model.the_tuva_project.readmissions__encounter_with_ccs"], "seed.the_tuva_project.readmissions__icd_10_pcs_to_ccs": ["model.the_tuva_project.readmissions__procedure_ccs"], "seed.the_tuva_project.readmissions__potentially_planned_ccs_procedure_category": ["model.the_tuva_project.readmissions__planned_encounter"], "seed.the_tuva_project.readmissions__potentially_planned_icd_10_pcs": ["model.the_tuva_project.readmissions__planned_encounter"], "seed.the_tuva_project.readmissions__specialty_cohort": ["model.the_tuva_project.readmissions__encounter_specialty_cohort"], "seed.the_tuva_project.readmissions__surgery_gynecology_cohort": ["model.the_tuva_project.readmissions__encounter_specialty_cohort"], "seed.the_tuva_project.service_category__service_categories": [], "test.the_tuva_project.unique_ed_classification__johnston_icd9_icd9.08c1dc4617": [], "test.the_tuva_project.not_null_ed_classification__johnston_icd9_icd9.a7feea49c0": [], "test.the_tuva_project.unique_ed_classification__johnston_icd10_icd10.3d55f2b2dd": [], "test.the_tuva_project.not_null_ed_classification__johnston_icd10_icd10.d04e7f84c7": [], "test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8": [], "test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b": [], "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3": [], "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00": [], "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe": [], "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea": [], "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5": [], "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f": [], "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158": [], "test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561": [], "test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f": [], "test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126": [], "test.the_tuva_project.unique_cms_hcc__int_demographic_factors_patient_id.1e7ac0d681": [], "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc": [], "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b": [], "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb": [], "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0": [], "test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0": [], "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15": [], "test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47": [], "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa": [], "test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e": [], "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348": [], "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159": [], "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652": [], "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e": [], "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd": [], "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69": [], "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male.47cbdf864b": [], "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6": [], "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}